{"config":{"indexing":"full","lang":["ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fediverse Enhancement Proposals \u975e\u516c\u5f0f\u65e5\u672c\u8a9e\u8a33 \u3053\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306f Fediverse Enhancement Proposals \u306e\u65e5\u672c\u8a9e\u8a33\u7248\u306e\u4f5c\u6210\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u3059\u3002 \u57fa\u672c\u7684\u306b\u6a5f\u68b0\u7ffb\u8a33\u3067\u7ffb\u8a33\u3055\u308c\u305f\u3082\u306e\u306e\u6587\u6cd5\u3084\u304a\u304b\u3057\u306a\u90e8\u5206\u3092\u4fee\u6b63 (\u4e00\u90e8\u306f\u6a5f\u68b0\u7ffb\u8a33\u305b\u305a\u306b\u8a33\u3055\u308c\u307e\u3059)\u3057\u305f\u3082\u306e\u3092\u8f09\u305b\u3066\u3042\u308a\u307e\u3059\u3002","title":"Fediverse Enhancement Proposals \u975e\u516c\u5f0f\u65e5\u672c\u8a9e\u8a33"},{"location":"#fediverse-enhancement-proposals","text":"\u3053\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306f Fediverse Enhancement Proposals \u306e\u65e5\u672c\u8a9e\u8a33\u7248\u306e\u4f5c\u6210\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u3059\u3002 \u57fa\u672c\u7684\u306b\u6a5f\u68b0\u7ffb\u8a33\u3067\u7ffb\u8a33\u3055\u308c\u305f\u3082\u306e\u306e\u6587\u6cd5\u3084\u304a\u304b\u3057\u306a\u90e8\u5206\u3092\u4fee\u6b63 (\u4e00\u90e8\u306f\u6a5f\u68b0\u7ffb\u8a33\u305b\u305a\u306b\u8a33\u3055\u308c\u307e\u3059)\u3057\u305f\u3082\u306e\u3092\u8f09\u305b\u3066\u3042\u308a\u307e\u3059\u3002","title":"Fediverse Enhancement Proposals \u975e\u516c\u5f0f\u65e5\u672c\u8a9e\u8a33"},{"location":"CONTRIBUTING/","text":"\u8ca2\u732e\u306f\u4ee5\u4e0b\u306e\u30ac\u30a4\u30c9\u306b\u5f93\u3063\u3066\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 1. issue/pull request\u306e\u78ba\u8a8d \u6700\u521d\u306b\u3001\u65e2\u5b58\u306eissue/pull request\u3092\u78ba\u8a8d\u3057\u3001\u3042\u306a\u305f\u304c\u63d0\u6848\u3057\u305f\u3044\u5909\u66f4\u304c\u65e2\u306b\u63d0\u51fa\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002 2. \u30d5\u30a9\u30fc\u30af\u3068\u30af\u30ed\u30fc\u30f3 \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30d5\u30a9\u30fc\u30af\u3057\u3001\u3042\u306a\u305f\u306e\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u306b\u30af\u30ed\u30fc\u30f3\u3057\u307e\u3059\u3002 git clone https://github.com/\u3042\u306a\u305f\u306e\u30e6\u30fc\u30b6\u30fc\u540d/\u30ea\u30dd\u30b8\u30c8\u30ea\u540d.git 3. \u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u306e\u4f5c\u6210 \u65b0\u3057\u3044\u7ffb\u8a33\u3084\u8aa4\u5b57\u8131\u5b57\u306e\u4fee\u6b63\u306e\u305f\u3081\u306b\u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 git checkout -b new-translate/\u65b0\u6a5f\u80fd\u540d 4. \u5909\u66f4\u3092\u52a0\u3048\u308b \u30b3\u30fc\u30c9\u3092\u7de8\u96c6\u3057\u3001\u5fc5\u8981\u306a\u5909\u66f4\u3092\u52a0\u3048\u307e\u3059\u3002 5. \u30b3\u30df\u30c3\u30c8\u3068\u30d7\u30c3\u30b7\u30e5 \u5909\u66f4\u3092\u30b3\u30df\u30c3\u30c8\u3057\u3001\u30d5\u30a9\u30fc\u30af\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30d7\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002 git add . git commit -m \"\u8aac\u660e\u6587\" git push origin new-translate/\u65b0\u6a5f\u80fd\u540d 6. \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4f5c\u6210 GitHub\u4e0a\u3067\u3001\u5143\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u5909\u66f4\u5185\u5bb9\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u306a\u8aac\u660e\u3092\u6dfb\u3048\u3066\u304f\u3060\u3055\u3044\u3002 7. \u30ec\u30d3\u30e5\u30fc\u3068\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u4f5c\u6210\u3055\u308c\u308b\u3068\u3001\u30e1\u30f3\u30d0\u30fc\u304c\u30ec\u30d3\u30e5\u30fc\u3092\u884c\u3044\u307e\u3059\u3002\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u304c\u3042\u308c\u3070\u3001\u305d\u308c\u306b\u5fdc\u3058\u3066\u4fee\u6b63\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002","title":"CONTRIBUTING"},{"location":"CONTRIBUTING/#1-issuepull-request","text":"\u6700\u521d\u306b\u3001\u65e2\u5b58\u306eissue/pull request\u3092\u78ba\u8a8d\u3057\u3001\u3042\u306a\u305f\u304c\u63d0\u6848\u3057\u305f\u3044\u5909\u66f4\u304c\u65e2\u306b\u63d0\u51fa\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"1. issue/pull request\u306e\u78ba\u8a8d"},{"location":"CONTRIBUTING/#2","text":"\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30d5\u30a9\u30fc\u30af\u3057\u3001\u3042\u306a\u305f\u306e\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u306b\u30af\u30ed\u30fc\u30f3\u3057\u307e\u3059\u3002 git clone https://github.com/\u3042\u306a\u305f\u306e\u30e6\u30fc\u30b6\u30fc\u540d/\u30ea\u30dd\u30b8\u30c8\u30ea\u540d.git","title":"2. \u30d5\u30a9\u30fc\u30af\u3068\u30af\u30ed\u30fc\u30f3"},{"location":"CONTRIBUTING/#3","text":"\u65b0\u3057\u3044\u7ffb\u8a33\u3084\u8aa4\u5b57\u8131\u5b57\u306e\u4fee\u6b63\u306e\u305f\u3081\u306b\u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 git checkout -b new-translate/\u65b0\u6a5f\u80fd\u540d","title":"3. \u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u306e\u4f5c\u6210"},{"location":"CONTRIBUTING/#4","text":"\u30b3\u30fc\u30c9\u3092\u7de8\u96c6\u3057\u3001\u5fc5\u8981\u306a\u5909\u66f4\u3092\u52a0\u3048\u307e\u3059\u3002","title":"4. \u5909\u66f4\u3092\u52a0\u3048\u308b"},{"location":"CONTRIBUTING/#5","text":"\u5909\u66f4\u3092\u30b3\u30df\u30c3\u30c8\u3057\u3001\u30d5\u30a9\u30fc\u30af\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30d7\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002 git add . git commit -m \"\u8aac\u660e\u6587\" git push origin new-translate/\u65b0\u6a5f\u80fd\u540d","title":"5. \u30b3\u30df\u30c3\u30c8\u3068\u30d7\u30c3\u30b7\u30e5"},{"location":"CONTRIBUTING/#6","text":"GitHub\u4e0a\u3067\u3001\u5143\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u5909\u66f4\u5185\u5bb9\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u306a\u8aac\u660e\u3092\u6dfb\u3048\u3066\u304f\u3060\u3055\u3044\u3002","title":"6. \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4f5c\u6210"},{"location":"CONTRIBUTING/#7","text":"\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u4f5c\u6210\u3055\u308c\u308b\u3068\u3001\u30e1\u30f3\u30d0\u30fc\u304c\u30ec\u30d3\u30e5\u30fc\u3092\u884c\u3044\u307e\u3059\u3002\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u304c\u3042\u308c\u3070\u3001\u305d\u308c\u306b\u5fdc\u3058\u3066\u4fee\u6b63\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002","title":"7. \u30ec\u30d3\u30e5\u30fc\u3068\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af"},{"location":"fep/fep-0391/","text":"FEP-0391: Special collection proofs Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Some properties represent special collections, such as: outbox ( ActivityPub ) inbox ( ActivityPub ) followers ( ActivityPub ) following ( ActivityPub ) liked ( ActivityPub ) likes ( ActivityPub ) shares ( ActivityPub ) replies (FEP-7458) context (FEP-7888) Verifying that any given object is part of a special collection is usually only possible by resolving that collection and checking its items one-by-one until the current object is found. This can be inefficient to verify. It would be easier if there was an inverse claim for each claim made about an object being part of a special collection. This FEP aims to define some properties that can be used to make those inverse claims. Mapping claims and inverse claims Given the special collections above, we can map the following claims and inverse claims. The last two inverse claims are particularly salient, since inclusion in replies and/or context carries additional semantic meaning and is a socially loaded relation used to establish conversational constructs. Verifying presence in outbox {#outbox-claim} Claim : Activity <A> 's actor ( <A>.actor ) is actor <B> Inverse claim : Actor <B> 's outbox collection ( <B>.outbox ) contains activity <A> This is not particularly useful to prove. Verifying presence in inbox {#inbox-claim} Claim : Activity <A> has to / cc / audience including actor <B> Inverse claim : Actor <B> 's inbox collection ( <B>.inbox ) contains activity <A> This is not particularly useful to prove, and at best can only be implied if <B> is addressed directly and not through some collection that triggers inbox forwarding. Verifying presence in followers {#followers-claim} Claim : Actor <B> 's following collection ( <B>.following ) contains actor <A> Equivalent claim : Actor <B> claims that <B> is following <A> Another equivalent claim : Actor <B> claims that <A> is followed by <B> Inverse claim : Actor <A> 's followers collection ( <A>.followers ) contains actor <B> Equivalent inverse claim : Actor <A> claims that <A> is followed by <B> Another equivalent inverse claim : Actor <A> claims that <B> is following <A> This can be verified by showing one of the following: <A>.followers includes <B> as well A Relationship exists where: attributedTo is <A> subject is <B> relationship is IsFollowing object is <A> A Relationship exists where: attributedTo is <A> subject is <A> relationship is IsFollowedBy object is <B> A trusted activity exists where: actor is <A> type is Accept object.actor is <B> object.type is Follow object.object is <A> A trusted activity exists where: actor is <A> type is Add object is <B> target is <A>.followers Verifying presence in following {#following-claim} Claim : Actor <B> 's followers collection ( <B>.followers ) contains actor <A> Equivalent claim : Actor <B> claims that <B> is followed by <A> Another equivalent claim : Actor <B> claims that <A> is following <B> Inverse claim : Actor <A> 's following collection ( <A>.following ) contains actor <B> Equivalent inverse claim : Actor <A> claims that <A> is following <B> Another equivalent inverse claim : Actor <A> claims that <B> is followed by <A> This can be verified by showing one of the following: <A>.following includes <B> as well A Relationship exists where: attributedTo is <A> subject is <A> relationship is IsFollowing object is <B> A Relationship exists where: attributedTo is <A> subject is <B> relationship is IsFollowedBy object is <A> A trusted activity exists where: actor is <B> type is Accept object.actor is <A> object.type is Follow object.object is <B> object is a trusted activity A trusted activity exists where: actor is <A> type is Add object is <B> target is <A>.following Verifying presence in liked {#liked-claim} Claim : Actor <A> 's liked collection ( <A>.liked ) contains object <O> This can be verified by showing a trusted activity exists in <O>.likes where: - actor is <A> - type is Like - object is <O> Note that there is an issue that may occur if <A> issues multiple Like activities for the same object <O> , and then issues any Undo Like activities at a later point in time. The most recent activity will have its side-effects carried out. It is possible for some of these functionally duplicate Like activites to remain in <O>.likes even though the object <O> is no longer in <A>.liked . See https://github.com/w3c/activitypub/issues/381 for more information. Verifying presence in likes {#likes-claim} Claim : Object <O> 's likes collection ( <O>.likes ) contains a Like activity <L> from actor <A> If <L> is not already trusted via some other mechanism, this can be verified by showing that <A>.liked includes <O> . Note the duplication issue from the previous section. The Like activity <L> MAY result in an Add activity <R> targeting <O>.likes . This result can be used by <A> as proof of the claim, if it can be shown to be a trusted activity. Verifying presence in shares {#shares-claim} Claim : Object <O> 's shares collection ( <O>.shares ) contains an Announce activity <S> from actor <A> The Announce activity <S> MAY result in an Add activity <R> targeting <O>.shares . This result can be used by <A> as proof of the claim, if it can be shown to be a trusted activity. Verifying presence in replies {#replies-claim} Claim : Object <R> is inReplyTo object <O> Inverse claim : Object <O> 's replies collection ( <O>.replies ) contains object <R> attributed to actor <A> The inverse claim can be verified by showing that an activity exists where: - actor is <O>.attributedTo - type set includes Add - object is <R> - target is <O>.replies Verifying presence in context {#context-claim} Claim : Object <O> has a context pointing to context collection <C> Inverse claim : Context collection <C> contains object <O> The inverse claim can be verified by showing that an activity exists where: - actor is <O>.context.attributedTo - type set includes Add - object is <R> - target is <O>.context Types of proofs We can map proofs onto the result property provided that its subject is an activity and its referent is a trusted activity. We may also define some extension properties for non-activity objects. Showing inclusion in replies collections via a reply stamp {#replies-stamp} Provides proof that some object was added to some replies collection. On an activity where inReplyTo has been set, the proof can be verified if all of the following are satisfied: result.actor MUST be included in either inReplyTo.actor or inReplyTo.attributedTo result.type MUST include Add result.object MUST be equivalent to the current activity result.target MUST be equivalent to inReplyTo.replies On a Create activity where the object has inReplyTo set, the proof can be verified if all of the following are satisfied: result.actor MUST be included in either object.inReplyTo.attributedTo or object.inReplyTo.actor result.type MUST include Add result.object MUST be equivalent to object result.target MUST be equivalent to object.inReplyTo.replies On a non-activity Object where inReplyTo has been set, we define the extension property inReplyToProof since the use of result is invalid on non-Activity types. The proof is valid if all of the following are satisfied: inReplyToProof.actor MUST be included in either inReplyTo.attributedTo or inReplyTo.actor inReplyToProof.type MUST include Add inReplyToProof.object MUST be equivalent to the current object inReplyToProof.target MUST be equivalent to inReplyTo.replies Example of an activity with inReplyTo set to some activity with a replies collection: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-activity\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Activity\", \"object\": \"https://example.com/some-object\", \"inReplyTo\": { \"id\": \"https://example.com/some-other-create\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Create\", \"object\": \"https://example.com/some-other-object\", \"content\": \"I am accepting replies to this activity.\", \"replies\": \"https://example.com/some-other-create/replies\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/some-activity\", \"target\": \"https://example.com/some-other-create/replies\", \"attributedTo\": \"https://example.com/some-activity\" } } Example of a Create activity with object.inReplyTo set to some non-activity object with a replies collection: { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0391\"], \"id\": \"https://example.com/create-some-reply\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Create\", \"object\": { \"id\": \"https://example.com/some-reply\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/actors/2\", \"content\": \"This is a reply, and I can prove it was added to the replies collection.\", \"inReplyTo\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/actors/1\", \"content\": \"I am accepting replies to this object.\", \"replies\": \"https://example.com/some-object/replies\" }, \"inReplyToProof\": \"https://example.com/some-proof\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/some-reply\", \"target\": \"https://example.com/some-object/replies\", \"attributedTo\": \"https://example.com/create-some-reply\" } } Showing inclusion in context collections via a context stamp {#context-stamp} Provides proof that some object was added to some context collection. On an activity where the context has been set to a collection, the proof can be verified if all of the following are satisfied: result.actor MUST be included in context.attributedTo result.type MUST include Add result.object MUST be equivalent to the current activity result.target MUST be equivalent to context On a Create activity where the object has context set, the proof can be verified if all of the following are satisfied: result.actor MUST be included in object.context.attributedTo result.type MUST include Add result.object MUST be equivalent to object result.target MUST be equivalent to object.context On a non-activity Object where context has been set, we define the extension property contextProof since the use of result is invalid on non-Activity types. The proof is valid if all of the following are satisfied: contextProof.actor MUST be included in context.attributedTo contextProof.type MUST include Add contextProof.object MUST be equivalent to the current object contextProof.target MUST be equivalent to context Example of an activity with context set to some owned collection: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-activity\", \"actor\": \"https://example.com/some-actor\", \"type\": \"Activity\", \"object\": \"https://example.com/some-object\", \"context\": { \"id\": \"https://example.com/some-context\", \"type\": \"Collection\", \"attributedTo\": \"https://example.com/some-context-moderator\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/some-context-moderator\", \"type\": \"Add\", \"object\": \"https://example.com/some-activity\", \"target\": \"https://example.com/some-context\", \"attributedTo\": \"https://example.com/some-activity\" } } Example of a Create activity with object.context set to some owned collection: { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0391\"], \"id\": \"https://example.com/create-some-object\", \"actor\": \"https://example.com/some-actor\", \"type\": \"Create\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/some-actor\", \"content\": \"This object is part of some context, and I can prove it was added to the context collection.\", \"context\": { \"id\": \"https://example.com/some-context\", \"type\": \"Collection\", \"attributedTo\": \"https://example.com/some-context-moderator\" }, \"contextProof\": \"https://example.com/some-proof\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/some-context-moderator\", \"type\": \"Add\", \"object\": \"https://example.com/some-object\", \"target\": \"https://example.com/some-context\", \"attributedTo\": \"https://example.com/create-some-object\" } } Showing inclusion in likes collections via a like stamp {#likes-stamp} Provides proof that the current activity was added to the object.likes collection. On a Like activity where the object has a likes collection, the proof can be verified if all of the following are satisfied: result.actor MUST be included in object.attributedTo result.type MUST include Add result.object MUST be equivalent to the current activity result.target MUST be equivalent to object.likes Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-like\", \"summary\": \"A Like activity, with proof that it was added to the likes collection.\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Like\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"content\": \"I am accepting likes of this object.\", \"likes\": \"https://example.com/some-object/likes\", \"attributedTo\": \"https://example.com/actors/1\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/some-like\", \"target\": \"https://example.com/some-object/likes\", \"attributedTo\": \"https://example.com/some-like\" } } Showing inclusion in shares collections via a share stamp {#shares-stamp} Provides proof that the current activity was added to the object.shares collection. On an Announce activity where the object has a shares collection, the proof can be verified if all of the following are satisfied: result.actor MUST be included in object.attributedTo result.type MUST include Add result.object MUST be equivalent to the current activity result.target MUST be equivalent to object.shares Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-announce\", \"summary\": \"An Announce activity, with proof that it was added to the shares collection.\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Announce\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"content\": \"I am accepting shares of this object.\", \"shares\": \"https://example.com/some-object/shares\", \"attributedTo\": \"https://example.com/actors/1\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/some-announce\", \"target\": \"https://example.com/some-object/shares\", \"attributedTo\": \"https://example.com/some-announce\" } } Relationship proofs [!WARNING] Experimental, requires further thought. [!WARNING] Currently bugged. See https://github.com/w3c/activitystreams/issues/593 for more details. Provides proof that the current relationship is reciprocally claimed. Relationships other than following or being a follower may be proved using this property, but the requirements for such a proof are out of scope of this FEP. We define the extension property relationshipProof since the use of result is invalid on non-Activity types. The proof is valid if all of the following are satisfied: Example that proves a user is following another user: { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0391\"], \"id\": \"https://example.com/some-relationship\", \"type\": \"Relationship\", \"attributedTo\": \"https://example.com/actors/1\", \"subject\": { \"id\": \"https://example.com/actors/1\", \"following\": \"https://example.com/actors/1/following\" }, \"relationship\": \"IsFollowing\", \"object\": { \"id\": \"https://example.com/actors/2\", \"followers\": \"https://example.com/actors/2/followers\" }, \"relationshipProof\": [ { \"id\": \"https://example.com/not-enough-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/actors/2\", \"target\": \"https://example.com/actors/1/following\" }, { \"id\": \"https://example.com/proof-by-inverse-relationship\", \"type\": \"Relationship\", \"attributedTo\": \"https://example.com/actors/2\", \"subject\": \"https://example.com/actors/2\", \"relationship\": \"IsFollowedBy\", \"object\": \"https://example.com/actors/1\" }, { \"id\": \"https://example.com/proof-by-being-added-to-followers\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Add\", \"object\": \"https://example.com/actors/1\", \"target\": \"https://example.com/actors/2/followers\" }, { \"id\": \"https://example.com/proof-by-having-follow-accepted\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Accept\", \"object\": { \"actor\": \"https://example.com/actors/1\", \"type\": \"Follow\", \"object\": \"https://example.com/actors/2\" } } ] } Example that proves a user is followed by another user: { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0391\"], \"id\": \"https://example.com/some-relationship\", \"type\": \"Relationship\", \"attributedTo\": \"https://example.com/actors/1\", \"subject\": { \"id\": \"https://example.com/actors/1\", \"followers\": \"https://example.com/actors/1/following\" }, \"relationship\": \"IsFollowedBy\", \"object\": { \"id\": \"https://example.com/actors/2\", \"following\": \"https://example.com/actors/2/followers\" }, \"relationshipProof\": [ { \"id\": \"https://example.com/not-enough-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/actors/2\", \"target\": \"https://example.com/actors/1/followers\" }, { \"id\": \"https://example.com/proof-by-inverse-relationship\", \"type\": \"Relationship\", \"attributedTo\": \"https://example.com/actors/2\", \"subject\": \"https://example.com/actors/2\", \"relationship\": \"IsFollowing\", \"object\": \"https://example.com/actors/1\" }, { \"id\": \"https://example.com/proof-by-being-added-to-following\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Add\", \"object\": \"https://example.com/actors/1\", \"target\": \"https://example.com/actors/2/following\" }, { \"id\": \"https://example.com/proof-by-having-follow\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Follow\", \"object\": \"https://example.com/actors/1\" } ] } Miscellaneous examples: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-follow\", \"actor\": { \"id\": \"https://example.com/actors/2\", \"following\": \"https://example.com/actors/2/following\" }, \"type\": \"Follow\", \"object\": { \"id\": \"https://example.com/actors/1\", \"followers\": \"https://example.com/actors/1/followers\" }, \"result\": { \"id\": \"https://example.com/accept-follow\", \"actor\": \"https://example.com/actor/1\", \"type\": \"Accept\", \"object\": \"https://example.com/some-follow\", \"result\": [ { \"id\": \"https://example.com/resulting-add-to-followers\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/actors/2\", \"target\": \"https://example.com/actors/1/followers\", \"attributedTo\": \"https://example.com/accept-follow\" }, { \"id\": \"https://example.com/resulting-add-to-following\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Add\", \"object\": \"https://example.com/actors/1\", \"target\": \"https://example.com/actors/2/following\", \"attributedTo\": \"https://example.com/accept-follow\" } ] } } Existing mechanisms of trust {#root-trust} Verifying stamps has an issue with bootstrapping trust. In addition to verifying stamps via logical inference, ActivityPub clients SHOULD also consider the following: Same-origin policy, if the root of trust is the DNS name. Cryptographic signatures, if the root of trust is some cryptographic key associated with the actor. See HTTP Signatures, Linked Data Signatures, FEP-8b32: Object Integrity Proofs , or similar. Obtaining and revoking stamps {#flow} Upon receiving an activity with a side effect of adding something to a special collection, ActivityPub servers SHOULD generate and deliver an Add activity representing this side-effect. The ActivityPub server MAY require manual action by a user. The resulting stamp activity SHOULD be attributedTo the activity that caused the side-effect, delivered to its actor , and additionally SHOULD either be resolvable (to allow direct same-origin checking) or otherwise include a cryptographic proof. If a cryptographic proof is included, the proof SHOULD expire after some reasonable window, beyond which point a new proof should be issued. If the resulting stamp activity is resolvable, it MAY become unresolvable after some time; HTTP caching SHOULD be used to indicate a time-to-live for ActivityPub clients to re-check cached stamps. The time-to-live MAY be used as the duration of the cryptographic proof, if one exists. The recipient of a stamp SHOULD Update their object to include the appropriate property for the stamp -- result if it is an activity, inReplyToProof if it is a non-activity object that declares inReplyTo , contextProof if it is a non-activity object that declares context . [TODO: how to handle relationship proofs?] Revoking a stamp can be done by: - If it is resolvable, making it no longer resolve - If it is signed, then waiting for the signature to expire - Update the stamp with some property to signal that the Add activity has been undone. [TODO: flesh this out more -- how does this work exactly? should it use Remove? Tombstone? Undo? how does this interact with outbox and the activity history? i'm thinking Update -> Tombstone, or extension like \"undoneBy\"] A simpler example flow for issuing and revoking a like stamp This flow is similar for any stamp that uses result on an activity -- Like , Announce , Activity with inReplyTo , Activity with context . Actor 2 likes a post by actor 1: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-like\", \"summary\": \"Actor 2 liked a Note by actor 1\", \"actor\": { \"id\": \"https://example.com/actors/2\", \"followers\": \"https://example.com/actors/2/followers\" }, \"type\": \"Like\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"content\": \"I am accepting likes of this object.\", \"likes\": \"https://example.com/some-object/likes\", \"attributedTo\": { \"id\": \"https://example.com/actors/1\", \"followers\": \"https://example.com/actors/1/followers\" }, \"cc\": [ \"https://example.com/actors/1/followers\", \"as:Public\" ], \"audience\": \"https://example.com/some-object/audience\" }, \"to\": \"https://example.com/actors/1\", \"cc\": [ \"https://example.com/actors/2/followers\", \"https://example.com/some-object/audience\", \"as:Public\" ], \"audience\": \"https://example.com/some-like/audience\" } Actor 1 sends a like stamp: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-proof\", \"summary\": \"Actor 1 approved a like\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/some-like\", \"target\": \"https://example.com/some-object/likes\", \"attributedTo\": \"https://example.com/some-like\", \"to\": \"https://example.com/actors/2\", \"cc\": [ \"https://example.com/actors/2/followers\", \"https://example.com/some-like/audience\", \"as:Public\" ] } Actor 2 updates their Like activity with proof: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-update\", \"summary\": \"Actor 2 updated their Like with proof\", \"actor\": { \"id\": \"https://example.com/actors/2\", \"followers\": \"https://example.com/actors/2/followers\" }, \"type\": \"Update\", \"object\": { \"id\": \"https://example.com/some-like\", \"summary\": \"Actor 2 liked a Note by actor 1, with proof\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Like\", \"object\": \"https://example.com/some-object\", \"to\": \"https://example.com/actors/1\", \"cc\": [ \"https://example.com/actors/2/followers\", \"https://example.com/some-object/audience\", \"as:Public\" ], \"audience\": \"https://example.com/some-like/audience\", \"result\": \"https://example.com/some-proof\" }, \"cc\": [ \"https://example.com/actors/2/followers\", \"https://example.com/some-like/audience\", \"as:Public\" ] } If actor 1 had provided cryptographic proof, actor 2 would be able to authoritatively serve the stamp until the proof expired. Actor 1 can silently revoke the stamp by making it no longer resolve, or actively revoke the stamp by issuing a revocation activity [TODO: Update with \"undoneBy\" pointing to a Remove?] A more complex flow for stamps involving embedded objects This flow uses inReplyToProof or contextProof on the object of a Create instead of using only result on the activity itself. Some actor creates some object that is part of some context, owned by some context moderator: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/create-some-object\", \"actor\": \"https://example.com/some-actor\", \"type\": \"Create\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"attributedTo\": { \"id\": \"https://example.com/some-actor\", \"followers\": \"https://example.com/some-actor/followers\" }, \"content\": \"This object is part of some context, and I can prove it was added to the context collection.\", \"context\": { \"id\": \"https://example.com/some-context\", \"type\": \"Collection\", \"attributedTo\": \"https://example.com/some-context-moderator\", \"audience\": \"https://example.com/some-context/audience\" }, \"to\": \"https://example.com/some-context-moderator\", \"cc\": \"as:Public\" }, \"to\": [ \"https://example.com/some-context-moderator\", \"https://example.com/some-context/audience\" ], \"cc\": \"as:Public\", \"audience\": \"https://example.com/create-some-object/audience\" } The context moderator adds the object to the context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-proof\", \"summary\": \"A new post was added to the context\", \"actor\": \"https://example.com/some-context-moderator\", \"type\": \"Add\", \"object\": \"https://example.com/some-object\", \"target\": \"https://example.com/some-context\", \"attributedTo\": \"https://example.com/create-some-object\", \"cc\": [ \"https://example.com/some-context/audience\", \"https://example.com/some-actor\", \"https://example.com/create-some-object/audience\", \"as:Public\" ] } The actor who created the object now can issue two updates: one for the Create activity to add a result , and one for the object of that activity to add object.contextProof : { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0391\"], \"id\": \"https://example.com/update-some-object\", \"actor\": { \"id\": \"https://example.com/some-actor\", \"followers\": \"https://example.com/some-actor/followers\" }, \"type\": \"Update\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/some-actor\", \"content\": \"This object is part of some context, and I can prove it was added to the context collection.\", \"context\": \"https://example.com/some-context\", \"contextProof\": \"https://example.com/some-proof\", \"to\": \"https://example.com/some-context-moderator\", \"cc\": \"as:Public\" }, \"to\": [ \"https://example.com/some-actor/followers\", \"as:Public\" ] } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/update-create\", \"actor\": \"https://example.com/some-actor\", \"type\": \"Update\", \"object\": { \"id\": \"https://example.com/create-some-object\", \"actor\": \"https://example.com/some-actor\", \"type\": \"Create\", \"object\": \"https://example.com/some-object\", \"to\": \"https://example.com/some-context-moderator\", \"cc\": \"as:Public\", \"result\": \"https://example.com/some-proof\" } } \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 a, FEP-7458: Using the replies collection , 2024 a, FEP-7888: Demystifying the context property , 2023 silverpill, FEP-8b32: Object Integrity Proofs , 2022 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-0391: Special collection proofs"},{"location":"fep/fep-0391/#fep-0391-special-collection-proofs","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-0391: Special collection proofs"},{"location":"fep/fep-0391/#summary","text":"Some properties represent special collections, such as: outbox ( ActivityPub ) inbox ( ActivityPub ) followers ( ActivityPub ) following ( ActivityPub ) liked ( ActivityPub ) likes ( ActivityPub ) shares ( ActivityPub ) replies (FEP-7458) context (FEP-7888) Verifying that any given object is part of a special collection is usually only possible by resolving that collection and checking its items one-by-one until the current object is found. This can be inefficient to verify. It would be easier if there was an inverse claim for each claim made about an object being part of a special collection. This FEP aims to define some properties that can be used to make those inverse claims.","title":"Summary"},{"location":"fep/fep-0391/#mapping-claims-and-inverse-claims","text":"Given the special collections above, we can map the following claims and inverse claims. The last two inverse claims are particularly salient, since inclusion in replies and/or context carries additional semantic meaning and is a socially loaded relation used to establish conversational constructs.","title":"Mapping claims and inverse claims"},{"location":"fep/fep-0391/#verifying-presence-in-outbox-outbox-claim","text":"Claim : Activity <A> 's actor ( <A>.actor ) is actor <B> Inverse claim : Actor <B> 's outbox collection ( <B>.outbox ) contains activity <A> This is not particularly useful to prove.","title":"Verifying presence in outbox {#outbox-claim}"},{"location":"fep/fep-0391/#verifying-presence-in-inbox-inbox-claim","text":"Claim : Activity <A> has to / cc / audience including actor <B> Inverse claim : Actor <B> 's inbox collection ( <B>.inbox ) contains activity <A> This is not particularly useful to prove, and at best can only be implied if <B> is addressed directly and not through some collection that triggers inbox forwarding.","title":"Verifying presence in inbox {#inbox-claim}"},{"location":"fep/fep-0391/#verifying-presence-in-followers-followers-claim","text":"Claim : Actor <B> 's following collection ( <B>.following ) contains actor <A> Equivalent claim : Actor <B> claims that <B> is following <A> Another equivalent claim : Actor <B> claims that <A> is followed by <B> Inverse claim : Actor <A> 's followers collection ( <A>.followers ) contains actor <B> Equivalent inverse claim : Actor <A> claims that <A> is followed by <B> Another equivalent inverse claim : Actor <A> claims that <B> is following <A> This can be verified by showing one of the following: <A>.followers includes <B> as well A Relationship exists where: attributedTo is <A> subject is <B> relationship is IsFollowing object is <A> A Relationship exists where: attributedTo is <A> subject is <A> relationship is IsFollowedBy object is <B> A trusted activity exists where: actor is <A> type is Accept object.actor is <B> object.type is Follow object.object is <A> A trusted activity exists where: actor is <A> type is Add object is <B> target is <A>.followers","title":"Verifying presence in followers {#followers-claim}"},{"location":"fep/fep-0391/#verifying-presence-in-following-following-claim","text":"Claim : Actor <B> 's followers collection ( <B>.followers ) contains actor <A> Equivalent claim : Actor <B> claims that <B> is followed by <A> Another equivalent claim : Actor <B> claims that <A> is following <B> Inverse claim : Actor <A> 's following collection ( <A>.following ) contains actor <B> Equivalent inverse claim : Actor <A> claims that <A> is following <B> Another equivalent inverse claim : Actor <A> claims that <B> is followed by <A> This can be verified by showing one of the following: <A>.following includes <B> as well A Relationship exists where: attributedTo is <A> subject is <A> relationship is IsFollowing object is <B> A Relationship exists where: attributedTo is <A> subject is <B> relationship is IsFollowedBy object is <A> A trusted activity exists where: actor is <B> type is Accept object.actor is <A> object.type is Follow object.object is <B> object is a trusted activity A trusted activity exists where: actor is <A> type is Add object is <B> target is <A>.following","title":"Verifying presence in following {#following-claim}"},{"location":"fep/fep-0391/#verifying-presence-in-liked-liked-claim","text":"Claim : Actor <A> 's liked collection ( <A>.liked ) contains object <O> This can be verified by showing a trusted activity exists in <O>.likes where: - actor is <A> - type is Like - object is <O> Note that there is an issue that may occur if <A> issues multiple Like activities for the same object <O> , and then issues any Undo Like activities at a later point in time. The most recent activity will have its side-effects carried out. It is possible for some of these functionally duplicate Like activites to remain in <O>.likes even though the object <O> is no longer in <A>.liked . See https://github.com/w3c/activitypub/issues/381 for more information.","title":"Verifying presence in liked {#liked-claim}"},{"location":"fep/fep-0391/#verifying-presence-in-likes-likes-claim","text":"Claim : Object <O> 's likes collection ( <O>.likes ) contains a Like activity <L> from actor <A> If <L> is not already trusted via some other mechanism, this can be verified by showing that <A>.liked includes <O> . Note the duplication issue from the previous section. The Like activity <L> MAY result in an Add activity <R> targeting <O>.likes . This result can be used by <A> as proof of the claim, if it can be shown to be a trusted activity.","title":"Verifying presence in likes {#likes-claim}"},{"location":"fep/fep-0391/#verifying-presence-in-shares-shares-claim","text":"Claim : Object <O> 's shares collection ( <O>.shares ) contains an Announce activity <S> from actor <A> The Announce activity <S> MAY result in an Add activity <R> targeting <O>.shares . This result can be used by <A> as proof of the claim, if it can be shown to be a trusted activity.","title":"Verifying presence in shares {#shares-claim}"},{"location":"fep/fep-0391/#verifying-presence-in-replies-replies-claim","text":"Claim : Object <R> is inReplyTo object <O> Inverse claim : Object <O> 's replies collection ( <O>.replies ) contains object <R> attributed to actor <A> The inverse claim can be verified by showing that an activity exists where: - actor is <O>.attributedTo - type set includes Add - object is <R> - target is <O>.replies","title":"Verifying presence in replies {#replies-claim}"},{"location":"fep/fep-0391/#verifying-presence-in-context-context-claim","text":"Claim : Object <O> has a context pointing to context collection <C> Inverse claim : Context collection <C> contains object <O> The inverse claim can be verified by showing that an activity exists where: - actor is <O>.context.attributedTo - type set includes Add - object is <R> - target is <O>.context","title":"Verifying presence in context {#context-claim}"},{"location":"fep/fep-0391/#types-of-proofs","text":"We can map proofs onto the result property provided that its subject is an activity and its referent is a trusted activity. We may also define some extension properties for non-activity objects.","title":"Types of proofs"},{"location":"fep/fep-0391/#showing-inclusion-in-replies-collections-via-a-reply-stamp-replies-stamp","text":"Provides proof that some object was added to some replies collection. On an activity where inReplyTo has been set, the proof can be verified if all of the following are satisfied: result.actor MUST be included in either inReplyTo.actor or inReplyTo.attributedTo result.type MUST include Add result.object MUST be equivalent to the current activity result.target MUST be equivalent to inReplyTo.replies On a Create activity where the object has inReplyTo set, the proof can be verified if all of the following are satisfied: result.actor MUST be included in either object.inReplyTo.attributedTo or object.inReplyTo.actor result.type MUST include Add result.object MUST be equivalent to object result.target MUST be equivalent to object.inReplyTo.replies On a non-activity Object where inReplyTo has been set, we define the extension property inReplyToProof since the use of result is invalid on non-Activity types. The proof is valid if all of the following are satisfied: inReplyToProof.actor MUST be included in either inReplyTo.attributedTo or inReplyTo.actor inReplyToProof.type MUST include Add inReplyToProof.object MUST be equivalent to the current object inReplyToProof.target MUST be equivalent to inReplyTo.replies Example of an activity with inReplyTo set to some activity with a replies collection: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-activity\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Activity\", \"object\": \"https://example.com/some-object\", \"inReplyTo\": { \"id\": \"https://example.com/some-other-create\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Create\", \"object\": \"https://example.com/some-other-object\", \"content\": \"I am accepting replies to this activity.\", \"replies\": \"https://example.com/some-other-create/replies\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/some-activity\", \"target\": \"https://example.com/some-other-create/replies\", \"attributedTo\": \"https://example.com/some-activity\" } } Example of a Create activity with object.inReplyTo set to some non-activity object with a replies collection: { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0391\"], \"id\": \"https://example.com/create-some-reply\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Create\", \"object\": { \"id\": \"https://example.com/some-reply\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/actors/2\", \"content\": \"This is a reply, and I can prove it was added to the replies collection.\", \"inReplyTo\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/actors/1\", \"content\": \"I am accepting replies to this object.\", \"replies\": \"https://example.com/some-object/replies\" }, \"inReplyToProof\": \"https://example.com/some-proof\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/some-reply\", \"target\": \"https://example.com/some-object/replies\", \"attributedTo\": \"https://example.com/create-some-reply\" } }","title":"Showing inclusion in replies collections via a reply stamp {#replies-stamp}"},{"location":"fep/fep-0391/#showing-inclusion-in-context-collections-via-a-context-stamp-context-stamp","text":"Provides proof that some object was added to some context collection. On an activity where the context has been set to a collection, the proof can be verified if all of the following are satisfied: result.actor MUST be included in context.attributedTo result.type MUST include Add result.object MUST be equivalent to the current activity result.target MUST be equivalent to context On a Create activity where the object has context set, the proof can be verified if all of the following are satisfied: result.actor MUST be included in object.context.attributedTo result.type MUST include Add result.object MUST be equivalent to object result.target MUST be equivalent to object.context On a non-activity Object where context has been set, we define the extension property contextProof since the use of result is invalid on non-Activity types. The proof is valid if all of the following are satisfied: contextProof.actor MUST be included in context.attributedTo contextProof.type MUST include Add contextProof.object MUST be equivalent to the current object contextProof.target MUST be equivalent to context Example of an activity with context set to some owned collection: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-activity\", \"actor\": \"https://example.com/some-actor\", \"type\": \"Activity\", \"object\": \"https://example.com/some-object\", \"context\": { \"id\": \"https://example.com/some-context\", \"type\": \"Collection\", \"attributedTo\": \"https://example.com/some-context-moderator\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/some-context-moderator\", \"type\": \"Add\", \"object\": \"https://example.com/some-activity\", \"target\": \"https://example.com/some-context\", \"attributedTo\": \"https://example.com/some-activity\" } } Example of a Create activity with object.context set to some owned collection: { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0391\"], \"id\": \"https://example.com/create-some-object\", \"actor\": \"https://example.com/some-actor\", \"type\": \"Create\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/some-actor\", \"content\": \"This object is part of some context, and I can prove it was added to the context collection.\", \"context\": { \"id\": \"https://example.com/some-context\", \"type\": \"Collection\", \"attributedTo\": \"https://example.com/some-context-moderator\" }, \"contextProof\": \"https://example.com/some-proof\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/some-context-moderator\", \"type\": \"Add\", \"object\": \"https://example.com/some-object\", \"target\": \"https://example.com/some-context\", \"attributedTo\": \"https://example.com/create-some-object\" } }","title":"Showing inclusion in context collections via a context stamp {#context-stamp}"},{"location":"fep/fep-0391/#showing-inclusion-in-likes-collections-via-a-like-stamp-likes-stamp","text":"Provides proof that the current activity was added to the object.likes collection. On a Like activity where the object has a likes collection, the proof can be verified if all of the following are satisfied: result.actor MUST be included in object.attributedTo result.type MUST include Add result.object MUST be equivalent to the current activity result.target MUST be equivalent to object.likes Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-like\", \"summary\": \"A Like activity, with proof that it was added to the likes collection.\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Like\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"content\": \"I am accepting likes of this object.\", \"likes\": \"https://example.com/some-object/likes\", \"attributedTo\": \"https://example.com/actors/1\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/some-like\", \"target\": \"https://example.com/some-object/likes\", \"attributedTo\": \"https://example.com/some-like\" } }","title":"Showing inclusion in likes collections via a like stamp {#likes-stamp}"},{"location":"fep/fep-0391/#showing-inclusion-in-shares-collections-via-a-share-stamp-shares-stamp","text":"Provides proof that the current activity was added to the object.shares collection. On an Announce activity where the object has a shares collection, the proof can be verified if all of the following are satisfied: result.actor MUST be included in object.attributedTo result.type MUST include Add result.object MUST be equivalent to the current activity result.target MUST be equivalent to object.shares Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-announce\", \"summary\": \"An Announce activity, with proof that it was added to the shares collection.\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Announce\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"content\": \"I am accepting shares of this object.\", \"shares\": \"https://example.com/some-object/shares\", \"attributedTo\": \"https://example.com/actors/1\" }, \"result\": { \"id\": \"https://example.com/some-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/some-announce\", \"target\": \"https://example.com/some-object/shares\", \"attributedTo\": \"https://example.com/some-announce\" } }","title":"Showing inclusion in shares collections via a share stamp {#shares-stamp}"},{"location":"fep/fep-0391/#relationship-proofs","text":"[!WARNING] Experimental, requires further thought. [!WARNING] Currently bugged. See https://github.com/w3c/activitystreams/issues/593 for more details. Provides proof that the current relationship is reciprocally claimed. Relationships other than following or being a follower may be proved using this property, but the requirements for such a proof are out of scope of this FEP. We define the extension property relationshipProof since the use of result is invalid on non-Activity types. The proof is valid if all of the following are satisfied: Example that proves a user is following another user: { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0391\"], \"id\": \"https://example.com/some-relationship\", \"type\": \"Relationship\", \"attributedTo\": \"https://example.com/actors/1\", \"subject\": { \"id\": \"https://example.com/actors/1\", \"following\": \"https://example.com/actors/1/following\" }, \"relationship\": \"IsFollowing\", \"object\": { \"id\": \"https://example.com/actors/2\", \"followers\": \"https://example.com/actors/2/followers\" }, \"relationshipProof\": [ { \"id\": \"https://example.com/not-enough-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/actors/2\", \"target\": \"https://example.com/actors/1/following\" }, { \"id\": \"https://example.com/proof-by-inverse-relationship\", \"type\": \"Relationship\", \"attributedTo\": \"https://example.com/actors/2\", \"subject\": \"https://example.com/actors/2\", \"relationship\": \"IsFollowedBy\", \"object\": \"https://example.com/actors/1\" }, { \"id\": \"https://example.com/proof-by-being-added-to-followers\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Add\", \"object\": \"https://example.com/actors/1\", \"target\": \"https://example.com/actors/2/followers\" }, { \"id\": \"https://example.com/proof-by-having-follow-accepted\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Accept\", \"object\": { \"actor\": \"https://example.com/actors/1\", \"type\": \"Follow\", \"object\": \"https://example.com/actors/2\" } } ] } Example that proves a user is followed by another user: { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0391\"], \"id\": \"https://example.com/some-relationship\", \"type\": \"Relationship\", \"attributedTo\": \"https://example.com/actors/1\", \"subject\": { \"id\": \"https://example.com/actors/1\", \"followers\": \"https://example.com/actors/1/following\" }, \"relationship\": \"IsFollowedBy\", \"object\": { \"id\": \"https://example.com/actors/2\", \"following\": \"https://example.com/actors/2/followers\" }, \"relationshipProof\": [ { \"id\": \"https://example.com/not-enough-proof\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/actors/2\", \"target\": \"https://example.com/actors/1/followers\" }, { \"id\": \"https://example.com/proof-by-inverse-relationship\", \"type\": \"Relationship\", \"attributedTo\": \"https://example.com/actors/2\", \"subject\": \"https://example.com/actors/2\", \"relationship\": \"IsFollowing\", \"object\": \"https://example.com/actors/1\" }, { \"id\": \"https://example.com/proof-by-being-added-to-following\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Add\", \"object\": \"https://example.com/actors/1\", \"target\": \"https://example.com/actors/2/following\" }, { \"id\": \"https://example.com/proof-by-having-follow\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Follow\", \"object\": \"https://example.com/actors/1\" } ] } Miscellaneous examples: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-follow\", \"actor\": { \"id\": \"https://example.com/actors/2\", \"following\": \"https://example.com/actors/2/following\" }, \"type\": \"Follow\", \"object\": { \"id\": \"https://example.com/actors/1\", \"followers\": \"https://example.com/actors/1/followers\" }, \"result\": { \"id\": \"https://example.com/accept-follow\", \"actor\": \"https://example.com/actor/1\", \"type\": \"Accept\", \"object\": \"https://example.com/some-follow\", \"result\": [ { \"id\": \"https://example.com/resulting-add-to-followers\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/actors/2\", \"target\": \"https://example.com/actors/1/followers\", \"attributedTo\": \"https://example.com/accept-follow\" }, { \"id\": \"https://example.com/resulting-add-to-following\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Add\", \"object\": \"https://example.com/actors/1\", \"target\": \"https://example.com/actors/2/following\", \"attributedTo\": \"https://example.com/accept-follow\" } ] } }","title":"Relationship proofs"},{"location":"fep/fep-0391/#existing-mechanisms-of-trust-root-trust","text":"Verifying stamps has an issue with bootstrapping trust. In addition to verifying stamps via logical inference, ActivityPub clients SHOULD also consider the following: Same-origin policy, if the root of trust is the DNS name. Cryptographic signatures, if the root of trust is some cryptographic key associated with the actor. See HTTP Signatures, Linked Data Signatures, FEP-8b32: Object Integrity Proofs , or similar.","title":"Existing mechanisms of trust {#root-trust}"},{"location":"fep/fep-0391/#obtaining-and-revoking-stamps-flow","text":"Upon receiving an activity with a side effect of adding something to a special collection, ActivityPub servers SHOULD generate and deliver an Add activity representing this side-effect. The ActivityPub server MAY require manual action by a user. The resulting stamp activity SHOULD be attributedTo the activity that caused the side-effect, delivered to its actor , and additionally SHOULD either be resolvable (to allow direct same-origin checking) or otherwise include a cryptographic proof. If a cryptographic proof is included, the proof SHOULD expire after some reasonable window, beyond which point a new proof should be issued. If the resulting stamp activity is resolvable, it MAY become unresolvable after some time; HTTP caching SHOULD be used to indicate a time-to-live for ActivityPub clients to re-check cached stamps. The time-to-live MAY be used as the duration of the cryptographic proof, if one exists. The recipient of a stamp SHOULD Update their object to include the appropriate property for the stamp -- result if it is an activity, inReplyToProof if it is a non-activity object that declares inReplyTo , contextProof if it is a non-activity object that declares context . [TODO: how to handle relationship proofs?] Revoking a stamp can be done by: - If it is resolvable, making it no longer resolve - If it is signed, then waiting for the signature to expire - Update the stamp with some property to signal that the Add activity has been undone. [TODO: flesh this out more -- how does this work exactly? should it use Remove? Tombstone? Undo? how does this interact with outbox and the activity history? i'm thinking Update -> Tombstone, or extension like \"undoneBy\"]","title":"Obtaining and revoking stamps {#flow}"},{"location":"fep/fep-0391/#a-simpler-example-flow-for-issuing-and-revoking-a-like-stamp","text":"This flow is similar for any stamp that uses result on an activity -- Like , Announce , Activity with inReplyTo , Activity with context . Actor 2 likes a post by actor 1: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-like\", \"summary\": \"Actor 2 liked a Note by actor 1\", \"actor\": { \"id\": \"https://example.com/actors/2\", \"followers\": \"https://example.com/actors/2/followers\" }, \"type\": \"Like\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"content\": \"I am accepting likes of this object.\", \"likes\": \"https://example.com/some-object/likes\", \"attributedTo\": { \"id\": \"https://example.com/actors/1\", \"followers\": \"https://example.com/actors/1/followers\" }, \"cc\": [ \"https://example.com/actors/1/followers\", \"as:Public\" ], \"audience\": \"https://example.com/some-object/audience\" }, \"to\": \"https://example.com/actors/1\", \"cc\": [ \"https://example.com/actors/2/followers\", \"https://example.com/some-object/audience\", \"as:Public\" ], \"audience\": \"https://example.com/some-like/audience\" } Actor 1 sends a like stamp: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-proof\", \"summary\": \"Actor 1 approved a like\", \"actor\": \"https://example.com/actors/1\", \"type\": \"Add\", \"object\": \"https://example.com/some-like\", \"target\": \"https://example.com/some-object/likes\", \"attributedTo\": \"https://example.com/some-like\", \"to\": \"https://example.com/actors/2\", \"cc\": [ \"https://example.com/actors/2/followers\", \"https://example.com/some-like/audience\", \"as:Public\" ] } Actor 2 updates their Like activity with proof: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-update\", \"summary\": \"Actor 2 updated their Like with proof\", \"actor\": { \"id\": \"https://example.com/actors/2\", \"followers\": \"https://example.com/actors/2/followers\" }, \"type\": \"Update\", \"object\": { \"id\": \"https://example.com/some-like\", \"summary\": \"Actor 2 liked a Note by actor 1, with proof\", \"actor\": \"https://example.com/actors/2\", \"type\": \"Like\", \"object\": \"https://example.com/some-object\", \"to\": \"https://example.com/actors/1\", \"cc\": [ \"https://example.com/actors/2/followers\", \"https://example.com/some-object/audience\", \"as:Public\" ], \"audience\": \"https://example.com/some-like/audience\", \"result\": \"https://example.com/some-proof\" }, \"cc\": [ \"https://example.com/actors/2/followers\", \"https://example.com/some-like/audience\", \"as:Public\" ] } If actor 1 had provided cryptographic proof, actor 2 would be able to authoritatively serve the stamp until the proof expired. Actor 1 can silently revoke the stamp by making it no longer resolve, or actively revoke the stamp by issuing a revocation activity [TODO: Update with \"undoneBy\" pointing to a Remove?]","title":"A simpler example flow for issuing and revoking a like stamp"},{"location":"fep/fep-0391/#a-more-complex-flow-for-stamps-involving-embedded-objects","text":"This flow uses inReplyToProof or contextProof on the object of a Create instead of using only result on the activity itself. Some actor creates some object that is part of some context, owned by some context moderator: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/create-some-object\", \"actor\": \"https://example.com/some-actor\", \"type\": \"Create\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"attributedTo\": { \"id\": \"https://example.com/some-actor\", \"followers\": \"https://example.com/some-actor/followers\" }, \"content\": \"This object is part of some context, and I can prove it was added to the context collection.\", \"context\": { \"id\": \"https://example.com/some-context\", \"type\": \"Collection\", \"attributedTo\": \"https://example.com/some-context-moderator\", \"audience\": \"https://example.com/some-context/audience\" }, \"to\": \"https://example.com/some-context-moderator\", \"cc\": \"as:Public\" }, \"to\": [ \"https://example.com/some-context-moderator\", \"https://example.com/some-context/audience\" ], \"cc\": \"as:Public\", \"audience\": \"https://example.com/create-some-object/audience\" } The context moderator adds the object to the context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/some-proof\", \"summary\": \"A new post was added to the context\", \"actor\": \"https://example.com/some-context-moderator\", \"type\": \"Add\", \"object\": \"https://example.com/some-object\", \"target\": \"https://example.com/some-context\", \"attributedTo\": \"https://example.com/create-some-object\", \"cc\": [ \"https://example.com/some-context/audience\", \"https://example.com/some-actor\", \"https://example.com/create-some-object/audience\", \"as:Public\" ] } The actor who created the object now can issue two updates: one for the Create activity to add a result , and one for the object of that activity to add object.contextProof : { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0391\"], \"id\": \"https://example.com/update-some-object\", \"actor\": { \"id\": \"https://example.com/some-actor\", \"followers\": \"https://example.com/some-actor/followers\" }, \"type\": \"Update\", \"object\": { \"id\": \"https://example.com/some-object\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/some-actor\", \"content\": \"This object is part of some context, and I can prove it was added to the context collection.\", \"context\": \"https://example.com/some-context\", \"contextProof\": \"https://example.com/some-proof\", \"to\": \"https://example.com/some-context-moderator\", \"cc\": \"as:Public\" }, \"to\": [ \"https://example.com/some-actor/followers\", \"as:Public\" ] } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/update-create\", \"actor\": \"https://example.com/some-actor\", \"type\": \"Update\", \"object\": { \"id\": \"https://example.com/create-some-object\", \"actor\": \"https://example.com/some-actor\", \"type\": \"Create\", \"object\": \"https://example.com/some-object\", \"to\": \"https://example.com/some-context-moderator\", \"cc\": \"as:Public\", \"result\": \"https://example.com/some-proof\" } }","title":"A more complex flow for stamps involving embedded objects"},{"location":"fep/fep-0391/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 a, FEP-7458: Using the replies collection , 2024 a, FEP-7888: Demystifying the context property , 2023 silverpill, FEP-8b32: Object Integrity Proofs , 2022","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-0391/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-03c1/","text":"FEP-03c1: Actors without acct-URI Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Most current Fediverse applications use an acct-URI as unique display name for actors. Usually, this display is done by displaying acct:user@domain.example as @user@domain.example . This FEP states that if there is no acct-URI associated with an actor, the actor should be displayed as its id. So the actor with id https://actor.example/path will be displayed as https://actor.example/path . In addition to the example below, we wish to point out that further independence of webfinger will enable new features such as using domain names as handles. Example: RSS Consider building an application that posts new entries of an RSS feed to the Fediverse. Let's assume we are interested in the updates of the bovine python library available through RSS at https://pypi.org/rss/project/bovine/releases.xml . Then an uri for this actor might look like https://rss.example/actor?feed=https%3A%2F%2Fpypi.org%2Frss%2Fproject%2Fbovine%2Freleases.xml This would enable rss.example to automatically generate the respective actor and generate an actor object like { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://rss.example/actor?feed=https%3A%2F%2Fpypi.org%2Frss%2Fproject%2Fbovine%2Freleases.xml\", \"type\": \"Service\", \"inbox\": \"https://rss.example/inbox?feed=https%3A%2F%2Fpypi.org%2Frss%2Fproject%2Fbovine%2Freleases.xml\", \"outbox\": \"https://rss.example/outbox?feed=https%3A%2F%2Fpypi.org%2Frss%2Fproject%2Fbovine%2Freleases.xml\", \"followers\": \"https://rss.example/followers?feed=https%3A%2F%2Fpypi.org%2Frss%2Fproject%2Fbovine%2Freleases.xml\", \"name\": \"PyPI recent updates for bovine\", \"url\": \"https://pypi.org/project/bovine/\", \"summary\": \"Recent updates to the Python Package Index for bovine\" } There is now no obvious choice for preferredUsername and thus acct-URI. If one wanted to create one, the best choice would probably be to hash the url of the feed. This unfortunately has the consequence of not generating a human readable id, but quite the opposite. \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-03c1: Actors without acct-URI"},{"location":"fep/fep-03c1/#fep-03c1-actors-without-acct-uri","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-03c1: Actors without acct-URI"},{"location":"fep/fep-03c1/#summary","text":"Most current Fediverse applications use an acct-URI as unique display name for actors. Usually, this display is done by displaying acct:user@domain.example as @user@domain.example . This FEP states that if there is no acct-URI associated with an actor, the actor should be displayed as its id. So the actor with id https://actor.example/path will be displayed as https://actor.example/path . In addition to the example below, we wish to point out that further independence of webfinger will enable new features such as using domain names as handles.","title":"Summary"},{"location":"fep/fep-03c1/#example-rss","text":"Consider building an application that posts new entries of an RSS feed to the Fediverse. Let's assume we are interested in the updates of the bovine python library available through RSS at https://pypi.org/rss/project/bovine/releases.xml . Then an uri for this actor might look like https://rss.example/actor?feed=https%3A%2F%2Fpypi.org%2Frss%2Fproject%2Fbovine%2Freleases.xml This would enable rss.example to automatically generate the respective actor and generate an actor object like { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://rss.example/actor?feed=https%3A%2F%2Fpypi.org%2Frss%2Fproject%2Fbovine%2Freleases.xml\", \"type\": \"Service\", \"inbox\": \"https://rss.example/inbox?feed=https%3A%2F%2Fpypi.org%2Frss%2Fproject%2Fbovine%2Freleases.xml\", \"outbox\": \"https://rss.example/outbox?feed=https%3A%2F%2Fpypi.org%2Frss%2Fproject%2Fbovine%2Freleases.xml\", \"followers\": \"https://rss.example/followers?feed=https%3A%2F%2Fpypi.org%2Frss%2Fproject%2Fbovine%2Freleases.xml\", \"name\": \"PyPI recent updates for bovine\", \"url\": \"https://pypi.org/project/bovine/\", \"summary\": \"Recent updates to the Python Package Index for bovine\" } There is now no obvious choice for preferredUsername and thus acct-URI. If one wanted to create one, the best choice would probably be to hash the url of the feed. This unfortunately has the consequence of not generating a human readable id, but quite the opposite.","title":"Example: RSS"},{"location":"fep/fep-03c1/#_1","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-0499/","text":"FEP-0499: Delivering to multiple inboxes with a multibox endpoint Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP introduces a server-wide endpoint for delivering activities to multiple inboxes. sharedInbox currently allows for doing this, but it requires the remote server to know how to deliver the activity based on its addressing properties. However, the remote server might not know how to deliver the activity to private recipients, or recipients within a collection. The multibox endpoint removes this knowledge requirement from the receiving server and instead makes the sending server responsible for marking inboxes to explicitly deliver to. Motivation (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) sharedInbox allows servers to reduce network traffic when delivering Public activities to multiple recipients, but it doesn't work when delivering to collections of actors, or when delivering to private audiences using bto or bcc. If an activity is addressed to a collection and that activity is delivered to a remote sharedInbox endpoint, then this introduces a requirement for the remote server to know the contents of the collection (or at least the local subset of its contents). In the common case of delivering activities addressing followers collections to a sharedInbox endpoint, then the remote server must first recognize that this collection id is specifically a followers collection, and then guess which local actors are following that activity's actor. This is prone to issues and can also have disastrous outcomes when follower state drifts out of sync. We can eliminate the dependency on shared follower state and allow for delivery of non-Public activities by introducing a new endpoint that likewise allows delivering to multiple inboxes, but without requiring the remote server to know anything. This enables addressing arbitrary collections as well as the use of bto and bcc more efficiently. Prior art (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) There are various advantages described in the original multibox proposal: Shared Inbox provides the ability for server to server communication traffic to be reduced from R requests, where R is the number of recipients, to a single HTTP request. This is a desirable property as it reduces the amount of HTTP round trips for both the sender and receiver. Unfortunately the design of Shared Inboxes as described in the ActivityPub specification makes it very easy for a spammer to abuse the system by not requiring explicit delivery recipients. We propose an alternative to Shared Inbox called MultiBox that keeps the desirable properties of Shared Inbox while protecting against scenarios in which the sender uses Shared Inbox to \"spam\" a server. Like Shared Inbox, MultiBox consists of a single HTTP endpoint for multiple Actors. Unlike Shared Inbox, in a MultiBox request, each recipient is explicitly listed by Inbox, requiring both the knowledge of the Actor and a corresponding Inbox for that actor. This information is transmitted through the use of an HTTP header Audience where each Inbox is listed using comma separated values. This has two advantages over Shared Inbox. Used on its own, it eliminates the vulnerability mentioned previously whereby recipients to a message do not need to be listed. If this proposal is adopted alongside the Object-Capabilities Based Inbox proposal (4.5), the advantages multiply as we also gain the ability to appropriately filter incoming messages according to the criteria set out by the specific Inboxes, as well as letting us know the origin of each Inbox. For the sender, the additional computing resources required to send a MultiBox request are minimal, but doing so would make mass-messages expensive for senders wishing to abuse the system. One open question on this proposal is that if we use the HTTP header Audience to store the list of recipients, this may result in a limitation. HTTP header sizes are not explicitly capped at the protocol level but implementations often cap them at different lengths- 4Kb for the Nginx web server or 8Kb for Apache. This would limit the number of per message recipients, though this limitation would rarely be reached. An alternative to this proposal would be a new MultiBox object encapsulating the Audience field and the ~Activity. Proposal (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) This FEP uses the \"alternative\" approach of putting inboxes in the body of the POST request, instead of using an HTTP header. Whereas headers are limited to possibly as low as 4Kb by default, the limit on POST request bodies is usually much higher; Nginx by default uses a 1MB limit for POST requests. This is the difference between 4000 characters versus 1 million characters. Specification Actors MAY have a multibox endpoint which is available for efficient delivery of activities to multiple inboxes on the same domain. A server MAY reduce the number of delivery requests by identifying all recipients which share the same multibox who would otherwise be delivered to individually, and deliver an activity of the following form to their shared multibox endpoint: The type MUST be Add . The object MUST be the activity being delivered. The target MUST be all inboxes being delivered to. Upon receipt of such an activity, the receiving server MUST add the activity in object into all local inboxes specified in target , although it MAY filter delivery to certain inboxes according to implementation-specific rules (for example, spam filtering). \u4f8b (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Discovering the multibox endpoint: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0499\" ], \"id\": \"https://remote.example/actors/af4c8205cd81\", \"type\": \"Person\", \"name\": \"Alice P. Hacker\", \"inbox\": \"https://remote.example/inboxes/fbb433c8e6c4\", \"endpoints\": { \"multibox\": \"https://remote.example/multibox\" } } Alternatively, without a context declaration: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://remote.example/actors/af4c8205cd81\", \"type\": \"Person\", \"name\": \"Alice P. Hacker\", \"inbox\": \"https://remote.example/inboxes/fbb433c8e6c4\", \"endpoints\": { \"https://w3id.org/fep/0499/multibox\": {\"id\": \"https://remote.example/multibox\"} } } Delivering to the multibox endpoint: POST /multibox HTTP/1.1 Host: remote.example Content-Type: application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Add\", \"object\": \"https://example.com/some-activity\", \"target\": [ \"https://remote.example/inboxes/fbb433c8e6c4\", \"https://remote.example/inboxes/d21f509146e5\", \"https://remote.example/inboxes/68a7453f79e4\", \"https://remote.example/inboxes/655216a0be07\", \"https://remote.example/inboxes/84907eff485d\", ] } For transient activities or for cases not requiring a fetch (e.g. no access control), you can embed the activity inline: POST /multibox HTTP/1.1 Host: remote.example Content-Type: application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Add\", \"object\": { \"@context\": \"https://context.example\" \"actor\": \"https://example.com/some-actor\", \"type\": \"InGameNotification\", \"content\": \"The payload is nearing the checkpoint!\", \"generator\": \"https://game.example\" }, \"target\": [ \"https://remote.example/inboxes/fbb433c8e6c4\", \"https://remote.example/inboxes/d21f509146e5\", \"https://remote.example/inboxes/68a7453f79e4\", \"https://remote.example/inboxes/655216a0be07\", \"https://remote.example/inboxes/84907eff485d\", ] } Terms defined multibox URI https://w3id.org/fep/0499/multibox Label multibox endpoint Comment An optional endpoint used for wide delivery of activities to multiple inboxes. POST an Add activity where the object is at least one activity to be delivered, and the target is at least one inbox to deliver to. Domain A map of endpoints Range The endpoint (@id) Required No Functional Yes Is defined by FEP-0499 { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0499\" ], \"id\": \"https://remote.example/actors/af4c8205cd81\", \"type\": \"Person\", \"name\": \"Alice P. Hacker\", \"inbox\": \"https://remote.example/inboxes/fbb433c8e6c4\", \"endpoints\": { \"multibox\": \"https://remote.example/multibox\" } } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://remote.example/actors/af4c8205cd81\", \"type\": \"Person\", \"name\": \"Alice P. Hacker\", \"inbox\": \"https://remote.example/inboxes/fbb433c8e6c4\", \"endpoints\": { \"https://w3id.org/fep/0499/multibox\": {\"id\": \"https://remote.example/multibox\"} } } POST /multibox HTTP/1.1 Host: remote.example Content-Type: application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Add\", \"object\": \"https://example.com/some-activity\", \"target\": [ \"https://remote.example/inboxes/fbb433c8e6c4\", \"https://remote.example/inboxes/d21f509146e5\", \"https://remote.example/inboxes/68a7453f79e4\", \"https://remote.example/inboxes/655216a0be07\", \"https://remote.example/inboxes/84907eff485d\", ] } \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Christine Lemmer Webber, Rebooting the Web of Trust 9: Keeping Unwanted Messages off the Fediverse > Proposed Suggestions > MultiBox , 2020 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-0499: Delivering to multiple inboxes with a multibox endpoint"},{"location":"fep/fep-0499/#fep-0499-delivering-to-multiple-inboxes-with-a-multibox-endpoint","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-0499: Delivering to multiple inboxes with a multibox endpoint"},{"location":"fep/fep-0499/#summary","text":"This FEP introduces a server-wide endpoint for delivering activities to multiple inboxes. sharedInbox currently allows for doing this, but it requires the remote server to know how to deliver the activity based on its addressing properties. However, the remote server might not know how to deliver the activity to private recipients, or recipients within a collection. The multibox endpoint removes this knowledge requirement from the receiving server and instead makes the sending server responsible for marking inboxes to explicitly deliver to.","title":"Summary"},{"location":"fep/fep-0499/#motivation","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) sharedInbox allows servers to reduce network traffic when delivering Public activities to multiple recipients, but it doesn't work when delivering to collections of actors, or when delivering to private audiences using bto or bcc. If an activity is addressed to a collection and that activity is delivered to a remote sharedInbox endpoint, then this introduces a requirement for the remote server to know the contents of the collection (or at least the local subset of its contents). In the common case of delivering activities addressing followers collections to a sharedInbox endpoint, then the remote server must first recognize that this collection id is specifically a followers collection, and then guess which local actors are following that activity's actor. This is prone to issues and can also have disastrous outcomes when follower state drifts out of sync. We can eliminate the dependency on shared follower state and allow for delivery of non-Public activities by introducing a new endpoint that likewise allows delivering to multiple inboxes, but without requiring the remote server to know anything. This enables addressing arbitrary collections as well as the use of bto and bcc more efficiently.","title":"Motivation"},{"location":"fep/fep-0499/#prior-art","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) There are various advantages described in the original multibox proposal: Shared Inbox provides the ability for server to server communication traffic to be reduced from R requests, where R is the number of recipients, to a single HTTP request. This is a desirable property as it reduces the amount of HTTP round trips for both the sender and receiver. Unfortunately the design of Shared Inboxes as described in the ActivityPub specification makes it very easy for a spammer to abuse the system by not requiring explicit delivery recipients. We propose an alternative to Shared Inbox called MultiBox that keeps the desirable properties of Shared Inbox while protecting against scenarios in which the sender uses Shared Inbox to \"spam\" a server. Like Shared Inbox, MultiBox consists of a single HTTP endpoint for multiple Actors. Unlike Shared Inbox, in a MultiBox request, each recipient is explicitly listed by Inbox, requiring both the knowledge of the Actor and a corresponding Inbox for that actor. This information is transmitted through the use of an HTTP header Audience where each Inbox is listed using comma separated values. This has two advantages over Shared Inbox. Used on its own, it eliminates the vulnerability mentioned previously whereby recipients to a message do not need to be listed. If this proposal is adopted alongside the Object-Capabilities Based Inbox proposal (4.5), the advantages multiply as we also gain the ability to appropriately filter incoming messages according to the criteria set out by the specific Inboxes, as well as letting us know the origin of each Inbox. For the sender, the additional computing resources required to send a MultiBox request are minimal, but doing so would make mass-messages expensive for senders wishing to abuse the system. One open question on this proposal is that if we use the HTTP header Audience to store the list of recipients, this may result in a limitation. HTTP header sizes are not explicitly capped at the protocol level but implementations often cap them at different lengths- 4Kb for the Nginx web server or 8Kb for Apache. This would limit the number of per message recipients, though this limitation would rarely be reached. An alternative to this proposal would be a new MultiBox object encapsulating the Audience field and the ~Activity.","title":"Prior art"},{"location":"fep/fep-0499/#proposal","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) This FEP uses the \"alternative\" approach of putting inboxes in the body of the POST request, instead of using an HTTP header. Whereas headers are limited to possibly as low as 4Kb by default, the limit on POST request bodies is usually much higher; Nginx by default uses a 1MB limit for POST requests. This is the difference between 4000 characters versus 1 million characters.","title":"Proposal"},{"location":"fep/fep-0499/#specification","text":"Actors MAY have a multibox endpoint which is available for efficient delivery of activities to multiple inboxes on the same domain. A server MAY reduce the number of delivery requests by identifying all recipients which share the same multibox who would otherwise be delivered to individually, and deliver an activity of the following form to their shared multibox endpoint: The type MUST be Add . The object MUST be the activity being delivered. The target MUST be all inboxes being delivered to. Upon receipt of such an activity, the receiving server MUST add the activity in object into all local inboxes specified in target , although it MAY filter delivery to certain inboxes according to implementation-specific rules (for example, spam filtering).","title":"Specification"},{"location":"fep/fep-0499/#_1","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Discovering the multibox endpoint: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/0499\" ], \"id\": \"https://remote.example/actors/af4c8205cd81\", \"type\": \"Person\", \"name\": \"Alice P. Hacker\", \"inbox\": \"https://remote.example/inboxes/fbb433c8e6c4\", \"endpoints\": { \"multibox\": \"https://remote.example/multibox\" } } Alternatively, without a context declaration: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://remote.example/actors/af4c8205cd81\", \"type\": \"Person\", \"name\": \"Alice P. Hacker\", \"inbox\": \"https://remote.example/inboxes/fbb433c8e6c4\", \"endpoints\": { \"https://w3id.org/fep/0499/multibox\": {\"id\": \"https://remote.example/multibox\"} } } Delivering to the multibox endpoint: POST /multibox HTTP/1.1 Host: remote.example Content-Type: application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Add\", \"object\": \"https://example.com/some-activity\", \"target\": [ \"https://remote.example/inboxes/fbb433c8e6c4\", \"https://remote.example/inboxes/d21f509146e5\", \"https://remote.example/inboxes/68a7453f79e4\", \"https://remote.example/inboxes/655216a0be07\", \"https://remote.example/inboxes/84907eff485d\", ] } For transient activities or for cases not requiring a fetch (e.g. no access control), you can embed the activity inline: POST /multibox HTTP/1.1 Host: remote.example Content-Type: application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Add\", \"object\": { \"@context\": \"https://context.example\" \"actor\": \"https://example.com/some-actor\", \"type\": \"InGameNotification\", \"content\": \"The payload is nearing the checkpoint!\", \"generator\": \"https://game.example\" }, \"target\": [ \"https://remote.example/inboxes/fbb433c8e6c4\", \"https://remote.example/inboxes/d21f509146e5\", \"https://remote.example/inboxes/68a7453f79e4\", \"https://remote.example/inboxes/655216a0be07\", \"https://remote.example/inboxes/84907eff485d\", ] }","title":"\u4f8b"},{"location":"fep/fep-0499/#terms-defined","text":"","title":"Terms defined"},{"location":"fep/fep-0499/#_2","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Christine Lemmer Webber, Rebooting the Web of Trust 9: Keeping Unwanted Messages off the Fediverse > Proposed Suggestions > MultiBox , 2020","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-0499/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-07d7/","text":"FEP-07d7: A Custom URL Scheme and Web-Based Protocol Handlers for Linking to ActivityPub Resources Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Motivation Context Requirements 1. Definitions 2. URI Scheme 2.1 Intents 2.2 Example links using the scheme 3. Protocol Handlers 3.1 Retrieving hyperlinked objects 3.2 Displaying hyperlinked objects 3.3 Servers 3.4 Clients 4. Safety and Security References Copyright Summary This specification addresses sometimes difficult interactions with ActivityPub resources hosted on remote servers. It defines a custom URL scheme which can be used by custom web-based protocol handlers to route hyperlinks to those resources to the user's preferred server. It additionally advises when ActivityPub servers can include these links in HTML views they generate, and how clients and servers can implement those web-based protocol handlers. Motivation When a person follows a link to some ActivityPub powered site, the browser will navigate to the resource on that site. This is often not what the person would have prefered when they have an account on a different ActivityPub aware site. In order to interact with the linked resource from their own account, the person must separately open their home server and search for the resource. This is an awkward and sometimes confusing process, especially for people who are not already familiar with the idosyncracies of navigating a federated social network. Web-based protocol handling is a feature of modern web browsers. This allows a site to register with the user's browser as a handler for custom URI schemes. The browser will send links using that scheme to the registerd handler. This way, it's possible to direct links to the user's preferred server or application. The handler can retrieve the resource and provide familiar and appropriate presentation. Native ActivityPub clients can also take advantage of these URIs to provide similar handling. Context Similar proposals such as Fedilinks and Mastodon Issue 19679 have been made, and were even briefly implemented in Mastodon . There seems to be some concensus that custom protocol handlers have the technical capability to solve the problem of difficult interactions with cross-instance objects. There is also ample prior art for this approach. mailto: and tel: are common examples from web standards. Zoom uses a custom zoommtg: protocol to launch their desktop app, and Apple uses itms: to launch iTunes. It seems the main impediment to early attempts was a perception of poor UX and limited adoption. This seems to be mostly a chicken-and-egg problem. That will always be a problem, until it's not. In this case, it seems it would be helpful to let standards drive implementation, as the opposite hasn't ocurred. This proposal also recommends behavior that is compatible with gradual adoption. Some similar proposals have also disussed emphasizing outcome , rather than content. Encapsulating action is an understandable desire, and this proposal attempts to facilitate that. But the protocol aspect is firmly focussed on interaction with ActivityPub objects, without making any assumptions about the design or capabilities of current or future ActivityPub services. The hope is that this gives the resulting implementations better longevity. Documents can outlive software, and people should still be able to interact with them in useful ways. This also keeps the proposal scoped just to ActivityPub concerns, without imposing on other standards. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC-2119 . 1. Definitions This proposal refers to ActivityPub objects as viewed and represented in multiple ways from multiple servers. For clarity, these are the terms that will be used to describe those scenarios. Origin server means the server that has authority for the ActivityPub object. This is the server that hosts and controls access to the object, and will recieve requests for the URI used as the object's ID. Handler is any software that handles the web+activitypub: scheme and protocol. Typically either an ActivityPub server where the person has an account, or a client application they have installed on their device. ActivityPub object means the JSON-LD document representing an ActivityPub Object, as described in the ActivityPub and ActivityStreams [ActivityStreamsRef] specifications. HTML representation means an HTML or other document rendered to display the ActivityPub object for human use. A client is any software that provides a human-friendly presentation of ActivityPub objects, or can interact with an ActivityPub server. For example, this could be a server's web UI or a native mobile app. This software does not necessarily utilize the C2S profile of the ActivityPub spec. 2. URI Scheme When creating hyperlinks to ActivityPub resources, individuals and applications SHOULD include a link using the custom web+activitypub: scheme. This scheme can be handled by web-based or native handlers registered with browsers by end-users. Because there's no guarantee that a given browser will have any registered handler for this scheme, these links SHOULD NOT be used in place of a link that refers to the resource by ID or an alternative HTML representation of it. Links using the web+activitypub: scheme SHOULD be used as an addition to those more canonical links. The address provided using the web+activitypub: scheme SHOULD be the same as the referenced ActivityPub object's ID. The address MAY instead be for an alternative human-readable address, or for an HTML representation of the object, as normal for the origin server. Applications using or generating these links should be aware that not all clients will be able to dereference those alternative or human readable addresses. The most interoperable choice is to use the object's canonical ActivityPub ID. The linked address MUST replace the scheme used with web+activitypub: . That means the link MUST NOT simply prepend web+activitypub: onto a preexisting https: or other scheme, as this would violate the generic URI syntax specified by RFC-3986 2.1 Intents A web+activitypub: link MAY encapsulate an intent for an activity to be performed on or with the linked object. For example, a pre-assembled link could be used to directly Follow an actor or to Announce an object. An encapsulated intent MUST be represented by appending a query string to the target URI. It's possible that the target URI already includes a query string. In this case, to encapsulate an intent, the intent MUST append a new query parameter to the existing query string. A web+activitypub: link MUST NOT encapsulate more than one intent. Including an encapsulated intent is OPTIONAL. Responding to the intent is also OPTIONAL. The creator of the intent should keep in mind that the handler MAY support intents, but does not have to. Also keep in mind that the handler MUST provide a mechanism for the user to confirm or decline to perform the intended action. The use or purpose of the web+activitypub: link MUST NOT require that the intended activity is actually performed. The format of the query parameter to encapsulate an intent is intent=<activity> where <activity> is any of the following activities described by the Activity Streams vocabulary . The activity string SHOULD be all lowercase. It's permissible to use any casing. But, there are many systems in the wild which might intercept or preprocess the URIs in a web+activitypub: link, and not all of those will respect the original casing. add announce arrive create follow invite like The web+activitypub: link SHOULD NOT encapsulate an intent for any activity not listed above. In addition, the link MUST NOT encapsulate an intent for any of the following activities. Implementers should exercise discretion regarding activities added as extensions to the ActivityPub specification. You should err on the side taking no action where there is doubt about the safety or security of doing so. block delete dislike flag ignore leave move offer remove For security and privacy, web+activitypub: links MUST NOT include a username or password component. They also SHOULD NOT be relative URIs. 2.2 Example links using the scheme Below are some examples of web+activitypub: hyperlinks that reflect some expected uses. One-click check in A link to enable one-click check in to pick up a shopping order. <a hfref=\"web+activitypub:shopping.example/pickup/12345?intent=arrive\">Check in to pick up your order</a> One-click follow A link to enable one-click following from another website. The handler must not perform the follow activity unless the user confirms it. <a href=\"web+activitypub:uss-enterprise.example/user/picard?intent=follow>Follow me on the fediverse</a> Link with no intent A link to view a blog post published as an ActivityPub Article <a href=\"web+activitypub:my-blog.example/article/write-your-first-fep>Read the article on your home instance</a> 3. Protocol Handlers 3.1 Retrieving hyperlinked objects ActivityPub applications that can retrieve remote objects and generate an HTML display MAY also implement a web-based protocol handler for the web+activitypub: URI scheme. Applications MAY use other available registration mechanisms, such as Android inents. The handler MUST attempt to load the specified URI as an application/ld+json document. If the origin does not respond with an ActivityPub object, the handler SHOULD fallback to other methods it uses to locate ActivityPub objects, such as webfinger. When resolving the given URI, the handler MUST ignore any provided username or password component, and it MUST exclude those components from the requests it makes to retrieve the object. If the given URI includes a query string with an intent parameter, the handler MUST exclude the intent parameter from the requests made to retrieve the object. The handler MUST NOT attempt to retrieve objects from a relative URI. There's likely no good reason for a web+activitypub: link to target a relative URI, and there is some risk it could be used to facilitate scams or phishing attempts by making it appear some third party has access to data they shouldn't. The handler MUST perform the same sanitization or other safe handling of untrusted URIs as it normally would. For example, there's likely no good reason for a production system to try to load resources from localhost, or using an ip address, rather than a hostname. Doing so could also facilitate phishing or scams. When retreiving resources identified by a web+activitypub: scheme, the handler SHOULD assume the origin uses HTTPS. The handler MAY attempt to use other schemes, such as did: . The handler MAY make this determination using any heuristic or algorithm the developers choose. Other than the above considerations, the handler MUST attempt to resolve the URI exactly as given. 3.2 Displaying hyperlinked objects After successfully retrieving the referenced object, the handler SHOULD produce an HTML representation of the object and present it for the user. The handler MUST escape and sanitize the content of the object before displaying it, to prevent cross-site scripting attacks. The handler SHOULD display the object in the normal way for the application, and in the normal context. For example, if the application normally displays replies alongside an object, it SHOULD do so in this case as well. The handler SHOULD enable the user to interact with the object normally, such as to generate Like or Announce activities referring to it. When the provided web+activitypub: URI includes an encapsulated intent, the handler MAY prompt the user to perform that intended activity. The handler MUST NOT perform that activity without explicit confirmation from the user. The handler MUST NOT perform or offer to perform the intended activity if it is one of the ones listed below. These activities present an elevated risk of disrupting the user's social connections or enlisting them in malicious activities. The handler MAY perform other activities, but SHOULD do so with care. web+activitypub: links are usually created by third parties. Be mindful that there is some risk of exposing sensitive information or facilitating harmful behavior when third parties are allowed to direct other people's actions. The handler MUST NOT perform any of these activities in response to an ecapsulated intent: block delete dislike flag ignore leave move offer remove 3.3 Servers ActivityPub servers MAY offer users an option to register with their browser as a web+activitypub: handler. Servers SHOULD NOT do this unless the user has authenticated with the server. The server SHOULD also offer a similar option to de-register as a handler. Servers SHOULD NOT attempt to register as a handler unless initiated by the user in some way. Servers MUST NOT attempt to automatically register as a handler again after a user has declined to allow it. 3.4 Clients Clients MAY offer users an option to register as handlers for web+activitypub: links. They SHOULD use whatever mechanism is appropriate to the client to do so. For instance, Android apps would likely use the intent system, and Windows apps could set the appropriate registry flags. Clients SHOULD provide a mechanism to de-register as a handler, where possible. Clients MAY defer this capability to the operating system as appropriate. If a client will retrieve the linked object itself, the client MUST adhere to the same specifications from section 3.1 and 3.2 as any other application would. 4. Safety and Security Because there is no way to know or control which application will ultimately handle any web+activitypub: link, creators SHOULD NOT include private or sensitive information in the link. Creators MUST NOT include any type of authenticating token or credential in the link. And handling applications themselves MUST apply all the normal and appropriate access controls when retrieving and displaying resources linked this way. \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Web-based Protocol Handlers] Mozilla Developer Network, Web-based Protocol Handlers [HTML Living Standard] WHATWG, HTML , 2023 [Fedilinks] Fedilinks Authors, Fedilinks \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-07d7: A Custom URL Scheme and Web-Based Protocol Handlers for Linking to ActivityPub Resources"},{"location":"fep/fep-07d7/#fep-07d7-a-custom-url-scheme-and-web-based-protocol-handlers-for-linking-to-activitypub-resources","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Motivation Context Requirements 1. Definitions 2. URI Scheme 2.1 Intents 2.2 Example links using the scheme 3. Protocol Handlers 3.1 Retrieving hyperlinked objects 3.2 Displaying hyperlinked objects 3.3 Servers 3.4 Clients 4. Safety and Security References Copyright","title":"FEP-07d7: A Custom URL Scheme and Web-Based Protocol Handlers for Linking to ActivityPub Resources"},{"location":"fep/fep-07d7/#summary","text":"This specification addresses sometimes difficult interactions with ActivityPub resources hosted on remote servers. It defines a custom URL scheme which can be used by custom web-based protocol handlers to route hyperlinks to those resources to the user's preferred server. It additionally advises when ActivityPub servers can include these links in HTML views they generate, and how clients and servers can implement those web-based protocol handlers.","title":"Summary"},{"location":"fep/fep-07d7/#motivation","text":"When a person follows a link to some ActivityPub powered site, the browser will navigate to the resource on that site. This is often not what the person would have prefered when they have an account on a different ActivityPub aware site. In order to interact with the linked resource from their own account, the person must separately open their home server and search for the resource. This is an awkward and sometimes confusing process, especially for people who are not already familiar with the idosyncracies of navigating a federated social network. Web-based protocol handling is a feature of modern web browsers. This allows a site to register with the user's browser as a handler for custom URI schemes. The browser will send links using that scheme to the registerd handler. This way, it's possible to direct links to the user's preferred server or application. The handler can retrieve the resource and provide familiar and appropriate presentation. Native ActivityPub clients can also take advantage of these URIs to provide similar handling.","title":"Motivation"},{"location":"fep/fep-07d7/#context","text":"Similar proposals such as Fedilinks and Mastodon Issue 19679 have been made, and were even briefly implemented in Mastodon . There seems to be some concensus that custom protocol handlers have the technical capability to solve the problem of difficult interactions with cross-instance objects. There is also ample prior art for this approach. mailto: and tel: are common examples from web standards. Zoom uses a custom zoommtg: protocol to launch their desktop app, and Apple uses itms: to launch iTunes. It seems the main impediment to early attempts was a perception of poor UX and limited adoption. This seems to be mostly a chicken-and-egg problem. That will always be a problem, until it's not. In this case, it seems it would be helpful to let standards drive implementation, as the opposite hasn't ocurred. This proposal also recommends behavior that is compatible with gradual adoption. Some similar proposals have also disussed emphasizing outcome , rather than content. Encapsulating action is an understandable desire, and this proposal attempts to facilitate that. But the protocol aspect is firmly focussed on interaction with ActivityPub objects, without making any assumptions about the design or capabilities of current or future ActivityPub services. The hope is that this gives the resulting implementations better longevity. Documents can outlive software, and people should still be able to interact with them in useful ways. This also keeps the proposal scoped just to ActivityPub concerns, without imposing on other standards.","title":"Context"},{"location":"fep/fep-07d7/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-07d7/#1-definitions","text":"This proposal refers to ActivityPub objects as viewed and represented in multiple ways from multiple servers. For clarity, these are the terms that will be used to describe those scenarios. Origin server means the server that has authority for the ActivityPub object. This is the server that hosts and controls access to the object, and will recieve requests for the URI used as the object's ID. Handler is any software that handles the web+activitypub: scheme and protocol. Typically either an ActivityPub server where the person has an account, or a client application they have installed on their device. ActivityPub object means the JSON-LD document representing an ActivityPub Object, as described in the ActivityPub and ActivityStreams [ActivityStreamsRef] specifications. HTML representation means an HTML or other document rendered to display the ActivityPub object for human use. A client is any software that provides a human-friendly presentation of ActivityPub objects, or can interact with an ActivityPub server. For example, this could be a server's web UI or a native mobile app. This software does not necessarily utilize the C2S profile of the ActivityPub spec.","title":"1. Definitions"},{"location":"fep/fep-07d7/#2-uri-scheme","text":"When creating hyperlinks to ActivityPub resources, individuals and applications SHOULD include a link using the custom web+activitypub: scheme. This scheme can be handled by web-based or native handlers registered with browsers by end-users. Because there's no guarantee that a given browser will have any registered handler for this scheme, these links SHOULD NOT be used in place of a link that refers to the resource by ID or an alternative HTML representation of it. Links using the web+activitypub: scheme SHOULD be used as an addition to those more canonical links. The address provided using the web+activitypub: scheme SHOULD be the same as the referenced ActivityPub object's ID. The address MAY instead be for an alternative human-readable address, or for an HTML representation of the object, as normal for the origin server. Applications using or generating these links should be aware that not all clients will be able to dereference those alternative or human readable addresses. The most interoperable choice is to use the object's canonical ActivityPub ID. The linked address MUST replace the scheme used with web+activitypub: . That means the link MUST NOT simply prepend web+activitypub: onto a preexisting https: or other scheme, as this would violate the generic URI syntax specified by RFC-3986","title":"2. URI Scheme"},{"location":"fep/fep-07d7/#21-intents","text":"A web+activitypub: link MAY encapsulate an intent for an activity to be performed on or with the linked object. For example, a pre-assembled link could be used to directly Follow an actor or to Announce an object. An encapsulated intent MUST be represented by appending a query string to the target URI. It's possible that the target URI already includes a query string. In this case, to encapsulate an intent, the intent MUST append a new query parameter to the existing query string. A web+activitypub: link MUST NOT encapsulate more than one intent. Including an encapsulated intent is OPTIONAL. Responding to the intent is also OPTIONAL. The creator of the intent should keep in mind that the handler MAY support intents, but does not have to. Also keep in mind that the handler MUST provide a mechanism for the user to confirm or decline to perform the intended action. The use or purpose of the web+activitypub: link MUST NOT require that the intended activity is actually performed. The format of the query parameter to encapsulate an intent is intent=<activity> where <activity> is any of the following activities described by the Activity Streams vocabulary . The activity string SHOULD be all lowercase. It's permissible to use any casing. But, there are many systems in the wild which might intercept or preprocess the URIs in a web+activitypub: link, and not all of those will respect the original casing. add announce arrive create follow invite like The web+activitypub: link SHOULD NOT encapsulate an intent for any activity not listed above. In addition, the link MUST NOT encapsulate an intent for any of the following activities. Implementers should exercise discretion regarding activities added as extensions to the ActivityPub specification. You should err on the side taking no action where there is doubt about the safety or security of doing so. block delete dislike flag ignore leave move offer remove For security and privacy, web+activitypub: links MUST NOT include a username or password component. They also SHOULD NOT be relative URIs.","title":"2.1 Intents"},{"location":"fep/fep-07d7/#22-example-links-using-the-scheme","text":"Below are some examples of web+activitypub: hyperlinks that reflect some expected uses. One-click check in A link to enable one-click check in to pick up a shopping order. <a hfref=\"web+activitypub:shopping.example/pickup/12345?intent=arrive\">Check in to pick up your order</a> One-click follow A link to enable one-click following from another website. The handler must not perform the follow activity unless the user confirms it. <a href=\"web+activitypub:uss-enterprise.example/user/picard?intent=follow>Follow me on the fediverse</a> Link with no intent A link to view a blog post published as an ActivityPub Article <a href=\"web+activitypub:my-blog.example/article/write-your-first-fep>Read the article on your home instance</a>","title":"2.2 Example links using the scheme"},{"location":"fep/fep-07d7/#3-protocol-handlers","text":"","title":"3. Protocol Handlers"},{"location":"fep/fep-07d7/#31-retrieving-hyperlinked-objects","text":"ActivityPub applications that can retrieve remote objects and generate an HTML display MAY also implement a web-based protocol handler for the web+activitypub: URI scheme. Applications MAY use other available registration mechanisms, such as Android inents. The handler MUST attempt to load the specified URI as an application/ld+json document. If the origin does not respond with an ActivityPub object, the handler SHOULD fallback to other methods it uses to locate ActivityPub objects, such as webfinger. When resolving the given URI, the handler MUST ignore any provided username or password component, and it MUST exclude those components from the requests it makes to retrieve the object. If the given URI includes a query string with an intent parameter, the handler MUST exclude the intent parameter from the requests made to retrieve the object. The handler MUST NOT attempt to retrieve objects from a relative URI. There's likely no good reason for a web+activitypub: link to target a relative URI, and there is some risk it could be used to facilitate scams or phishing attempts by making it appear some third party has access to data they shouldn't. The handler MUST perform the same sanitization or other safe handling of untrusted URIs as it normally would. For example, there's likely no good reason for a production system to try to load resources from localhost, or using an ip address, rather than a hostname. Doing so could also facilitate phishing or scams. When retreiving resources identified by a web+activitypub: scheme, the handler SHOULD assume the origin uses HTTPS. The handler MAY attempt to use other schemes, such as did: . The handler MAY make this determination using any heuristic or algorithm the developers choose. Other than the above considerations, the handler MUST attempt to resolve the URI exactly as given.","title":"3.1 Retrieving hyperlinked objects"},{"location":"fep/fep-07d7/#32-displaying-hyperlinked-objects","text":"After successfully retrieving the referenced object, the handler SHOULD produce an HTML representation of the object and present it for the user. The handler MUST escape and sanitize the content of the object before displaying it, to prevent cross-site scripting attacks. The handler SHOULD display the object in the normal way for the application, and in the normal context. For example, if the application normally displays replies alongside an object, it SHOULD do so in this case as well. The handler SHOULD enable the user to interact with the object normally, such as to generate Like or Announce activities referring to it. When the provided web+activitypub: URI includes an encapsulated intent, the handler MAY prompt the user to perform that intended activity. The handler MUST NOT perform that activity without explicit confirmation from the user. The handler MUST NOT perform or offer to perform the intended activity if it is one of the ones listed below. These activities present an elevated risk of disrupting the user's social connections or enlisting them in malicious activities. The handler MAY perform other activities, but SHOULD do so with care. web+activitypub: links are usually created by third parties. Be mindful that there is some risk of exposing sensitive information or facilitating harmful behavior when third parties are allowed to direct other people's actions. The handler MUST NOT perform any of these activities in response to an ecapsulated intent: block delete dislike flag ignore leave move offer remove","title":"3.2 Displaying hyperlinked objects"},{"location":"fep/fep-07d7/#33-servers","text":"ActivityPub servers MAY offer users an option to register with their browser as a web+activitypub: handler. Servers SHOULD NOT do this unless the user has authenticated with the server. The server SHOULD also offer a similar option to de-register as a handler. Servers SHOULD NOT attempt to register as a handler unless initiated by the user in some way. Servers MUST NOT attempt to automatically register as a handler again after a user has declined to allow it.","title":"3.3 Servers"},{"location":"fep/fep-07d7/#34-clients","text":"Clients MAY offer users an option to register as handlers for web+activitypub: links. They SHOULD use whatever mechanism is appropriate to the client to do so. For instance, Android apps would likely use the intent system, and Windows apps could set the appropriate registry flags. Clients SHOULD provide a mechanism to de-register as a handler, where possible. Clients MAY defer this capability to the operating system as appropriate. If a client will retrieve the linked object itself, the client MUST adhere to the same specifications from section 3.1 and 3.2 as any other application would.","title":"3.4 Clients"},{"location":"fep/fep-07d7/#4-safety-and-security","text":"Because there is no way to know or control which application will ultimately handle any web+activitypub: link, creators SHOULD NOT include private or sensitive information in the link. Creators MUST NOT include any type of authenticating token or credential in the link. And handling applications themselves MUST apply all the normal and appropriate access controls when retrieving and displaying resources linked this way.","title":"4. Safety and Security"},{"location":"fep/fep-07d7/#_1","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Web-based Protocol Handlers] Mozilla Developer Network, Web-based Protocol Handlers [HTML Living Standard] WHATWG, HTML , 2023 [Fedilinks] Fedilinks Authors, Fedilinks","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-07d7/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-0837/","text":"FEP-0837: Federated Marketplace Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This document describes a minimal implementation of a federated marketplace based on ActivityPub protocol and Valueflows vocabulary. In such marketplace actors can publish offers and requests, respond to offers and requests published by other actors, enter into agreements and exchange information necessary to complete these agreements. History Extension of ActivityPub protocol with Valueflows vocabulary was initially proposed by Lynn Foster in FEP-d767 . Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Overview sequenceDiagram actor Alice actor Bob Note right of Alice: Alice publishes a Proposal Bob ->> Alice: Bob sends Offer(Agreement) activity Alice ->> Bob: Alice sends Accept(Agreement) activity Note over Alice, Bob: Alice and Bob complete the transaction Alice ->> Bob: Alice sends confirmation activity Proposals Valueflows defines proposals as published requests or offers, sometimes with what is expected in return . The representation of a proposal is a JSON document with the following properties: id (REQUIRED): the proposal's unique global identifier. type (REQUIRED): the type of the object SHOULD be Proposal . If interoperability with other ActivityPub services is desirable, implementers MAY use object types from Activity Vocabulary , such as Note . purpose (REQUIRED): the type of proposal. Possible values are offer and request . attributedTo (REQUIRED): the actor who published the proposal. name (RECOMMENDED): the title of the proposal. content (OPTIONAL): the description of the proposal. The type of content SHOULD be text/html . published (RECOMMENDED): the date and time at which the proposal was published. location (OPTIONAL): indicates a physical location associated with the proposal. The representation of location MUST conform to the recommendations of Activity Vocabulary document, section 5.3 Representing Places . publishes (REQUIRED): the primary intent of this proposal (see below). reciprocal (OPTIONAL): the reciprocal intent of this proposal (see below). unitBased (OPTIONAL): indicates whether the quantities expressed in the proposal can be multiplied or not. to (REQUIRED): the audience of the proposal. Intents are proposed economic transactions. The primary intent describes what is being offered or requested, and reciprocal intent describes what is expected or offered in return. Some examples: A good is offered in exchange for money. Transfer of a good is a primary intent and a money transfer is a reciprocal intent. A good is offered as a gift. Transfer of a good is a primary intent and there's no reciprocal intent. Service is requested in exchange for money. Delivery of a service is a primary intent and money transfer is a reciprocal intent. The representation of an intent is a JSON document with the following properties: id (REQUIRED): the unique global identifier of the intent. Implementations SHOULD use URL fragments to identify intents associated with a given proposal. The RECOMMENDED fragment identifiers for primary and reciprocal intents are primary and reciprocal . type (REQUIRED): the type of the object MUST be Intent . action (REQUIRED): the type of economic transaction. The value of this property SHOULD be either deliverService or transfer . resourceConformsTo (RECOMMENDED): the type of an economic resource. Could be any URI. resourceQuantity (REQUIRED): the amount and unit of the economic resource. This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. The RECOMMENDED unit for countable items is one . hasNumericalValue (OPTIONAL): the amount of the resource. If not specified, arbitrary amounts can be used when responding to the proposal. availableQuantity (OPTIONAL): the quantity of the offered resource currently available. Minimal example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Proposal\": \"vf:Proposal\", \"Intent\": \"vf:Intent\", \"action\": \"vf:action\", \"purpose\": \"vf:purpose\", \"unitBased\": \"vf:unitBased\", \"publishes\": \"vf:publishes\", \"resourceQuantity\": \"vf:resourceQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Proposal\", \"id\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930\", \"purpose\": \"offer\", \"attributedTo\": \"https://market.example/users/alice\", \"publishes\": { \"type\": \"Intent\", \"id\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#primary\", \"action\": \"transfer\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"1\" } }, \"unitBased\": false, \"to\": \"https://www.w3.org/ns/activitystreams#Public\" } Full example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Proposal\": \"vf:Proposal\", \"Intent\": \"vf:Intent\", \"action\": \"vf:action\", \"purpose\": \"vf:purpose\", \"unitBased\": \"vf:unitBased\", \"publishes\": \"vf:publishes\", \"reciprocal\": \"vf:reciprocal\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"resourceQuantity\": \"vf:resourceQuantity\", \"availableQuantity\": \"vf:availableQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Proposal\", \"id\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930\", \"purpose\": \"offer\", \"attributedTo\": \"https://market.example/users/alice\", \"name\": \"Offering used bike\", \"content\": \"Blue one-speed bike, 15 years old, some rust\", \"published\": \"2023-06-18T19:22:03.918737Z\", \"location\": { \"type\": \"Place\", \"longitude\": -71.0, \"latitude\": 25.0 }, \"publishes\": { \"type\": \"Intent\", \"id\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#primary\", \"action\": \"transfer\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q11442\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"1\" }, \"availableQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"1\" } }, \"reciprocal\": { \"type\": \"Intent\", \"id\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#reciprocal\", \"action\": \"transfer\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q4917\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"30\" } }, \"unitBased\": false, \"to\": \"https://www.w3.org/ns/activitystreams#Public\" } Publishing a proposal Proposals can be linked to actors (if actor provides a service) or to other objects (if they represent economic resources) using FEP-0ea0 payment links. Proposals can also be added to public collections, or be delivered to actor's followers using Create activity, or announced by group actors. If FEP-0ea0 payment link is used, its href attribute MUST contain the proposal ID and its rel array MUST contain the string https://w3id.org/valueflows/ont/vf#Proposal . The value of mediaType attribute SHOULD be application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" . Example of a proposal attached to an actor via payment link: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Person\", \"id\": \"https://market.example/users/alice\", \"inbox\": \"https://market.example/users/alice\", \"outbox\": \"https://market.example/users/alice\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Buy a bike\", \"mediaType\": \"application/ld+json; profile=\\\"https://www.w3.org/ns/activitystreams\\\"\", \"href\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930\", \"rel\": [\"payment\", \"https://w3id.org/valueflows/ont/vf#Proposal\"] } ] } Consuming implementations which don't have marketplace features MAY display proposals similarly to Note objects. Responding to a proposal Agreements An interested party responds to a proposal and then parties start negotiating to reach an agreement . To respond to a proposal, an interested party MUST send an Agreement object wrapped in Offer activity to the actor indicated by the attributedTo property of the proposal. The proposing party MUST either commit to the action described in the proposal or send a rejection. In the first case, the proposer finalizes the agreement and sends Accept(Offer) activity back to the interested party. In the second case, the proposer sends Reject(Offer) activity. The interested party MAY send Offer(Agreement) activities many times until agreement is reached. The representation of an agreement is a JSON document with the following properties: id (OPTIONAL): the unique global identifier of the agreement. This property is REQUIRED for finalized agreements. type (REQUIRED): the type of the object MUST be Agreement . stipulates (REQUIRED): the primary commitment associated with the agreement. stipulatesReciprocal (OPTIONAL): the reciprocal commitment associated with the agreement. It is REQUIRED if the corresponding proposal has a reciprocal intent. Commitments are promised economic transactions. The representation of a commitment is a JSON document with the following properties: id (OPTIONAL): the unique global identifier of the commitment. This property is REQUIRED for commitments in finalized agreements. Implementations SHOULD use URL fragments to identify commitments associated with a given agreement. The RECOMMENDED fragment identifiers for commitments satisfying primary and reciprocal intents of the proposal are primary and reciprocal . type (REQUIRED): the type of the object MUST be Commitment . satisfies (REQUIRED): the reference to an intent. resourceQuantity (REQUIRED): the amount and unit of the economic resource. The first commitment MUST satisfy the primary intent of the proposal. The second commitment MUST satisfy the reciprocal intent of the proposal (if present). The units specified in the agreement MUST match the units specified in the proposal. If the value of unitBased property of the proposal is false , the amount of resources specified in commitments MUST be equal to amounts specified in the proposal. If the value is true , amounts MUST be multiples of amounts specified in the proposal. If unitBased property is not present on the proposal, arbitrary amounts can be used. Example of an Offer(Agreement) activity: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Agreement\": \"vf:Agreement\", \"stipulates\": \"vf:stipulates\", \"stipulatesReciprocal\": \"vf:stipulatesReciprocal\", \"Commitment\": \"vf:Commitment\", \"satisfies\": \"vf:satisfies\", \"resourceQuantity\": \"vf:resourceQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Offer\", \"id\": \"https://social.example/objects/fc4af0d2-c3a1-409b-947c-3c5be29f49b0/offer\", \"actor\": \"https://social.example/users/bob\", \"object\": { \"type\": \"Agreement\", \"stipulates\": { \"type\": \"Commitment\", \"satisfies\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#primary\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"1\" } }, \"stipulatesReciprocal\": { \"type\": \"Commitment\", \"satisfies\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#reciprocal\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"30\" } } }, \"to\": \"https://market.example/users/alice\" } Accepting an agreement The object of Accept activity MUST be the id of the Offer activity previously sent to the actor. Accept activity MUST have the result property containing the Agreement object. The finalized agreement and corresponding commitments MUST have an id property. If a similar agreement between parties already exists, it MAY be updated and its id re-used. The quantities specified in the finalized agreement MUST match the quantities specified in Agreement object from the Offer activity. The finalized agreement MAY have url property containing one or more links to resources associated with the agreement. An example of such resource is a payment page (which can be represented as an FEP-0ea0 link). Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Agreement\": \"vf:Agreement\", \"stiplulates\": \"vf:stiplulates\", \"stipulatesReciprocal\": \"vf:stipulatesReciprocal\", \"Commitment\": \"vf:Commitment\", \"satisfies\": \"vf:satisfies\", \"resourceQuantity\": \"vf:resourceQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Accept\", \"id\": \"https://market.example/activities/059f08fa-31b1-4136-8d76-5987d705a0ab\", \"actor\": \"https://market.example/users/alice\", \"object\": \"https://social.example/objects/fc4af0d2-c3a1-409b-947c-3c5be29f49b0/offer\", \"result\": { \"type\": \"Agreement\", \"id\": \"https://market.example/agreements/edc374aa-e580-4a58-9404-f3e8bf8556b2\", \"stiplulates\": { \"id\": \"https://market.example/agreements/edc374aa-e580-4a58-9404-f3e8bf8556b2#primary\", \"type\": \"Commitment\", \"satisfies\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#primary\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"1\" } }, \"stipulatesReciprocal\": { \"id\": \"https://market.example/agreements/edc374aa-e580-4a58-9404-f3e8bf8556b2#reciprocal\", \"type\": \"Commitment\", \"satisfies\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#reciprocal\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"30\" } }, \"url\": { \"type\": \"Link\", \"href\": \"https://pay.example/invoices/7f1f0c81-0108-4c91-9cb1-d38ebccc3aa1\", \"rel\": \"payment\" } }, \"to\": \"https://social.example/users/bob\" } Rejecting an agreement The object of Reject activity MUST be the id of the Offer activity previously sent to the actor. Activity MAY contain content property indicating the reason for rejection. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Reject\", \"id\": \"https://market.example/activities/8c05f97f-1531-4b70-9ca8-4ee4a09f36a4\", \"actor\": \"https://market.example/users/alice\", \"object\": \"https://social.example/objects/fc4af0d2-c3a1-409b-947c-3c5be29f49b0/offer\", \"content\": \"Not available\", \"to\": \"https://social.example/users/bob\" } Confirmations Economic transaction happens outside the protocol. When both parties complete their parts of the transaction, the proposing party MUST publish a confirmation. The type and structure of confirmation activity may vary between different marketplaces, but it MUST contain a reference to the Agreement object. The context property is RECOMMENDED for this purpose. Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\" ], \"type\": \"Create\", \"id\": \"https://market.example/receipts/ad2f7ee1-6567-413e-a10b-72650cbdc743/create\", \"actor\": \"https://market.example/users/alice\", \"object\": { \"type\": \"Document\", \"id\": \"https://market.example/receipts/ad2f7ee1-6567-413e-a10b-72650cbdc743\", \"name\": \"Receipt\", \"context\": \"https://market.example/agreements/edc374aa-e580-4a58-9404-f3e8bf8556b2\", \"published\": \"2023-07-03T14:13:41.843794Z\" }, \"to\": \"https://social.example/users/bob\" } \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Lynn Foster, elf Pavlik, Bob Haugen, Valueflows , 2023 Lynn Foster, FEP-d767: Extend ActivityPub with Valueflows , 2023 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 Hajo Rijgersberg, Don Willems, Xin-Ying Ren, Mari Wigham, Jan Top, Ontology of units of Measure , 2017 silverpill, FEP-0ea0: Payment Links , 2023 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-0837: Federated Marketplace"},{"location":"fep/fep-0837/#fep-0837-federated-marketplace","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-0837: Federated Marketplace"},{"location":"fep/fep-0837/#summary","text":"This document describes a minimal implementation of a federated marketplace based on ActivityPub protocol and Valueflows vocabulary. In such marketplace actors can publish offers and requests, respond to offers and requests published by other actors, enter into agreements and exchange information necessary to complete these agreements.","title":"Summary"},{"location":"fep/fep-0837/#history","text":"Extension of ActivityPub protocol with Valueflows vocabulary was initially proposed by Lynn Foster in FEP-d767 .","title":"History"},{"location":"fep/fep-0837/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-0837/#overview","text":"sequenceDiagram actor Alice actor Bob Note right of Alice: Alice publishes a Proposal Bob ->> Alice: Bob sends Offer(Agreement) activity Alice ->> Bob: Alice sends Accept(Agreement) activity Note over Alice, Bob: Alice and Bob complete the transaction Alice ->> Bob: Alice sends confirmation activity","title":"Overview"},{"location":"fep/fep-0837/#proposals","text":"Valueflows defines proposals as published requests or offers, sometimes with what is expected in return . The representation of a proposal is a JSON document with the following properties: id (REQUIRED): the proposal's unique global identifier. type (REQUIRED): the type of the object SHOULD be Proposal . If interoperability with other ActivityPub services is desirable, implementers MAY use object types from Activity Vocabulary , such as Note . purpose (REQUIRED): the type of proposal. Possible values are offer and request . attributedTo (REQUIRED): the actor who published the proposal. name (RECOMMENDED): the title of the proposal. content (OPTIONAL): the description of the proposal. The type of content SHOULD be text/html . published (RECOMMENDED): the date and time at which the proposal was published. location (OPTIONAL): indicates a physical location associated with the proposal. The representation of location MUST conform to the recommendations of Activity Vocabulary document, section 5.3 Representing Places . publishes (REQUIRED): the primary intent of this proposal (see below). reciprocal (OPTIONAL): the reciprocal intent of this proposal (see below). unitBased (OPTIONAL): indicates whether the quantities expressed in the proposal can be multiplied or not. to (REQUIRED): the audience of the proposal. Intents are proposed economic transactions. The primary intent describes what is being offered or requested, and reciprocal intent describes what is expected or offered in return. Some examples: A good is offered in exchange for money. Transfer of a good is a primary intent and a money transfer is a reciprocal intent. A good is offered as a gift. Transfer of a good is a primary intent and there's no reciprocal intent. Service is requested in exchange for money. Delivery of a service is a primary intent and money transfer is a reciprocal intent. The representation of an intent is a JSON document with the following properties: id (REQUIRED): the unique global identifier of the intent. Implementations SHOULD use URL fragments to identify intents associated with a given proposal. The RECOMMENDED fragment identifiers for primary and reciprocal intents are primary and reciprocal . type (REQUIRED): the type of the object MUST be Intent . action (REQUIRED): the type of economic transaction. The value of this property SHOULD be either deliverService or transfer . resourceConformsTo (RECOMMENDED): the type of an economic resource. Could be any URI. resourceQuantity (REQUIRED): the amount and unit of the economic resource. This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. The RECOMMENDED unit for countable items is one . hasNumericalValue (OPTIONAL): the amount of the resource. If not specified, arbitrary amounts can be used when responding to the proposal. availableQuantity (OPTIONAL): the quantity of the offered resource currently available. Minimal example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Proposal\": \"vf:Proposal\", \"Intent\": \"vf:Intent\", \"action\": \"vf:action\", \"purpose\": \"vf:purpose\", \"unitBased\": \"vf:unitBased\", \"publishes\": \"vf:publishes\", \"resourceQuantity\": \"vf:resourceQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Proposal\", \"id\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930\", \"purpose\": \"offer\", \"attributedTo\": \"https://market.example/users/alice\", \"publishes\": { \"type\": \"Intent\", \"id\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#primary\", \"action\": \"transfer\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"1\" } }, \"unitBased\": false, \"to\": \"https://www.w3.org/ns/activitystreams#Public\" } Full example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Proposal\": \"vf:Proposal\", \"Intent\": \"vf:Intent\", \"action\": \"vf:action\", \"purpose\": \"vf:purpose\", \"unitBased\": \"vf:unitBased\", \"publishes\": \"vf:publishes\", \"reciprocal\": \"vf:reciprocal\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"resourceQuantity\": \"vf:resourceQuantity\", \"availableQuantity\": \"vf:availableQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Proposal\", \"id\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930\", \"purpose\": \"offer\", \"attributedTo\": \"https://market.example/users/alice\", \"name\": \"Offering used bike\", \"content\": \"Blue one-speed bike, 15 years old, some rust\", \"published\": \"2023-06-18T19:22:03.918737Z\", \"location\": { \"type\": \"Place\", \"longitude\": -71.0, \"latitude\": 25.0 }, \"publishes\": { \"type\": \"Intent\", \"id\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#primary\", \"action\": \"transfer\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q11442\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"1\" }, \"availableQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"1\" } }, \"reciprocal\": { \"type\": \"Intent\", \"id\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#reciprocal\", \"action\": \"transfer\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q4917\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"30\" } }, \"unitBased\": false, \"to\": \"https://www.w3.org/ns/activitystreams#Public\" }","title":"Proposals"},{"location":"fep/fep-0837/#publishing-a-proposal","text":"Proposals can be linked to actors (if actor provides a service) or to other objects (if they represent economic resources) using FEP-0ea0 payment links. Proposals can also be added to public collections, or be delivered to actor's followers using Create activity, or announced by group actors. If FEP-0ea0 payment link is used, its href attribute MUST contain the proposal ID and its rel array MUST contain the string https://w3id.org/valueflows/ont/vf#Proposal . The value of mediaType attribute SHOULD be application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" . Example of a proposal attached to an actor via payment link: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Person\", \"id\": \"https://market.example/users/alice\", \"inbox\": \"https://market.example/users/alice\", \"outbox\": \"https://market.example/users/alice\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Buy a bike\", \"mediaType\": \"application/ld+json; profile=\\\"https://www.w3.org/ns/activitystreams\\\"\", \"href\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930\", \"rel\": [\"payment\", \"https://w3id.org/valueflows/ont/vf#Proposal\"] } ] } Consuming implementations which don't have marketplace features MAY display proposals similarly to Note objects.","title":"Publishing a proposal"},{"location":"fep/fep-0837/#responding-to-a-proposal","text":"","title":"Responding to a proposal"},{"location":"fep/fep-0837/#agreements","text":"An interested party responds to a proposal and then parties start negotiating to reach an agreement . To respond to a proposal, an interested party MUST send an Agreement object wrapped in Offer activity to the actor indicated by the attributedTo property of the proposal. The proposing party MUST either commit to the action described in the proposal or send a rejection. In the first case, the proposer finalizes the agreement and sends Accept(Offer) activity back to the interested party. In the second case, the proposer sends Reject(Offer) activity. The interested party MAY send Offer(Agreement) activities many times until agreement is reached. The representation of an agreement is a JSON document with the following properties: id (OPTIONAL): the unique global identifier of the agreement. This property is REQUIRED for finalized agreements. type (REQUIRED): the type of the object MUST be Agreement . stipulates (REQUIRED): the primary commitment associated with the agreement. stipulatesReciprocal (OPTIONAL): the reciprocal commitment associated with the agreement. It is REQUIRED if the corresponding proposal has a reciprocal intent. Commitments are promised economic transactions. The representation of a commitment is a JSON document with the following properties: id (OPTIONAL): the unique global identifier of the commitment. This property is REQUIRED for commitments in finalized agreements. Implementations SHOULD use URL fragments to identify commitments associated with a given agreement. The RECOMMENDED fragment identifiers for commitments satisfying primary and reciprocal intents of the proposal are primary and reciprocal . type (REQUIRED): the type of the object MUST be Commitment . satisfies (REQUIRED): the reference to an intent. resourceQuantity (REQUIRED): the amount and unit of the economic resource. The first commitment MUST satisfy the primary intent of the proposal. The second commitment MUST satisfy the reciprocal intent of the proposal (if present). The units specified in the agreement MUST match the units specified in the proposal. If the value of unitBased property of the proposal is false , the amount of resources specified in commitments MUST be equal to amounts specified in the proposal. If the value is true , amounts MUST be multiples of amounts specified in the proposal. If unitBased property is not present on the proposal, arbitrary amounts can be used. Example of an Offer(Agreement) activity: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Agreement\": \"vf:Agreement\", \"stipulates\": \"vf:stipulates\", \"stipulatesReciprocal\": \"vf:stipulatesReciprocal\", \"Commitment\": \"vf:Commitment\", \"satisfies\": \"vf:satisfies\", \"resourceQuantity\": \"vf:resourceQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Offer\", \"id\": \"https://social.example/objects/fc4af0d2-c3a1-409b-947c-3c5be29f49b0/offer\", \"actor\": \"https://social.example/users/bob\", \"object\": { \"type\": \"Agreement\", \"stipulates\": { \"type\": \"Commitment\", \"satisfies\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#primary\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"1\" } }, \"stipulatesReciprocal\": { \"type\": \"Commitment\", \"satisfies\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#reciprocal\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"30\" } } }, \"to\": \"https://market.example/users/alice\" }","title":"Agreements"},{"location":"fep/fep-0837/#accepting-an-agreement","text":"The object of Accept activity MUST be the id of the Offer activity previously sent to the actor. Accept activity MUST have the result property containing the Agreement object. The finalized agreement and corresponding commitments MUST have an id property. If a similar agreement between parties already exists, it MAY be updated and its id re-used. The quantities specified in the finalized agreement MUST match the quantities specified in Agreement object from the Offer activity. The finalized agreement MAY have url property containing one or more links to resources associated with the agreement. An example of such resource is a payment page (which can be represented as an FEP-0ea0 link). Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Agreement\": \"vf:Agreement\", \"stiplulates\": \"vf:stiplulates\", \"stipulatesReciprocal\": \"vf:stipulatesReciprocal\", \"Commitment\": \"vf:Commitment\", \"satisfies\": \"vf:satisfies\", \"resourceQuantity\": \"vf:resourceQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Accept\", \"id\": \"https://market.example/activities/059f08fa-31b1-4136-8d76-5987d705a0ab\", \"actor\": \"https://market.example/users/alice\", \"object\": \"https://social.example/objects/fc4af0d2-c3a1-409b-947c-3c5be29f49b0/offer\", \"result\": { \"type\": \"Agreement\", \"id\": \"https://market.example/agreements/edc374aa-e580-4a58-9404-f3e8bf8556b2\", \"stiplulates\": { \"id\": \"https://market.example/agreements/edc374aa-e580-4a58-9404-f3e8bf8556b2#primary\", \"type\": \"Commitment\", \"satisfies\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#primary\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"1\" } }, \"stipulatesReciprocal\": { \"id\": \"https://market.example/agreements/edc374aa-e580-4a58-9404-f3e8bf8556b2#reciprocal\", \"type\": \"Commitment\", \"satisfies\": \"https://market.example/proposals/ddde9d6f-6f3b-4770-a966-3a18ef006930#reciprocal\", \"resourceQuantity\": { \"hasUnit\": \"one\", \"hasNumericalValue\": \"30\" } }, \"url\": { \"type\": \"Link\", \"href\": \"https://pay.example/invoices/7f1f0c81-0108-4c91-9cb1-d38ebccc3aa1\", \"rel\": \"payment\" } }, \"to\": \"https://social.example/users/bob\" }","title":"Accepting an agreement"},{"location":"fep/fep-0837/#rejecting-an-agreement","text":"The object of Reject activity MUST be the id of the Offer activity previously sent to the actor. Activity MAY contain content property indicating the reason for rejection. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Reject\", \"id\": \"https://market.example/activities/8c05f97f-1531-4b70-9ca8-4ee4a09f36a4\", \"actor\": \"https://market.example/users/alice\", \"object\": \"https://social.example/objects/fc4af0d2-c3a1-409b-947c-3c5be29f49b0/offer\", \"content\": \"Not available\", \"to\": \"https://social.example/users/bob\" }","title":"Rejecting an agreement"},{"location":"fep/fep-0837/#confirmations","text":"Economic transaction happens outside the protocol. When both parties complete their parts of the transaction, the proposing party MUST publish a confirmation. The type and structure of confirmation activity may vary between different marketplaces, but it MUST contain a reference to the Agreement object. The context property is RECOMMENDED for this purpose. Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\" ], \"type\": \"Create\", \"id\": \"https://market.example/receipts/ad2f7ee1-6567-413e-a10b-72650cbdc743/create\", \"actor\": \"https://market.example/users/alice\", \"object\": { \"type\": \"Document\", \"id\": \"https://market.example/receipts/ad2f7ee1-6567-413e-a10b-72650cbdc743\", \"name\": \"Receipt\", \"context\": \"https://market.example/agreements/edc374aa-e580-4a58-9404-f3e8bf8556b2\", \"published\": \"2023-07-03T14:13:41.843794Z\" }, \"to\": \"https://social.example/users/bob\" }","title":"Confirmations"},{"location":"fep/fep-0837/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Lynn Foster, elf Pavlik, Bob Haugen, Valueflows , 2023 Lynn Foster, FEP-d767: Extend ActivityPub with Valueflows , 2023 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 Hajo Rijgersberg, Don Willems, Xin-Ying Ren, Mari Wigham, Jan Top, Ontology of units of Measure , 2017 silverpill, FEP-0ea0: Payment Links , 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-0837/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-0ea0/","text":"FEP-0ea0: Payment Links Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP describes a way to attach payment information to ActivityPub actors and objects. That information might be a link to donation page, a link for buying an artwork, or anything else that can be represented with a URI. History PeerTube videos may have support property, which contains a text explaining how to support the content creator. FEP-8c3f: Web Monetization was published in 2022. The ensuing discussion on SocialHub forum led to the creation of Payment Links proposal. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Payment links Payment link is an object with the following properties: type (REQUIRED): the type MUST be Link . name (RECOMMENDED): the name property SHOULD contain a human-readable description of the payment link. href (REQUIRED): the href property MUST contain a payment URI. This can be a URL of a website, or any other kind of URI, such as payto URI . rel (REQUIRED): the rel property MUST contain the string payment or an array containing that string. The payment relation type is defined in Link Relations Registry . Payment links MUST be added to attachment array of an actor or an object. \u4f8b Payment link attached to an actor: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Person\", \"id\": \"https://social.example/users/alice\", \"inbox\": \"https://social.example/users/alice/inbox\", \"outbox\": \"https://social.example/users/alice/outbox\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Donate\", \"href\": \"payto://iban/DE75512108001245126199\", \"rel\": \"payment\" } ] } Payment link attached to an object: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Image\", \"id\": \"https://gallery.example/photos/123\", \"attributedTo\": \"https://gallery.example/users/alice\", \"name\": \"Painting of a cat\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Buy\", \"href\": \"https://gallery.example/photos/123/order\", \"rel\": [ \"payment\", \"https://gallery.example/ns#buy\" ] } ] } Payment links as actor metadata (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Implementers may treat payment links attached to actor object in the same way as actor metadata fields. In that case, name translates into field label and href translates into field value. \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [FEP-8c3f: Web Monetization] Diogo Peralta Cordeiro, Phablulo Joel, FEP-8c3f: Web Monetization , 2022 [Link Relations Registry] IANA, Link Relations , 2005 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-0ea0: Payment Links"},{"location":"fep/fep-0ea0/#fep-0ea0-payment-links","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-0ea0: Payment Links"},{"location":"fep/fep-0ea0/#summary","text":"This FEP describes a way to attach payment information to ActivityPub actors and objects. That information might be a link to donation page, a link for buying an artwork, or anything else that can be represented with a URI.","title":"Summary"},{"location":"fep/fep-0ea0/#history","text":"PeerTube videos may have support property, which contains a text explaining how to support the content creator. FEP-8c3f: Web Monetization was published in 2022. The ensuing discussion on SocialHub forum led to the creation of Payment Links proposal.","title":"History"},{"location":"fep/fep-0ea0/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-0ea0/#payment-links","text":"Payment link is an object with the following properties: type (REQUIRED): the type MUST be Link . name (RECOMMENDED): the name property SHOULD contain a human-readable description of the payment link. href (REQUIRED): the href property MUST contain a payment URI. This can be a URL of a website, or any other kind of URI, such as payto URI . rel (REQUIRED): the rel property MUST contain the string payment or an array containing that string. The payment relation type is defined in Link Relations Registry . Payment links MUST be added to attachment array of an actor or an object.","title":"Payment links"},{"location":"fep/fep-0ea0/#_1","text":"Payment link attached to an actor: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Person\", \"id\": \"https://social.example/users/alice\", \"inbox\": \"https://social.example/users/alice/inbox\", \"outbox\": \"https://social.example/users/alice/outbox\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Donate\", \"href\": \"payto://iban/DE75512108001245126199\", \"rel\": \"payment\" } ] } Payment link attached to an object: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Image\", \"id\": \"https://gallery.example/photos/123\", \"attributedTo\": \"https://gallery.example/users/alice\", \"name\": \"Painting of a cat\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Buy\", \"href\": \"https://gallery.example/photos/123/order\", \"rel\": [ \"payment\", \"https://gallery.example/ns#buy\" ] } ] }","title":"\u4f8b"},{"location":"fep/fep-0ea0/#payment-links-as-actor-metadata","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Implementers may treat payment links attached to actor object in the same way as actor metadata fields. In that case, name translates into field label and href translates into field value.","title":"Payment links as actor metadata"},{"location":"fep/fep-0ea0/#_2","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [FEP-8c3f: Web Monetization] Diogo Peralta Cordeiro, Phablulo Joel, FEP-8c3f: Web Monetization , 2022 [Link Relations Registry] IANA, Link Relations , 2005","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-0ea0/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-1311/","text":"FEP-1311: Media Attachments Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Media Attachments are ubiquitous in the Fediverse. My quick investigation into the explore tab on mastodon.social yields that about half the posts contain an image attachment. The mechanism for these is poorly documented. For example, it is not mentioned in ActivityPub . My goal in this FEP is to document current usage, and issue recommendations on how to improve it. These recommendations are based on the support table Recommended Media Attachment Format available at FunFedi.dev . For developers that enjoy making their keyboards smoke, I believe that the above link combined with the content of Testing should be enough to adapt their Fediverse applications. The other parts are meant for people, who which to improve the situation related to media attachments. Basic format We will discuss our basic suggested format with the following example of an image attachment. { \"type\": \"Image\", \"name\": \"A beautiful cow\", \"url\": \"http://pasture-one-actor/assets/cow.jpg\", \"width\": 100, \"height\": 162, \"mediaType\": \"image/jpeg\", \"digestMultibase\": \"zQmaeDPzhNL32WQZnnzB1H6QJWvvFNEHdViDB71yrxyXU1t\", \"size\": 9045 } There is a lot to say here, first how does this relate to communication in ActivityPub which is done by activity. For this consider the activity (taken from data.funfedi.dev ) given by { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/credentials/v2\", { \"size\": \"https://joinpeertube.org/ns#size\" } ], \"type\": \"Create\", \"actor\": \"http://pasture-one-actor/actor\", \"to\": [ \"http://akkoma/users/witch\", \"https://www.w3.org/ns/activitystreams#Public\" ], \"id\": \"http://pasture-one-actor/actor/S5Szzuugy50\", \"published\": \"2024-12-05T08:18:48Z\", \"object\": { \"type\": \"Note\", \"attributedTo\": \"http://pasture-one-actor/actor\", \"to\": [ \"https://www.w3.org/ns/activitystreams#Public\", \"http://akkoma/users/witch\" ], \"id\": \"http://pasture-one-actor/actor/qDqgbPpNQPw\", \"published\": \"2024-12-05T08:18:48Z\", \"content\": \"Recommended Image Format\", \"attachment\": [ { \"type\": \"Image\", \"name\": \"A beautiful cow\", \"url\": \"http://pasture-one-actor/assets/cow.jpg\", \"width\": 100, \"height\": 162, \"mediaType\": \"image/jpeg\", \"digestMultibase\": \"zQmaeDPzhNL32WQZnnzB1H6QJWvvFNEHdViDB71yrxyXU1t\", \"size\": 9045 } ] } } We note that the media attachment is contained in the array of attachment of the Note object. Furthermore, in difference to the activity and the object, there is no id property nor actor or attributedTo property. This is on purpose, as those are inherited from the object the media attachment is attached to. See Content Licensing for discussion about not having an attributedTo property. In particular, one should emphasize that a media attachment not having an id is useful to signify that it is not useful as an object without the note, it is attached to. Specifying basic properties To use media attachments, an object MUST have an attachment property, whose value is an array containing objects. Furthermore, the contained objects MUST have a type property. For it to be a media attachment the type property MUST be Audio , Image , or Video . However, the attachment property MAY contain other form of attachments, e.g. FEP-0ea0: Payment Links . This can be expressed as the json-schema: { \"$schema\": \"https://json-schema.org/draft/2020-12/schema\", \"type\": \"object\", \"properties\": { \"attachment\": { \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"type\": { \"type\": \"string\", \"examples\": [\"Audio\", \"Image\", \"Video\"] } }, \"required\": [\"type\"] } } }, \"required\": [\"attachment\"] } We now discuss the specific form a media attachment. In addition to type , a media attachment MUST also contain an url property providing the link to the media. The url property MAY also be an array, see Multiple Media Versions . However, this just to be future proof. Furthermore, media attachments SHOULD contain a name property providing an alternative plain text description of the media object. Again this can be represented as a json-schema. { \"$schema\": \"https://json-schema.org/draft/2020-12/schema\", \"type\": \"object\", \"properties\": { \"type\": { \"type\": \"string\", \"enum\": [\"Audio\", \"Image\", \"Video\"] }, \"name\": { \"type\": \"string\", \"examples\": [\"A beautiful cow\"] }, \"url\": { \"type\": [\"string\", \"array\"], \"examples\": [\"http://you.example/image.png\"] } }, \"required\": [\"type\", \"url\"] } Current state of type Many current implementations use Document for media attachments. This has the distinct disadvantage to using Audio , Image , or Video that the parser needs to inspect more content than type to discover what type of attachment it is. Let's write a bit of python to determine if something is a media attachment based on mediaType , discussed later. def is_media(attachment:dict) -> bool: media_type = attachment.get(\"mediaType\") if media_type is None: ... # handle error case main_type, _ = media_type.split(\"/\", 1) return main_type in [\"audio\", \"image\", \"video\"] This already is fairly complicated, but there is more. If one allows url to be an array, one needs a different check, so it turns into something like: def is_media(attachment:dict) -> bool: url = attachment.get(\"url\") if isinstance(url, list): return is_media(url[0]) media_type = attachment.get(\"mediaType\") if media_type is None: ... # handle error case main_type, _ = media_type.split(\"/\", 1) return main_type in [\"audio\", \"image\", \"video\"] There are more exceptions and poor configuration to treat, e.g. url could be an empty list, or the implementation could attach mediaType to the full object instead of the Link . The goal of a specification needs to be to simplify the code that needs to be written, so we insist on people using the types Audio , Image , and Video for media attachments. Properties of the linked file In this section, we discuss properties related to the linked file. The linked file is retrieved either by performing a GET request on the value of url or on href of the Link objects if url is an array. Just to mention it, this requirement might change, once Authentication and Authorization is dealt with. Let's look back at our original example of a media attachment { \"type\": \"Image\", \"name\": \"A beautiful cow\", \"url\": \"http://pasture-one-actor/assets/cow.jpg\", \"width\": 100, \"height\": 162, \"mediaType\": \"image/jpeg\", \"digestMultibase\": \"zQmaeDPzhNL32WQZnnzB1H6QJWvvFNEHdViDB71yrxyXU1t\", \"size\": 9045 } Here the linked file is given by a GET on http://pasture-one-actor/assets/cow.jpg and the result would be The properties mediaType , digestMultibase , and size could be valid for any attached file, even a non media one, e.g. a text document. Let's quickly review them. mediaType is defined in the ActivityStreams Vocabulary . It describes the MIME type and tells us important information on how to render the file. digestMultibase is defined here as part of Verifiable Credential Data Integrity . The encoding of a digest in multibase with multihash is somewhat different to the rest of multicodec, because one first has a byte to indicate the format, then another one to indicate the length. This means in particular that all digestMultibase using sha-256 will start with zQm , the z indicating base58 encoding. Checking the digest is important to ensure integrity . As media is often hosted off site using S3, this seems important. For another usage see Content Addressed Storage . Finally size being the file size in bytes is borrowed from PeerTube. The size should tell us if we want to preload the media or not. There is something missing in the file properties: access control , see the section Authentication and Authorization in the open questions below. Specifying file properties The creator of a media attachment SHOULD include the values of mediaType , digestMultibase , and size . The consumer of a media attachment SHOULD ensure integrity of the downloaded attachment based on digestMultibase , i.e. check the digest. The consumer of a media attachment SHOuLD decide based on size and mediaType the best way to consume the attachment. size and mediaType become more relevant when multiple versions of the media attachment are provided. For example, this could mean that in one feeds one only sees the low quality video by default. Properties of an image We have now discussed all properties of our example document except for width and height . These properties are only relevant for an image and a video, but not for audio. Similarly, audio and video can have a duration , which images don't. Finally, Mastodon has introduced the additional properties focalPoint blurHash where at least focalPoint is user defined. There are a lot of other properties one can consider for media, e.g. Where was the picture taken? e.g. location What is the frame rate of the video? e.g. fps Provide an album cover for audio? In order to standardize these things further work is needed. Multiple Media Versions As it is currently not supported in the Fediverse, I will just give the basic example how to use multiple attached Links: { \"type\": \"Video\", \"name\": \"A beautiful cow eating\", \"url\": [ { \"type\": \"Link\", \"size\": 54373, \"digest\": \"zQmSzK5qEe5tpjwGMhmjx9RvVoPkWhEmCwxP2s7wPMpKMoK\", \"width\": 256, \"height\": 144, \"href\": \"http://pasture-one-actor/assets/cow_eating.mp4\", \"mediaType\": \"video/mp4\" }, { \"type\": \"Link\", \"size\": 2271723, \"digest\": \"zQme2X4rgWuRdmAtGGMSEbdoeRQ2NAL2VptcdRGTYDZbSKG\", \"width\": 1920, \"height\": 1080, \"href\": \"http://pasture-one-actor/assets/cow_eating_hd.mp4\", \"mediaType\": \"video/mp4\" } ], \"duration\": \"PT3S\" } As the example shows, this is useful to attach both a low quality version (54kb) and a high quality one (2.2MB) of a video. We think that supporting this will open the door for richer applications. Testing By using json-schema, one can validate some level of correctness of generated media attachments. Relevant schemas are available at Fediverse schemas for media attachments. They can be combined into a feature test using Gherkin, see Media Format . If you wish to validate everything, including digest, you can use the examples provided at FunFedi.dev . Open Question This section is essentially a todo list for the community on stuff that should be fixed, but isn't yet. Content Licensing The picture in the examples was created based on this picture available for free on pixabay by photographer derekmuller . Unfortunately, the current standards to not let me attach this information to my media object. One could now say that this could be solved with just using the attributedTo property. Unfortunately, this has a lot of drawbacks. For example derekmuller is not an ActivityPub actor. Also attributing my cropped low resolution image to him, might be something he does not appreciate. Finally, just attributing this image is probably not enough, one should also inform people on how it is licensed. See FEP-c118 and its discussions for more on the topic. Authentication and Authorization Currently, image links must be accessible without any form of authorization. This is due while communication between a user and their server requiring authentication and between servers requiring authentication, images are often stored on third party services, e.g. S3, thus adding authentication is hard. For some approaches to resolve this see this Fediverse discussion . One approach to achieve authentication and authorization easily with existing technologies would be Bearcaps . For a different approach see also Binary Fediverse transport . Content addressed storage Storing media is costly. It is thus important to avoid duplication. By having a digest for all media through the digestMultibase property, we can use this to index our media storage. This means that before downloading a file, we can check if we already have it. Mixed media content Consider posting a song, e.g. something from the brat summer, then you might want to attach the album cover, e.g. an image featuring the color #8ACE00 . Maybe you will also want to attach some lyrics. This means that your media content contains three parts of separate media type. One might want to extend the schema for media attachments to convey this information. Binary Fediverse transport A failure of ActivityPub is that it restricts transport to be JSON. ActivityPub thus forces people to use external means, e.g. download the file, to convey media content. One could solve some problems, e.g. Authentication and Authorization , by just allowing transport of binary blobs. This would require an extension of the wire format. Allowing for messages to contain binary blobs would also for sharing media via thick clients. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Helge, FunFedi.dev: Recommended Media Attachment Format Helge / funfedi.dev Interoperability Data for the Fediverse , akkoma v3.13.3, inputs 0.1.11, Recommended Media Attachment Format, example 1 Tim Bray, FEP-c118: Content licensing support Pixabay user derekmuller silverpill, FEP-0ea0: Payment Links Helge, Feature: Media Attachments part of fediverse-features Helge, Schemas for the Fediverse Mastodon, Bearcaps Posts Social Media Post by silverpill et al. Relevant parts: Apparently Streams has some mechanism for protecting attachments. Media URLs in non-public posts look like this: https://{domain}/photo/{filename}.jpg?token={token} IIRR at least in Hubzilla that token is just part of OpenWebAuth's \"magic authentication\". Where I guess the token contains info about which instance(s?) to contact in order to verify your identity. The audience is kept in the media server(s) database and sync'ed between clones. \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-1311: Media Attachments"},{"location":"fep/fep-1311/#fep-1311-media-attachments","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-1311: Media Attachments"},{"location":"fep/fep-1311/#summary","text":"Media Attachments are ubiquitous in the Fediverse. My quick investigation into the explore tab on mastodon.social yields that about half the posts contain an image attachment. The mechanism for these is poorly documented. For example, it is not mentioned in ActivityPub . My goal in this FEP is to document current usage, and issue recommendations on how to improve it. These recommendations are based on the support table Recommended Media Attachment Format available at FunFedi.dev . For developers that enjoy making their keyboards smoke, I believe that the above link combined with the content of Testing should be enough to adapt their Fediverse applications. The other parts are meant for people, who which to improve the situation related to media attachments.","title":"Summary"},{"location":"fep/fep-1311/#basic-format","text":"We will discuss our basic suggested format with the following example of an image attachment. { \"type\": \"Image\", \"name\": \"A beautiful cow\", \"url\": \"http://pasture-one-actor/assets/cow.jpg\", \"width\": 100, \"height\": 162, \"mediaType\": \"image/jpeg\", \"digestMultibase\": \"zQmaeDPzhNL32WQZnnzB1H6QJWvvFNEHdViDB71yrxyXU1t\", \"size\": 9045 } There is a lot to say here, first how does this relate to communication in ActivityPub which is done by activity. For this consider the activity (taken from data.funfedi.dev ) given by { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/credentials/v2\", { \"size\": \"https://joinpeertube.org/ns#size\" } ], \"type\": \"Create\", \"actor\": \"http://pasture-one-actor/actor\", \"to\": [ \"http://akkoma/users/witch\", \"https://www.w3.org/ns/activitystreams#Public\" ], \"id\": \"http://pasture-one-actor/actor/S5Szzuugy50\", \"published\": \"2024-12-05T08:18:48Z\", \"object\": { \"type\": \"Note\", \"attributedTo\": \"http://pasture-one-actor/actor\", \"to\": [ \"https://www.w3.org/ns/activitystreams#Public\", \"http://akkoma/users/witch\" ], \"id\": \"http://pasture-one-actor/actor/qDqgbPpNQPw\", \"published\": \"2024-12-05T08:18:48Z\", \"content\": \"Recommended Image Format\", \"attachment\": [ { \"type\": \"Image\", \"name\": \"A beautiful cow\", \"url\": \"http://pasture-one-actor/assets/cow.jpg\", \"width\": 100, \"height\": 162, \"mediaType\": \"image/jpeg\", \"digestMultibase\": \"zQmaeDPzhNL32WQZnnzB1H6QJWvvFNEHdViDB71yrxyXU1t\", \"size\": 9045 } ] } } We note that the media attachment is contained in the array of attachment of the Note object. Furthermore, in difference to the activity and the object, there is no id property nor actor or attributedTo property. This is on purpose, as those are inherited from the object the media attachment is attached to. See Content Licensing for discussion about not having an attributedTo property. In particular, one should emphasize that a media attachment not having an id is useful to signify that it is not useful as an object without the note, it is attached to.","title":"Basic format"},{"location":"fep/fep-1311/#specifying-basic-properties","text":"To use media attachments, an object MUST have an attachment property, whose value is an array containing objects. Furthermore, the contained objects MUST have a type property. For it to be a media attachment the type property MUST be Audio , Image , or Video . However, the attachment property MAY contain other form of attachments, e.g. FEP-0ea0: Payment Links . This can be expressed as the json-schema: { \"$schema\": \"https://json-schema.org/draft/2020-12/schema\", \"type\": \"object\", \"properties\": { \"attachment\": { \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"type\": { \"type\": \"string\", \"examples\": [\"Audio\", \"Image\", \"Video\"] } }, \"required\": [\"type\"] } } }, \"required\": [\"attachment\"] } We now discuss the specific form a media attachment. In addition to type , a media attachment MUST also contain an url property providing the link to the media. The url property MAY also be an array, see Multiple Media Versions . However, this just to be future proof. Furthermore, media attachments SHOULD contain a name property providing an alternative plain text description of the media object. Again this can be represented as a json-schema. { \"$schema\": \"https://json-schema.org/draft/2020-12/schema\", \"type\": \"object\", \"properties\": { \"type\": { \"type\": \"string\", \"enum\": [\"Audio\", \"Image\", \"Video\"] }, \"name\": { \"type\": \"string\", \"examples\": [\"A beautiful cow\"] }, \"url\": { \"type\": [\"string\", \"array\"], \"examples\": [\"http://you.example/image.png\"] } }, \"required\": [\"type\", \"url\"] }","title":"Specifying basic properties"},{"location":"fep/fep-1311/#current-state-of-type","text":"Many current implementations use Document for media attachments. This has the distinct disadvantage to using Audio , Image , or Video that the parser needs to inspect more content than type to discover what type of attachment it is. Let's write a bit of python to determine if something is a media attachment based on mediaType , discussed later. def is_media(attachment:dict) -> bool: media_type = attachment.get(\"mediaType\") if media_type is None: ... # handle error case main_type, _ = media_type.split(\"/\", 1) return main_type in [\"audio\", \"image\", \"video\"] This already is fairly complicated, but there is more. If one allows url to be an array, one needs a different check, so it turns into something like: def is_media(attachment:dict) -> bool: url = attachment.get(\"url\") if isinstance(url, list): return is_media(url[0]) media_type = attachment.get(\"mediaType\") if media_type is None: ... # handle error case main_type, _ = media_type.split(\"/\", 1) return main_type in [\"audio\", \"image\", \"video\"] There are more exceptions and poor configuration to treat, e.g. url could be an empty list, or the implementation could attach mediaType to the full object instead of the Link . The goal of a specification needs to be to simplify the code that needs to be written, so we insist on people using the types Audio , Image , and Video for media attachments.","title":"Current state of type"},{"location":"fep/fep-1311/#properties-of-the-linked-file","text":"In this section, we discuss properties related to the linked file. The linked file is retrieved either by performing a GET request on the value of url or on href of the Link objects if url is an array. Just to mention it, this requirement might change, once Authentication and Authorization is dealt with. Let's look back at our original example of a media attachment { \"type\": \"Image\", \"name\": \"A beautiful cow\", \"url\": \"http://pasture-one-actor/assets/cow.jpg\", \"width\": 100, \"height\": 162, \"mediaType\": \"image/jpeg\", \"digestMultibase\": \"zQmaeDPzhNL32WQZnnzB1H6QJWvvFNEHdViDB71yrxyXU1t\", \"size\": 9045 } Here the linked file is given by a GET on http://pasture-one-actor/assets/cow.jpg and the result would be The properties mediaType , digestMultibase , and size could be valid for any attached file, even a non media one, e.g. a text document. Let's quickly review them. mediaType is defined in the ActivityStreams Vocabulary . It describes the MIME type and tells us important information on how to render the file. digestMultibase is defined here as part of Verifiable Credential Data Integrity . The encoding of a digest in multibase with multihash is somewhat different to the rest of multicodec, because one first has a byte to indicate the format, then another one to indicate the length. This means in particular that all digestMultibase using sha-256 will start with zQm , the z indicating base58 encoding. Checking the digest is important to ensure integrity . As media is often hosted off site using S3, this seems important. For another usage see Content Addressed Storage . Finally size being the file size in bytes is borrowed from PeerTube. The size should tell us if we want to preload the media or not. There is something missing in the file properties: access control , see the section Authentication and Authorization in the open questions below.","title":"Properties of the linked file"},{"location":"fep/fep-1311/#specifying-file-properties","text":"The creator of a media attachment SHOULD include the values of mediaType , digestMultibase , and size . The consumer of a media attachment SHOULD ensure integrity of the downloaded attachment based on digestMultibase , i.e. check the digest. The consumer of a media attachment SHOuLD decide based on size and mediaType the best way to consume the attachment. size and mediaType become more relevant when multiple versions of the media attachment are provided. For example, this could mean that in one feeds one only sees the low quality video by default.","title":"Specifying file properties"},{"location":"fep/fep-1311/#properties-of-an-image","text":"We have now discussed all properties of our example document except for width and height . These properties are only relevant for an image and a video, but not for audio. Similarly, audio and video can have a duration , which images don't. Finally, Mastodon has introduced the additional properties focalPoint blurHash where at least focalPoint is user defined. There are a lot of other properties one can consider for media, e.g. Where was the picture taken? e.g. location What is the frame rate of the video? e.g. fps Provide an album cover for audio? In order to standardize these things further work is needed.","title":"Properties of an image"},{"location":"fep/fep-1311/#multiple-media-versions","text":"As it is currently not supported in the Fediverse, I will just give the basic example how to use multiple attached Links: { \"type\": \"Video\", \"name\": \"A beautiful cow eating\", \"url\": [ { \"type\": \"Link\", \"size\": 54373, \"digest\": \"zQmSzK5qEe5tpjwGMhmjx9RvVoPkWhEmCwxP2s7wPMpKMoK\", \"width\": 256, \"height\": 144, \"href\": \"http://pasture-one-actor/assets/cow_eating.mp4\", \"mediaType\": \"video/mp4\" }, { \"type\": \"Link\", \"size\": 2271723, \"digest\": \"zQme2X4rgWuRdmAtGGMSEbdoeRQ2NAL2VptcdRGTYDZbSKG\", \"width\": 1920, \"height\": 1080, \"href\": \"http://pasture-one-actor/assets/cow_eating_hd.mp4\", \"mediaType\": \"video/mp4\" } ], \"duration\": \"PT3S\" } As the example shows, this is useful to attach both a low quality version (54kb) and a high quality one (2.2MB) of a video. We think that supporting this will open the door for richer applications.","title":"Multiple Media Versions"},{"location":"fep/fep-1311/#testing","text":"By using json-schema, one can validate some level of correctness of generated media attachments. Relevant schemas are available at Fediverse schemas for media attachments. They can be combined into a feature test using Gherkin, see Media Format . If you wish to validate everything, including digest, you can use the examples provided at FunFedi.dev .","title":"Testing"},{"location":"fep/fep-1311/#open-question","text":"This section is essentially a todo list for the community on stuff that should be fixed, but isn't yet.","title":"Open Question"},{"location":"fep/fep-1311/#content-licensing","text":"The picture in the examples was created based on this picture available for free on pixabay by photographer derekmuller . Unfortunately, the current standards to not let me attach this information to my media object. One could now say that this could be solved with just using the attributedTo property. Unfortunately, this has a lot of drawbacks. For example derekmuller is not an ActivityPub actor. Also attributing my cropped low resolution image to him, might be something he does not appreciate. Finally, just attributing this image is probably not enough, one should also inform people on how it is licensed. See FEP-c118 and its discussions for more on the topic.","title":"Content Licensing"},{"location":"fep/fep-1311/#authentication-and-authorization","text":"Currently, image links must be accessible without any form of authorization. This is due while communication between a user and their server requiring authentication and between servers requiring authentication, images are often stored on third party services, e.g. S3, thus adding authentication is hard. For some approaches to resolve this see this Fediverse discussion . One approach to achieve authentication and authorization easily with existing technologies would be Bearcaps . For a different approach see also Binary Fediverse transport .","title":"Authentication and Authorization"},{"location":"fep/fep-1311/#content-addressed-storage","text":"Storing media is costly. It is thus important to avoid duplication. By having a digest for all media through the digestMultibase property, we can use this to index our media storage. This means that before downloading a file, we can check if we already have it.","title":"Content addressed storage"},{"location":"fep/fep-1311/#mixed-media-content","text":"Consider posting a song, e.g. something from the brat summer, then you might want to attach the album cover, e.g. an image featuring the color #8ACE00 . Maybe you will also want to attach some lyrics. This means that your media content contains three parts of separate media type. One might want to extend the schema for media attachments to convey this information.","title":"Mixed media content"},{"location":"fep/fep-1311/#binary-fediverse-transport","text":"A failure of ActivityPub is that it restricts transport to be JSON. ActivityPub thus forces people to use external means, e.g. download the file, to convey media content. One could solve some problems, e.g. Authentication and Authorization , by just allowing transport of binary blobs. This would require an extension of the wire format. Allowing for messages to contain binary blobs would also for sharing media via thick clients.","title":"Binary Fediverse transport"},{"location":"fep/fep-1311/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Helge, FunFedi.dev: Recommended Media Attachment Format Helge / funfedi.dev Interoperability Data for the Fediverse , akkoma v3.13.3, inputs 0.1.11, Recommended Media Attachment Format, example 1 Tim Bray, FEP-c118: Content licensing support Pixabay user derekmuller silverpill, FEP-0ea0: Payment Links Helge, Feature: Media Attachments part of fediverse-features Helge, Schemas for the Fediverse Mastodon, Bearcaps","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-1311/#posts","text":"Social Media Post by silverpill et al. Relevant parts: Apparently Streams has some mechanism for protecting attachments. Media URLs in non-public posts look like this: https://{domain}/photo/{filename}.jpg?token={token} IIRR at least in Hubzilla that token is just part of OpenWebAuth's \"magic authentication\". Where I guess the token contains info about which instance(s?) to contact in order to verify your identity. The audience is kept in the media server(s) database and sync'ed between clones.","title":"Posts"},{"location":"fep/fep-1311/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-171b/","text":"FEP-171b: Conversation Containers Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This document specifies a model for managing conversations in ActivityPub network. It is based on the implementation of Conversation Containers in Streams . In this model conversations are represented as collections controlled by a single actor. Such conversations take place within a specific audience and may be moderated. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Containers A conversation container is implemented as a collection. Every item in that collection is an Add activity where object is another activity (such as Create , Update , Delete , Like , Dislike , EmojiReact or Announce ). The conversation owner distributes Add activities to other participants, thus keeping their views of the conversation synchronized. Container collection Collection type MUST be OrderedCollection . Collection items MUST be in chronological order. Collection MUST have an attributedTo property containing the id of the conversation owner. Collection SHOULD have collectionOf property with value Activity . [!NOTE] The required collection type might be changed to a more descriptive one (such as ConversationContainer ) in a future version of this document. That will allow identification of Add activities belonging to a conversation container by the value of Add.target.type . [!NOTE] In addition to the conversation container collection, implementers MAY provide collection that represents the conversation tree and contains posts. Adding activities to a conversation Conversation owner can add any activity to the conversation. However, if a context property is present on the activity, its value SHOULD be identical to the ID of a conversation container. When activity is added to the conversation, its owner sends an Add activity to the conversation audience (usually defined by a top-level post). Add activities published by the conversation owner MUST have a target property containing a partial object: type : OrderedCollection id : the id of the conversation container. attributedTo : the id of the collection owner. Add activities published by the conversation owner MUST be added to the conversation container collection. [!NOTE] The \"conversation outbox\" model where the target of Add activity is a collection of Add activities is not compatible with ActivityStreams definition of Add activity, according to which Add activity indicates that the actor has added the object to the target . Top-level post The author of a top-level post it not necessarily the conversation owner. When owner is a group, conversations can be started by any of its members. The top-level post MUST have a contextHistory property that refers to the conversation container. The presence of this property indicates that publisher implements conversation containers. [!NOTE] In addtion to contextHistory property, implementers MAY add a context property that refers to a collection of posts. Interactions All activities in a conversation SHOULD only be delivered to the conversation owner. Conversation participants SHOULD reject conversation activities that have not been added to the conversation by its owner. The audience of a reply MUST be copied from a conversation root. Reply with a different audience can be created by starting a new conversation and including a FEP-e232 link to the post instead of specifying it in inReplyTo . Moderation When conversation owner does not want to add activity to a conversation, that activity is ignored and a corresponding Add activity is not published. To remove a previously approved post from a conversation, its owner publishes a Delete activity where object is the post that must be removed. This activity is then wrapped in Add activity and distributed to the conversation audience. [!NOTE] Actor shouldn't be able to delete objects it didn't create. In a future version of this document Delete might be replaced with Remove(target: Thread) . Backfilling Conversation participants can retrieve missing activities by reading the conversation container collection. Authentication When an ActivityPub server receives an Add activity in its inbox, it MUST perform the authentication procedure according to FEP-fe34 : If Add.object is not embedded, fetch it. If location of the fetched activity has the same origin as Add.object , add it to the conversation. If Add.object is embedded, check whether Add.actor and Add.object.actor have the same origin. If origins are equal, add Add.object to the conversation. If origins are different and FEP-8b32 integrity proof is present, verify the proof. If the proof is valid, add Add.object to the conversation. If integrity proof is not present, fetch Add.object by its id . If location of the fetched activity has the same origin as Add.object.id , add fetched activity to the conversation. The processing of unauthenticated embedded activities is strongly discouraged. If such activities are not rejected by the consumer, a malicious conversation owner may be able to perform a cache poisoning attack and overwrite any actor or a post in consumer's local cache by sending a forged Update(Actor) or Update(Object) wrapped in an Add activity. [!WARNING] Sometimes activities have non-dereferenceable identifiers. That may prevent their authentication. \u4f8b Example of an Add activity for a reply to a followers-only post: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\" ], \"type\": \"Add\", \"id\": \"https://alice.example/activities/add/1\", \"actor\": \"https://alice.example/actors/1\", \"object\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\" ], \"type\": \"Create\", \"id\": \"https://bob.example/activities/create/1\", \"actor\": \"https://bob.example/actors/1\", \"context\": \"https://alice.example/contexts/1\", \"object\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\" ], \"type\": \"Note\", \"id\": \"https://bob.example/posts/1\", \"inReplyTo\": \"https://alice.example/posts/1\", \"content\": \"This is a reply\", \"to\": [ \"https://alice.example/actors/1\", \"https://alice.example/actors/1/followers\" ] }, \"to\": [ \"https://alice.example/actors/1\", \"https://alice.example/actors/1/followers\" ] }, \"target\": { \"type\": \"OrderedCollection\", \"id\": \"https://alice.example/contexts/1\", \"attributedTo\": \"https://alice.example/actors/1\" }, \"to\": [ \"https://bob.example/actors/1\", \"https://alice.example/actors/1/followers\" ] } Example of a container of a followers-only conversation: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/171b\" ], \"type\": \"OrderedCollection\", \"id\": \"https://alice.example/contexts/1\", \"attributedTo\": \"https://alice.example/actors/1\", \"collectionOf\": \"Activity\", \"orderedItems\": [ \"https://alice.example/activities/add/1\" ] } Comparison with other proposals FEP-400e : The object of Add is an object, not an activity, and conversation collection contains added objects. Reject(Create) activity is generated for rejected posts. Conversation participants are expected to add a target property to posts. FEP-1b12 : Announce activity is used instead of Add . Conversation and related activities are synchronized between participants, but conversation backfilling mechanism is not specified. GoToSocial Interaction Policy : conversation is managed separately for each post (in a conversation container the owner has authority over the entire thread). Accept or Reject activity is generated for every interaction (in a conversation container Add activity is generated when activity is approved, and rejected activities are ignored). Conversation is not synchronized between participants, but can be backfilled by recursively fetching replies collections. \u5b9f\u88c5 Streams Hubzilla \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Mike Macgirvin, Containers , 2024 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 Gregory Klyushnikov, FEP-400e: Publicly-appendable ActivityPub collections , 2021 silverpill, FEP-e232: Object Links , 2022 silverpill, FEP-fe34: Origin-based security model , 2024 silverpill, FEP-8b32: Object Integrity Proofs , 2022 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-171b: Conversation Containers"},{"location":"fep/fep-171b/#fep-171b-conversation-containers","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-171b: Conversation Containers"},{"location":"fep/fep-171b/#summary","text":"This document specifies a model for managing conversations in ActivityPub network. It is based on the implementation of Conversation Containers in Streams . In this model conversations are represented as collections controlled by a single actor. Such conversations take place within a specific audience and may be moderated.","title":"Summary"},{"location":"fep/fep-171b/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-171b/#containers","text":"A conversation container is implemented as a collection. Every item in that collection is an Add activity where object is another activity (such as Create , Update , Delete , Like , Dislike , EmojiReact or Announce ). The conversation owner distributes Add activities to other participants, thus keeping their views of the conversation synchronized.","title":"Containers"},{"location":"fep/fep-171b/#container-collection","text":"Collection type MUST be OrderedCollection . Collection items MUST be in chronological order. Collection MUST have an attributedTo property containing the id of the conversation owner. Collection SHOULD have collectionOf property with value Activity . [!NOTE] The required collection type might be changed to a more descriptive one (such as ConversationContainer ) in a future version of this document. That will allow identification of Add activities belonging to a conversation container by the value of Add.target.type . [!NOTE] In addition to the conversation container collection, implementers MAY provide collection that represents the conversation tree and contains posts.","title":"Container collection"},{"location":"fep/fep-171b/#adding-activities-to-a-conversation","text":"Conversation owner can add any activity to the conversation. However, if a context property is present on the activity, its value SHOULD be identical to the ID of a conversation container. When activity is added to the conversation, its owner sends an Add activity to the conversation audience (usually defined by a top-level post). Add activities published by the conversation owner MUST have a target property containing a partial object: type : OrderedCollection id : the id of the conversation container. attributedTo : the id of the collection owner. Add activities published by the conversation owner MUST be added to the conversation container collection. [!NOTE] The \"conversation outbox\" model where the target of Add activity is a collection of Add activities is not compatible with ActivityStreams definition of Add activity, according to which Add activity indicates that the actor has added the object to the target .","title":"Adding activities to a conversation"},{"location":"fep/fep-171b/#top-level-post","text":"The author of a top-level post it not necessarily the conversation owner. When owner is a group, conversations can be started by any of its members. The top-level post MUST have a contextHistory property that refers to the conversation container. The presence of this property indicates that publisher implements conversation containers. [!NOTE] In addtion to contextHistory property, implementers MAY add a context property that refers to a collection of posts.","title":"Top-level post"},{"location":"fep/fep-171b/#interactions","text":"All activities in a conversation SHOULD only be delivered to the conversation owner. Conversation participants SHOULD reject conversation activities that have not been added to the conversation by its owner. The audience of a reply MUST be copied from a conversation root. Reply with a different audience can be created by starting a new conversation and including a FEP-e232 link to the post instead of specifying it in inReplyTo .","title":"Interactions"},{"location":"fep/fep-171b/#moderation","text":"When conversation owner does not want to add activity to a conversation, that activity is ignored and a corresponding Add activity is not published. To remove a previously approved post from a conversation, its owner publishes a Delete activity where object is the post that must be removed. This activity is then wrapped in Add activity and distributed to the conversation audience. [!NOTE] Actor shouldn't be able to delete objects it didn't create. In a future version of this document Delete might be replaced with Remove(target: Thread) .","title":"Moderation"},{"location":"fep/fep-171b/#backfilling","text":"Conversation participants can retrieve missing activities by reading the conversation container collection.","title":"Backfilling"},{"location":"fep/fep-171b/#authentication","text":"When an ActivityPub server receives an Add activity in its inbox, it MUST perform the authentication procedure according to FEP-fe34 : If Add.object is not embedded, fetch it. If location of the fetched activity has the same origin as Add.object , add it to the conversation. If Add.object is embedded, check whether Add.actor and Add.object.actor have the same origin. If origins are equal, add Add.object to the conversation. If origins are different and FEP-8b32 integrity proof is present, verify the proof. If the proof is valid, add Add.object to the conversation. If integrity proof is not present, fetch Add.object by its id . If location of the fetched activity has the same origin as Add.object.id , add fetched activity to the conversation. The processing of unauthenticated embedded activities is strongly discouraged. If such activities are not rejected by the consumer, a malicious conversation owner may be able to perform a cache poisoning attack and overwrite any actor or a post in consumer's local cache by sending a forged Update(Actor) or Update(Object) wrapped in an Add activity. [!WARNING] Sometimes activities have non-dereferenceable identifiers. That may prevent their authentication.","title":"Authentication"},{"location":"fep/fep-171b/#_1","text":"Example of an Add activity for a reply to a followers-only post: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\" ], \"type\": \"Add\", \"id\": \"https://alice.example/activities/add/1\", \"actor\": \"https://alice.example/actors/1\", \"object\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\" ], \"type\": \"Create\", \"id\": \"https://bob.example/activities/create/1\", \"actor\": \"https://bob.example/actors/1\", \"context\": \"https://alice.example/contexts/1\", \"object\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\" ], \"type\": \"Note\", \"id\": \"https://bob.example/posts/1\", \"inReplyTo\": \"https://alice.example/posts/1\", \"content\": \"This is a reply\", \"to\": [ \"https://alice.example/actors/1\", \"https://alice.example/actors/1/followers\" ] }, \"to\": [ \"https://alice.example/actors/1\", \"https://alice.example/actors/1/followers\" ] }, \"target\": { \"type\": \"OrderedCollection\", \"id\": \"https://alice.example/contexts/1\", \"attributedTo\": \"https://alice.example/actors/1\" }, \"to\": [ \"https://bob.example/actors/1\", \"https://alice.example/actors/1/followers\" ] } Example of a container of a followers-only conversation: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/171b\" ], \"type\": \"OrderedCollection\", \"id\": \"https://alice.example/contexts/1\", \"attributedTo\": \"https://alice.example/actors/1\", \"collectionOf\": \"Activity\", \"orderedItems\": [ \"https://alice.example/activities/add/1\" ] }","title":"\u4f8b"},{"location":"fep/fep-171b/#comparison-with-other-proposals","text":"FEP-400e : The object of Add is an object, not an activity, and conversation collection contains added objects. Reject(Create) activity is generated for rejected posts. Conversation participants are expected to add a target property to posts. FEP-1b12 : Announce activity is used instead of Add . Conversation and related activities are synchronized between participants, but conversation backfilling mechanism is not specified. GoToSocial Interaction Policy : conversation is managed separately for each post (in a conversation container the owner has authority over the entire thread). Accept or Reject activity is generated for every interaction (in a conversation container Add activity is generated when activity is approved, and rejected activities are ignored). Conversation is not synchronized between participants, but can be backfilled by recursively fetching replies collections.","title":"Comparison with other proposals"},{"location":"fep/fep-171b/#_2","text":"Streams Hubzilla","title":"\u5b9f\u88c5"},{"location":"fep/fep-171b/#_3","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Mike Macgirvin, Containers , 2024 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 Gregory Klyushnikov, FEP-400e: Publicly-appendable ActivityPub collections , 2021 silverpill, FEP-e232: Object Links , 2022 silverpill, FEP-fe34: Origin-based security model , 2024 silverpill, FEP-8b32: Object Integrity Proofs , 2022","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-171b/#_4","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-1970/","text":"FEP-1970: Chat Links Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP describes a way to attach a chat room to ActivityPub actors and objects. The chat room itself can be a web page, a XMPP room, a Matrix room, an IRC channel, ... The chat itself does not necessarily publish messages using ActivityPub. Chat links Chat link is an object with the following properties: type (REQUIRED): the type MUST be Link . name (RECOMMENDED): the name property SHOULD contain a human-readable description of the chat link. href (REQUIRED): the href property MUST contain a chat URI. This can be an URL of a website, or any other kind of URI , such as a XMPP uri . rel (REQUIRED): the rel property MUST contain the string discussion or an array containing that string. The discussion relation type is proposed as a HTML5 link type extensions . Chat links MUST be added to the attachment array of an actor or an object. \u4f8b Basic object attachment { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.tld/video/123\", \"attributedTo\": \"https://example.tld/users/alice\", \"name\": \"Let's go live!\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] } Basic actor attachment { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Person\", \"id\": \"https://example.tld/users/alice\", \"inbox\": \"https://example.tld/users/alice/inbox\", \"outbox\": \"https://example.tld/users/alice/outbox\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] } Multiple way to join the chat In the following example, the chat room can be joined using a web browser or a xmpp client: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Video\", \"id\": \"https://example.tld/video/123\", \"attributedTo\": \"https://example.tld/users/alice\", \"name\": \"Let's go live!\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" }, { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"xmpp://123@room.example.tld?join\", \"rel\": \"discussion\" } ] } Live video stream For a live stream, represented by a Video object, the chat link could link to the room where viewers can interract with the streamer. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Video\", \"id\": \"https://example.tld/video/123\", \"attributedTo\": \"https://example.tld/users/alice\", \"name\": \"Let's go live!\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] } If the chat room is unique per streamer (and common to all the streamer videos), it can be attached to both the Video and the Person object. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Person\", \"id\": \"https://example.tld/users/alice\", \"following\": \"https://example.tld/users/alice/following\", \"followers\": \"https://example.tld/users/alice/followers\", \"name\": \"Alice\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Video\", \"id\": \"https://example.tld/video/123\", \"attributedTo\": \"https://example.tld/users/alice\", \"name\": \"Let's go live!\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] } If the chat room is unique to a streamer's channel, it can be linked to both the Video and the Group object. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Group\", \"id\": \"https://example.tld/channel/alice\", \"following\": \"https://example.tld/users/alice/following\", \"followers\": \"https://example.tld/users/alice/followers\", \"name\": \"Alice channel\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Video\", \"id\": \"https://example.tld/video/123\", \"attributedTo\": \"https://example.tld/users/alice\", \"name\": \"Let's go live!\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] } Document discussion Some file sharing sofwares allows to have a discussion room attached to files. In such case, the chat links can be added as attachment to Document objects. Person instant messaging If a user has instant messaging applications, chat links could be added to its Person object, so that we can join him. If the user has multiple instant messaging accounts (XMPP, Matrix, ...), each on of them can be added, and differenciated by the URI scheme. \u5b9f\u88c5 At the time of the writing, this FEP is been implemented in the Peertube livechat plugin , a chat plugin for Peertube . \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Microformats existing rel values] Microformats existing rel values , referenced by the HTML Living Standard . \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-1970: Chat Links"},{"location":"fep/fep-1970/#fep-1970-chat-links","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-1970: Chat Links"},{"location":"fep/fep-1970/#summary","text":"This FEP describes a way to attach a chat room to ActivityPub actors and objects. The chat room itself can be a web page, a XMPP room, a Matrix room, an IRC channel, ... The chat itself does not necessarily publish messages using ActivityPub.","title":"Summary"},{"location":"fep/fep-1970/#chat-links","text":"Chat link is an object with the following properties: type (REQUIRED): the type MUST be Link . name (RECOMMENDED): the name property SHOULD contain a human-readable description of the chat link. href (REQUIRED): the href property MUST contain a chat URI. This can be an URL of a website, or any other kind of URI , such as a XMPP uri . rel (REQUIRED): the rel property MUST contain the string discussion or an array containing that string. The discussion relation type is proposed as a HTML5 link type extensions . Chat links MUST be added to the attachment array of an actor or an object.","title":"Chat links"},{"location":"fep/fep-1970/#_1","text":"","title":"\u4f8b"},{"location":"fep/fep-1970/#basic-object-attachment","text":"{ \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.tld/video/123\", \"attributedTo\": \"https://example.tld/users/alice\", \"name\": \"Let's go live!\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] }","title":"Basic object attachment"},{"location":"fep/fep-1970/#basic-actor-attachment","text":"{ \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Person\", \"id\": \"https://example.tld/users/alice\", \"inbox\": \"https://example.tld/users/alice/inbox\", \"outbox\": \"https://example.tld/users/alice/outbox\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] }","title":"Basic actor attachment"},{"location":"fep/fep-1970/#multiple-way-to-join-the-chat","text":"In the following example, the chat room can be joined using a web browser or a xmpp client: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Video\", \"id\": \"https://example.tld/video/123\", \"attributedTo\": \"https://example.tld/users/alice\", \"name\": \"Let's go live!\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" }, { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"xmpp://123@room.example.tld?join\", \"rel\": \"discussion\" } ] }","title":"Multiple way to join the chat"},{"location":"fep/fep-1970/#live-video-stream","text":"For a live stream, represented by a Video object, the chat link could link to the room where viewers can interract with the streamer. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Video\", \"id\": \"https://example.tld/video/123\", \"attributedTo\": \"https://example.tld/users/alice\", \"name\": \"Let's go live!\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] } If the chat room is unique per streamer (and common to all the streamer videos), it can be attached to both the Video and the Person object. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Person\", \"id\": \"https://example.tld/users/alice\", \"following\": \"https://example.tld/users/alice/following\", \"followers\": \"https://example.tld/users/alice/followers\", \"name\": \"Alice\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Video\", \"id\": \"https://example.tld/video/123\", \"attributedTo\": \"https://example.tld/users/alice\", \"name\": \"Let's go live!\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] } If the chat room is unique to a streamer's channel, it can be linked to both the Video and the Group object. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Group\", \"id\": \"https://example.tld/channel/alice\", \"following\": \"https://example.tld/users/alice/following\", \"followers\": \"https://example.tld/users/alice/followers\", \"name\": \"Alice channel\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Video\", \"id\": \"https://example.tld/video/123\", \"attributedTo\": \"https://example.tld/users/alice\", \"name\": \"Let's go live!\", \"attachment\": [ { \"type\": \"Link\", \"name\": \"Chat\", \"href\": \"https://example.tld/chat/room/123\", \"rel\": \"discussion\" } ] }","title":"Live video stream"},{"location":"fep/fep-1970/#document-discussion","text":"Some file sharing sofwares allows to have a discussion room attached to files. In such case, the chat links can be added as attachment to Document objects.","title":"Document discussion"},{"location":"fep/fep-1970/#person-instant-messaging","text":"If a user has instant messaging applications, chat links could be added to its Person object, so that we can join him. If the user has multiple instant messaging accounts (XMPP, Matrix, ...), each on of them can be added, and differenciated by the URI scheme.","title":"Person instant messaging"},{"location":"fep/fep-1970/#_2","text":"At the time of the writing, this FEP is been implemented in the Peertube livechat plugin , a chat plugin for Peertube .","title":"\u5b9f\u88c5"},{"location":"fep/fep-1970/#_3","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Microformats existing rel values] Microformats existing rel values , referenced by the HTML Living Standard .","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-1970/#_4","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-1985/","text":"FEP-1985: Signaling how an OrderedCollection is ordered Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary OrderedCollection is defined as an ordered set in the Activity Vocabulary , but the precise ordering is not defined. The ActivityPub specification requires that instances of OrderedCollection MUST be ordered reverse chronologically by insertion order, but a later errata was proposed to relax this restriction by only applying it to properties defined as OrderedCollection within the ActivityPub specification. Consequently, this allows for some collections to be presented forward chronologically by insertion order, and some collections to be presented reverse chronologically by insertion order. This FEP introduces an orderType property and two vocabulary terms ForwardChronological and ReverseChronological to explicitly signal the ordering of a collection. Terms defined orderType URI https://w3id.org/fep/1985/orderType Label is ordered in Comment Indicates the type of ordering for an OrderedCollection. Domain OrderedCollection Range OrderingClass (@vocab) Required No Functional Yes See also ForwardChronological | ReverseChronological Is defined by FEP-1985 { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/1985\" ], \"id\": \"https://domain.example/some-collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/objects/1\", \"https://domain.example/objects/2\", \"https://domain.example/objects/3\" ], \"orderType\": \"ForwardChronological\" } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/objects/1\", \"https://domain.example/objects/2\", \"https://domain.example/objects/3\" ], \"https://w3id.org/fep/1985/orderType\": { \"id\": \"https://w3id.org/fep/1985/ForwardChronological\" } } OrderingClass URI https://w3id.org/fep/1985/OrderingClass Label OrderingClass Comment Abstract base class for the orderType property's range. See also ForwardChronological | ReverseChronological Is defined by FEP-1985 ForwardChronological URI https://w3id.org/fep/1985/ForwardChronological Label forward chronological order Comment This OrderedCollection is ordered forward chronologically, and adding an item to this collection will add it at the end. Subclass of OrderingClass See also orderType Is defined by FEP-1985 ReverseChronological URI https://w3id.org/fep/1985/ReverseChronological Label reverse chronological order Comment This OrderedCollection is ordered reverse chronologically, and adding an item to this collection will add it at the start. Subclass of OrderingClass See also orderType Is defined by FEP-1985 \u4f8b (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Example of a forward chronological OrderedCollection with additional context: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/1985\" ], \"id\": \"https://domain.example/some-collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/objects/1\", \"https://domain.example/objects/2\", \"https://domain.example/objects/3\" ], \"orderType\": \"ForwardChronological\" } Example of a forward chronological OrderedCollection without additional context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/objects/1\", \"https://domain.example/objects/2\", \"https://domain.example/objects/3\" ], \"https://w3id.org/fep/1985/orderType\": { \"id\": \"https://w3id.org/fep/1985/ForwardChronological\" } } Example of a reverse chronological OrderedCollection with additional context: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/1985\" ], \"id\": \"https://domain.example/some-collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/objects/3\", \"https://domain.example/objects/2\", \"https://domain.example/objects/1\" ], \"orderType\": \"ReverseChronological\" } Example of a reverse chronological OrderedCollection without additional context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/objects/3\", \"https://domain.example/objects/2\", \"https://domain.example/objects/1\" ], \"https://w3id.org/fep/1985/orderType\": { \"id\": \"https://w3id.org/fep/1985/ReverseChronological\" } } \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 W3C Wiki contributors, ActivityPub errata , 2024 a, Evolving OrderedCollection to be more useful , 2020 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-1985: Signaling how an OrderedCollection is ordered"},{"location":"fep/fep-1985/#fep-1985-signaling-how-an-orderedcollection-is-ordered","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-1985: Signaling how an OrderedCollection is ordered"},{"location":"fep/fep-1985/#summary","text":"OrderedCollection is defined as an ordered set in the Activity Vocabulary , but the precise ordering is not defined. The ActivityPub specification requires that instances of OrderedCollection MUST be ordered reverse chronologically by insertion order, but a later errata was proposed to relax this restriction by only applying it to properties defined as OrderedCollection within the ActivityPub specification. Consequently, this allows for some collections to be presented forward chronologically by insertion order, and some collections to be presented reverse chronologically by insertion order. This FEP introduces an orderType property and two vocabulary terms ForwardChronological and ReverseChronological to explicitly signal the ordering of a collection.","title":"Summary"},{"location":"fep/fep-1985/#terms-defined","text":"","title":"Terms defined"},{"location":"fep/fep-1985/#_1","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Example of a forward chronological OrderedCollection with additional context: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/1985\" ], \"id\": \"https://domain.example/some-collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/objects/1\", \"https://domain.example/objects/2\", \"https://domain.example/objects/3\" ], \"orderType\": \"ForwardChronological\" } Example of a forward chronological OrderedCollection without additional context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/objects/1\", \"https://domain.example/objects/2\", \"https://domain.example/objects/3\" ], \"https://w3id.org/fep/1985/orderType\": { \"id\": \"https://w3id.org/fep/1985/ForwardChronological\" } } Example of a reverse chronological OrderedCollection with additional context: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/1985\" ], \"id\": \"https://domain.example/some-collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/objects/3\", \"https://domain.example/objects/2\", \"https://domain.example/objects/1\" ], \"orderType\": \"ReverseChronological\" } Example of a reverse chronological OrderedCollection without additional context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/objects/3\", \"https://domain.example/objects/2\", \"https://domain.example/objects/1\" ], \"https://w3id.org/fep/1985/orderType\": { \"id\": \"https://w3id.org/fep/1985/ReverseChronological\" } }","title":"\u4f8b"},{"location":"fep/fep-1985/#_2","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 W3C Wiki contributors, ActivityPub errata , 2024 a, Evolving OrderedCollection to be more useful , 2020","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-1985/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-1b12/","text":"FEP-1b12: Group federation Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Internet forums are one of the oldest forms of social media. This document describes how they are implemented in existing Activitypub platforms using Group actors. It also introduces a new property to indicate that a given object belongs to a group. History Friendica released federated forums in version 2019.03 . Lemmy published the first public beta of federated groups in v0.8.0 (October 2020) . [FEP-400e] introduces publicly appendable collections, which can also be used to implement forums. However they are incompatible with the implementations described here. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in [RFC-2119]. Group actor A federated forum is represented by a Group actor as specified in [Activity Vocabulary]. This actor is not directly controlled by a human, but can perform its main functionality in a fully automated way, essentially acting as a bot. It has the same general properties as any Person actor. Following a Group Public groups SHOULD support a standard Follow - Accept workflow. This ensures compatibility with existing implementations which support Person following using the same vocabulary. After receiving a valid Follow activity, the group SHOULD automatically respond with an Accept/Follow , and add the sender to its followers collection. Correspondingly actors can unfollow a group by sending an Undo/Follow activity. Audience property In order to render content in a forum, it is necessary to know which particular forum the content belongs to. This way users can navigate up from a thread to the forum's main page, or view metadata like the description or moderators. With current implementations there is no easy way to determine which forum a given activity or object belongs to, if any. Currently there are different approaches to specify which group a given object or activity belongs to. Lemmy, Friendica and lotide put the group ID in the to field. Peertube uses attributedTo . Both properties have the problem that they are also used for different purposes by some platforms, and are represented as arrays. So to retrieve the group from a received object, an implementation needs to loop through these properties and resolve each URL, until it hits one which resolves to a Group . Clearly this is very inefficient. To simplify this process, we propose to specify the group identifier in the audience property. This property is part of Activitystreams, but not yet used in the wild. This way no extension is necessary, and neither will it cause problems for existing implementations. Additionally, platforms can continue to federate the group identifier in the existing format for backwards compatibility. Threads and comments Each Group actor represents a single forum. Forums contain many user-submitted threads, which can be represented by different objects depending on the implementation. Thread objects SHOULD have a name property which represents the thread title. Example thread: { \"type\": \"Page\", \"id\": \"https://sally.example.org/p/1\", \"attributedTo\": \"https://sally.example.org\", \"name\": \"Hello forum!\", \"audience\": \"https://example.org/my-forum\" } Threads can have replies, which are usually represented as Note s. They MUST have a property inReplyTo referencing either the thread they belong to, or the parent reply in case of nested replies. Example reply: { \"type\": \"Note\", \"id\": \"https://sally.example.org/p/3\", \"attributedTo\": \"https://sally.example.org\", \"inReplyTo\": \"https://sally.example.org/p/1\", \"content\": \"My first comment\", \"audience\": \"https://example.org/my-forum\" } The properties inReplyTo and audience can be used to navigate up from a reply to a thread and forum. To navigate down from a group to threads and comments, groups MAY have a replies collection which contains all threads. Each thread MAY again have a replies collection which lists all top-level comments responding to the thread. The Announce activity The main task of a group is to distribute content among its followers. When a group receives a activity in its inbox, it SHOULD perform some automatic validation, such as checking for domain and user blocks. Groups MAY require additional validation, such as accepting content only from followers, or even manual approval from group moderators. In case an activity fails these checks, the group MAY respond to the sender with a Reject activity. In case the incoming activity is deemed valid, the group MUST wrap it in an Announce activity, with the original activity as object. The wrapped activity MUST be preserved exactly as it was received, without changing or removing any properties. This ensures that forwarded activities can be verified with [Object Integrity Proofs]. Announce activities SHOULD get added to the group outbox. If the group exposes collections of threads and comments, relevant items should also be added to them. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Announce\", \"actor\": \"https://example.org/my-forum\", \"id\": \"example.org/a/5\", \"object\": { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Create\", \"id\": \"https://sally.example.org/a/2\" \"actor\": \"https://sally.example.org\", \"audience\": \"https://example.org/my-forum\", \"object\": { \"type\": \"Page\", \"id\": \"https://sally.example.org/p/1\", \"content\": \"Hello forum!\", \"audience\": \"https://example.org/my-forum\" } } } After the group successfully verifies and wraps the received activity, it sends it to the inboxes of its followers. Followers then use the outer Announce activity to verify that the content was really approved by the group. After this step the Announce can be discarded and only the inner activity shown to users. This mechanism can be used to publish any possible activity type. Examples include Announce/Like , Announce/Delete/Note or Announce/Undo/Like . Implementations may choose not to forward some activity types which are considered private, for example Follow activities. Group moderation Group moderators are those actors who control the group, are able to change its metadata and remove malicious content. They are listed in the group\u2019s attributedTo collection. Moderation is an optional feature, implementations can safely ignore this entire section. At the moment it is only implemented by Lemmy. { \"id\": \"https://example.org/my-forum\", \"type\": \"Group\", \"name\": \"Ten Forward\", \"attributedTo\": \"https://example.org/my-forum/moderators\", } { \"type\": \"OrderedCollection\", \"id\": \"https://example.org/my-forum/moderators\", \"orderedItems\": [ \"https://example.org/picard\", \"https://example.org/riker\" ] } Group moderators can be changed with Add and Remove activities: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Announce\", \"actor\": \"https://example.org/my-forum\", \"id\": \"example.org/a/8\", \"object\": { \"id\": \"https://example.org/a/7\", \"type\": \"Add\", \"actor\": \"https://example.org/picard\", \"object\": \"http://example.org/data\", \"audience\": \"https://example.org/my-forum\", \"target\": \"https://example.org/my-forum/moderators\" } } The actions which can be done by moderators are called moderation activities. These are implementation specific, examples include Add , Remove (to change the moderators collection), Block (ban malicious users) and Update/Group (change group metadata). If an group or group follower supports moderation, it MUST validate incoming moderation activities before further processing. Such activities MUST have an actor who is listed in attributedTo . Group followers MUST additionally verify that the moderation activity was announced by the group. Implementations SHOULD also accept moderation activities which come from the same server where the community is hosted, under the assumption that these are sent by server administrators. These moderation activities also need to be wrapped in Announce by the group. \u5b9f\u88c5 This document is written based on existing group implementations in Lemmy, Friendica, Hubzilla, Lotide and Peertube. These already federate successfully in production. The audience field is an exception as it is not in use yet. Lemmy will add support for it in version 0.17.0. \u53c2\u8003\u6587\u732e [FEP-400e] Gregory Klyushnikov, FEP-400e: Publicly-appendable ActivityPub collections [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels [Activity Vocabulary], James M Snell, Evan Prodromou, Activity Vocabulary [Object Integrity Proofs] silverpill, FEP-8b32: Object Integrity Proofs \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-1b12: Group federation"},{"location":"fep/fep-1b12/#fep-1b12-group-federation","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-1b12: Group federation"},{"location":"fep/fep-1b12/#summary","text":"Internet forums are one of the oldest forms of social media. This document describes how they are implemented in existing Activitypub platforms using Group actors. It also introduces a new property to indicate that a given object belongs to a group.","title":"Summary"},{"location":"fep/fep-1b12/#history","text":"Friendica released federated forums in version 2019.03 . Lemmy published the first public beta of federated groups in v0.8.0 (October 2020) . [FEP-400e] introduces publicly appendable collections, which can also be used to implement forums. However they are incompatible with the implementations described here.","title":"History"},{"location":"fep/fep-1b12/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in [RFC-2119].","title":"Requirements"},{"location":"fep/fep-1b12/#group-actor","text":"A federated forum is represented by a Group actor as specified in [Activity Vocabulary]. This actor is not directly controlled by a human, but can perform its main functionality in a fully automated way, essentially acting as a bot. It has the same general properties as any Person actor.","title":"Group actor"},{"location":"fep/fep-1b12/#following-a-group","text":"Public groups SHOULD support a standard Follow - Accept workflow. This ensures compatibility with existing implementations which support Person following using the same vocabulary. After receiving a valid Follow activity, the group SHOULD automatically respond with an Accept/Follow , and add the sender to its followers collection. Correspondingly actors can unfollow a group by sending an Undo/Follow activity.","title":"Following a Group"},{"location":"fep/fep-1b12/#audience-property","text":"In order to render content in a forum, it is necessary to know which particular forum the content belongs to. This way users can navigate up from a thread to the forum's main page, or view metadata like the description or moderators. With current implementations there is no easy way to determine which forum a given activity or object belongs to, if any. Currently there are different approaches to specify which group a given object or activity belongs to. Lemmy, Friendica and lotide put the group ID in the to field. Peertube uses attributedTo . Both properties have the problem that they are also used for different purposes by some platforms, and are represented as arrays. So to retrieve the group from a received object, an implementation needs to loop through these properties and resolve each URL, until it hits one which resolves to a Group . Clearly this is very inefficient. To simplify this process, we propose to specify the group identifier in the audience property. This property is part of Activitystreams, but not yet used in the wild. This way no extension is necessary, and neither will it cause problems for existing implementations. Additionally, platforms can continue to federate the group identifier in the existing format for backwards compatibility.","title":"Audience property"},{"location":"fep/fep-1b12/#threads-and-comments","text":"Each Group actor represents a single forum. Forums contain many user-submitted threads, which can be represented by different objects depending on the implementation. Thread objects SHOULD have a name property which represents the thread title. Example thread: { \"type\": \"Page\", \"id\": \"https://sally.example.org/p/1\", \"attributedTo\": \"https://sally.example.org\", \"name\": \"Hello forum!\", \"audience\": \"https://example.org/my-forum\" } Threads can have replies, which are usually represented as Note s. They MUST have a property inReplyTo referencing either the thread they belong to, or the parent reply in case of nested replies. Example reply: { \"type\": \"Note\", \"id\": \"https://sally.example.org/p/3\", \"attributedTo\": \"https://sally.example.org\", \"inReplyTo\": \"https://sally.example.org/p/1\", \"content\": \"My first comment\", \"audience\": \"https://example.org/my-forum\" } The properties inReplyTo and audience can be used to navigate up from a reply to a thread and forum. To navigate down from a group to threads and comments, groups MAY have a replies collection which contains all threads. Each thread MAY again have a replies collection which lists all top-level comments responding to the thread.","title":"Threads and comments"},{"location":"fep/fep-1b12/#the-announce-activity","text":"The main task of a group is to distribute content among its followers. When a group receives a activity in its inbox, it SHOULD perform some automatic validation, such as checking for domain and user blocks. Groups MAY require additional validation, such as accepting content only from followers, or even manual approval from group moderators. In case an activity fails these checks, the group MAY respond to the sender with a Reject activity. In case the incoming activity is deemed valid, the group MUST wrap it in an Announce activity, with the original activity as object. The wrapped activity MUST be preserved exactly as it was received, without changing or removing any properties. This ensures that forwarded activities can be verified with [Object Integrity Proofs]. Announce activities SHOULD get added to the group outbox. If the group exposes collections of threads and comments, relevant items should also be added to them. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Announce\", \"actor\": \"https://example.org/my-forum\", \"id\": \"example.org/a/5\", \"object\": { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Create\", \"id\": \"https://sally.example.org/a/2\" \"actor\": \"https://sally.example.org\", \"audience\": \"https://example.org/my-forum\", \"object\": { \"type\": \"Page\", \"id\": \"https://sally.example.org/p/1\", \"content\": \"Hello forum!\", \"audience\": \"https://example.org/my-forum\" } } } After the group successfully verifies and wraps the received activity, it sends it to the inboxes of its followers. Followers then use the outer Announce activity to verify that the content was really approved by the group. After this step the Announce can be discarded and only the inner activity shown to users. This mechanism can be used to publish any possible activity type. Examples include Announce/Like , Announce/Delete/Note or Announce/Undo/Like . Implementations may choose not to forward some activity types which are considered private, for example Follow activities.","title":"The Announce activity"},{"location":"fep/fep-1b12/#group-moderation","text":"Group moderators are those actors who control the group, are able to change its metadata and remove malicious content. They are listed in the group\u2019s attributedTo collection. Moderation is an optional feature, implementations can safely ignore this entire section. At the moment it is only implemented by Lemmy. { \"id\": \"https://example.org/my-forum\", \"type\": \"Group\", \"name\": \"Ten Forward\", \"attributedTo\": \"https://example.org/my-forum/moderators\", } { \"type\": \"OrderedCollection\", \"id\": \"https://example.org/my-forum/moderators\", \"orderedItems\": [ \"https://example.org/picard\", \"https://example.org/riker\" ] } Group moderators can be changed with Add and Remove activities: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Announce\", \"actor\": \"https://example.org/my-forum\", \"id\": \"example.org/a/8\", \"object\": { \"id\": \"https://example.org/a/7\", \"type\": \"Add\", \"actor\": \"https://example.org/picard\", \"object\": \"http://example.org/data\", \"audience\": \"https://example.org/my-forum\", \"target\": \"https://example.org/my-forum/moderators\" } } The actions which can be done by moderators are called moderation activities. These are implementation specific, examples include Add , Remove (to change the moderators collection), Block (ban malicious users) and Update/Group (change group metadata). If an group or group follower supports moderation, it MUST validate incoming moderation activities before further processing. Such activities MUST have an actor who is listed in attributedTo . Group followers MUST additionally verify that the moderation activity was announced by the group. Implementations SHOULD also accept moderation activities which come from the same server where the community is hosted, under the assumption that these are sent by server administrators. These moderation activities also need to be wrapped in Announce by the group.","title":"Group moderation"},{"location":"fep/fep-1b12/#_1","text":"This document is written based on existing group implementations in Lemmy, Friendica, Hubzilla, Lotide and Peertube. These already federate successfully in production. The audience field is an exception as it is not in use yet. Lemmy will add support for it in version 0.17.0.","title":"\u5b9f\u88c5"},{"location":"fep/fep-1b12/#_2","text":"[FEP-400e] Gregory Klyushnikov, FEP-400e: Publicly-appendable ActivityPub collections [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels [Activity Vocabulary], James M Snell, Evan Prodromou, Activity Vocabulary [Object Integrity Proofs] silverpill, FEP-8b32: Object Integrity Proofs","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-1b12/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-2100/","text":"FEP-2100: Unbound Group and Organization Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 This FEP wasn't a result of my individual work but rather of the joint effort in this SocialHub discussion and, prior to that, the discussion in GNU social's IRC/XMPP with rozzin (Joshua Judson Rosen) and someonewithpc (Hugo Sales). Summary Historically, after the sudden death of a popular instance, one could neither target groups hosted at it anymore nor contact the whole followers collection to let them know of the new instance housing a certain group. If we always have absolute knowledge of the complete followers collection (or good enough), we can automate based on which instance has more local followers which server would become the new house. Another alternative would be to automatically archive the old group and start again from scratch. This FEP, on the other hand, discusses something very different of automatically moving an actor from one server to a different one. It is about collaboration between different group or organization actors to promote an unified experience between the participants of the linked group actors. We think this may be easier, more flexible, and promote a better UX than only notifying the actor that the house of a certain group has moved, but both solutions would probably achieve similar results in the above use case. This proposal introduces an interpretation of a Group following another Group and the gs:unbound attribute. This allow two groups (or organization) to \"act as one\" (not exactly, but elaborated afterwards). This primarily aims at effectively removing a central point of authority for groups, but offers more than that. With this, @alice@undefinedhackers.net can mention a group named hackers (!hackers) or even address an activity To !hackers@instance.gnusocial.test (C2S) and let her instance's !hackers announce to other instances' !hackers. Finally, this proposal is general enough to allow a server to simultaneously have !lug@server (without links), !lug-unbound@server (with the greatest links collection it can grow), and !lug-with-some-links@server (with only some links). It doesn't require linked groups to have the same preferredUsername . Notation and Definitions To keep things simple, sometimes you will see things formatted like Activity{Object} . For example, Create{Note} would be a Create activity containing a Note in the object field. Also, we will focus in Actor of type Group , but nothing should stop from using this for Organization . @nickname@server will be used to refer Actors of type Person or Application. !nickname@server will be used to refer Actors of type Group or Organization. @#!group@server#collection will be used to refer collection collection of !group@server . The key words MAY, MUST, MUST NOT, SHOULD, and SHOULD NOT are to be interpreted as described in [RFC2119]. Links between Groups terminology ActivityStreams 2.0 requirements for this mechanism Example Group Actor in this FEP { \"type\": \"Group\", \"streams\": [], \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"gs\": \"https://www.gnu.org/software/social/ns#\" }, { \"unbound\": { \"@id\": \"gs:unbound\", \"@type\": \"@id\" } } ], \"id\": \"https://instance.gnusocial.test/group/hackers\", \"unbound\": true, \"preferredUsername\": \"hackers\", \"endpoints\": { \"sharedInbox\": \"https://instance.gnusocial.test/inbox.json\" }, \"inbox\": \"https://instance.gnusocial.test/group/hackers/inbox.json\", \"outbox\": \"https://instance.gnusocial.test/group/hackers/outbox.json\", \"following\": \"https://instance.gnusocial.test/group/hackers/subscriptions\", \"followers\": \"https://instance.gnusocial.test/group/hackers/subscribers\", } Creating a link between two group actors Creating a directed link between two group actors is just a regular Follow request between any two actors. Assume that !hackers@instance.gnusocial.test sends a Follow request to !lug@gnusocial.net . If gs:unbound: false or not present, then if !lug@gnusocial.net accepts the Follow request, it will Announce{*} entering its inbox to !hackers@instance.gnusocial.test . If gs:unbound: true , then !lug@gnusocial.net will both accept the Follow request and submit a Follow request of its own to !hackers@instance.gnusocial.test . If both !hackers@instance.gnusocial.test and !lug@gnusocial.net have added each other to their linksTo, they will act as if they were the same group. If they have equivalent groupLinks collections, then they are essentially fully mirrored groups. Note that the \"Link negotiation\" happens between two Group actors (S2S). Some scenarios 1. Group A follows Group B which has gs:unbound = false A SHOULD NOT attempt to Follow B; If B receives a Follow from A, it SHOULD reject. 2. Group A follows Group B which has gs:unbound = true A SHOULD send a Follow to B; B SHOULD Accept; B SHOULD Follow A, if A has gs:unbound = true . 3. Group A follows Group B which has no gs:unbound attribute A SHOULD send a Follow to B; B MAY Accept. 4. Forwarding from Inbox !hackers@ C : Announce{Note} TO !hackers@ [B] (S2S) B MUST NOT forward this to other groups. If other groups expect to receive this activity, then they must follow !hackers@ C as well. \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ActivityStreams Vocabulary] James M Snell, Evan Prodromou, ActivityStreams Vocabulary , 2017 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-2100: Unbound Group and Organization"},{"location":"fep/fep-2100/#fep-2100-unbound-group-and-organization","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 This FEP wasn't a result of my individual work but rather of the joint effort in this SocialHub discussion and, prior to that, the discussion in GNU social's IRC/XMPP with rozzin (Joshua Judson Rosen) and someonewithpc (Hugo Sales).","title":"FEP-2100: Unbound Group and Organization"},{"location":"fep/fep-2100/#summary","text":"Historically, after the sudden death of a popular instance, one could neither target groups hosted at it anymore nor contact the whole followers collection to let them know of the new instance housing a certain group. If we always have absolute knowledge of the complete followers collection (or good enough), we can automate based on which instance has more local followers which server would become the new house. Another alternative would be to automatically archive the old group and start again from scratch. This FEP, on the other hand, discusses something very different of automatically moving an actor from one server to a different one. It is about collaboration between different group or organization actors to promote an unified experience between the participants of the linked group actors. We think this may be easier, more flexible, and promote a better UX than only notifying the actor that the house of a certain group has moved, but both solutions would probably achieve similar results in the above use case. This proposal introduces an interpretation of a Group following another Group and the gs:unbound attribute. This allow two groups (or organization) to \"act as one\" (not exactly, but elaborated afterwards). This primarily aims at effectively removing a central point of authority for groups, but offers more than that. With this, @alice@undefinedhackers.net can mention a group named hackers (!hackers) or even address an activity To !hackers@instance.gnusocial.test (C2S) and let her instance's !hackers announce to other instances' !hackers. Finally, this proposal is general enough to allow a server to simultaneously have !lug@server (without links), !lug-unbound@server (with the greatest links collection it can grow), and !lug-with-some-links@server (with only some links). It doesn't require linked groups to have the same preferredUsername .","title":"Summary"},{"location":"fep/fep-2100/#notation-and-definitions","text":"To keep things simple, sometimes you will see things formatted like Activity{Object} . For example, Create{Note} would be a Create activity containing a Note in the object field. Also, we will focus in Actor of type Group , but nothing should stop from using this for Organization . @nickname@server will be used to refer Actors of type Person or Application. !nickname@server will be used to refer Actors of type Group or Organization. @#!group@server#collection will be used to refer collection collection of !group@server . The key words MAY, MUST, MUST NOT, SHOULD, and SHOULD NOT are to be interpreted as described in [RFC2119].","title":"Notation and Definitions"},{"location":"fep/fep-2100/#links-between-groups-terminology","text":"","title":"Links between Groups terminology"},{"location":"fep/fep-2100/#activitystreams-20-requirements-for-this-mechanism","text":"","title":"ActivityStreams 2.0 requirements for this mechanism"},{"location":"fep/fep-2100/#example-group-actor-in-this-fep","text":"{ \"type\": \"Group\", \"streams\": [], \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"gs\": \"https://www.gnu.org/software/social/ns#\" }, { \"unbound\": { \"@id\": \"gs:unbound\", \"@type\": \"@id\" } } ], \"id\": \"https://instance.gnusocial.test/group/hackers\", \"unbound\": true, \"preferredUsername\": \"hackers\", \"endpoints\": { \"sharedInbox\": \"https://instance.gnusocial.test/inbox.json\" }, \"inbox\": \"https://instance.gnusocial.test/group/hackers/inbox.json\", \"outbox\": \"https://instance.gnusocial.test/group/hackers/outbox.json\", \"following\": \"https://instance.gnusocial.test/group/hackers/subscriptions\", \"followers\": \"https://instance.gnusocial.test/group/hackers/subscribers\", }","title":"Example Group Actor in this FEP"},{"location":"fep/fep-2100/#creating-a-link-between-two-group-actors","text":"Creating a directed link between two group actors is just a regular Follow request between any two actors. Assume that !hackers@instance.gnusocial.test sends a Follow request to !lug@gnusocial.net . If gs:unbound: false or not present, then if !lug@gnusocial.net accepts the Follow request, it will Announce{*} entering its inbox to !hackers@instance.gnusocial.test . If gs:unbound: true , then !lug@gnusocial.net will both accept the Follow request and submit a Follow request of its own to !hackers@instance.gnusocial.test . If both !hackers@instance.gnusocial.test and !lug@gnusocial.net have added each other to their linksTo, they will act as if they were the same group. If they have equivalent groupLinks collections, then they are essentially fully mirrored groups. Note that the \"Link negotiation\" happens between two Group actors (S2S).","title":"Creating a link between two group actors"},{"location":"fep/fep-2100/#some-scenarios","text":"","title":"Some scenarios"},{"location":"fep/fep-2100/#1-group-a-follows-group-b-which-has-gsunbound-false","text":"A SHOULD NOT attempt to Follow B; If B receives a Follow from A, it SHOULD reject.","title":"1. Group A follows Group B which has gs:unbound = false"},{"location":"fep/fep-2100/#2-group-a-follows-group-b-which-has-gsunbound-true","text":"A SHOULD send a Follow to B; B SHOULD Accept; B SHOULD Follow A, if A has gs:unbound = true .","title":"2. Group A follows Group B which has gs:unbound = true"},{"location":"fep/fep-2100/#3-group-a-follows-group-b-which-has-no-gsunbound-attribute","text":"A SHOULD send a Follow to B; B MAY Accept.","title":"3. Group A follows Group B which has no gs:unbound attribute"},{"location":"fep/fep-2100/#4-forwarding-from-inbox","text":"!hackers@ C : Announce{Note} TO !hackers@ [B] (S2S) B MUST NOT forward this to other groups. If other groups expect to receive this activity, then they must follow !hackers@ C as well.","title":"4. Forwarding from Inbox"},{"location":"fep/fep-2100/#_1","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ActivityStreams Vocabulary] James M Snell, Evan Prodromou, ActivityStreams Vocabulary , 2017 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-2100/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-2277/","text":"FEP-2277: ActivityPub core types Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Classification of ActivityPub objects. Rationale ActivityPub applications often have different processing rules for actors, activities, collections and other objects. In most cases, the class of an object can be inferred from its context: object delivered to inbox is expected to be an activity, and the value of its actor property is expected to be an actor. But in some cases the class can not be inferred, for example: The object of Update activity can be an object or an actor. The object of Announce activity can be an object or an activity. Applications may use the type property to determine object's class, but that hinders interoperabilty because such applications would not be able to process objects with unknown types. Therefore, a different approach would be preferable. Core object types Activity Streams 2.0 standard defines 8 core object types : Object Link Activity IntransitiveActivity Collection OrderedCollection CollectionPage OrderedCollectionPage The Actor type is also mentioned, but it is not a core type. Unfortunately, definitions provided in the specification are not precise. The lack of good definitions and the exclusion of the Actor type make standard classification unsuitable for practical purposes. Therefore, applications may need to use a different classification. One way to divide objects into distinct classes is to look at their properties and their connections to other objects (indicated by their properties). This approach can be used to define 5 core types: Object Actor Activity Collection Link The next section specifies an algorithm that classifies any ActivityPub object as one of these core types by analyzing object's shape. This technique is often referred to as duck typing . Duck typing The following algorithm can be used to determine the core type of the object: If object has href property, return Link . If object has inbox and outbox properties, return Actor . If object has actor property, return Activity . If object has items , orderedItems or totalItems property, return Collection . Otherwise, return Object . Application of this algorithm results in non-overlapping core types. For example, an actor with items property is still an actor and not a collection. The value of type property is not taken into consideration. [!WARNING] ActivityPub standard requires actors to have both inbox and outbox properties, but in practice outbox is not always present. If compatibility with non-conformant implementations is desirable, step #1 can be changed to \"If object has inbox property, return Actor \". [!WARNING] Pleroma adds an actor property to objects that are not activities . To make an allowance for that, the step #2 of the algorithm can be changed to \"If object has an actor property, and doesn't have an attributedTo property, return Activity \". Multi-typing The alternative to duck typing is to use multiple types. For example, this object can be unambiguously identified as an Activity : { \"type\": [\"Bite\", \"Activity\"] } However, existing implementations don't add a second type, and even if changing all of them were possible, duck typing would still need to be used as a fallback during the transitional period. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Streams 2.0 , 2017 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-2277: ActivityPub core types"},{"location":"fep/fep-2277/#fep-2277-activitypub-core-types","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-2277: ActivityPub core types"},{"location":"fep/fep-2277/#summary","text":"Classification of ActivityPub objects.","title":"Summary"},{"location":"fep/fep-2277/#rationale","text":"ActivityPub applications often have different processing rules for actors, activities, collections and other objects. In most cases, the class of an object can be inferred from its context: object delivered to inbox is expected to be an activity, and the value of its actor property is expected to be an actor. But in some cases the class can not be inferred, for example: The object of Update activity can be an object or an actor. The object of Announce activity can be an object or an activity. Applications may use the type property to determine object's class, but that hinders interoperabilty because such applications would not be able to process objects with unknown types. Therefore, a different approach would be preferable.","title":"Rationale"},{"location":"fep/fep-2277/#core-object-types","text":"Activity Streams 2.0 standard defines 8 core object types : Object Link Activity IntransitiveActivity Collection OrderedCollection CollectionPage OrderedCollectionPage The Actor type is also mentioned, but it is not a core type. Unfortunately, definitions provided in the specification are not precise. The lack of good definitions and the exclusion of the Actor type make standard classification unsuitable for practical purposes. Therefore, applications may need to use a different classification. One way to divide objects into distinct classes is to look at their properties and their connections to other objects (indicated by their properties). This approach can be used to define 5 core types: Object Actor Activity Collection Link The next section specifies an algorithm that classifies any ActivityPub object as one of these core types by analyzing object's shape. This technique is often referred to as duck typing .","title":"Core object types"},{"location":"fep/fep-2277/#duck-typing","text":"The following algorithm can be used to determine the core type of the object: If object has href property, return Link . If object has inbox and outbox properties, return Actor . If object has actor property, return Activity . If object has items , orderedItems or totalItems property, return Collection . Otherwise, return Object . Application of this algorithm results in non-overlapping core types. For example, an actor with items property is still an actor and not a collection. The value of type property is not taken into consideration. [!WARNING] ActivityPub standard requires actors to have both inbox and outbox properties, but in practice outbox is not always present. If compatibility with non-conformant implementations is desirable, step #1 can be changed to \"If object has inbox property, return Actor \". [!WARNING] Pleroma adds an actor property to objects that are not activities . To make an allowance for that, the step #2 of the algorithm can be changed to \"If object has an actor property, and doesn't have an attributedTo property, return Activity \".","title":"Duck typing"},{"location":"fep/fep-2277/#multi-typing","text":"The alternative to duck typing is to use multiple types. For example, this object can be unambiguously identified as an Activity : { \"type\": [\"Bite\", \"Activity\"] } However, existing implementations don't add a second type, and even if changing all of them were possible, duck typing would still need to be used as a fallback during the transitional period.","title":"Multi-typing"},{"location":"fep/fep-2277/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Streams 2.0 , 2017","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-2277/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-2677/","text":"FEP-2677: Identifying the Application Actor Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary It is a common pattern in Fediverse applications to have a special actor of type Application . This is for example the actor at https://mastodon.example/actor for Mastodon or at https://pleroma.example/internal/fetch for Pleroma. This application actor can be fetched with an unsigned request, so it is possible to use it to fetch public keys. The goal of this FEP is to provide an explicit mechanism of identifying the application actor, with the goal of making it usable for further tasks, e.g. Allowing for application to application communication by having application actor send activities to another application actor's inbox. Having an object one can attach further information to. This means, one could attach a list of implemented FEPs to the application actor. Requirements Application Actor We will first define, what we mean by an application actor . We will impose two requirements on them It's an [ActivityPub] Actor of type Application . It can be retrieved without authentication, e.g. with an unsigned HTTP request. As already mentioned application actors are currently used by most Fediverse applications to fetch public keys. See here for a list of examples. Identifying the Application Actor with nodeinfo In [NodeInfo], see also [FEP-f1d5], the well-known path /.well-known/nodeinfo is defined and it is specified that a document in JRD format [RFC 7033] is served there. The requirement of the current FEP is that the /.well-known/nodeinfo contains an additional link with relation type https://www.w3.org/ns/activitystreams#Application , which resolves to an application actor as described in the previous section. We note that it is not necessary to implement the relations specified in [NodeInfo] to satisfy the current FEP. Example We will consider the server with domain node.example . This means that a request to https://node.example/.well-known/nodeinfo will resolve to { \"links\": [ { \"rel\": \"http://nodeinfo.diaspora.software/ns/schema/2.0\", \"href\": \"https://node.example/nodeinfo/2.0\" }, { \"rel\": \"https://www.w3.org/ns/activitystreams#Application\", \"href\": \"https://node.example/actor\" } ] } Next, a request to https://node.example/actor with accept header application/activity+json could return { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/v1\", ], \"id\": \"https://node.example/actor\", \"type\": \"Application\", \"inbox\": \"https://node.example/actor/inbox\", \"outbox\": \"https://node.example/actor/outbox\", \"publicKey\": { \"id\": \"https://node.example/actor#main-key\", \"owner\": \"https://node.example/actor\", \"publicKeyPem\": \"-----BEGIN PUBLIC KEY-----\\n....\\n-----END PUBLIC KEY-----\\n\" } } Discussion The approach of this FEP has been chosen to have a light touch. Some alternative choices would be: A fixed path for the application actor A fixed path for application information instead of aiming to attach it to the application actor. Both options have the downside that it would require to introduce a new path, which forces every implementation to implement it in a similar way. Instead, we reuse an existing path, and the implementer is free to choose where to put the application actor. The second question is why fix the type Application and not Service . First, it is consistent with most current implementations. Second, Mastodon uses Service for bot accounts. So it feels like a good idea to start distinguishing from this usage. We would phrase this distinction as follows: An actor of type Application is triggered by events in the application, e.g. a signed request and then fetching the corresponding public key. An actor of type Service is triggered by either activities arriving at its inbox or external events, e.g. a timer. This means an actor of type Service is similar to one controlled by an user. These are not hard rules on when to use Application or Service . They will probably break down as more complicated Fediverse implementations are build. We hope that they can serve as a level of guidance, how to differentiate actors. Currently implemented application actors Software Application Actor URI Bovine https://bovine.example/activitypub/bovine Firefish https://firefish.example/actor Lemmy https://lemmy.example/ Mastodon https://mastodon.example/actor Mitra http://mitra.example/actor Pleroma https://pleroma.example/internal/fetch Mbin https://mbin.example/i/actor WordPress https://wordpress.example/wp-json/activitypub/1.0/application Mobilizon https://mobilizon.example/relay Gancio https://gancio.example/federation/u/<instance_name> Friendica https://friendica.example/ PeerTube https://peertube.example/accounts/peertube Pixelfed https://pixelfed.example/i/actor Note : Feel free to add further links. \u5b9f\u88c5 Software dateImplemented dateReleased WordPress 2023-12-21 - Mobilizon 2023-12-14 - Gancio 2023-12-22 - \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [FEP-f1d5] CJ, silverpill, NodeInfo in Fediverse Software , 2023 [NodeInfo] NodeInfo protocol 2.1 [RFC 2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 [RFC 7033] P. Jones, G. Salgueiro, M. Jones, J. Smarr, Webfinger , 2013 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-2677: Identifying the Application Actor"},{"location":"fep/fep-2677/#fep-2677-identifying-the-application-actor","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-2677: Identifying the Application Actor"},{"location":"fep/fep-2677/#summary","text":"It is a common pattern in Fediverse applications to have a special actor of type Application . This is for example the actor at https://mastodon.example/actor for Mastodon or at https://pleroma.example/internal/fetch for Pleroma. This application actor can be fetched with an unsigned request, so it is possible to use it to fetch public keys. The goal of this FEP is to provide an explicit mechanism of identifying the application actor, with the goal of making it usable for further tasks, e.g. Allowing for application to application communication by having application actor send activities to another application actor's inbox. Having an object one can attach further information to. This means, one could attach a list of implemented FEPs to the application actor.","title":"Summary"},{"location":"fep/fep-2677/#requirements","text":"","title":"Requirements"},{"location":"fep/fep-2677/#application-actor","text":"We will first define, what we mean by an application actor . We will impose two requirements on them It's an [ActivityPub] Actor of type Application . It can be retrieved without authentication, e.g. with an unsigned HTTP request. As already mentioned application actors are currently used by most Fediverse applications to fetch public keys. See here for a list of examples.","title":"Application Actor"},{"location":"fep/fep-2677/#identifying-the-application-actor-with-nodeinfo","text":"In [NodeInfo], see also [FEP-f1d5], the well-known path /.well-known/nodeinfo is defined and it is specified that a document in JRD format [RFC 7033] is served there. The requirement of the current FEP is that the /.well-known/nodeinfo contains an additional link with relation type https://www.w3.org/ns/activitystreams#Application , which resolves to an application actor as described in the previous section. We note that it is not necessary to implement the relations specified in [NodeInfo] to satisfy the current FEP.","title":"Identifying the Application Actor with nodeinfo"},{"location":"fep/fep-2677/#example","text":"We will consider the server with domain node.example . This means that a request to https://node.example/.well-known/nodeinfo will resolve to { \"links\": [ { \"rel\": \"http://nodeinfo.diaspora.software/ns/schema/2.0\", \"href\": \"https://node.example/nodeinfo/2.0\" }, { \"rel\": \"https://www.w3.org/ns/activitystreams#Application\", \"href\": \"https://node.example/actor\" } ] } Next, a request to https://node.example/actor with accept header application/activity+json could return { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/v1\", ], \"id\": \"https://node.example/actor\", \"type\": \"Application\", \"inbox\": \"https://node.example/actor/inbox\", \"outbox\": \"https://node.example/actor/outbox\", \"publicKey\": { \"id\": \"https://node.example/actor#main-key\", \"owner\": \"https://node.example/actor\", \"publicKeyPem\": \"-----BEGIN PUBLIC KEY-----\\n....\\n-----END PUBLIC KEY-----\\n\" } }","title":"Example"},{"location":"fep/fep-2677/#discussion","text":"The approach of this FEP has been chosen to have a light touch. Some alternative choices would be: A fixed path for the application actor A fixed path for application information instead of aiming to attach it to the application actor. Both options have the downside that it would require to introduce a new path, which forces every implementation to implement it in a similar way. Instead, we reuse an existing path, and the implementer is free to choose where to put the application actor. The second question is why fix the type Application and not Service . First, it is consistent with most current implementations. Second, Mastodon uses Service for bot accounts. So it feels like a good idea to start distinguishing from this usage. We would phrase this distinction as follows: An actor of type Application is triggered by events in the application, e.g. a signed request and then fetching the corresponding public key. An actor of type Service is triggered by either activities arriving at its inbox or external events, e.g. a timer. This means an actor of type Service is similar to one controlled by an user. These are not hard rules on when to use Application or Service . They will probably break down as more complicated Fediverse implementations are build. We hope that they can serve as a level of guidance, how to differentiate actors.","title":"Discussion"},{"location":"fep/fep-2677/#currently-implemented-application-actors","text":"Software Application Actor URI Bovine https://bovine.example/activitypub/bovine Firefish https://firefish.example/actor Lemmy https://lemmy.example/ Mastodon https://mastodon.example/actor Mitra http://mitra.example/actor Pleroma https://pleroma.example/internal/fetch Mbin https://mbin.example/i/actor WordPress https://wordpress.example/wp-json/activitypub/1.0/application Mobilizon https://mobilizon.example/relay Gancio https://gancio.example/federation/u/<instance_name> Friendica https://friendica.example/ PeerTube https://peertube.example/accounts/peertube Pixelfed https://pixelfed.example/i/actor Note : Feel free to add further links.","title":"Currently implemented application actors"},{"location":"fep/fep-2677/#_1","text":"Software dateImplemented dateReleased WordPress 2023-12-21 - Mobilizon 2023-12-14 - Gancio 2023-12-22 -","title":"\u5b9f\u88c5"},{"location":"fep/fep-2677/#_2","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [FEP-f1d5] CJ, silverpill, NodeInfo in Fediverse Software , 2023 [NodeInfo] NodeInfo protocol 2.1 [RFC 2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 [RFC 7033] P. Jones, G. Salgueiro, M. Jones, J. Smarr, Webfinger , 2013","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-2677/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-268d/","text":"FEP-268d: Search consent signals for objects Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP documents an extension property for [Activity Streams 2.0] to signal the consent for an object to be searched by a given actor. History This section is non-normative. Fedibird introduced the searchableBy property in August 2022. kmyblue implemented the searchableBy property in April 2023. Mastodon began implementing the indexable property [FEP-5feb] in February 2023 and released it in September 2023. Background This section is non-normative. [FEP-5feb] introduced the indexable property, which allows an Activity Streams actor to signal their preference for whether objects attributed to them should be made publicly available for search. The indexable property is an actor-level property which takes a boolean value, allowing the actor to make all of their objects available for search by either anyone or no one at all. However, sometimes it is desirable to make a certain set of objects searchable/unsearchable or make an object searchable by a limited audience. The object-level searchableBy property documented in this FEP complements the indexable property with a more fine-grained audience targeting ability. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC 2119]. Terms defined searchableBy URI http://fedibird.com/ns#searchableBy Label searchable by Comment Identifies one or more entities that are allowed to search for the subject. Domain Object Range Object | Link Required No Is defined by FEP-268d A non-normative example of a publicly searchable post: { \"@context\": [ \"https://w3id.org/fep/268d\", \"https://www.w3.org/ns/activitystreams\" ], \"id\": \"https://example.com/notes/1\", \"attributedTo\": \"https://example.com/users/1\", \"to\": \"https://www.w3.org/ns/activitystreams#Public\", \"cc\": \"https://example.com/users/1/followers\", \"type\": \"Note\", \"content\": \"Hello, world!\", \"searchableBy\": \"https://www.w3.org/ns/activitystreams#Public\" } A post only searchable by the mentioned users and the author's followers: { \"@context\": [ \"https://w3id.org/fep/268d\", \"https://www.w3.org/ns/activitystreams\" ], \"id\": \"https://example.com/notes/42\", \"attributedTo\": \"https://example.com/users/1\", \"to\": \"https://alice.example/actor\", \"cc\": [\"https://example.com/users/1/followers\", \"https://www.w3.org/ns/activitystreams#Public\"], \"type\": \"Note\", \"content\": \"@Alice Happy birthday!\", \"tag\": { \"type\": \"Mention\", \"href\": \"https://alice.example/actor\", \"name\": \"@Alice\" }, \"searchableBy\": [\"https://alice.example/actor\", \"https://example.com/users/1/followers\"] } (where `https://example.com/users/1/followers` is the `followers` collection of `https://example.com/users/1`.) A post only searchable by the author themselves: { \"@context\": [ \"https://w3id.org/fep/268d\", \"https://www.w3.org/ns/activitystreams\" ], \"id\": \"https://example.com/notes/123\", \"attributedTo\": \"https://example.com/users/1\", \"to\": \"https://example.com/users/1/followers\", \"cc\": \"https://www.w3.org/ns/activitystreams#Public\", \"type\": \"Note\", \"summary\": \"Note to self\", \"searchableBy\": \"https://example.com/users/1\" } An actor with a default searchability of `as:Public`: { \"@context\": [ \"https://w3id.org/fep/268d\", \"https://www.w3.org/ns/activitystreams\" ], \"id\": \"https://example.com/users/1\", \"type\": \"Person\", \"searchableBy\": \"https://www.w3.org/ns/activitystreams#Public\" } ## Searchability of objects This section describes how the searchability of an object for a given actor should be determined. If the object has at least one `searchableBy` property value and the searching actor isn't included in the property values, the object MUST NOT be made available for search by that actor. Even in this case, the object SHOULD be made available for search if the object is attributed to the searching actor themselves, and MAY be made available for search if the searching actor has previously interacted with the object (e.g. by `Like`-ing the object). If the `searchableBy` property values of the object include the searching actor, the object SHOULD be made available for search by the actor, unless the searching actor is otherwise forbidden to see the object by access controls such as the Activity Streams audience targeting (`to`, `bto`, `cc`, `bcc` and `audience` properties) of the object and `Block`s by the object's attributed actors. Objects with a `searchableBy` value of `https://www.w3.org/ns/activitystreams#Public` SHOULD be made available for search by any users. If the object does not have any `searchableBy` values but is attributed to an actor with at least one `searchableBy` value, the object SHALL be treated as inheriting the `searchableBy` value of the attributed actor. Note that, in JSON-LD, an empty array value (`[]`) is semantically equivalent to `null` or \"undefined\". In consequence, if a publisher wishes to make an object searchable by no one (instead of falling back on the attributed actor's `searchableBy` value), a placeholder object needs to be used as the `searchableBy` value of that object. The RECOMMENDED placeholder in that case is the object's `attributedTo` value, if any. If the object does not fall under any of the conditions described in this section, the searchability of the object MAY be determined by an implementation-defined strategy. Note that the searchability signaled by the `searchableBy` property is only applicable to Activity Streams representation of objects. Searchability of non-Activity Streams representations (most notably, HTML) of objects with non-public `searchableBy` property value SHOULD be signaled by other means. Non-normative examples of such means include the Robots Exclusion Protocol [RFC-9309] [ROBOTSTXT], the ` ` HTML tag [ROBOTSTXT-META] and the `X-Robots-Tag` HTTP header [GOOGLE-ROBOTS]. ## Interaction with FEP-5feb (`toot:indexable`) *This section is only applicable to conformant [FEP-5feb] implementations.* If an object does not have any `searchableBy` values and is attributed to an actor with no `searchableBy` values but with an `http://joinmastodon.org/ns#indexable` value, the searchability of the object SHOULD be determined according to [FEP-5feb]. If an object has at least one `searchableBy` value, the property SHALL take precedence over the `indexable` property. In particular, if an object is not searchable according to the `searchableBy` property, the object must not be made available for search, even if the object is targeted to the `as:Public` collection and the object is attributed to an actor with `\"indexable\": true`. ## Security considerations *This section is non-normative.* As mentioned in the normative section, consuming implementations should take care to ignore JSON entries with an empty array value (`\"searchableBy\": []`). Failure to do so would have a security implication if the implementation is verifying RDF-based signatures of objects, because the empty array value does not affect the RDF dataset (and hence the resulting signature value), so that an attacker can remove/insert a `\"searchableBy\": []` entry from/to a signed object without making the signature verification fail, allowing them to tamper with the object's searchability if the empty array value were handled differently from \"undefined\". ## \u5b9f\u88c5 *This section is non-normative.* - [Fedibird](https://github.com/fedibird/mastodon/tree/fedibird) - [kmyblue](https://github.com/kmycode/mastodon) ## \u53c2\u8003\u6587\u732e - [Activity Streams 2.0] James M Snell, Evan Prodromou, [Activity Streams 2.0](https://www.w3.org/TR/activitystreams-core/) , 2017 - [FEP-5feb] Claire, [FEP-5feb: Search indexing consent for actors](https://w3id.org/fep/5feb) , 2023 - [RFC-2119] S. Bradner, [Key words for use in RFCs to Indicate Requirement Levels](https://doi.org/10.17487/RFC2119) , 1997 - [RFC-9309] M. Koster, [Robots Exclusion Protocol](https://doi.org/10.17487/RFC9309) , 2022 - [ROBOTSTXT] Martijn Koster, [A Standard for Robot Exclusion](https://www.robotstxt.org/orig.html) , 1994 - [ROBOTSTXT-META] Martijn Koster, [About the Robots \\ tag](https://www.robotstxt.org/meta.html) , 2007 - [GOOGLE-ROBOTS] Google, [Robots Meta Tags Specifications](https://developers.google.com/search/docs/crawling-indexing/robots-meta-tag#xrobotstag) ## \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-268d: Search consent signals for objects"},{"location":"fep/fep-268d/#fep-268d-search-consent-signals-for-objects","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-268d: Search consent signals for objects"},{"location":"fep/fep-268d/#summary","text":"This FEP documents an extension property for [Activity Streams 2.0] to signal the consent for an object to be searched by a given actor.","title":"Summary"},{"location":"fep/fep-268d/#history","text":"This section is non-normative. Fedibird introduced the searchableBy property in August 2022. kmyblue implemented the searchableBy property in April 2023. Mastodon began implementing the indexable property [FEP-5feb] in February 2023 and released it in September 2023.","title":"History"},{"location":"fep/fep-268d/#background","text":"This section is non-normative. [FEP-5feb] introduced the indexable property, which allows an Activity Streams actor to signal their preference for whether objects attributed to them should be made publicly available for search. The indexable property is an actor-level property which takes a boolean value, allowing the actor to make all of their objects available for search by either anyone or no one at all. However, sometimes it is desirable to make a certain set of objects searchable/unsearchable or make an object searchable by a limited audience. The object-level searchableBy property documented in this FEP complements the indexable property with a more fine-grained audience targeting ability.","title":"Background"},{"location":"fep/fep-268d/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC 2119].","title":"Requirements"},{"location":"fep/fep-268d/#terms-defined","text":"","title":"Terms defined"},{"location":"fep/fep-2c59/","text":"FEP-2c59: Discovery of a Webfinger address from an ActivityPub actor Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary [Webfinger][Webfinger] is used on the fediverse to abstract out variations in [ActivityPub][ActivityPub] actor URL formats, giving a uniform way of addressing an actor. With a Webfinger address, a client can discover the actor's ActivityPub actor URL. This specification defines an explicit way to reverse the process, and discover a preferred Webfinger address from an ActivityPub actor URL. Motivation [ActivityPub][ActivityPub] is a protocol for federated social networking. It uses HTTPS URLs to identify actors, that is, the people, organizations, applications and groups that use the protocol. The URL format is not standardized, and there are many variations. For example, a user with the username evan on the activitypub.example domain could have an actor URL of: A path on the domain, like https://activitypub.example/users/evan Including an ID number, like https://activitypub.example/users/1234 A specific subdomain for social data, like https://social.activitypub.example/evan One subdomain per user, like https://evan.activitypub.example [Webfinger][Webfinger] is a discovery protocol for people on the Internet. A Webfinger address is an email-address-like identity in the form user@activitypub.example . Following the Webfinger protocol, a client can discover information about the person at that address, including their ActivityPub actor URL. This discovery is unidirectional and can cross domain boundaries. This allows potentially misleading or harmful use of WebFinger to identify actors on the network without their consent. For example, the owner of idiot.example could create a Webfinger address pompous@idiot.example that points to https://activitypub.example/users/evan . In addition, ActivityPub servers that display actors' Webfinger addresses in their UIs need a reliable way to know which Webfinger is preferred for a given actor ID. To solve this problem, [Mastodon][Mastodon] constructs a canonical Webfinger address for an actor by extracting the preferredUsername from the actor's profile, and prepending it to the domain name of the actor's identity URL. It then does a Webfinger lookup on that address, and if the actor URL returned matches the identity URL, it uses that Webfinger address. This technique can cause issues for certain actor URLs. First, preferredUsername is not a required property for an ActivityPub actor. Second, it becomes inconvenient to use subdomains or alternate domains for actor URLs. If the original WebFinger is evan@organization.example , and the ActivityPub URL is https://social.organization.example/evan , the Webfinger will be canonicalized to the longer evan@social.organization.example . A similar problem arises if the actor URL uses one subdomain per user, like https://evan.organization.example/ . This specification defines a way to discover a Webfinger address from an ActivityPub actor without constructing it from properties and URL parsing. It gives domain owners the option to use a registered domain for their Webfinger addresses, and host their ActivityPub server on a subdomain or a different domain. The Mastodon method can be used as a fallback. Specification An ActivityPub actor SHOULD include a webfinger property, which is a canonical Webfinger address for the actor. The webfinger property is functional, that is, there can be at most one webfinger property per actor. If provided, the JRD link data for the Webfinger address in the webfinger property MUST link directly to the actor URL verbatim, without redirects or aliases. The identity in the webfinger property SHOULD be a plain Webfinger address, like user@domain.example . The identity in the webfinger property MAY be an acct: URL, like acct:user@domain.example . Context The context document for this specification is https://purl.archive.org/socialweb/webfinger . Its contents are as follows: { \"@context\": { \"wf\": \"https://purl.archive.org/socialweb/webfinger#\", \"xsd\": \"http://www.w3.org/2001/XMLSchema#\", \"webfinger\": { \"@id\": \"wf:webfinger\", \"@type\": \"xsd:string\" } } } \u4f8b A publisher can include the webfinger property for an actor. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/webfinger\" ], \"id\": \"https://social.example.com/evanp\", \"type\": \"Person\", \"name\": \"Evan Prodromou\", \"inbox\": \"https://social.example.com/evanp/inbox\", \"outbox\": \"https://social.example.com/evanp/outbox\", \"following\": \"https://social.example.com/evanp/following\", \"followers\": \"https://social.example.com/evanp/followers\", \"liked\": \"https://social.example.com/evanp/liked\", \"webfinger\": \"evanp@example.com\" } A publisher can include the webfinger property for a Person object referenced in the actor property of an activity. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/webfinger\" ], \"id\": \"https://social.example.com/evanp/activity/775\", \"to\": [\"Public\"], \"type\": \"Like\", \"summary\": \"Evan liked a note\", \"actor\": { \"type\": \"Person\", \"name\": \"Evan Prodromou\", \"id\": \"https://social.example.com/evanp\", \"webfinger\": \"evanp@example.com\" }, \"object\": { \"type\": \"Note\", \"id\": \"https://social.example.com/other/note/221\", \"to\": [\"Public\"] } } The publisher can include the webfinger property for an actor with an acct: prefix. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/webfinger\" ], \"id\": \"https://prefix.example/urlfan\", \"type\": \"Person\", \"name\": \"URL Fan\", \"inbox\": \"https://prefix.example/urlfan/inbox\", \"outbox\": \"https://prefix.example/urlfan/outbox\", \"following\": \"https://prefix.example/urlfan/following\", \"followers\": \"https://prefix.example/urlfan/followers\", \"liked\": \"https://prefix.example/urlfan/liked\", \"webfinger\": \"acct:urlfan@prefix.example\" } Security Considerations The source of the webfinger property is important. A third party may spoof, intentionally or unintentionally, the webfinger property of another actor. The property should only be treated as the preferred Webfinger address for the actor if it comes from the actor id URL, or if it is delivered with the actor's [HTTP Signature][HTTP Signature] via the ActivityPub protocol. \u53c2\u8003\u6587\u732e [Webfinger] Brad Fitzpatrick, WebFinger , 2013 [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Mastodon] Eugen Rochko, Mastodon , 2016 [Mastodon Webfinger], Mastodon contributors, Webfinger - Mastodon documentation , 2018 [HTTP Signature], Cavage, M., HTTP Signatures , 2017 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-2c59: Discovery of a Webfinger address from an ActivityPub actor"},{"location":"fep/fep-2c59/#fep-2c59-discovery-of-a-webfinger-address-from-an-activitypub-actor","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-2c59: Discovery of a Webfinger address from an ActivityPub actor"},{"location":"fep/fep-2c59/#summary","text":"[Webfinger][Webfinger] is used on the fediverse to abstract out variations in [ActivityPub][ActivityPub] actor URL formats, giving a uniform way of addressing an actor. With a Webfinger address, a client can discover the actor's ActivityPub actor URL. This specification defines an explicit way to reverse the process, and discover a preferred Webfinger address from an ActivityPub actor URL.","title":"Summary"},{"location":"fep/fep-2c59/#motivation","text":"[ActivityPub][ActivityPub] is a protocol for federated social networking. It uses HTTPS URLs to identify actors, that is, the people, organizations, applications and groups that use the protocol. The URL format is not standardized, and there are many variations. For example, a user with the username evan on the activitypub.example domain could have an actor URL of: A path on the domain, like https://activitypub.example/users/evan Including an ID number, like https://activitypub.example/users/1234 A specific subdomain for social data, like https://social.activitypub.example/evan One subdomain per user, like https://evan.activitypub.example [Webfinger][Webfinger] is a discovery protocol for people on the Internet. A Webfinger address is an email-address-like identity in the form user@activitypub.example . Following the Webfinger protocol, a client can discover information about the person at that address, including their ActivityPub actor URL. This discovery is unidirectional and can cross domain boundaries. This allows potentially misleading or harmful use of WebFinger to identify actors on the network without their consent. For example, the owner of idiot.example could create a Webfinger address pompous@idiot.example that points to https://activitypub.example/users/evan . In addition, ActivityPub servers that display actors' Webfinger addresses in their UIs need a reliable way to know which Webfinger is preferred for a given actor ID. To solve this problem, [Mastodon][Mastodon] constructs a canonical Webfinger address for an actor by extracting the preferredUsername from the actor's profile, and prepending it to the domain name of the actor's identity URL. It then does a Webfinger lookup on that address, and if the actor URL returned matches the identity URL, it uses that Webfinger address. This technique can cause issues for certain actor URLs. First, preferredUsername is not a required property for an ActivityPub actor. Second, it becomes inconvenient to use subdomains or alternate domains for actor URLs. If the original WebFinger is evan@organization.example , and the ActivityPub URL is https://social.organization.example/evan , the Webfinger will be canonicalized to the longer evan@social.organization.example . A similar problem arises if the actor URL uses one subdomain per user, like https://evan.organization.example/ . This specification defines a way to discover a Webfinger address from an ActivityPub actor without constructing it from properties and URL parsing. It gives domain owners the option to use a registered domain for their Webfinger addresses, and host their ActivityPub server on a subdomain or a different domain. The Mastodon method can be used as a fallback.","title":"Motivation"},{"location":"fep/fep-2c59/#specification","text":"An ActivityPub actor SHOULD include a webfinger property, which is a canonical Webfinger address for the actor. The webfinger property is functional, that is, there can be at most one webfinger property per actor. If provided, the JRD link data for the Webfinger address in the webfinger property MUST link directly to the actor URL verbatim, without redirects or aliases. The identity in the webfinger property SHOULD be a plain Webfinger address, like user@domain.example . The identity in the webfinger property MAY be an acct: URL, like acct:user@domain.example .","title":"Specification"},{"location":"fep/fep-2c59/#context","text":"The context document for this specification is https://purl.archive.org/socialweb/webfinger . Its contents are as follows: { \"@context\": { \"wf\": \"https://purl.archive.org/socialweb/webfinger#\", \"xsd\": \"http://www.w3.org/2001/XMLSchema#\", \"webfinger\": { \"@id\": \"wf:webfinger\", \"@type\": \"xsd:string\" } } }","title":"Context"},{"location":"fep/fep-2c59/#_1","text":"A publisher can include the webfinger property for an actor. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/webfinger\" ], \"id\": \"https://social.example.com/evanp\", \"type\": \"Person\", \"name\": \"Evan Prodromou\", \"inbox\": \"https://social.example.com/evanp/inbox\", \"outbox\": \"https://social.example.com/evanp/outbox\", \"following\": \"https://social.example.com/evanp/following\", \"followers\": \"https://social.example.com/evanp/followers\", \"liked\": \"https://social.example.com/evanp/liked\", \"webfinger\": \"evanp@example.com\" } A publisher can include the webfinger property for a Person object referenced in the actor property of an activity. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/webfinger\" ], \"id\": \"https://social.example.com/evanp/activity/775\", \"to\": [\"Public\"], \"type\": \"Like\", \"summary\": \"Evan liked a note\", \"actor\": { \"type\": \"Person\", \"name\": \"Evan Prodromou\", \"id\": \"https://social.example.com/evanp\", \"webfinger\": \"evanp@example.com\" }, \"object\": { \"type\": \"Note\", \"id\": \"https://social.example.com/other/note/221\", \"to\": [\"Public\"] } } The publisher can include the webfinger property for an actor with an acct: prefix. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/webfinger\" ], \"id\": \"https://prefix.example/urlfan\", \"type\": \"Person\", \"name\": \"URL Fan\", \"inbox\": \"https://prefix.example/urlfan/inbox\", \"outbox\": \"https://prefix.example/urlfan/outbox\", \"following\": \"https://prefix.example/urlfan/following\", \"followers\": \"https://prefix.example/urlfan/followers\", \"liked\": \"https://prefix.example/urlfan/liked\", \"webfinger\": \"acct:urlfan@prefix.example\" }","title":"\u4f8b"},{"location":"fep/fep-2c59/#security-considerations","text":"The source of the webfinger property is important. A third party may spoof, intentionally or unintentionally, the webfinger property of another actor. The property should only be treated as the preferred Webfinger address for the actor if it comes from the actor id URL, or if it is delivered with the actor's [HTTP Signature][HTTP Signature] via the ActivityPub protocol.","title":"Security Considerations"},{"location":"fep/fep-2c59/#_2","text":"[Webfinger] Brad Fitzpatrick, WebFinger , 2013 [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Mastodon] Eugen Rochko, Mastodon , 2016 [Mastodon Webfinger], Mastodon contributors, Webfinger - Mastodon documentation , 2018 [HTTP Signature], Cavage, M., HTTP Signatures , 2017","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-2c59/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-2e40/","text":"FEP-2e40: The FEP Vocabulary Extension Process Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Current usage of ActivityPub relies on the ActivityStreams namespace [AS-NS] combined with custom extensions [Mastodon NS]. As far as I can tell, no best practices exist or a formal process to add new namespaces. This FEP will Create a FEP Vocabulary based on identified best practices Define a process to add new entries to this FEP Vocabulary without a risk of Term collision Define a process to elevate Terms to be common Define a process to create specialized Vocabularies Using [FEP-61CE] as an example how this process can be used. Note : Withdrawn as no longer compatible with the FEP repository structure, see this issue . Background and Terminology The JSON-LD context is introduced in 3.1 The Context of [JSON-LD]. The context of an object is specified by its @context property. One can think of the context as defining certain strings to be equivalent. For example Note , as:Note , and https://www.w3.org/ns/activitystreams#Note all represent the same thing. More details can be found in 3.2. IRIs . Following [JSON-LD], we will refer to all three strings mentioned above as a Term . The focus here is on having a format that is machine-readable . Having a standardized format allows various algorithms to be applicable see [Canon] and [LD-API]. The second useful aspect of this is that one can define the used terms through the provided URL: https://www.w3.org/ns/activitystreams#Note . Clicking on it will let you easily find the definiton of the Note Type . This format is human-readable . We will refer to the combination of Context and easily accessible documentations for the terms a Vocabulary . Requirements The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119]. The FEP Vocabulary We now formalize the process of creating an adding to the FEP Vocabulary. This section formalizes the location of the two files containing the machine readable json-ld context and human readable markdown description. How to add new terms will be discussed in the next section. This FEP creates the file /feps/assets/fep-2e40/namespace.json with content { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"fep\": \"https://w3id.org/fep#\" } ] } A description of this context is contained in /feps/assets/fep-2e40/namespace.md . The goal of inclusion of the ActivityStreams context is to increase the chances of most objects having the simple form { \"@context\": \"https://w3id.org/fep\", ... } which is as close as one can get to pure JSON with JSON-LD. These two files form the FEP Vocabulary . Through a pull-request to [W3-ID], these two files will be made available at https://w3id.org/fep . Process to add a new Term to the FEP Vocabulary The authors of a new FEP-xxxx following [FEP-a3ed] MAY include a section or sections titled \"Create FEP Term: $TERM\". The $TERM MUST follow the following rules inspired by points 2-5 of 3. The Registration Process in [DID-Reg]. The $TERM MUST be indicative of its function. Avoid generic terms such as \"myProperty\" or \"foo\". If there are copyright, trademark, or any intellectual property rights concerns, the addition and use MUST be authorized in writing by the intellectual property rights holder under a F/RAND license. Examples include terms that use trademarked brand names, property names that utilize the titles of copyrighted works, and patented technology that would cause the use of the extension to require licensing a patent. Any addition MUST NOT create unreasonable legal, security, moral, or privacy issues that will result in direct harm to others. Examples of unacceptable additions include any containing racist language, technologies used to persecute minority populations, and unconsented pervasive tracking. Furthermore, the author MAY perform the following action Add a new term of the form fep-xxxx-$TERM to /feps/assets/fep-2e40/namespace.json . Add a description for this term to /feps/assets/fep-2e40/namespace.md . The changes to the two files MUST be described in the FEP, and they MUST only add new content or change content added by the FEP. An example is provided in the next section. While these actions are optional at the DRAFT stage of a FEP, they MUST be performed before a FEP can reach its FINAL stage. We will refer to a term introduced by this process as a FEP term . Instead of having many sections with similar names, the author of a FEP MAY combine them. Instead of defining a new FEP term , the author of a FEP MAY decide to include terms from another namespace as a FEP Term. For example, we decide to introduce conversation as follows \"fep-xxxx-conversation\": { \"@id\": \"http://ostatus.org#conversation\", \"@type\": \"@id\" }, This has the advantage that terms, which are currently used but not properly documented, can be given a proper definition. Furthermore, this will help keep the @context block small. When doing so, the author MUST either provide a reference to the current definition of the object OR write a new definition of the object. If a reference is provided, it should be considered best pratice to quote the reference. Example \"Create FEP term: eventSource\" In [FEP-61ce], I plan to introduce the term eventSource . As this will most likely be the first FEP using the herein defined procces, this will lead to /feps/assets/fep-2e40/namespace.json being changed to { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"fep\": \"https://www.w3id.org/fep#\", \"fep-61ce-eventSource\": { \"@id\": \"fep:fep-61ce-eventSource\", \"@type\": \"@id\" } } ] } with usage information The term eventSource is to be as part of the endpoints of an [ActivityPub] Actor. It specifies an endpoint, where the Client can receive push notifications using the Server Side Events protocol of activities being added to collections on the server. By default the inbox collection of the Actor is used. By specifying the X-ActivityPub-Collection header a different collection can be specified to retrieve push notifications from. Example usage: json { \"@context\": [\"https://www.w3id.org/fep\", {\"eventSource\": \"fep-61ce-eventSource\"} ], \"type\": \"Person\", \"id\": \"https://example.com/client_actor\", \"inbox\": \"https://example.com/client_actor/inbox\", \"outbox\": \"https://example.com/client_actor/outbox\", \"preferredUsername\": \"actor\", \"endpoints\": { \"proxyUrl\": \"https://example.com/client_actor/proxyUrl\", \"eventSource\": \"https://example.com/client_actor/eventSource\" } } Promotion to common terms While the above example is already nice looking, it still has the uglyness of needing to define eventSource as fep-61ce/eventSource . We will call the process of adding the line \"eventSource\": \"fep-61ce-eventSource\" to /feps/assets/fep-2e40/namespace.json a promotion to common term . In order to be elligible for promotion, a term MUST NOT conflict with any term currently in the vocabulary. For example, if the term visualization was already introduced in a previous FEP, it is not acceptable to introduce visualisation and expect promotion of this term. Any term elligible for promotion CAN be promoted to a common term by the author of the FEP after the FEP has been declared FINAL. If an author does not seek to promotion of a term, it SHOULD be noted in the section introducing this term. Secondary FEP Vocabularies We have now introduced a process for the common or primary vocabulary with context in /feps/assets/fep-2e40/namespace.json and documentation in /feps/assets/fep-2e40/namespace.json . We will now introduce secondary vocabularies . These are meant to be an option to introduce many domain specific terms without having to add them to the primary vocabulary. An author of a FEP MAY include a section titled \"Introducing Secondary FEP Vocabulary fep-DOMAIN\". Here DOMAIN is a short name representing the domain. Then files /feps/fep-xxxx/namespace.json and /feps/fep-xxxx/namespace.md can be created. An example of a file of the @context file is given below. By including the original fep context, one can keep duplication to a minimum. Similarly, the documentation file should only explain the namespace and which additional terms are promoted or overridden. For the documentation of the fep terms , one should refer back to the original documentation. Furthermore, the author MAY adjust the configuration of [W3-ID] to reflect his changes. All obligations that are MAY during the draft stage will turn into MUST before the FEP can be finalized. Example: The barber vocabulary The barber community in the FediVerse has decided that, they need a marker if people shave themself. So they have introduce FEP-ba1b and defined the term shavesHimself . It was decided not to promote this term to the primary vocabulary. Instead the barber community has decided to introduce FEP-ba2b, in which they introduce the secondary FEP vocabulary fep-barber . The context of this vocabulary then takes the form: { \"@context\": [ \"https://www.w3id.org/fep\", { \"shavesHimself\": \"fep-ba1b-shavesHimself\" } ] } By including the primary FEP vocabulary, it is ensured that changes to the primary vocabulary carry over to the secondary fep-barber vocabulary. Furthermore, by the promotion of shavesHimself taking place after the inclusion of the primary vocabulary, it is ensure that the primary vocabulary cannot override it. Acknowledgements The comments by aschrijver and trwnh on SocialHub have helped me greatly in clarifying and formulating the concepts discussed in this FEP. \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [AS-NS] Amy Guy ActivityStreams 2.0 Terms , 2018 [AS-Git] M. Sporny Add alsoKnownAs property to AS vocabulary #511 , 2020 [Canon] A. Rundgren, B. Jordan, S. Erdtman RFC 8785 JSON Canonicalization Scheme (JCS) , 2020 [DID Reg] Orie Steele, Manu Sporny DID Specification Registries , 2023 [FEP-a4ed] pukkamustard FEP-a4ed: The Fediverse Enhancement Proposal Process [FEP-61ce] Helge Krueger [FEP-61CE: Server Sent Events for Actor], in preparation [JSON-LD] Gregg Kellogg, Pierre-Antoine Champin, Dave Longley JSON-LD , 2020 [LD-API] Gregg Kellogg, Pierre-Antoine Champin, Dave Longley JSON-LD-API , 2020 [Mastodon NS] Eugen Rochko et al JSON-LD Namespacing [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels [W3-ID] Contibutors Permanent Identifiers for the Web \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-2e40: The FEP Vocabulary Extension Process"},{"location":"fep/fep-2e40/#fep-2e40-the-fep-vocabulary-extension-process","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-2e40: The FEP Vocabulary Extension Process"},{"location":"fep/fep-2e40/#summary","text":"Current usage of ActivityPub relies on the ActivityStreams namespace [AS-NS] combined with custom extensions [Mastodon NS]. As far as I can tell, no best practices exist or a formal process to add new namespaces. This FEP will Create a FEP Vocabulary based on identified best practices Define a process to add new entries to this FEP Vocabulary without a risk of Term collision Define a process to elevate Terms to be common Define a process to create specialized Vocabularies Using [FEP-61CE] as an example how this process can be used. Note : Withdrawn as no longer compatible with the FEP repository structure, see this issue .","title":"Summary"},{"location":"fep/fep-2e40/#background-and-terminology","text":"The JSON-LD context is introduced in 3.1 The Context of [JSON-LD]. The context of an object is specified by its @context property. One can think of the context as defining certain strings to be equivalent. For example Note , as:Note , and https://www.w3.org/ns/activitystreams#Note all represent the same thing. More details can be found in 3.2. IRIs . Following [JSON-LD], we will refer to all three strings mentioned above as a Term . The focus here is on having a format that is machine-readable . Having a standardized format allows various algorithms to be applicable see [Canon] and [LD-API]. The second useful aspect of this is that one can define the used terms through the provided URL: https://www.w3.org/ns/activitystreams#Note . Clicking on it will let you easily find the definiton of the Note Type . This format is human-readable . We will refer to the combination of Context and easily accessible documentations for the terms a Vocabulary .","title":"Background and Terminology"},{"location":"fep/fep-2e40/#requirements","text":"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119].","title":"Requirements"},{"location":"fep/fep-2e40/#the-fep-vocabulary","text":"We now formalize the process of creating an adding to the FEP Vocabulary. This section formalizes the location of the two files containing the machine readable json-ld context and human readable markdown description. How to add new terms will be discussed in the next section. This FEP creates the file /feps/assets/fep-2e40/namespace.json with content { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"fep\": \"https://w3id.org/fep#\" } ] } A description of this context is contained in /feps/assets/fep-2e40/namespace.md . The goal of inclusion of the ActivityStreams context is to increase the chances of most objects having the simple form { \"@context\": \"https://w3id.org/fep\", ... } which is as close as one can get to pure JSON with JSON-LD. These two files form the FEP Vocabulary . Through a pull-request to [W3-ID], these two files will be made available at https://w3id.org/fep .","title":"The FEP Vocabulary"},{"location":"fep/fep-2e40/#process-to-add-a-new-term-to-the-fep-vocabulary","text":"The authors of a new FEP-xxxx following [FEP-a3ed] MAY include a section or sections titled \"Create FEP Term: $TERM\". The $TERM MUST follow the following rules inspired by points 2-5 of 3. The Registration Process in [DID-Reg]. The $TERM MUST be indicative of its function. Avoid generic terms such as \"myProperty\" or \"foo\". If there are copyright, trademark, or any intellectual property rights concerns, the addition and use MUST be authorized in writing by the intellectual property rights holder under a F/RAND license. Examples include terms that use trademarked brand names, property names that utilize the titles of copyrighted works, and patented technology that would cause the use of the extension to require licensing a patent. Any addition MUST NOT create unreasonable legal, security, moral, or privacy issues that will result in direct harm to others. Examples of unacceptable additions include any containing racist language, technologies used to persecute minority populations, and unconsented pervasive tracking. Furthermore, the author MAY perform the following action Add a new term of the form fep-xxxx-$TERM to /feps/assets/fep-2e40/namespace.json . Add a description for this term to /feps/assets/fep-2e40/namespace.md . The changes to the two files MUST be described in the FEP, and they MUST only add new content or change content added by the FEP. An example is provided in the next section. While these actions are optional at the DRAFT stage of a FEP, they MUST be performed before a FEP can reach its FINAL stage. We will refer to a term introduced by this process as a FEP term . Instead of having many sections with similar names, the author of a FEP MAY combine them. Instead of defining a new FEP term , the author of a FEP MAY decide to include terms from another namespace as a FEP Term. For example, we decide to introduce conversation as follows \"fep-xxxx-conversation\": { \"@id\": \"http://ostatus.org#conversation\", \"@type\": \"@id\" }, This has the advantage that terms, which are currently used but not properly documented, can be given a proper definition. Furthermore, this will help keep the @context block small. When doing so, the author MUST either provide a reference to the current definition of the object OR write a new definition of the object. If a reference is provided, it should be considered best pratice to quote the reference.","title":"Process to add a new Term to the FEP Vocabulary"},{"location":"fep/fep-2e40/#example-create-fep-term-eventsource","text":"In [FEP-61ce], I plan to introduce the term eventSource . As this will most likely be the first FEP using the herein defined procces, this will lead to /feps/assets/fep-2e40/namespace.json being changed to { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"fep\": \"https://www.w3id.org/fep#\", \"fep-61ce-eventSource\": { \"@id\": \"fep:fep-61ce-eventSource\", \"@type\": \"@id\" } } ] } with usage information The term eventSource is to be as part of the endpoints of an [ActivityPub] Actor. It specifies an endpoint, where the Client can receive push notifications using the Server Side Events protocol of activities being added to collections on the server. By default the inbox collection of the Actor is used. By specifying the X-ActivityPub-Collection header a different collection can be specified to retrieve push notifications from. Example usage: json { \"@context\": [\"https://www.w3id.org/fep\", {\"eventSource\": \"fep-61ce-eventSource\"} ], \"type\": \"Person\", \"id\": \"https://example.com/client_actor\", \"inbox\": \"https://example.com/client_actor/inbox\", \"outbox\": \"https://example.com/client_actor/outbox\", \"preferredUsername\": \"actor\", \"endpoints\": { \"proxyUrl\": \"https://example.com/client_actor/proxyUrl\", \"eventSource\": \"https://example.com/client_actor/eventSource\" } }","title":"Example \"Create FEP term: eventSource\""},{"location":"fep/fep-2e40/#promotion-to-common-terms","text":"While the above example is already nice looking, it still has the uglyness of needing to define eventSource as fep-61ce/eventSource . We will call the process of adding the line \"eventSource\": \"fep-61ce-eventSource\" to /feps/assets/fep-2e40/namespace.json a promotion to common term . In order to be elligible for promotion, a term MUST NOT conflict with any term currently in the vocabulary. For example, if the term visualization was already introduced in a previous FEP, it is not acceptable to introduce visualisation and expect promotion of this term. Any term elligible for promotion CAN be promoted to a common term by the author of the FEP after the FEP has been declared FINAL. If an author does not seek to promotion of a term, it SHOULD be noted in the section introducing this term.","title":"Promotion to common terms"},{"location":"fep/fep-2e40/#secondary-fep-vocabularies","text":"We have now introduced a process for the common or primary vocabulary with context in /feps/assets/fep-2e40/namespace.json and documentation in /feps/assets/fep-2e40/namespace.json . We will now introduce secondary vocabularies . These are meant to be an option to introduce many domain specific terms without having to add them to the primary vocabulary. An author of a FEP MAY include a section titled \"Introducing Secondary FEP Vocabulary fep-DOMAIN\". Here DOMAIN is a short name representing the domain. Then files /feps/fep-xxxx/namespace.json and /feps/fep-xxxx/namespace.md can be created. An example of a file of the @context file is given below. By including the original fep context, one can keep duplication to a minimum. Similarly, the documentation file should only explain the namespace and which additional terms are promoted or overridden. For the documentation of the fep terms , one should refer back to the original documentation. Furthermore, the author MAY adjust the configuration of [W3-ID] to reflect his changes. All obligations that are MAY during the draft stage will turn into MUST before the FEP can be finalized.","title":"Secondary FEP Vocabularies"},{"location":"fep/fep-2e40/#example-the-barber-vocabulary","text":"The barber community in the FediVerse has decided that, they need a marker if people shave themself. So they have introduce FEP-ba1b and defined the term shavesHimself . It was decided not to promote this term to the primary vocabulary. Instead the barber community has decided to introduce FEP-ba2b, in which they introduce the secondary FEP vocabulary fep-barber . The context of this vocabulary then takes the form: { \"@context\": [ \"https://www.w3id.org/fep\", { \"shavesHimself\": \"fep-ba1b-shavesHimself\" } ] } By including the primary FEP vocabulary, it is ensured that changes to the primary vocabulary carry over to the secondary fep-barber vocabulary. Furthermore, by the promotion of shavesHimself taking place after the inclusion of the primary vocabulary, it is ensure that the primary vocabulary cannot override it.","title":"Example: The barber vocabulary"},{"location":"fep/fep-2e40/#acknowledgements","text":"The comments by aschrijver and trwnh on SocialHub have helped me greatly in clarifying and formulating the concepts discussed in this FEP.","title":"Acknowledgements"},{"location":"fep/fep-2e40/#_1","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [AS-NS] Amy Guy ActivityStreams 2.0 Terms , 2018 [AS-Git] M. Sporny Add alsoKnownAs property to AS vocabulary #511 , 2020 [Canon] A. Rundgren, B. Jordan, S. Erdtman RFC 8785 JSON Canonicalization Scheme (JCS) , 2020 [DID Reg] Orie Steele, Manu Sporny DID Specification Registries , 2023 [FEP-a4ed] pukkamustard FEP-a4ed: The Fediverse Enhancement Proposal Process [FEP-61ce] Helge Krueger [FEP-61CE: Server Sent Events for Actor], in preparation [JSON-LD] Gregg Kellogg, Pierre-Antoine Champin, Dave Longley JSON-LD , 2020 [LD-API] Gregg Kellogg, Pierre-Antoine Champin, Dave Longley JSON-LD-API , 2020 [Mastodon NS] Eugen Rochko et al JSON-LD Namespacing [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels [W3-ID] Contibutors Permanent Identifiers for the Web","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-2e40/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-3264/","text":"FEP-3264: Federated Work Coordination Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This document describes an implementation of project planning and work coordination based on ActivityPub protocol and Valueflows vocabulary. It includes planning what people want to do, and (optionally) recording what is done. History This is a parallel submission to FEP-c5a1 To-do's , which supports much simpler planning. Both planning submissions continue the idea of Valueflows extensions to ActivityPub/ActivityStreams based on use case, started by silverpill with FEP-0837 Federated Marketplace . Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Planning a project or some work This FEP will support work plans or projects of any size, using a Plan with one or more Processes, each with one or more input and/or output Commitments. Consuming implementations which don't have planning features MAY display plan-related objects similarly to Note objects. In all cases, the objects can also be discussed using Note objects and replyTo . Valueflows defines a Plan as a logical collection of processes that constitute a body of scheduled work with defined deliverable(s). The representation of a plan is a JSON document with the following properties: id (REQUIRED): the plan's unique global identifier. type (REQUIRED): the type of the object SHOULD be Plan . If interoperability with other ActivityPub services is desirable, implementers MAY also use object types from Activity Vocabulary , such as Note . attributedTo (REQUIRED): the actor who published the plan. name (REQUIRED): the title of the plan. content (OPTIONAL): the description of the plan. The type of content SHOULD be text/html . published (RECOMMENDED): the date and time at which the plan was published. to (REQUIRED): the audience of the plan. planIncludes (REQUIRED): the processes that are part of this plan (see below). A Process is defined as An activity that changes inputs into outputs, by transforming or transporting economic resource(s). Processes that are part of a plan can be part of a series (graph) of processes that produce the final output(s) at the end; and/or they can be unrelated to each other, and produce separate final output(s) for the plan. The representation of a process is a JSON document with the following properties: id (REQUIRED): the process's unique global identifier. type (REQUIRED): the type of the object MUST be Process . name (REQUIRED): an informal or formal textual identifier for a process. hasBeginning (OPTIONAL): the date and time the process is planned to begin. hasEnd (OPTIONAL): the date and time the process is planned to end. content (OPTIONAL): the description of what is to be done in the process. The type of content SHOULD be text/html . hasInput (OPTIONAL): the input commitment(s) of the process (see below). hasOutput (OPTIONAL): the output commitment(s) of the process (see below). A Commitment is defined as A planned economic flow that has been promised by an agent to another agent. id (REQUIRED): the commitment's unique global identifier. type (REQUIRED): the type of the object MUST be Commitment . action (REQUIRED): the type of economic transaction. If the commitment is an input, the value of this property SHOULD be one of: work , use , consume , cite , pickup , accept . It the commitment is an output, the value of this property SHOULD be one of: produce , deliverService , dropoff , modify . See the action definitions and behaviors for more information. resourceConformsTo (RECOMMENDED): the type of an economic resource (can be a skill or type of work for the work action). Could be any URI. resourceQuantity (OPTIONAL): the amount and unit of the non-effort-based economic resource. Either resourceQuantity or effortQuantity is RECOMMENDED, and both can be included in case of use . This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. effortQuantity (OPTIONAL): the amount and unit of the work or use effort-based action. This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the effort. provider (RECOMMENDED): the actor who commits to providing the resource. If not included, it is assumed to be the attributedTo actor. receiver (RECOMMENDED): the actor who commits to receiving the resource. If not included, it is assumed to be the to actor. content (OPTIONAL): the description of what is to be done for this commitment. The type of content SHOULD be text/html . Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Plan\": \"vf:Plan\", \"Process\": \"vf:Process\", \"Commitment\": \"vf:Commitment\", \"receiver\": \"vf:receiver\", \"provider\": \"vf:provider\", \"action\": \"vf:action\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"resourceQuantity\": \"vf:resourceQuantity\", \"effortQuantity\": \"vf:effortQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\", \"planIncludes\": \"vf:planIncludes\", \"hasBeginning\": \"vf:hasBeginning\", \"hasEnd\": \"vf:hasEnd\", \"hasInput\": \"vf:hasInput\", \"hasOutput\": \"vf:hasOutput\" } ], \"type\": \"Plan\", \"id\": \"https://project.example/plans/ddde9d6f-6f3b-4770-a966-3a18ef006931\", \"attributedTo\": \"https://project.example/actors/alice\", \"name\": \"Making Apple Cider\", \"content\": \"Annual weekend of community apple cider making\", \"published\": \"2024-09-18T19:22:03.918737Z\", \"to\": \"https://project.example/actors/gleaning-collective\", \"planIncludes\": [ { \"type\": \"Process\", \"id\": \"https://project.example/processes/ddde9d6f-6f3b-4770-a966-3a18ef006931#pick\", \"name\": \"Pick Apples\", \"hasBeginning\": \"2024-10-18T09:00:00.000000Z\", \"hasEnd\": \"2024-10-18T18:00:00.000000Z\", \"content\": \"Meet at the orchard, bring your own basket and a lunch, and be ready for some outdoor fall work and fun.\", \"hasInput\": [ { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#pick1\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q112729805\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"6\" }, \"provider\": \"https://project.example/actors/bob\", \"receiver\": \"https://project.example/actors/gleaning-collective\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#pick2\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q112729805\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"6\" }, \"provider\": \"https://project.example/actors/chiam\", \"receiver\": \"https://project.example/actors/gleaning-collective\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#pick3\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q112729805\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"6\" }, \"provider\": \"https://project.example/actors/alice\", \"receiver\": \"https://project.example/actors/gleaning-collective\" } ], \"hasOutput\": [ { \"type\": \"Commitment\", \"id\": \"https://project.example/outputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#pick4\", \"action\": \"produce\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q89\", \"resourceQuantity\": { \"hasUnit\": \"pound\", \"hasNumericalValue\": \"500\" }, \"provider\": \"https://project.example/actors/gleaning-collective\", \"receiver\": \"https://project.example/actors/gleaning-collective\" } ] }, { \"type\": \"Process\", \"id\": \"https://project.example/processes/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider\", \"name\": \"Make Cider\", \"hasBeginning\": \"2024-10-19T09:00:00.000000Z\", \"hasEnd\": \"2024-10-19T16:00:00.000000Z\", \"content\": \"Meet at the community building, be prepared to get messy. We will press the apples, then clean the press.\", \"hasInput\": [ { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider1\", \"action\": \"consume\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q89\", \"resourceQuantity\": { \"hasUnit\": \"pound\", \"hasNumericalValue\": \"500\" }, \"provider\": \"https://project.example/actors/gleaning-collective\", \"receiver\": \"https://project.example/actors/gleaning-collective\", \"content\": \"The apples picked the day before.\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider2\", \"action\": \"use\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q674484\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"7\" }, \"provider\": \"https://project.example/actors/diego\", \"receiver\": \"https://project.example/actors/gleaning-collective\", \"content\": \"Diego will drop his cider press off early in the morning, and pick it up later, preferably nice and clean.\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider3\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q3485549\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"4\" }, \"provider\": \"https://project.example/actors/chiam\", \"receiver\": \"https://project.example/actors/gleaning-collective\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider4\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q3485549\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"6\" }, \"provider\": \"https://project.example/actors/bob\", \"receiver\": \"https://project.example/actors/gleaning-collective\" } ], \"hasOutput\": [ { \"type\": \"Commitment\", \"id\": \"https://project.example/outputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider5\", \"action\": \"produce\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q5977438\", \"resourceQuantity\": { \"hasUnit\": \"gallon-US\", \"hasNumericalValue\": \"15\" }, \"provider\": \"https://project.example/actors/gleaning-collective\", \"receiver\": \"https://project.example/actors/food-pantry\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/outputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider6\", \"action\": \"produce\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q2836947\", \"resourceQuantity\": { \"hasUnit\": \"pound\", \"hasNumericalValue\": \"100\" }, \"provider\": \"https://project.example/actors/gleaning-collective\", \"receiver\": \"https://project.example/actors/singing-trees-farm\", \"content\": \"The apple remains will be great pig food, leave it in the big bin, and they will pick it up.\" } ] } ] } Accepting a Commitment The object of Accept activity MUST be the id of the Commitment in the Plan object previously sent to the actor. Activity MAY contain content property for further coordination. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Accept\", \"id\": \"https://project.example/activities/059f08fa-31b1-4136-8d76-5987d705a0ac\", \"actor\": \"https://project.example/actors/bob\", \"object\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider4\", \"content\": \"I'll come early to help unload the cider press.\", \"to\": \"https://project.example/actors/alice\" } Rejecting a Commitment The object of Reject activity MUST be the id of the Commitment in the Plan object previously sent to the actor. Activity MAY contain content property indicating the reason for rejection. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Reject\", \"id\": \"https://project.example/activities/8c05f97f-1531-4b70-9ca8-4ee4a09f36a4\", \"actor\": \"https://project.example/actors/chiam\", \"object\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider3\", \"content\": \"Sorry, already working elsewhere that day, will check with Eleanore.\", \"to\": \"https://project.example/actors/alice\" } Adding a Commitment to the Plan In some cases, an actor might want to add a new commitment to the plan. The representation of a commitment is a JSON document with the following properties: id (REQUIRED): the commitment's unique global identifier. type (REQUIRED): the type of the object SHOULD be Commitment . If interoperability with other ActivityPub services is desirable, implementers MAY also use object types from Activity Vocabulary , such as Note . attributedTo (REQUIRED): the actor who published the commitment. content (OPTIONAL): the description of the commitment or communication about the commitment. The type of content SHOULD be text/html . published (RECOMMENDED): the date and time at which the commitment was published. to (REQUIRED): the audience of the commitment. action (REQUIRED): the type of economic transaction. If the commitment is an input, the value of this property SHOULD be one of: work , use , consume , cite , pickup , accept . It the commitment is an output, the value of this property SHOULD be one of: produce , deliverService , dropoff , modify . See the action definitions and behaviors for more information. inputOf : the process for which this commitment is an input. Either inputOf or outputOf is REQUIRED. outputOf : the process for which this commitment is an output. Either inputOf or outputOf is REQUIRED. context (OPTIONAL): the plan the commitment is part of. resourceConformsTo (RECOMMENDED): the type of an economic resource (can be a skill or type of work for the work action). Could be any URI. resourceQuantity : the amount and unit of the non-effort-based economic resource. Either resourceQuantity or effortQuantity is RECOMMENDED, and both can be included in case of use . This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. effortQuantity : the amount and unit of the work or use effort-based action. Either resourceQuantity or effortQuantity is RECOMMENDED, and both can be included in case of use . This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. provider (RECOMMENDED): the actor who commits to providing the resource. If not included, it is assumed to be the attributedTo actor. receiver (RECOMMENDED): the actor who commits to receiving the resource. If not included, it is assumed to be the to actor. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Commitment\": \"vf:Commitment\", \"inputOf\": \"vf:inputOf\", \"receiver\": \"vf:receiver\", \"provider\": \"vf:provider\", \"action\": \"vf:action\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"effortQuantity\": \"vf:effortQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Create\", \"id\": \"https://project.example/activities/ad2f7ee1-6567-413e-a10b-72650cbdc743/create\", \"actor\": \"https://project.example/actors/eleanore\", \"object\": { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ad2f7ee1-6567-413e-a10b-72650cbdc743\", \"attributedTo\": \"https://project.example/actors/eleanore\", \"context\": \"https://project.example/plans/ddde9d6f-6f3b-4770-a966-3a18ef006931\", \"published\": \"2024-09-21T14:13:41.843794Z\", \"inputOf\": \"https://project.example/processes/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q3485549\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"5\" }, \"provider\": \"https://project.example/actors/eleanore\", \"receiver\": \"https://project.example/actors/gleaning-collective\" }, \"to\": \"https://project.example/actors/alice\" } Recording what actually was done Actual economic activity is represented with EconomicEvents in Valueflows. Economic events can be recorded as fulfilling a planned commitment, or by themselves if they were not explicitly planned. In either case, in the scope of this FEP, they are also inputs or outputs of a process. This FEP does not include creating and updating of actual resource inventory, which is also effected through economic events. The representation of an economic event is a JSON document with the following properties: id (REQUIRED): the economic event's unique global identifier. type (REQUIRED): the type of the object SHOULD be EconomicEvent . If interoperability with other ActivityPub services is desirable, implementers MAY also use object types from Activity Vocabulary , such as Note . attributedTo (REQUIRED): the actor who published the economic event. content (OPTIONAL): the description of the economic event or communication about the economic event. The type of content SHOULD be text/html . published (RECOMMENDED): the date and time at which the economic event was published. to (REQUIRED): the audience of the economic event. action (REQUIRED): the type of economic transaction. If the economic event is an input, the value of this property SHOULD be one of: work , use , consume , cite , pickup , accept . It the economic event is an output, the value of this property SHOULD be one of: produce , deliverService , dropoff , modify . See the action definitions and behaviors for more information. fulfills : the commitment the economic event is completely or partially fulfilling, REQUIRED if there is sucn a commitment, otherwise N/A. inputOf : the process for which this economic event is an input. Either inputOf or outputOf is REQUIRED. outputOf : the process for which this commitment is an output. Either inputOf or outputOf is REQUIRED. context (OPTIONAL): the plan the economic event is part of. resourceConformsTo (RECOMMENDED): the type of an economic resource (can be a skill or type of work for the work action). Could be any URI. resourceQuantity : the amount and unit of the non-effort-based economic resource. Either resourceQuantity or effortQuantity is RECOMMENDED, and both can be included in case of use . This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. effortQuantity : the amount and unit of the work or use effort-based action. Either resourceQuantity or effortQuantity is RECOMMENDED, and both can be included in case of use . This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. provider (RECOMMENDED): the actor who provided the resource. If not included, it is assumed to be the attributedTo actor. receiver (RECOMMENDED): the actor who received the resource. If not included, it is assumed to be the to actor. finished (OPTIONAL): set to true if this economic event completes the commitment. (Note more than one economic event can be recorded against the same commitment.) { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"EconomicEvent\": \"vf:EconomicEvent\", \"inputOf\": \"vf:inputOf\", \"receiver\": \"vf:receiver\", \"provider\": \"vf:provider\", \"action\": \"vf:action\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"effortQuantity\": \"vf:effortQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\", \"finished\": \"vf:finished\" } ], \"type\": \"Create\", \"id\": \"https://project.example/activities/ad2f7ee1-6567-413e-a10b-72650cbdc932/create\", \"actor\": \"https://project.example/actors/bob\", \"object\": { \"type\": \"EconomicEvent\", \"id\": \"https://project.example/inputs/ad2f7ee1-6567-413e-a10b-72650cbdc932\", \"attributedTo\": \"https://project.example/actors/bob\", \"context\": \"https://project.example/plans/ddde9d6f-6f3b-4770-a966-3a18ef006931\", \"published\": \"2024-10-21T14:16:41.843794Z\", \"fulfills\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider4\", \"inputOf\": \"https://project.example/processes/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q3485549\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"6.5\" }, \"provider\": \"https://project.example/actors/bob\", \"receiver\": \"https://project.example/actors/gleaning-collective\", \"finished\": true }, \"to\": \"https://project.example/actors/alice\" } \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Valueflows] Lynn Foster, elf Pavlik, Bob Haugen Valueflows , 2024 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 [Activity Vocabulary] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [Ontology of units of Measure] Hajo Rijgersberg, Don Willems, Xin-Ying Ren, Mari Wigham, Jan Top, Ontology of units of Measure , 2017 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-3264: Federated Work Coordination"},{"location":"fep/fep-3264/#fep-3264-federated-work-coordination","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-3264: Federated Work Coordination"},{"location":"fep/fep-3264/#summary","text":"This document describes an implementation of project planning and work coordination based on ActivityPub protocol and Valueflows vocabulary. It includes planning what people want to do, and (optionally) recording what is done.","title":"Summary"},{"location":"fep/fep-3264/#history","text":"This is a parallel submission to FEP-c5a1 To-do's , which supports much simpler planning. Both planning submissions continue the idea of Valueflows extensions to ActivityPub/ActivityStreams based on use case, started by silverpill with FEP-0837 Federated Marketplace .","title":"History"},{"location":"fep/fep-3264/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-3264/#planning-a-project-or-some-work","text":"This FEP will support work plans or projects of any size, using a Plan with one or more Processes, each with one or more input and/or output Commitments. Consuming implementations which don't have planning features MAY display plan-related objects similarly to Note objects. In all cases, the objects can also be discussed using Note objects and replyTo . Valueflows defines a Plan as a logical collection of processes that constitute a body of scheduled work with defined deliverable(s). The representation of a plan is a JSON document with the following properties: id (REQUIRED): the plan's unique global identifier. type (REQUIRED): the type of the object SHOULD be Plan . If interoperability with other ActivityPub services is desirable, implementers MAY also use object types from Activity Vocabulary , such as Note . attributedTo (REQUIRED): the actor who published the plan. name (REQUIRED): the title of the plan. content (OPTIONAL): the description of the plan. The type of content SHOULD be text/html . published (RECOMMENDED): the date and time at which the plan was published. to (REQUIRED): the audience of the plan. planIncludes (REQUIRED): the processes that are part of this plan (see below). A Process is defined as An activity that changes inputs into outputs, by transforming or transporting economic resource(s). Processes that are part of a plan can be part of a series (graph) of processes that produce the final output(s) at the end; and/or they can be unrelated to each other, and produce separate final output(s) for the plan. The representation of a process is a JSON document with the following properties: id (REQUIRED): the process's unique global identifier. type (REQUIRED): the type of the object MUST be Process . name (REQUIRED): an informal or formal textual identifier for a process. hasBeginning (OPTIONAL): the date and time the process is planned to begin. hasEnd (OPTIONAL): the date and time the process is planned to end. content (OPTIONAL): the description of what is to be done in the process. The type of content SHOULD be text/html . hasInput (OPTIONAL): the input commitment(s) of the process (see below). hasOutput (OPTIONAL): the output commitment(s) of the process (see below). A Commitment is defined as A planned economic flow that has been promised by an agent to another agent. id (REQUIRED): the commitment's unique global identifier. type (REQUIRED): the type of the object MUST be Commitment . action (REQUIRED): the type of economic transaction. If the commitment is an input, the value of this property SHOULD be one of: work , use , consume , cite , pickup , accept . It the commitment is an output, the value of this property SHOULD be one of: produce , deliverService , dropoff , modify . See the action definitions and behaviors for more information. resourceConformsTo (RECOMMENDED): the type of an economic resource (can be a skill or type of work for the work action). Could be any URI. resourceQuantity (OPTIONAL): the amount and unit of the non-effort-based economic resource. Either resourceQuantity or effortQuantity is RECOMMENDED, and both can be included in case of use . This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. effortQuantity (OPTIONAL): the amount and unit of the work or use effort-based action. This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the effort. provider (RECOMMENDED): the actor who commits to providing the resource. If not included, it is assumed to be the attributedTo actor. receiver (RECOMMENDED): the actor who commits to receiving the resource. If not included, it is assumed to be the to actor. content (OPTIONAL): the description of what is to be done for this commitment. The type of content SHOULD be text/html . Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Plan\": \"vf:Plan\", \"Process\": \"vf:Process\", \"Commitment\": \"vf:Commitment\", \"receiver\": \"vf:receiver\", \"provider\": \"vf:provider\", \"action\": \"vf:action\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"resourceQuantity\": \"vf:resourceQuantity\", \"effortQuantity\": \"vf:effortQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\", \"planIncludes\": \"vf:planIncludes\", \"hasBeginning\": \"vf:hasBeginning\", \"hasEnd\": \"vf:hasEnd\", \"hasInput\": \"vf:hasInput\", \"hasOutput\": \"vf:hasOutput\" } ], \"type\": \"Plan\", \"id\": \"https://project.example/plans/ddde9d6f-6f3b-4770-a966-3a18ef006931\", \"attributedTo\": \"https://project.example/actors/alice\", \"name\": \"Making Apple Cider\", \"content\": \"Annual weekend of community apple cider making\", \"published\": \"2024-09-18T19:22:03.918737Z\", \"to\": \"https://project.example/actors/gleaning-collective\", \"planIncludes\": [ { \"type\": \"Process\", \"id\": \"https://project.example/processes/ddde9d6f-6f3b-4770-a966-3a18ef006931#pick\", \"name\": \"Pick Apples\", \"hasBeginning\": \"2024-10-18T09:00:00.000000Z\", \"hasEnd\": \"2024-10-18T18:00:00.000000Z\", \"content\": \"Meet at the orchard, bring your own basket and a lunch, and be ready for some outdoor fall work and fun.\", \"hasInput\": [ { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#pick1\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q112729805\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"6\" }, \"provider\": \"https://project.example/actors/bob\", \"receiver\": \"https://project.example/actors/gleaning-collective\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#pick2\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q112729805\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"6\" }, \"provider\": \"https://project.example/actors/chiam\", \"receiver\": \"https://project.example/actors/gleaning-collective\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#pick3\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q112729805\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"6\" }, \"provider\": \"https://project.example/actors/alice\", \"receiver\": \"https://project.example/actors/gleaning-collective\" } ], \"hasOutput\": [ { \"type\": \"Commitment\", \"id\": \"https://project.example/outputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#pick4\", \"action\": \"produce\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q89\", \"resourceQuantity\": { \"hasUnit\": \"pound\", \"hasNumericalValue\": \"500\" }, \"provider\": \"https://project.example/actors/gleaning-collective\", \"receiver\": \"https://project.example/actors/gleaning-collective\" } ] }, { \"type\": \"Process\", \"id\": \"https://project.example/processes/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider\", \"name\": \"Make Cider\", \"hasBeginning\": \"2024-10-19T09:00:00.000000Z\", \"hasEnd\": \"2024-10-19T16:00:00.000000Z\", \"content\": \"Meet at the community building, be prepared to get messy. We will press the apples, then clean the press.\", \"hasInput\": [ { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider1\", \"action\": \"consume\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q89\", \"resourceQuantity\": { \"hasUnit\": \"pound\", \"hasNumericalValue\": \"500\" }, \"provider\": \"https://project.example/actors/gleaning-collective\", \"receiver\": \"https://project.example/actors/gleaning-collective\", \"content\": \"The apples picked the day before.\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider2\", \"action\": \"use\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q674484\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"7\" }, \"provider\": \"https://project.example/actors/diego\", \"receiver\": \"https://project.example/actors/gleaning-collective\", \"content\": \"Diego will drop his cider press off early in the morning, and pick it up later, preferably nice and clean.\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider3\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q3485549\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"4\" }, \"provider\": \"https://project.example/actors/chiam\", \"receiver\": \"https://project.example/actors/gleaning-collective\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider4\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q3485549\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"6\" }, \"provider\": \"https://project.example/actors/bob\", \"receiver\": \"https://project.example/actors/gleaning-collective\" } ], \"hasOutput\": [ { \"type\": \"Commitment\", \"id\": \"https://project.example/outputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider5\", \"action\": \"produce\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q5977438\", \"resourceQuantity\": { \"hasUnit\": \"gallon-US\", \"hasNumericalValue\": \"15\" }, \"provider\": \"https://project.example/actors/gleaning-collective\", \"receiver\": \"https://project.example/actors/food-pantry\" }, { \"type\": \"Commitment\", \"id\": \"https://project.example/outputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider6\", \"action\": \"produce\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q2836947\", \"resourceQuantity\": { \"hasUnit\": \"pound\", \"hasNumericalValue\": \"100\" }, \"provider\": \"https://project.example/actors/gleaning-collective\", \"receiver\": \"https://project.example/actors/singing-trees-farm\", \"content\": \"The apple remains will be great pig food, leave it in the big bin, and they will pick it up.\" } ] } ] }","title":"Planning a project or some work"},{"location":"fep/fep-3264/#accepting-a-commitment","text":"The object of Accept activity MUST be the id of the Commitment in the Plan object previously sent to the actor. Activity MAY contain content property for further coordination. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Accept\", \"id\": \"https://project.example/activities/059f08fa-31b1-4136-8d76-5987d705a0ac\", \"actor\": \"https://project.example/actors/bob\", \"object\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider4\", \"content\": \"I'll come early to help unload the cider press.\", \"to\": \"https://project.example/actors/alice\" }","title":"Accepting a Commitment"},{"location":"fep/fep-3264/#rejecting-a-commitment","text":"The object of Reject activity MUST be the id of the Commitment in the Plan object previously sent to the actor. Activity MAY contain content property indicating the reason for rejection. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Reject\", \"id\": \"https://project.example/activities/8c05f97f-1531-4b70-9ca8-4ee4a09f36a4\", \"actor\": \"https://project.example/actors/chiam\", \"object\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider3\", \"content\": \"Sorry, already working elsewhere that day, will check with Eleanore.\", \"to\": \"https://project.example/actors/alice\" }","title":"Rejecting a Commitment"},{"location":"fep/fep-3264/#adding-a-commitment-to-the-plan","text":"In some cases, an actor might want to add a new commitment to the plan. The representation of a commitment is a JSON document with the following properties: id (REQUIRED): the commitment's unique global identifier. type (REQUIRED): the type of the object SHOULD be Commitment . If interoperability with other ActivityPub services is desirable, implementers MAY also use object types from Activity Vocabulary , such as Note . attributedTo (REQUIRED): the actor who published the commitment. content (OPTIONAL): the description of the commitment or communication about the commitment. The type of content SHOULD be text/html . published (RECOMMENDED): the date and time at which the commitment was published. to (REQUIRED): the audience of the commitment. action (REQUIRED): the type of economic transaction. If the commitment is an input, the value of this property SHOULD be one of: work , use , consume , cite , pickup , accept . It the commitment is an output, the value of this property SHOULD be one of: produce , deliverService , dropoff , modify . See the action definitions and behaviors for more information. inputOf : the process for which this commitment is an input. Either inputOf or outputOf is REQUIRED. outputOf : the process for which this commitment is an output. Either inputOf or outputOf is REQUIRED. context (OPTIONAL): the plan the commitment is part of. resourceConformsTo (RECOMMENDED): the type of an economic resource (can be a skill or type of work for the work action). Could be any URI. resourceQuantity : the amount and unit of the non-effort-based economic resource. Either resourceQuantity or effortQuantity is RECOMMENDED, and both can be included in case of use . This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. effortQuantity : the amount and unit of the work or use effort-based action. Either resourceQuantity or effortQuantity is RECOMMENDED, and both can be included in case of use . This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. provider (RECOMMENDED): the actor who commits to providing the resource. If not included, it is assumed to be the attributedTo actor. receiver (RECOMMENDED): the actor who commits to receiving the resource. If not included, it is assumed to be the to actor. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Commitment\": \"vf:Commitment\", \"inputOf\": \"vf:inputOf\", \"receiver\": \"vf:receiver\", \"provider\": \"vf:provider\", \"action\": \"vf:action\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"effortQuantity\": \"vf:effortQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Create\", \"id\": \"https://project.example/activities/ad2f7ee1-6567-413e-a10b-72650cbdc743/create\", \"actor\": \"https://project.example/actors/eleanore\", \"object\": { \"type\": \"Commitment\", \"id\": \"https://project.example/inputs/ad2f7ee1-6567-413e-a10b-72650cbdc743\", \"attributedTo\": \"https://project.example/actors/eleanore\", \"context\": \"https://project.example/plans/ddde9d6f-6f3b-4770-a966-3a18ef006931\", \"published\": \"2024-09-21T14:13:41.843794Z\", \"inputOf\": \"https://project.example/processes/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q3485549\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"5\" }, \"provider\": \"https://project.example/actors/eleanore\", \"receiver\": \"https://project.example/actors/gleaning-collective\" }, \"to\": \"https://project.example/actors/alice\" }","title":"Adding a Commitment to the Plan"},{"location":"fep/fep-3264/#recording-what-actually-was-done","text":"Actual economic activity is represented with EconomicEvents in Valueflows. Economic events can be recorded as fulfilling a planned commitment, or by themselves if they were not explicitly planned. In either case, in the scope of this FEP, they are also inputs or outputs of a process. This FEP does not include creating and updating of actual resource inventory, which is also effected through economic events. The representation of an economic event is a JSON document with the following properties: id (REQUIRED): the economic event's unique global identifier. type (REQUIRED): the type of the object SHOULD be EconomicEvent . If interoperability with other ActivityPub services is desirable, implementers MAY also use object types from Activity Vocabulary , such as Note . attributedTo (REQUIRED): the actor who published the economic event. content (OPTIONAL): the description of the economic event or communication about the economic event. The type of content SHOULD be text/html . published (RECOMMENDED): the date and time at which the economic event was published. to (REQUIRED): the audience of the economic event. action (REQUIRED): the type of economic transaction. If the economic event is an input, the value of this property SHOULD be one of: work , use , consume , cite , pickup , accept . It the economic event is an output, the value of this property SHOULD be one of: produce , deliverService , dropoff , modify . See the action definitions and behaviors for more information. fulfills : the commitment the economic event is completely or partially fulfilling, REQUIRED if there is sucn a commitment, otherwise N/A. inputOf : the process for which this economic event is an input. Either inputOf or outputOf is REQUIRED. outputOf : the process for which this commitment is an output. Either inputOf or outputOf is REQUIRED. context (OPTIONAL): the plan the economic event is part of. resourceConformsTo (RECOMMENDED): the type of an economic resource (can be a skill or type of work for the work action). Could be any URI. resourceQuantity : the amount and unit of the non-effort-based economic resource. Either resourceQuantity or effortQuantity is RECOMMENDED, and both can be included in case of use . This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. effortQuantity : the amount and unit of the work or use effort-based action. Either resourceQuantity or effortQuantity is RECOMMENDED, and both can be included in case of use . This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. provider (RECOMMENDED): the actor who provided the resource. If not included, it is assumed to be the attributedTo actor. receiver (RECOMMENDED): the actor who received the resource. If not included, it is assumed to be the to actor. finished (OPTIONAL): set to true if this economic event completes the commitment. (Note more than one economic event can be recorded against the same commitment.) { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"EconomicEvent\": \"vf:EconomicEvent\", \"inputOf\": \"vf:inputOf\", \"receiver\": \"vf:receiver\", \"provider\": \"vf:provider\", \"action\": \"vf:action\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"effortQuantity\": \"vf:effortQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\", \"finished\": \"vf:finished\" } ], \"type\": \"Create\", \"id\": \"https://project.example/activities/ad2f7ee1-6567-413e-a10b-72650cbdc932/create\", \"actor\": \"https://project.example/actors/bob\", \"object\": { \"type\": \"EconomicEvent\", \"id\": \"https://project.example/inputs/ad2f7ee1-6567-413e-a10b-72650cbdc932\", \"attributedTo\": \"https://project.example/actors/bob\", \"context\": \"https://project.example/plans/ddde9d6f-6f3b-4770-a966-3a18ef006931\", \"published\": \"2024-10-21T14:16:41.843794Z\", \"fulfills\": \"https://project.example/inputs/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider4\", \"inputOf\": \"https://project.example/processes/ddde9d6f-6f3b-4770-a966-3a18ef006931#cider\", \"action\": \"work\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q3485549\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"6.5\" }, \"provider\": \"https://project.example/actors/bob\", \"receiver\": \"https://project.example/actors/gleaning-collective\", \"finished\": true }, \"to\": \"https://project.example/actors/alice\" }","title":"Recording what actually was done"},{"location":"fep/fep-3264/#_1","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Valueflows] Lynn Foster, elf Pavlik, Bob Haugen Valueflows , 2024 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 [Activity Vocabulary] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [Ontology of units of Measure] Hajo Rijgersberg, Don Willems, Xin-Ying Ren, Mari Wigham, Jan Top, Ontology of units of Measure , 2017","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-3264/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-37f2/","text":"FEP-37f2: a policy for calls for consensus on SWICG group decisions Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary A FEP proposing that W3C Social Web Incubator Community Group harmonize its process with other W3C Groups as well as the Fediverse Enhancement Process on socialhub.activitypub.rocks by: * posting Calls for Consensus on the SWICG mailing list public-swicg@w3.org * engaging other SWICG fora like socialhub.activitypub.rocks (linked to as \"Forum\" from the SWICG Webpage ) * having a shared response period Introduction The Social Web Incubation Community Group is missing an explicit decision-making policy, which essentially all other W3C community groups have to ensure asynchronous and healthy consensus mechanisms across timezones and participatory modes. Proposal W3C SWICG will seek to make decisions through consensus and due process, per the W3C Process Document, \u00a75.2.1 Consensus . To afford asynchronous decisions and organizational deliberation, any resolution (including publication decisions) taken in a face-to-face meeting or teleconference will be considered provisional. A call for consensus (CFC) will be issued for all resolutions via email to public-swicg@w3.org ( archives ). The presence of formal resolutions will be indicated by a \"CFC\" prefix in the subject line of the email. Additional outreach to community venues for more affirmative consent is strongly encouraged. There will be a response period of 14 days. If no sustained objections are raised by the end of the response period, the resolution will be considered to have consensus as a resolution of the Community Group, i.e. a group decision. All decisions made by the group should be considered resolved unless and until new information becomes available or unless reopened at the discretion of the Chairs or the Director. This policy is an operational agreement per the W3C Community and Business Group Process . Context W3C Groups with Similar Decision Policies These community groups and working groups have similar decision policies with tentative meeting resolutions and confirmation of calls for consensus via email: WebAssembly Community Group Charter Credentials Community Group Charter (see section \"Transparency\") Web Extensions Community Group Charter Web of Things Interest Group Charter HTML Working Group Charter Web Platform Working Group Charter Web Applications Working Group Charter Media Working Group Charter Web Performance Working Group Charter Service Workers Working Group Charter Verifiable Credentials Working Group Charter JSON-LD Working Group Charter WebAssembly Working Group Charter Web Authentication Working Group Charter Immersive Web Working Group Charter Web Payments Working Group Charter Devices and Sensors Working Group Charter Distributed Tracing Working Group Charter Web Editing Working Group Charter Internationalization Working Group Charter Publishing Maintenance Working Group Charter Solid Community Group Charter (see section \"Decision Policy\") Decentralized Identifier Working Group Charter Proposal processes on SWICG Forum with identical response period: FEP-a4ed: The Fediverse Enhancement Proposal Process W3C Community Group Process W3C SWICG is a W3C Community Group (CG). CGs are described in their process document as follows (excerpted for concision): This document defines W3C Community Groups, where anyone may develop Specifications, hold discussions, develop tests, and so on, with no participation fee. \u2026 Community Groups that develop specifications do so under policies designed to strike a balance between ease of participation and safety for implementers and patent holders \u2026 A Community Group may adopt operational agreements\u2026 that establish the group\u2019s scope of work, decision-making processes, communications preferences, and other operations. \u2026 The following rules govern Community Group operational agreements: * They must be publicly documented. * They must be fair and must not unreasonably favor or discriminate against any group participant or their employer. * They must not conflict with or modify this Community and Business Group Process, the Community Contributor License Agreement (CLA) , or the Final Specification Agreement . \u2026 the Chair determines the means by which the group adopts and modifies operational agreements. The Chair must give actual notice to the participants of any material changes to the agreements. Participants may resign from the group if they do not wish to participate under the new agreements. \u2026 Note : W3C encourages groups adopt decision-making policies that promote consensus. \u2026 Each Community Group must have at least one Chair who is responsible for ensuring the group fulfills the requirements of this document as well as the group\u2019s operational agreements. Related Reading IETF RFC7282 On Consensus and Humming in the IETF Doty, Nick, and Deirdre K. Mulligan. 2013. \"Internet Multistakeholder Processes and Techno-Policy Standards: Initial Reflections on Privacy at the World Wide Web Consortium\" Journal on Telecommunications and High Technology Law 11. Harmonization (standards), en.wikipedia.org Editorial Notes The title of this proposal was generated in line with norms established by Content addressed vocabulary for extensions and FEP-a4ed: The Fediverse Enhancement Proposal Process . \u26a1 P='a policy for calls for consensus on SWICG group decisions' \u26a1 echo \"SWIP-$(echo -n \"$P\" | sha256sum | cut -c-4): $P\" SWIP-37f2: a policy for calls for consensus on group decisions The 'SW' in 'SWIP' stands for 'Social Web'. This proposal was initially published at: * https://socialweb.coop/SWIP/37f2/a-policy-for-calls-for-consensus-on-swicg-group-decisions/ Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Proposal have waived all copyright and related or neighboring rights to this work.","title":"FEP-37f2: a policy for calls for consensus on SWICG group decisions"},{"location":"fep/fep-37f2/#fep-37f2-a-policy-for-calls-for-consensus-on-swicg-group-decisions","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-37f2: a policy for calls for consensus on SWICG group decisions"},{"location":"fep/fep-37f2/#summary","text":"A FEP proposing that W3C Social Web Incubator Community Group harmonize its process with other W3C Groups as well as the Fediverse Enhancement Process on socialhub.activitypub.rocks by: * posting Calls for Consensus on the SWICG mailing list public-swicg@w3.org * engaging other SWICG fora like socialhub.activitypub.rocks (linked to as \"Forum\" from the SWICG Webpage ) * having a shared response period","title":"Summary"},{"location":"fep/fep-37f2/#introduction","text":"The Social Web Incubation Community Group is missing an explicit decision-making policy, which essentially all other W3C community groups have to ensure asynchronous and healthy consensus mechanisms across timezones and participatory modes.","title":"Introduction"},{"location":"fep/fep-37f2/#proposal","text":"W3C SWICG will seek to make decisions through consensus and due process, per the W3C Process Document, \u00a75.2.1 Consensus . To afford asynchronous decisions and organizational deliberation, any resolution (including publication decisions) taken in a face-to-face meeting or teleconference will be considered provisional. A call for consensus (CFC) will be issued for all resolutions via email to public-swicg@w3.org ( archives ). The presence of formal resolutions will be indicated by a \"CFC\" prefix in the subject line of the email. Additional outreach to community venues for more affirmative consent is strongly encouraged. There will be a response period of 14 days. If no sustained objections are raised by the end of the response period, the resolution will be considered to have consensus as a resolution of the Community Group, i.e. a group decision. All decisions made by the group should be considered resolved unless and until new information becomes available or unless reopened at the discretion of the Chairs or the Director. This policy is an operational agreement per the W3C Community and Business Group Process .","title":"Proposal"},{"location":"fep/fep-37f2/#context","text":"","title":"Context"},{"location":"fep/fep-37f2/#w3c-groups-with-similar-decision-policies","text":"These community groups and working groups have similar decision policies with tentative meeting resolutions and confirmation of calls for consensus via email: WebAssembly Community Group Charter Credentials Community Group Charter (see section \"Transparency\") Web Extensions Community Group Charter Web of Things Interest Group Charter HTML Working Group Charter Web Platform Working Group Charter Web Applications Working Group Charter Media Working Group Charter Web Performance Working Group Charter Service Workers Working Group Charter Verifiable Credentials Working Group Charter JSON-LD Working Group Charter WebAssembly Working Group Charter Web Authentication Working Group Charter Immersive Web Working Group Charter Web Payments Working Group Charter Devices and Sensors Working Group Charter Distributed Tracing Working Group Charter Web Editing Working Group Charter Internationalization Working Group Charter Publishing Maintenance Working Group Charter Solid Community Group Charter (see section \"Decision Policy\") Decentralized Identifier Working Group Charter Proposal processes on SWICG Forum with identical response period: FEP-a4ed: The Fediverse Enhancement Proposal Process","title":"W3C Groups with Similar Decision Policies"},{"location":"fep/fep-37f2/#w3c-community-group-process","text":"W3C SWICG is a W3C Community Group (CG). CGs are described in their process document as follows (excerpted for concision): This document defines W3C Community Groups, where anyone may develop Specifications, hold discussions, develop tests, and so on, with no participation fee. \u2026 Community Groups that develop specifications do so under policies designed to strike a balance between ease of participation and safety for implementers and patent holders \u2026 A Community Group may adopt operational agreements\u2026 that establish the group\u2019s scope of work, decision-making processes, communications preferences, and other operations. \u2026 The following rules govern Community Group operational agreements: * They must be publicly documented. * They must be fair and must not unreasonably favor or discriminate against any group participant or their employer. * They must not conflict with or modify this Community and Business Group Process, the Community Contributor License Agreement (CLA) , or the Final Specification Agreement . \u2026 the Chair determines the means by which the group adopts and modifies operational agreements. The Chair must give actual notice to the participants of any material changes to the agreements. Participants may resign from the group if they do not wish to participate under the new agreements. \u2026 Note : W3C encourages groups adopt decision-making policies that promote consensus. \u2026 Each Community Group must have at least one Chair who is responsible for ensuring the group fulfills the requirements of this document as well as the group\u2019s operational agreements.","title":"W3C Community Group Process"},{"location":"fep/fep-37f2/#related-reading","text":"IETF RFC7282 On Consensus and Humming in the IETF Doty, Nick, and Deirdre K. Mulligan. 2013. \"Internet Multistakeholder Processes and Techno-Policy Standards: Initial Reflections on Privacy at the World Wide Web Consortium\" Journal on Telecommunications and High Technology Law 11. Harmonization (standards), en.wikipedia.org","title":"Related Reading"},{"location":"fep/fep-37f2/#editorial-notes","text":"The title of this proposal was generated in line with norms established by Content addressed vocabulary for extensions and FEP-a4ed: The Fediverse Enhancement Proposal Process . \u26a1 P='a policy for calls for consensus on SWICG group decisions' \u26a1 echo \"SWIP-$(echo -n \"$P\" | sha256sum | cut -c-4): $P\" SWIP-37f2: a policy for calls for consensus on group decisions The 'SW' in 'SWIP' stands for 'Social Web'. This proposal was initially published at: * https://socialweb.coop/SWIP/37f2/a-policy-for-calls-for-consensus-on-swicg-group-decisions/","title":"Editorial Notes"},{"location":"fep/fep-37f2/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-3b86/","text":"FEP-3b86: Activity Intents Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary \"Activity Intents\" extend the capabilities of an ActivityPub server beyond a user's outbox, and enable direct interactions with content on the wider social web. They do this by publishing a machine-readable list of public URLs where users can perform key activities (such as Follow , Like , or Announce ) allowing other websites to initiate remote social interactions without cumbersome copying/pasting of URL strings. 1. Requirements The key words \"MUST\", \"SHOULD\", and \"MAY\" are to be interpreted as described in RFC2119 . For the purposes of this document, a \"Home Server\" is the location where a user is logged in, and that publishes the Actor's Activity Intents via WebFinger. A \"Remote Server\" is another location on the Internet that the user wants to interact with, and that will request/receive those intents via WebFinger. 2. History Most centralized social media services have widgets that allow users on the wider Internet to interact with their social services. These include \"like\" and \"share\" buttons that third-party websites embed into their content, and link users back to their corresponding social media account. This is difficult to achieve in a federated environment. There have been other attempts to make a \"Share on Mastodon\" button that performs a similar action on the Fediverse. But these tasks are implemented differently by different Fediverse servers. For example, Mastodon uses /share , while Hubzilla uses /rpost . Parameters to each application are often different, using variations of text , title , url , and other values. The lack of a unified standard has led developers to hard-code endpoints for each distinct application. This is brittle and vulnerable to changes by server authors. It also pins those URL endpoints, making them difficult for servers to change in the future without breaking an unknown number of \"share\" buttons out in the wild. What is needed is a systematic way for each server to announce the endpoint URLs that they support. 3. Activity Intents In the most basic terms, Activity Intents expand on the common Fediverse use of WebFinger in FEP-4adb to include mappings between any Activity Type and the URL endpoint where that user can perform it. This expands and standardizes the \"remote follow\" workflow that was used by oStatus protocol, but has not been fully implemented by newer Fediverse applications and no longer has a public specification document. When generating a WebFinger result for a user account, servers supporting Activity Intents SHOULD respond with one or more intent links in the \"links\" property . Activity Intent links MUST have rel and href properties. All others properties are ignored. 3.1. Example Here is an example response from a WebFinger server which includes three Activity Intents appended to the end of its links property. { \"subject\": \"acct:benpate@mastodon.social\", \"aliases\": [ \"https://mastodon.social/@benpate\", \"https://mastodon.social/users/benpate\" ], \"links\": [ { \"rel\": \"http://webfinger.net/rel/profile-page\", \"type\": \"text/html\", \"href\": \"https://mastodon.social/@benpate\" }, { \"rel\": \"self\", \"type\": \"application/activity+json\", \"href\": \"https://mastodon.social/users/benpate\" }, { \"rel\": \"http://ostatus.org/schema/1.0/subscribe\", \"template\": \"https://mastodon.social/authorize_interaction?uri={uri}\" }, { \"rel\": \"https://w3id.org/fep/3b86/Follow\", \"href\": \"https://mastodon.social/authorize_interaction?uri={object}\" }, { \"rel\": \"https://w3id.org/fep/3b86/Create\", \"href\": \"https://mastodon.social/share?uri={object}\" }, { \"rel\": \"https://w3id.org/fep/3b86/Like\", \"template\": \"https://mastodon.social/intents/like?id={object}\" } ] } 3.2. Required Link Properties rel : Activity Intents use the https://w3id.org/fep/3b86/* (as described in FEP-888d ) to designate the kind of activity intent, where * represents the particular Activity the user intends to perform. These relations -- such as https://w3id.org/fep/3b86/Follow , and https://w3id.org/fep/3b86/Create -- are listed in detail below. href : Links also use the standard WebFinger href property, but also include wrapped replace values (as in {uri} or {name} ) to designate parameters to be injected by the caller. (note: this is in contrast to the non-standard template property that was used by oStatus) Parameter names are chosen to correspond with Activity Vocabulary properties and may differ from parameters used by pre-existing implementations. To prevent unrecognized properties from corrupting a workflow: * Remote servers MUST be able to replace all recognized values with the appropriate string. * Remote servers MUST replace unrecognized values with an empty string. 3.3 Template Parameters In all cases, Activity Intents intentionally use the property names defined in the W3C standard Activity Vocabulary . However, intents must fit into a URL, and must use commonly understood fields. So, Intent parameters can only use IDs -- URL references to JSON-LD resources available elsewhere on the Internet. In addition, remote servers MUST Percent Encode all values replaced in the href template. 3.4 Workflow Actions Activity Intents MAY include additional query parameters on-success and on-cancel that allow home servers to return users to their original workflow on the remote server: on-success - If present in the link template, this value identifies the action that the home server SHOULD take once the Activity Intent workflow is complete. If this parameter is missing, then the resulting page is left up to the home server to choose. on-cancel - If present in the link template, this value identifies the action that the home server SHOULD take if they abort the Activity Intent workflow. If this parameter is missing, then the resulting page is left up to the home server to choose. Action: (close) If the value of either on-success or on-cancel parameter is the string (close) then the home server can assume that it is running in a pop-up window, and SHOULD close the current window. Action: Redirecting to a URL If the value of either on-success or on-cancel query parameter is a valid URL, then the home server SHOULD redirect clients to the provided URL. When redirecting to a new URL, the home server MUST use an interstitial page that notified the user that they are being redirected, and displays the URL of the new page to them. IMPORTANT! Unvalidated Redirects are a documented vulnerability that opens the home server up to phishing attacks. To avoid a potential security vulnerability when handling on-success and on-cancel workflows, it is important that the home server: \"Force all redirects to first go through a page notifying users that they are going off of your site, with the destination clearly displayed, and have them click a link to confirm.\" ( owasp.org ) 3.5 Endpoint Expectations The user's home server is a trusted environment that manages the user's sign-in status along with the rest of their social inbox and outbox. When the remote server links to an Activity Intent provided by the home server, the layout, fields, and UI are all determined by the home server Remote servers MAY open Activity Intent links in many different environments, such as: 1. a full browser window 2. a small pop-up window 3. a mobile app HTML view 4. or other constrained environments. Home servers SHOULD build their UI with minimal assumptions so that the endpoint will fit well into as many environments as possible. Home servers may not be aware f the remote server opens the Activity Intent link in a separate popup window, so remote servers SHOULD include on-success and on-cancel parameters that redirect back to its own pages so that it can close the pop-up itself. 4. Intent Definitions 4.1. Accept Intent This intent corresponds to the ActivityStreams Accept activity and is defined using the link relation https://w3id.org/fep/3b86/Accept . The Accept intent publishes the API endpoint where the current user can \"accept\" the designated object. 4.1.1. Parameters {object} - ID of the object that the user will accept when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.1.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Accept\", \"href\": \"https://server.org/intents/accept?objectId={object}\" } 4.2. Add Intent This intent corresponds to the ActivityStreams Add activity and is defined using the link relation https://w3id.org/fep/3b86/Add . The Add intent publishes the API endpoint where the current user can add an object to the designated collection.. 4.2.1. Parameters {object} ID of the object that the user will add when they use this workflow. {target} ID of the collection being added to. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.2.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Add\", \"href\": \"https://server.org/intents/add?objectId={object}&targetId={target}\" } 4.3. Announce Intent This intent corresponds to the ActivityStreams Announce activity and is defined using the link relation https://w3id.org/fep/3b86/Announce . The Announce intent publishes the API endpoint where the current user can announce, or \"boost\" the provided document in their home server. 4.3.1. Parameters {object} - ID of the document that the user will boost when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.3.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Announce\", \"href\": \"https://server.org/intents/announce?objectId={object}\" } 4.4. Arrive Intent This intent corresponds to the ActivityStreams Arrive activity and is defined using the link relation https://w3id.org/fep/3b86/Arrive . The Arrive intent publishes the API endpoint where the current user can indicate that they have arrived at a particular location from their home server. 4.4.1. Parameters {location} - ID of the location object where the user will mark as \"arrived\" when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.4.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Arrive\", \"href\": \"https://server.org/intents/arrive?hotelId={location}\" } 4.5. Block Intent This intent corresponds to the ActivityStreams Block activity and is defined using the link relation https://w3id.org/fep/3b86/Block . The Block intent publishes the API endpoint where the current user can block the provided object from their home server. 4.5.1. Parameters {object} - ID of the object (document, user, etc) that the user will block when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.5.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Block\", \"href\": \"https://server.org/intents/block?userId={object}\" } 4.6. Create Intent This intent corresponds to the ActivityStreams Create activity and is defined using the link relation https://w3id.org/fep/3b86/Create . The Create intent publishes the API endpoint where the current user can create a new post in their own outbox. This is similar to the existing \"share\" endpoints supported by several Fediverse apps, where the user can create a new post in their inbox starting with some pre-populated content. This Intent differs slightly from others in that it does not take IDs/URLs of other objects, but parameters to pre-populate into a new object to be created by the user. 4.6.1. Parameters {content} - Text content to pre-populate into the created object. {type} - (optional) Type of object to create (Note, Article, etc). Home servers can determine whether to use or ignore this value. {name} - (optional) Name to pre-populate into the created object. {summary} - (optional) Summary to pre-populate into the created object. {inReplyTo} - (optional)The ID of the ActivityStreams Document that the user is replying to. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.6.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Create\", \"href\": \"https://mastodon.social/share?text={content}\" } 4.7. Delete Intent This intent corresponds to the ActivityStreams Delete activity and is defined using the link relation https://w3id.org/fep/3b86/Delete . The Delete intent publishes the API endpoint where the current user can initiate a \"delete\" request. 4.7.1. Parameters {object} - ID of the object that the user will delete when they use this workflow. {origin} - (optional) ID of the collection or context that the object will be deleted from. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.7.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Delete\", \"href\": \"https://server.org/intents/Delete?objectId={object}\" } 4.8. Dislike Intent This intent corresponds to the ActivityStreams Dislike activity and is defined using the link relation https://w3id.org/fep/3b86/Dislike . The Dislike intent publishes the API endpoint where the current user can initiate a \"dislike\" request. 4.8.1. Parameters {object} - ID of the document that the user will dislike when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.8.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Dislike\", \"href\": \"https://server.org/intent/dislike?objectId={object}\" } 4.9. Flag Intent This intent corresponds to the ActivityStreams Flag activity and is defined using the link relation https://w3id.org/fep/3b86/Flag . The Flag intent publishes the API endpoint where the current user can initiate a \"flag\" request, which is used to report inappropriate content. 4.9.1. Parameters {object} - ID of the object (document, user, etc) that the user will flag when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.9.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Flag\", \"href\": \"https://server.org/intent/flag?objectId={object}\" } 4.10. Follow Intent This intent corresponds to the ActivityStreams Follow activity and is defined using the link relation https://w3id.org/fep/3b86/Follow . The Follow intent publishes the API endpoint where the current user can initiate a \"follow\" request. This is similar to the remote follow workflow defined by oStatus that is still supported at various levels by several Fediverse apps, but is no longer formally documented. 4.10.1. Parameters {object} - ID of the actor that the user will follow when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.10.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Follow\", \"href\": \"https://mastodon.social/authorize_interaction?uri={object}\" } 4.11. Ignore Intent This intent corresponds to the ActivityStreams Ignore activity and is defined using the link relation https://w3id.org/fep/3b86/Ignore . The Ignore intent publishes the API endpoint where the current user can initiate an \"ignore\" request, which is similar to a Block, and is used to ignore or mute various actors and objects online 4.11.1 Parameters {object} - ID of the object that the user will mark \"ignored\" when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.11.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Ignore\", \"href\": \"https://server.org/intents/ignore?objectId={object}\" } 4.12. Invite Intent This intent corresponds to the ActivityStreams Invite activity and is defined using the link relation https://w3id.org/fep/3b86/Invite . The Invite intent publishes the API endpoint where the current user can initiate an \"invite\" request, which is similar to an Offer, and is used to extend an invitation for the object to the target 4.12.1. Parameters {target} - ID of the actor who will receive the invitation. {object} - ID of the object (event, group, etc) that the actor will be invited to. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.12.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Invite\", \"href\": \"https://server.org/intents/invite?actorId={object}&eventId={target}\" } 4.13. Join Intent This intent corresponds to the ActivityStreams Join activity and is defined using the link relation https://w3id.org/fep/3b86/Join . The Join intent publishes the API endpoint where the current user can initiate a \"join\" request. 4.13.1. Parameters {object} - ID of the object that the user will join when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.13.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Join\", \"href\": \"https://server.org/intents/join?objectId={object}\" } 4.14. Leave Intent This intent corresponds to the ActivityStreams Leave activity and is defined using the link relation https://w3id.org/fep/3b86/Leave . The Leave intent publishes the API endpoint where the current user can initiate a \"leave\" request. 4.14.1. Parameters {object} - ID of the object that the user will leave when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.14.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Leave\", \"href\": \"https://server.org/intents/leave?objectId={object}\" } 4.15. Like Intent This intent corresponds to the ActivityStreams Like activity and is defined using the link relation https://w3id.org/fep/3b86/Like . The Like intent publishes the API endpoint where the current user can like the current document. 4.15.1. Parameters {object} - ID of the object that the user will mark as \"liked\" when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.15.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Like\", \"href\": \"https://server.com/intents/like?objectId={object}\" } 4.16. Listen Intent This intent corresponds to the ActivityStreams Listen activity and is defined using the link relation https://w3id.org/fep/3b86/Listen . The Listen intent publishes the API endpoint where the current user can initiate a \"listen\" request. 4.16.1. Parameters {object} - ID of the object that the user will mark as \"listened\" to when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.16.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Listen\", \"href\": \"https://server.org/intents/listen?objectId={object}\" } 4.17. Move Intent This intent corresponds to the ActivityStreams Move activity and is defined using the link relation https://w3id.org/fep/3b86/Move . The Move intent publishes the API endpoint where the current user can initiate a \"move\" request. 4.17.1. Parameters {object} - ID of the object that the user will move when they use this workflow. {target} - ID of the collection that the object will be moved to. {origin} - (optional) ID of the collection that the object will be moved from. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.17.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Move\", \"href\": \"https://server.org/intents/move?objectId={object}&destId={target}\" } 4.18. Offer Intent This intent corresponds to the ActivityStreams Offer activity and is defined using the link relation https://w3id.org/fep/3b86/Offer . The Offer intent publishes the API endpoint where the current user can initiate an \"offer\" request. 4.18.1. Parameters {object} - ID of the object that the user will offer when they use this workflow. {target} - ID of the actor that will receive the offer. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.18.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Offer\", \"href\": \"https://server.org/intents/offer?objectId={object}&to={target}\" } 4.19. Question Intent This intent corresponds to the ActivityStreams Question activity and is defined using the link relation https://w3id.org/fep/3b86/Question . The Question intent publishes the API endpoint where the current user can initiate an \"question\" workflow. 4.19.1. Parameters {name} - The \"name\" property to pre-populate into the question the user will ask when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.19.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Question\", \"href\": \"https://server.org/intents/question?name={name}\" } 4.20. Read Intent This intent corresponds to the ActivityStreams Read activity and is defined using the link relation https://w3id.org/fep/3b86/Read . The Read intent publishes the API endpoint where the current user can initiate an \"read\" request. 4.20.1. Parameters {object} - ID of the object that the user will mark as \"read\" when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.20.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Read\", \"href\": \"https://server.org/intents/object?objectId={object}\" } 4.21. Reject Intent This intent corresponds to the ActivityStreams Reject activity and is defined using the link relation https://w3id.org/fep/3b86/Reject . The Reject intent publishes the API endpoint where the current user can initiate an \"reject\" request. 4.21.1. Parameters {object} - ID of the object that the user will reject when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.21.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Reject\", \"href\": \"https://server.org/intents/reject?offerId={object}\" } 4.22. Remove Intent This intent corresponds to the ActivityStreams Remove activity and is defined using the link relation https://w3id.org/fep/3b86/Remove . The Remove intent publishes the API endpoint where the current user can initiate a \"remove\" request. 4.22.1. Parameters {object} - ID of the object that the user will remove when they use this workflow. {target} - (optional) The ID of the collection that the object will be removed from. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.22.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Reject\", \"href\": \"https://server.org/intents/reject?objectId={object}\" } 4.23. TentativeAccept Intent This intent corresponds to the ActivityStreams TentativeAccept activity , which itself is a specialization of the Accept activity and is defined using the link relation https://w3id.org/fep/3b86/TentativeAccept . The TentativeAccept intent publishes the API endpoint where the current user can initiate an \"tentative accept\" request, indicating that acceptance of the original offer is tentative. 4.23.1. Parameters {object} - ID of the object that the user will tentatively accept when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.23.2. Example { \"rel\": \"https://w3id.org/fep/3b86/TentativeAccept\", \"href\": \"https://server.org/intents/tentativeAccept?objectId={object}\" } 4.24. TentativeReject Intent This intent corresponds to the ActivityStreams TentativeReject activity , which itself is a specialization of the Reject activity and is defined using the link relation https://w3id.org/fep/3b86/TentativeReject . The TentativeReject intent publishes the API endpoint where the current user can initiate an \"tentative reject\" request, indicating that rejection of the original offer is tentative. 4.24.1. Parameters {object} - ID of the object that the user will tentatively reject when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.24.2. Example { \"rel\": \"https://w3id.org/fep/3b86/TentativeReject\", \"href\": \"https://server.org/intents/tentativeReject?objectId={object}\" } 4.25. Travel Intent This intent corresponds to the ActivityStreams Travel activity and is defined using the link relation https://w3id.org/fep/3b86/Travel . The Travel intent publishes the API endpoint where the user can initiate a \"travel\" request. 4.25.1. Parameters {target} - (optional) The ID of the location that the actor will travel to. {origin} - (optional) The ID of the location that the actor will travel from. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.25.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Travel\", \"href\": \"https://server.org/intents/travel?from={origin}&to={target}\" } 4.26. Undo Intent This intent corresponds to the ActivityStreams Undo activity and is defined using the link relation https://w3id.org/fep/3b86/Undo . The Undo intent publishes the API endpoint where the current user can initiate a \"travel\" request. 4.26.1. Parameters {object} - ID of the activity that the actor will undo. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect users if they abort the workflow. 4.26.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Undo\", \"href\": \"https://server.org/intents/undo?activityId={object}\" } 4.27. Update Intent This intent corresponds to the ActivityStreams Update activity and is defined using the link relation https://w3id.org/fep/3b86/Update . The Update intent publishes the API endpoint where the user can initiate an \"update\" request. 4.27.1. Parameters {object} - ID of the object that the actor will update when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.27.2. Example { \"rel\": \"https://w3id.org/fep/3b86/Update\", \"href\": \"https://server.org/intents/update?objectId={object}\" } 4.28. View Intent This intent corresponds to the ActivityStreams View activity and is defined using the link relation https://w3id.org/fep/3b86/Update . The View intent publishes the API endpoint where the current user can initiate an \"update\" request. 4.28.1. Parameters {object} - ID of the object that the actor will mark as \"viewed\" when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow. 4.28.2. Example { \"rel\": \"https://w3id.org/fep/3b86/View\", \"href\": \"https://server.org/intents/view?objectId={object}\" } 5.0. Security Considerations 5.1 CSRF issues It is important to reiterate some key security practices to prevent Cross Site Request Forgery vulnerabilities. Remote Servers MUST only send GET requests to Home Servers. Home Servers MUST NOT change data based on GET requests. Home Servers SHOULD protect these published endpoints by generating CSRF tokens and including them with every POST request. This validates that the request originated on the user's home server, and was initiated by the user. See OWASP Related Controls for in-depth discussion. 5.2 Open/Unvalidated Redirects Activity Intents includes the ability for home servers to redirect browsers to new URLs based on the on-success and on-cancel query parameters. If improperly implemented, this has the potential to expose an Unvalidated Redirect vulnerability, which can open the home server up to phishing attack. To avoid a potential security vulnerability when handling on-success and on-cancel workflows, it is important that the home server: \"Force all redirects to first go through a page notifying users that they are going off of your site, with the destination clearly displayed, and have them click a link to confirm.\" ( owasp.org ) There is another good description of this issue OAuth 2.0 Security Best Current Practice \u00a7 4.11. Open Redirection 6.0. Remote Servers: The Rest of the Equation This FEP provides the prerequisite information required for a \"Home Server\" publish Activity Intents for its Actors. It does not specify how \"Remote Servers\" will use this information - i.e., how they implement \"share\" and \"like\" buttons in their content. 6.1. Remote Server Example Here is a brief example of the workflow as implemented by a remote server: A user visits a remote server (i.e., any address on the Internet where they do not have an ActivityPub account) The remote server displays buttons such as \"like\" or \"share\" for a particular document or object. When the user clicks on one of these links, the remote server checks to see if the user is already recognized. This does not necessarily mean logged in, or authenticated, just whether or not the user has entered their home server credentials before. True authentication on the remote server is not necessary for Activity Intents to work. If the user is not recognized, then they are prompted to enter their Fediverse ID (such as @benpate@mastodon.social). The remote server can save this information for use in the future (preferably in a private data store, such as localStorage ) If the user is recognized, this means they have already completed step 3.1, and can continue to step 4. The remote server uses a standard WebFinger query to look up the user's Fediverse ID and searches for Activity Intents supported by the user's home server. If none are found, the remote server MAY try to substitute fallback values for known server types. If none are found (and no fallbacks substituted) the remote server SHOULD inform the user that their account is incompatible with the selected feature and halt the workflow. The remote server replaces values into the designated href template and forwards the user to the assigned page on their home server. This initiates the Activity Intent workflow on their home server. When the user completes the workflow, the home server SHOULD use URL in the on-success parameter to redirect the user back to the correct page on the remote server. Similarly, if the user cancels the workflow, the home server SHOULD use the URL in the on-cancel parameter to redirect the user back to the correct page on the remote server. 6.2. Fallbacks for Unpublished Links Remote servers MAY also account for applications that do not publish Activity Intents, but whose endpoints are still well known. In this case, remote servers SHOULD use Activity Intents links if they are present, then fall back to older links (such as the oStatus /authorize_interaction endpoint) if they are present, then fall back to hard-coded values (such as the Mastodon /share endpoint) if no other values exist. 7.0. Implementations Emissary will support this FEP once its syntax is finalized. Add your name to this list and win a cookie \ud83c\udf6a \u53c2\u8003\u6587\u732e Activity Vocabulary Twitter: Web Intents Facebook: Share Button Remote Follows - Tutorial on the original oStatus protocol Cross Site Request Forgery - Wikipedia Cross Site Request Forgery - OWASP FEP-888d - FEP-specific namespaces IETF RFC 7033 - WebFinger IETF RFC 3896 - Uniform Resource Identifier Generic Syntax IEFT RFC 2119 - Key words for use in RFCs to Indicate Requirement Levels Unvalidated Redirects and Forwards Cheat Sheet - owasp.org ) OAuth 2.0 Security Best Current Practice Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"FEP-3b86: Activity Intents"},{"location":"fep/fep-3b86/#fep-3b86-activity-intents","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-3b86: Activity Intents"},{"location":"fep/fep-3b86/#summary","text":"\"Activity Intents\" extend the capabilities of an ActivityPub server beyond a user's outbox, and enable direct interactions with content on the wider social web. They do this by publishing a machine-readable list of public URLs where users can perform key activities (such as Follow , Like , or Announce ) allowing other websites to initiate remote social interactions without cumbersome copying/pasting of URL strings.","title":"Summary"},{"location":"fep/fep-3b86/#1-requirements","text":"The key words \"MUST\", \"SHOULD\", and \"MAY\" are to be interpreted as described in RFC2119 . For the purposes of this document, a \"Home Server\" is the location where a user is logged in, and that publishes the Actor's Activity Intents via WebFinger. A \"Remote Server\" is another location on the Internet that the user wants to interact with, and that will request/receive those intents via WebFinger.","title":"1. Requirements"},{"location":"fep/fep-3b86/#2-history","text":"Most centralized social media services have widgets that allow users on the wider Internet to interact with their social services. These include \"like\" and \"share\" buttons that third-party websites embed into their content, and link users back to their corresponding social media account. This is difficult to achieve in a federated environment. There have been other attempts to make a \"Share on Mastodon\" button that performs a similar action on the Fediverse. But these tasks are implemented differently by different Fediverse servers. For example, Mastodon uses /share , while Hubzilla uses /rpost . Parameters to each application are often different, using variations of text , title , url , and other values. The lack of a unified standard has led developers to hard-code endpoints for each distinct application. This is brittle and vulnerable to changes by server authors. It also pins those URL endpoints, making them difficult for servers to change in the future without breaking an unknown number of \"share\" buttons out in the wild. What is needed is a systematic way for each server to announce the endpoint URLs that they support.","title":"2. History"},{"location":"fep/fep-3b86/#3-activity-intents","text":"In the most basic terms, Activity Intents expand on the common Fediverse use of WebFinger in FEP-4adb to include mappings between any Activity Type and the URL endpoint where that user can perform it. This expands and standardizes the \"remote follow\" workflow that was used by oStatus protocol, but has not been fully implemented by newer Fediverse applications and no longer has a public specification document. When generating a WebFinger result for a user account, servers supporting Activity Intents SHOULD respond with one or more intent links in the \"links\" property . Activity Intent links MUST have rel and href properties. All others properties are ignored.","title":"3. Activity Intents"},{"location":"fep/fep-3b86/#31-example","text":"Here is an example response from a WebFinger server which includes three Activity Intents appended to the end of its links property. { \"subject\": \"acct:benpate@mastodon.social\", \"aliases\": [ \"https://mastodon.social/@benpate\", \"https://mastodon.social/users/benpate\" ], \"links\": [ { \"rel\": \"http://webfinger.net/rel/profile-page\", \"type\": \"text/html\", \"href\": \"https://mastodon.social/@benpate\" }, { \"rel\": \"self\", \"type\": \"application/activity+json\", \"href\": \"https://mastodon.social/users/benpate\" }, { \"rel\": \"http://ostatus.org/schema/1.0/subscribe\", \"template\": \"https://mastodon.social/authorize_interaction?uri={uri}\" }, { \"rel\": \"https://w3id.org/fep/3b86/Follow\", \"href\": \"https://mastodon.social/authorize_interaction?uri={object}\" }, { \"rel\": \"https://w3id.org/fep/3b86/Create\", \"href\": \"https://mastodon.social/share?uri={object}\" }, { \"rel\": \"https://w3id.org/fep/3b86/Like\", \"template\": \"https://mastodon.social/intents/like?id={object}\" } ] }","title":"3.1. Example"},{"location":"fep/fep-3b86/#32-required-link-properties","text":"rel : Activity Intents use the https://w3id.org/fep/3b86/* (as described in FEP-888d ) to designate the kind of activity intent, where * represents the particular Activity the user intends to perform. These relations -- such as https://w3id.org/fep/3b86/Follow , and https://w3id.org/fep/3b86/Create -- are listed in detail below. href : Links also use the standard WebFinger href property, but also include wrapped replace values (as in {uri} or {name} ) to designate parameters to be injected by the caller. (note: this is in contrast to the non-standard template property that was used by oStatus) Parameter names are chosen to correspond with Activity Vocabulary properties and may differ from parameters used by pre-existing implementations. To prevent unrecognized properties from corrupting a workflow: * Remote servers MUST be able to replace all recognized values with the appropriate string. * Remote servers MUST replace unrecognized values with an empty string.","title":"3.2. Required Link Properties"},{"location":"fep/fep-3b86/#33-template-parameters","text":"In all cases, Activity Intents intentionally use the property names defined in the W3C standard Activity Vocabulary . However, intents must fit into a URL, and must use commonly understood fields. So, Intent parameters can only use IDs -- URL references to JSON-LD resources available elsewhere on the Internet. In addition, remote servers MUST Percent Encode all values replaced in the href template.","title":"3.3 Template Parameters"},{"location":"fep/fep-3b86/#34-workflow-actions","text":"Activity Intents MAY include additional query parameters on-success and on-cancel that allow home servers to return users to their original workflow on the remote server: on-success - If present in the link template, this value identifies the action that the home server SHOULD take once the Activity Intent workflow is complete. If this parameter is missing, then the resulting page is left up to the home server to choose. on-cancel - If present in the link template, this value identifies the action that the home server SHOULD take if they abort the Activity Intent workflow. If this parameter is missing, then the resulting page is left up to the home server to choose.","title":"3.4 Workflow Actions"},{"location":"fep/fep-3b86/#action-close","text":"If the value of either on-success or on-cancel parameter is the string (close) then the home server can assume that it is running in a pop-up window, and SHOULD close the current window.","title":"Action: (close)"},{"location":"fep/fep-3b86/#action-redirecting-to-a-url","text":"If the value of either on-success or on-cancel query parameter is a valid URL, then the home server SHOULD redirect clients to the provided URL. When redirecting to a new URL, the home server MUST use an interstitial page that notified the user that they are being redirected, and displays the URL of the new page to them. IMPORTANT! Unvalidated Redirects are a documented vulnerability that opens the home server up to phishing attacks. To avoid a potential security vulnerability when handling on-success and on-cancel workflows, it is important that the home server: \"Force all redirects to first go through a page notifying users that they are going off of your site, with the destination clearly displayed, and have them click a link to confirm.\" ( owasp.org )","title":"Action: Redirecting to a URL"},{"location":"fep/fep-3b86/#35-endpoint-expectations","text":"The user's home server is a trusted environment that manages the user's sign-in status along with the rest of their social inbox and outbox. When the remote server links to an Activity Intent provided by the home server, the layout, fields, and UI are all determined by the home server Remote servers MAY open Activity Intent links in many different environments, such as: 1. a full browser window 2. a small pop-up window 3. a mobile app HTML view 4. or other constrained environments. Home servers SHOULD build their UI with minimal assumptions so that the endpoint will fit well into as many environments as possible. Home servers may not be aware f the remote server opens the Activity Intent link in a separate popup window, so remote servers SHOULD include on-success and on-cancel parameters that redirect back to its own pages so that it can close the pop-up itself.","title":"3.5 Endpoint Expectations"},{"location":"fep/fep-3b86/#4-intent-definitions","text":"","title":"4. Intent Definitions"},{"location":"fep/fep-3b86/#41-accept-intent","text":"This intent corresponds to the ActivityStreams Accept activity and is defined using the link relation https://w3id.org/fep/3b86/Accept . The Accept intent publishes the API endpoint where the current user can \"accept\" the designated object.","title":"4.1. Accept Intent"},{"location":"fep/fep-3b86/#411-parameters","text":"{object} - ID of the object that the user will accept when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.1.1. Parameters"},{"location":"fep/fep-3b86/#412-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Accept\", \"href\": \"https://server.org/intents/accept?objectId={object}\" }","title":"4.1.2. Example"},{"location":"fep/fep-3b86/#42-add-intent","text":"This intent corresponds to the ActivityStreams Add activity and is defined using the link relation https://w3id.org/fep/3b86/Add . The Add intent publishes the API endpoint where the current user can add an object to the designated collection..","title":"4.2. Add Intent"},{"location":"fep/fep-3b86/#421-parameters","text":"{object} ID of the object that the user will add when they use this workflow. {target} ID of the collection being added to. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.2.1. Parameters"},{"location":"fep/fep-3b86/#422-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Add\", \"href\": \"https://server.org/intents/add?objectId={object}&targetId={target}\" }","title":"4.2.2. Example"},{"location":"fep/fep-3b86/#43-announce-intent","text":"This intent corresponds to the ActivityStreams Announce activity and is defined using the link relation https://w3id.org/fep/3b86/Announce . The Announce intent publishes the API endpoint where the current user can announce, or \"boost\" the provided document in their home server.","title":"4.3. Announce Intent"},{"location":"fep/fep-3b86/#431-parameters","text":"{object} - ID of the document that the user will boost when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.3.1. Parameters"},{"location":"fep/fep-3b86/#432-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Announce\", \"href\": \"https://server.org/intents/announce?objectId={object}\" }","title":"4.3.2. Example"},{"location":"fep/fep-3b86/#44-arrive-intent","text":"This intent corresponds to the ActivityStreams Arrive activity and is defined using the link relation https://w3id.org/fep/3b86/Arrive . The Arrive intent publishes the API endpoint where the current user can indicate that they have arrived at a particular location from their home server.","title":"4.4. Arrive Intent"},{"location":"fep/fep-3b86/#441-parameters","text":"{location} - ID of the location object where the user will mark as \"arrived\" when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.4.1. Parameters"},{"location":"fep/fep-3b86/#442-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Arrive\", \"href\": \"https://server.org/intents/arrive?hotelId={location}\" }","title":"4.4.2. Example"},{"location":"fep/fep-3b86/#45-block-intent","text":"This intent corresponds to the ActivityStreams Block activity and is defined using the link relation https://w3id.org/fep/3b86/Block . The Block intent publishes the API endpoint where the current user can block the provided object from their home server.","title":"4.5. Block Intent"},{"location":"fep/fep-3b86/#451-parameters","text":"{object} - ID of the object (document, user, etc) that the user will block when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.5.1. Parameters"},{"location":"fep/fep-3b86/#452-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Block\", \"href\": \"https://server.org/intents/block?userId={object}\" }","title":"4.5.2. Example"},{"location":"fep/fep-3b86/#46-create-intent","text":"This intent corresponds to the ActivityStreams Create activity and is defined using the link relation https://w3id.org/fep/3b86/Create . The Create intent publishes the API endpoint where the current user can create a new post in their own outbox. This is similar to the existing \"share\" endpoints supported by several Fediverse apps, where the user can create a new post in their inbox starting with some pre-populated content. This Intent differs slightly from others in that it does not take IDs/URLs of other objects, but parameters to pre-populate into a new object to be created by the user.","title":"4.6. Create Intent"},{"location":"fep/fep-3b86/#461-parameters","text":"{content} - Text content to pre-populate into the created object. {type} - (optional) Type of object to create (Note, Article, etc). Home servers can determine whether to use or ignore this value. {name} - (optional) Name to pre-populate into the created object. {summary} - (optional) Summary to pre-populate into the created object. {inReplyTo} - (optional)The ID of the ActivityStreams Document that the user is replying to. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.6.1. Parameters"},{"location":"fep/fep-3b86/#462-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Create\", \"href\": \"https://mastodon.social/share?text={content}\" }","title":"4.6.2. Example"},{"location":"fep/fep-3b86/#47-delete-intent","text":"This intent corresponds to the ActivityStreams Delete activity and is defined using the link relation https://w3id.org/fep/3b86/Delete . The Delete intent publishes the API endpoint where the current user can initiate a \"delete\" request.","title":"4.7. Delete Intent"},{"location":"fep/fep-3b86/#471-parameters","text":"{object} - ID of the object that the user will delete when they use this workflow. {origin} - (optional) ID of the collection or context that the object will be deleted from. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.7.1. Parameters"},{"location":"fep/fep-3b86/#472-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Delete\", \"href\": \"https://server.org/intents/Delete?objectId={object}\" }","title":"4.7.2. Example"},{"location":"fep/fep-3b86/#48-dislike-intent","text":"This intent corresponds to the ActivityStreams Dislike activity and is defined using the link relation https://w3id.org/fep/3b86/Dislike . The Dislike intent publishes the API endpoint where the current user can initiate a \"dislike\" request.","title":"4.8. Dislike Intent"},{"location":"fep/fep-3b86/#481-parameters","text":"{object} - ID of the document that the user will dislike when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.8.1. Parameters"},{"location":"fep/fep-3b86/#482-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Dislike\", \"href\": \"https://server.org/intent/dislike?objectId={object}\" }","title":"4.8.2. Example"},{"location":"fep/fep-3b86/#49-flag-intent","text":"This intent corresponds to the ActivityStreams Flag activity and is defined using the link relation https://w3id.org/fep/3b86/Flag . The Flag intent publishes the API endpoint where the current user can initiate a \"flag\" request, which is used to report inappropriate content.","title":"4.9. Flag Intent"},{"location":"fep/fep-3b86/#491-parameters","text":"{object} - ID of the object (document, user, etc) that the user will flag when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.9.1. Parameters"},{"location":"fep/fep-3b86/#492-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Flag\", \"href\": \"https://server.org/intent/flag?objectId={object}\" }","title":"4.9.2. Example"},{"location":"fep/fep-3b86/#410-follow-intent","text":"This intent corresponds to the ActivityStreams Follow activity and is defined using the link relation https://w3id.org/fep/3b86/Follow . The Follow intent publishes the API endpoint where the current user can initiate a \"follow\" request. This is similar to the remote follow workflow defined by oStatus that is still supported at various levels by several Fediverse apps, but is no longer formally documented.","title":"4.10. Follow Intent"},{"location":"fep/fep-3b86/#4101-parameters","text":"{object} - ID of the actor that the user will follow when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.10.1. Parameters"},{"location":"fep/fep-3b86/#4102-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Follow\", \"href\": \"https://mastodon.social/authorize_interaction?uri={object}\" }","title":"4.10.2. Example"},{"location":"fep/fep-3b86/#411-ignore-intent","text":"This intent corresponds to the ActivityStreams Ignore activity and is defined using the link relation https://w3id.org/fep/3b86/Ignore . The Ignore intent publishes the API endpoint where the current user can initiate an \"ignore\" request, which is similar to a Block, and is used to ignore or mute various actors and objects online","title":"4.11. Ignore Intent"},{"location":"fep/fep-3b86/#4111-parameters","text":"{object} - ID of the object that the user will mark \"ignored\" when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.11.1 Parameters"},{"location":"fep/fep-3b86/#4112-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Ignore\", \"href\": \"https://server.org/intents/ignore?objectId={object}\" }","title":"4.11.2. Example"},{"location":"fep/fep-3b86/#412-invite-intent","text":"This intent corresponds to the ActivityStreams Invite activity and is defined using the link relation https://w3id.org/fep/3b86/Invite . The Invite intent publishes the API endpoint where the current user can initiate an \"invite\" request, which is similar to an Offer, and is used to extend an invitation for the object to the target","title":"4.12. Invite Intent"},{"location":"fep/fep-3b86/#4121-parameters","text":"{target} - ID of the actor who will receive the invitation. {object} - ID of the object (event, group, etc) that the actor will be invited to. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.12.1. Parameters"},{"location":"fep/fep-3b86/#4122-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Invite\", \"href\": \"https://server.org/intents/invite?actorId={object}&eventId={target}\" }","title":"4.12.2. Example"},{"location":"fep/fep-3b86/#413-join-intent","text":"This intent corresponds to the ActivityStreams Join activity and is defined using the link relation https://w3id.org/fep/3b86/Join . The Join intent publishes the API endpoint where the current user can initiate a \"join\" request.","title":"4.13. Join Intent"},{"location":"fep/fep-3b86/#4131-parameters","text":"{object} - ID of the object that the user will join when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.13.1. Parameters"},{"location":"fep/fep-3b86/#4132-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Join\", \"href\": \"https://server.org/intents/join?objectId={object}\" }","title":"4.13.2. Example"},{"location":"fep/fep-3b86/#414-leave-intent","text":"This intent corresponds to the ActivityStreams Leave activity and is defined using the link relation https://w3id.org/fep/3b86/Leave . The Leave intent publishes the API endpoint where the current user can initiate a \"leave\" request.","title":"4.14. Leave Intent"},{"location":"fep/fep-3b86/#4141-parameters","text":"{object} - ID of the object that the user will leave when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.14.1. Parameters"},{"location":"fep/fep-3b86/#4142-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Leave\", \"href\": \"https://server.org/intents/leave?objectId={object}\" }","title":"4.14.2. Example"},{"location":"fep/fep-3b86/#415-like-intent","text":"This intent corresponds to the ActivityStreams Like activity and is defined using the link relation https://w3id.org/fep/3b86/Like . The Like intent publishes the API endpoint where the current user can like the current document.","title":"4.15. Like Intent"},{"location":"fep/fep-3b86/#4151-parameters","text":"{object} - ID of the object that the user will mark as \"liked\" when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.15.1. Parameters"},{"location":"fep/fep-3b86/#4152-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Like\", \"href\": \"https://server.com/intents/like?objectId={object}\" }","title":"4.15.2. Example"},{"location":"fep/fep-3b86/#416-listen-intent","text":"This intent corresponds to the ActivityStreams Listen activity and is defined using the link relation https://w3id.org/fep/3b86/Listen . The Listen intent publishes the API endpoint where the current user can initiate a \"listen\" request.","title":"4.16. Listen Intent"},{"location":"fep/fep-3b86/#4161-parameters","text":"{object} - ID of the object that the user will mark as \"listened\" to when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.16.1. Parameters"},{"location":"fep/fep-3b86/#4162-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Listen\", \"href\": \"https://server.org/intents/listen?objectId={object}\" }","title":"4.16.2. Example"},{"location":"fep/fep-3b86/#417-move-intent","text":"This intent corresponds to the ActivityStreams Move activity and is defined using the link relation https://w3id.org/fep/3b86/Move . The Move intent publishes the API endpoint where the current user can initiate a \"move\" request.","title":"4.17. Move Intent"},{"location":"fep/fep-3b86/#4171-parameters","text":"{object} - ID of the object that the user will move when they use this workflow. {target} - ID of the collection that the object will be moved to. {origin} - (optional) ID of the collection that the object will be moved from. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.17.1. Parameters"},{"location":"fep/fep-3b86/#4172-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Move\", \"href\": \"https://server.org/intents/move?objectId={object}&destId={target}\" }","title":"4.17.2. Example"},{"location":"fep/fep-3b86/#418-offer-intent","text":"This intent corresponds to the ActivityStreams Offer activity and is defined using the link relation https://w3id.org/fep/3b86/Offer . The Offer intent publishes the API endpoint where the current user can initiate an \"offer\" request.","title":"4.18. Offer Intent"},{"location":"fep/fep-3b86/#4181-parameters","text":"{object} - ID of the object that the user will offer when they use this workflow. {target} - ID of the actor that will receive the offer. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.18.1. Parameters"},{"location":"fep/fep-3b86/#4182-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Offer\", \"href\": \"https://server.org/intents/offer?objectId={object}&to={target}\" }","title":"4.18.2. Example"},{"location":"fep/fep-3b86/#419-question-intent","text":"This intent corresponds to the ActivityStreams Question activity and is defined using the link relation https://w3id.org/fep/3b86/Question . The Question intent publishes the API endpoint where the current user can initiate an \"question\" workflow.","title":"4.19. Question Intent"},{"location":"fep/fep-3b86/#4191-parameters","text":"{name} - The \"name\" property to pre-populate into the question the user will ask when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.19.1. Parameters"},{"location":"fep/fep-3b86/#4192-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Question\", \"href\": \"https://server.org/intents/question?name={name}\" }","title":"4.19.2. Example"},{"location":"fep/fep-3b86/#420-read-intent","text":"This intent corresponds to the ActivityStreams Read activity and is defined using the link relation https://w3id.org/fep/3b86/Read . The Read intent publishes the API endpoint where the current user can initiate an \"read\" request.","title":"4.20. Read Intent"},{"location":"fep/fep-3b86/#4201-parameters","text":"{object} - ID of the object that the user will mark as \"read\" when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.20.1. Parameters"},{"location":"fep/fep-3b86/#4202-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Read\", \"href\": \"https://server.org/intents/object?objectId={object}\" }","title":"4.20.2. Example"},{"location":"fep/fep-3b86/#421-reject-intent","text":"This intent corresponds to the ActivityStreams Reject activity and is defined using the link relation https://w3id.org/fep/3b86/Reject . The Reject intent publishes the API endpoint where the current user can initiate an \"reject\" request.","title":"4.21. Reject Intent"},{"location":"fep/fep-3b86/#4211-parameters","text":"{object} - ID of the object that the user will reject when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.21.1. Parameters"},{"location":"fep/fep-3b86/#4212-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Reject\", \"href\": \"https://server.org/intents/reject?offerId={object}\" }","title":"4.21.2. Example"},{"location":"fep/fep-3b86/#422-remove-intent","text":"This intent corresponds to the ActivityStreams Remove activity and is defined using the link relation https://w3id.org/fep/3b86/Remove . The Remove intent publishes the API endpoint where the current user can initiate a \"remove\" request.","title":"4.22. Remove Intent"},{"location":"fep/fep-3b86/#4221-parameters","text":"{object} - ID of the object that the user will remove when they use this workflow. {target} - (optional) The ID of the collection that the object will be removed from. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.22.1. Parameters"},{"location":"fep/fep-3b86/#4222-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Reject\", \"href\": \"https://server.org/intents/reject?objectId={object}\" }","title":"4.22.2. Example"},{"location":"fep/fep-3b86/#423-tentativeaccept-intent","text":"This intent corresponds to the ActivityStreams TentativeAccept activity , which itself is a specialization of the Accept activity and is defined using the link relation https://w3id.org/fep/3b86/TentativeAccept . The TentativeAccept intent publishes the API endpoint where the current user can initiate an \"tentative accept\" request, indicating that acceptance of the original offer is tentative.","title":"4.23. TentativeAccept Intent"},{"location":"fep/fep-3b86/#4231-parameters","text":"{object} - ID of the object that the user will tentatively accept when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.23.1. Parameters"},{"location":"fep/fep-3b86/#4232-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/TentativeAccept\", \"href\": \"https://server.org/intents/tentativeAccept?objectId={object}\" }","title":"4.23.2. Example"},{"location":"fep/fep-3b86/#424-tentativereject-intent","text":"This intent corresponds to the ActivityStreams TentativeReject activity , which itself is a specialization of the Reject activity and is defined using the link relation https://w3id.org/fep/3b86/TentativeReject . The TentativeReject intent publishes the API endpoint where the current user can initiate an \"tentative reject\" request, indicating that rejection of the original offer is tentative.","title":"4.24. TentativeReject Intent"},{"location":"fep/fep-3b86/#4241-parameters","text":"{object} - ID of the object that the user will tentatively reject when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.24.1. Parameters"},{"location":"fep/fep-3b86/#4242-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/TentativeReject\", \"href\": \"https://server.org/intents/tentativeReject?objectId={object}\" }","title":"4.24.2. Example"},{"location":"fep/fep-3b86/#425-travel-intent","text":"This intent corresponds to the ActivityStreams Travel activity and is defined using the link relation https://w3id.org/fep/3b86/Travel . The Travel intent publishes the API endpoint where the user can initiate a \"travel\" request.","title":"4.25. Travel Intent"},{"location":"fep/fep-3b86/#4251-parameters","text":"{target} - (optional) The ID of the location that the actor will travel to. {origin} - (optional) The ID of the location that the actor will travel from. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.25.1. Parameters"},{"location":"fep/fep-3b86/#4252-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Travel\", \"href\": \"https://server.org/intents/travel?from={origin}&to={target}\" }","title":"4.25.2. Example"},{"location":"fep/fep-3b86/#426-undo-intent","text":"This intent corresponds to the ActivityStreams Undo activity and is defined using the link relation https://w3id.org/fep/3b86/Undo . The Undo intent publishes the API endpoint where the current user can initiate a \"travel\" request.","title":"4.26. Undo Intent"},{"location":"fep/fep-3b86/#4261-parameters","text":"{object} - ID of the activity that the actor will undo. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect users if they abort the workflow.","title":"4.26.1. Parameters"},{"location":"fep/fep-3b86/#4262-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Undo\", \"href\": \"https://server.org/intents/undo?activityId={object}\" }","title":"4.26.2. Example"},{"location":"fep/fep-3b86/#427-update-intent","text":"This intent corresponds to the ActivityStreams Update activity and is defined using the link relation https://w3id.org/fep/3b86/Update . The Update intent publishes the API endpoint where the user can initiate an \"update\" request.","title":"4.27. Update Intent"},{"location":"fep/fep-3b86/#4271-parameters","text":"{object} - ID of the object that the actor will update when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.27.1. Parameters"},{"location":"fep/fep-3b86/#4272-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/Update\", \"href\": \"https://server.org/intents/update?objectId={object}\" }","title":"4.27.2. Example"},{"location":"fep/fep-3b86/#428-view-intent","text":"This intent corresponds to the ActivityStreams View activity and is defined using the link relation https://w3id.org/fep/3b86/Update . The View intent publishes the API endpoint where the current user can initiate an \"update\" request.","title":"4.28. View Intent"},{"location":"fep/fep-3b86/#4281-parameters","text":"{object} - ID of the object that the actor will mark as \"viewed\" when they use this workflow. {on-success} - (optional) URL to redirect the user to after the workflow completes. {on-cancel} - (optional) URL to redirect the user to if they abort the workflow.","title":"4.28.1. Parameters"},{"location":"fep/fep-3b86/#4282-example","text":"{ \"rel\": \"https://w3id.org/fep/3b86/View\", \"href\": \"https://server.org/intents/view?objectId={object}\" }","title":"4.28.2. Example"},{"location":"fep/fep-3b86/#50-security-considerations","text":"","title":"5.0. Security Considerations"},{"location":"fep/fep-3b86/#51-csrf-issues","text":"It is important to reiterate some key security practices to prevent Cross Site Request Forgery vulnerabilities. Remote Servers MUST only send GET requests to Home Servers. Home Servers MUST NOT change data based on GET requests. Home Servers SHOULD protect these published endpoints by generating CSRF tokens and including them with every POST request. This validates that the request originated on the user's home server, and was initiated by the user. See OWASP Related Controls for in-depth discussion.","title":"5.1 CSRF issues"},{"location":"fep/fep-3b86/#52-openunvalidated-redirects","text":"Activity Intents includes the ability for home servers to redirect browsers to new URLs based on the on-success and on-cancel query parameters. If improperly implemented, this has the potential to expose an Unvalidated Redirect vulnerability, which can open the home server up to phishing attack. To avoid a potential security vulnerability when handling on-success and on-cancel workflows, it is important that the home server: \"Force all redirects to first go through a page notifying users that they are going off of your site, with the destination clearly displayed, and have them click a link to confirm.\" ( owasp.org ) There is another good description of this issue OAuth 2.0 Security Best Current Practice \u00a7 4.11. Open Redirection","title":"5.2 Open/Unvalidated Redirects"},{"location":"fep/fep-3b86/#60-remote-servers-the-rest-of-the-equation","text":"This FEP provides the prerequisite information required for a \"Home Server\" publish Activity Intents for its Actors. It does not specify how \"Remote Servers\" will use this information - i.e., how they implement \"share\" and \"like\" buttons in their content.","title":"6.0. Remote Servers: The Rest of the Equation"},{"location":"fep/fep-3b86/#61-remote-server-example","text":"Here is a brief example of the workflow as implemented by a remote server: A user visits a remote server (i.e., any address on the Internet where they do not have an ActivityPub account) The remote server displays buttons such as \"like\" or \"share\" for a particular document or object. When the user clicks on one of these links, the remote server checks to see if the user is already recognized. This does not necessarily mean logged in, or authenticated, just whether or not the user has entered their home server credentials before. True authentication on the remote server is not necessary for Activity Intents to work. If the user is not recognized, then they are prompted to enter their Fediverse ID (such as @benpate@mastodon.social). The remote server can save this information for use in the future (preferably in a private data store, such as localStorage ) If the user is recognized, this means they have already completed step 3.1, and can continue to step 4. The remote server uses a standard WebFinger query to look up the user's Fediverse ID and searches for Activity Intents supported by the user's home server. If none are found, the remote server MAY try to substitute fallback values for known server types. If none are found (and no fallbacks substituted) the remote server SHOULD inform the user that their account is incompatible with the selected feature and halt the workflow. The remote server replaces values into the designated href template and forwards the user to the assigned page on their home server. This initiates the Activity Intent workflow on their home server. When the user completes the workflow, the home server SHOULD use URL in the on-success parameter to redirect the user back to the correct page on the remote server. Similarly, if the user cancels the workflow, the home server SHOULD use the URL in the on-cancel parameter to redirect the user back to the correct page on the remote server.","title":"6.1. Remote Server Example"},{"location":"fep/fep-3b86/#62-fallbacks-for-unpublished-links","text":"Remote servers MAY also account for applications that do not publish Activity Intents, but whose endpoints are still well known. In this case, remote servers SHOULD use Activity Intents links if they are present, then fall back to older links (such as the oStatus /authorize_interaction endpoint) if they are present, then fall back to hard-coded values (such as the Mastodon /share endpoint) if no other values exist.","title":"6.2. Fallbacks for Unpublished Links"},{"location":"fep/fep-3b86/#70-implementations","text":"Emissary will support this FEP once its syntax is finalized. Add your name to this list and win a cookie \ud83c\udf6a","title":"7.0. Implementations"},{"location":"fep/fep-3b86/#_1","text":"Activity Vocabulary Twitter: Web Intents Facebook: Share Button Remote Follows - Tutorial on the original oStatus protocol Cross Site Request Forgery - Wikipedia Cross Site Request Forgery - OWASP FEP-888d - FEP-specific namespaces IETF RFC 7033 - WebFinger IETF RFC 3896 - Uniform Resource Identifier Generic Syntax IEFT RFC 2119 - Key words for use in RFCs to Indicate Requirement Levels Unvalidated Redirects and Forwards Cheat Sheet - owasp.org ) OAuth 2.0 Security Best Current Practice","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-3b86/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-400e/","text":"FEP-400e: Publicly-appendable ActivityPub collections Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary In social media, it's a frequent pattern when there's a collection owned by someone that other people can contribute to. Examples include: Walls where others can post Forums as well as topics within Photo albums in groups where group members can add photos Currently, there is no generic way to signify that an object was created as part of a collection and should only be considered in its context. This proposal describes how ActivityPub servers and clients could specify collections to which objects created by their actors belong. Requirements The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119]. Publicly-appendable collections A publicly-appendable collection is any collection where it is expected that someone other than its owner could add items but over which its owner retains complete authority. For example, a wall is a collection to which other people could add posts ( Note s), but from which its owner could delete any posts as well as restrict who can add them. A publicly-appendable collection SHOULD have a valid and globally-unique id that SHOULD point to either a Collection or an OrderedCollection object that contains the links to all its objects. Specifying collections in actors If an actor has publicly-appendable collections, its server MAY include them as additional fields in its ActivityPub representation. For example, user actors may specify the link to their walls, or groups may specify the link to the collection of their photo albums. Implementations MAY use the presence or absence of specific collection to determine whether the actor's server supports features that depend on that collection and alter their UIs accordingly. Using target in objects If an ActivityPub object is being created as part of a collection, the object SHOULD include the target field that contains an abbreviated collection object, which SHOULD contain at least the following fields: type \u2014 either Collection or OrderedCollection . id \u2014 the id of the collection. attributedTo \u2014 the id of the owner of the collection. This is necessary to simplify the database design on the receiving side. Discussion While [Activity Vocabulary] specifies target as a field with similar semantics in activities, it's important to include it in objects themselves so any software that only sees the object without its enclosing Create activity, e.g. when following a link form another object or retrieving the object from a user-provided URI, unambiguously knows that it should only be considered in the context of its collection. Adding an object to a collection When an ActivityPub server receives in its inbox a correctly signed Create activity with an object that has the target field, it does the following: Retrieve the collection owner using either attributedTo or id fields of the abbreviated collection object. If the collection owner does not exist, or if attributedTo doesn't match the actual owner of the collection specified by id , or if the collection owner is not a local actor, the server SHOULD abort processing and MAY return 400 Bad Request . If the object could not be added to the collection, for example due to the privacy settings configured by its owner, the server SHOULD either respond with 403 Unauthorized or respond with 200 OK and later send a Reject{Create} activity to the originating server. Store either the entire object or its id in its local storage as belonging to the specified collection. Send an Add activity to any parties that might be concerned with it. The target field in the activity SHOULD only be the collection id , and the object field SHOULD be the id of the object being added. It is RECOMMENDED that this activity is sent to all the collection owner's followers for the sake of data consistency, and it SHOULD be sent to the actor that created the object being added. Perform any implementation-specific processing, like sending notifications. Receiving an Add activity When an ActivityPub server receives in its inbox a correctly signed Add activity, it SHOULD do the following: Retrieve the actor either from local storage or from the network. Retrieve the object . Check that target is the ID of a collection owned by actor . If it is not, abort processing and return 400 Bad Request . Check that target in the activity matches target.id in the object and that target.attributedTo in the object matches the actor ID. If it does not, abort processing and return 400 Bad Request . Store either the entire object or its id in its local storage as belonging to the specified collection. Perform any implementation-specific processing, like sending notifications. Example of an Add activity { \"@context\":\"https://www.w3.org/ns/activitystreams\", \"actor\":\"https://example.com/users/1\", \"id\":\"https://example.com/posts/41864/activityAdd\", \"to\":[ \"https://www.w3.org/ns/activitystreams#Public\", \"https://example.com/users/1/followers\", \"https://example.com/users/6946\" ], \"type\":\"Add\", \"object\":\"https://example.com/posts/41864\", \"target\":\"https://example.com/users/1/wall\" } Deleting an object from a collection Since the collection owner has complete authority over the contents of the collection, they can delete any objects from it. When an object is deleted from a collection by its owner, their server SHOULD send a Delete activity to at least the server of the actor that created the object; it's also RECOMMENDED that this activity is sent to all the servers that Add was sent to. Those servers then SHOULD delete the object as if the deletion was initiated by its creator. Moving an object between collections In some use cases, it might make sense to allow objects to be moved between collections, for example, a group moderator might want to move a photo between photo albums in a group, or a forum moderator might want to split some messages into a separate thread. It's only possible to move objects between collections that are owned by the same actor. When moving an object between collections, the collection owner SHOULD send a Move activity to at least the server of the object creator, specifying the target collection and the id of the object; it's also RECOMMENDED that this activity is sent to all the servers that Add was sent to. Those servers then SHOULD update the target field in their stored copies of the object. Security considerations The requirement of an Add activity sent by a collection owner largely prevents a bad actor from effectively adding something to a collection against the collection owner's will while also helping data consistency across servers. However, there's still one case when this is possible. When a server fetches an object that has a target field directly, for example when a user has entered its URL into a search box or when it is referenced by a field such as inReplyTo , there's presently no reliable way to verify whether the object actually belongs to the collection. \u5b9f\u88c5 This proposal is implemented in Smithereen for both user and group walls since the following commit: https://github.com/grishka/Smithereen/commit/de013593dde06a3091ecfbd32960a694d79c146e \u53c2\u8003\u6587\u732e [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels [Activity Vocabulary], James M Snell, Evan Prodromou, Activity Vocabulary \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-400e: Publicly-appendable ActivityPub collections"},{"location":"fep/fep-400e/#fep-400e-publicly-appendable-activitypub-collections","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-400e: Publicly-appendable ActivityPub collections"},{"location":"fep/fep-400e/#summary","text":"In social media, it's a frequent pattern when there's a collection owned by someone that other people can contribute to. Examples include: Walls where others can post Forums as well as topics within Photo albums in groups where group members can add photos Currently, there is no generic way to signify that an object was created as part of a collection and should only be considered in its context. This proposal describes how ActivityPub servers and clients could specify collections to which objects created by their actors belong.","title":"Summary"},{"location":"fep/fep-400e/#requirements","text":"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119].","title":"Requirements"},{"location":"fep/fep-400e/#publicly-appendable-collections","text":"A publicly-appendable collection is any collection where it is expected that someone other than its owner could add items but over which its owner retains complete authority. For example, a wall is a collection to which other people could add posts ( Note s), but from which its owner could delete any posts as well as restrict who can add them. A publicly-appendable collection SHOULD have a valid and globally-unique id that SHOULD point to either a Collection or an OrderedCollection object that contains the links to all its objects.","title":"Publicly-appendable collections"},{"location":"fep/fep-400e/#specifying-collections-in-actors","text":"If an actor has publicly-appendable collections, its server MAY include them as additional fields in its ActivityPub representation. For example, user actors may specify the link to their walls, or groups may specify the link to the collection of their photo albums. Implementations MAY use the presence or absence of specific collection to determine whether the actor's server supports features that depend on that collection and alter their UIs accordingly.","title":"Specifying collections in actors"},{"location":"fep/fep-400e/#using-target-in-objects","text":"If an ActivityPub object is being created as part of a collection, the object SHOULD include the target field that contains an abbreviated collection object, which SHOULD contain at least the following fields: type \u2014 either Collection or OrderedCollection . id \u2014 the id of the collection. attributedTo \u2014 the id of the owner of the collection. This is necessary to simplify the database design on the receiving side.","title":"Using target in objects"},{"location":"fep/fep-400e/#discussion","text":"While [Activity Vocabulary] specifies target as a field with similar semantics in activities, it's important to include it in objects themselves so any software that only sees the object without its enclosing Create activity, e.g. when following a link form another object or retrieving the object from a user-provided URI, unambiguously knows that it should only be considered in the context of its collection.","title":"Discussion"},{"location":"fep/fep-400e/#adding-an-object-to-a-collection","text":"When an ActivityPub server receives in its inbox a correctly signed Create activity with an object that has the target field, it does the following: Retrieve the collection owner using either attributedTo or id fields of the abbreviated collection object. If the collection owner does not exist, or if attributedTo doesn't match the actual owner of the collection specified by id , or if the collection owner is not a local actor, the server SHOULD abort processing and MAY return 400 Bad Request . If the object could not be added to the collection, for example due to the privacy settings configured by its owner, the server SHOULD either respond with 403 Unauthorized or respond with 200 OK and later send a Reject{Create} activity to the originating server. Store either the entire object or its id in its local storage as belonging to the specified collection. Send an Add activity to any parties that might be concerned with it. The target field in the activity SHOULD only be the collection id , and the object field SHOULD be the id of the object being added. It is RECOMMENDED that this activity is sent to all the collection owner's followers for the sake of data consistency, and it SHOULD be sent to the actor that created the object being added. Perform any implementation-specific processing, like sending notifications.","title":"Adding an object to a collection"},{"location":"fep/fep-400e/#receiving-an-add-activity","text":"When an ActivityPub server receives in its inbox a correctly signed Add activity, it SHOULD do the following: Retrieve the actor either from local storage or from the network. Retrieve the object . Check that target is the ID of a collection owned by actor . If it is not, abort processing and return 400 Bad Request . Check that target in the activity matches target.id in the object and that target.attributedTo in the object matches the actor ID. If it does not, abort processing and return 400 Bad Request . Store either the entire object or its id in its local storage as belonging to the specified collection. Perform any implementation-specific processing, like sending notifications.","title":"Receiving an Add activity"},{"location":"fep/fep-400e/#example-of-an-add-activity","text":"{ \"@context\":\"https://www.w3.org/ns/activitystreams\", \"actor\":\"https://example.com/users/1\", \"id\":\"https://example.com/posts/41864/activityAdd\", \"to\":[ \"https://www.w3.org/ns/activitystreams#Public\", \"https://example.com/users/1/followers\", \"https://example.com/users/6946\" ], \"type\":\"Add\", \"object\":\"https://example.com/posts/41864\", \"target\":\"https://example.com/users/1/wall\" }","title":"Example of an Add activity"},{"location":"fep/fep-400e/#deleting-an-object-from-a-collection","text":"Since the collection owner has complete authority over the contents of the collection, they can delete any objects from it. When an object is deleted from a collection by its owner, their server SHOULD send a Delete activity to at least the server of the actor that created the object; it's also RECOMMENDED that this activity is sent to all the servers that Add was sent to. Those servers then SHOULD delete the object as if the deletion was initiated by its creator.","title":"Deleting an object from a collection"},{"location":"fep/fep-400e/#moving-an-object-between-collections","text":"In some use cases, it might make sense to allow objects to be moved between collections, for example, a group moderator might want to move a photo between photo albums in a group, or a forum moderator might want to split some messages into a separate thread. It's only possible to move objects between collections that are owned by the same actor. When moving an object between collections, the collection owner SHOULD send a Move activity to at least the server of the object creator, specifying the target collection and the id of the object; it's also RECOMMENDED that this activity is sent to all the servers that Add was sent to. Those servers then SHOULD update the target field in their stored copies of the object.","title":"Moving an object between collections"},{"location":"fep/fep-400e/#security-considerations","text":"The requirement of an Add activity sent by a collection owner largely prevents a bad actor from effectively adding something to a collection against the collection owner's will while also helping data consistency across servers. However, there's still one case when this is possible. When a server fetches an object that has a target field directly, for example when a user has entered its URL into a search box or when it is referenced by a field such as inReplyTo , there's presently no reliable way to verify whether the object actually belongs to the collection.","title":"Security considerations"},{"location":"fep/fep-400e/#_1","text":"This proposal is implemented in Smithereen for both user and group walls since the following commit: https://github.com/grishka/Smithereen/commit/de013593dde06a3091ecfbd32960a694d79c146e","title":"\u5b9f\u88c5"},{"location":"fep/fep-400e/#_2","text":"[RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels [Activity Vocabulary], James M Snell, Evan Prodromou, Activity Vocabulary","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-400e/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-4adb/","text":"FEP-4adb: Dereferencing identifiers with webfinger Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary In this FEP, we will formalize the process of dereferencing an URI using webfinger in order for usage in ActivityPub. The main goal is to enable the usage of URIs of the form acct:user@domain or did:example:12345 as ids for objects used in ActivityPub. While this FEP only discusses this in the context of actors, it should be applicable for general objects. In order for a smooth introduction, it is recommended to start deployment with actor objects. This FEP first presents the algorithm and examples, then discusses the usage in the context of the Fediverse. This means the first two sections are for people wanting to implement this FEP, the following sections are for people wanting to decide if this FEP is a good idea. The algorithm [Webfinger] allows us to associate an ActivityStreams object with a pair given by an URI and a domain. This is done through the following steps: Fetch GET https://domain/.well-known/webfinger?resource={URI} . Determine the link property with \"type\":\"application/activity+json\" . Dereference this object. We will denote this object by ActivityStreams(URI, domain) . There are now two cases to resolve an URI: The URI determines the domain denoted by domain(URI) The URI doesn't determine the domain In case 1, it is clear that we associate ActivityStreams(URI, domain(URI)) to the URI. In case 2, we will use the domain associated with the @id of the document the document the URI appeared in. If the document was received through a POST request and doesn't contain an id , or the id is an URI, the domain the POST request originated from should be used. In this case a verification that the URI can be associated with the object MUST be performed. This can for example be achieved through FEP-c390 . \u4f8b We start with the acct URI Scheme . In order to deliver the activity { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Follow\", \"actor\": \"https://chatty.example/ben/\", \"object\": \"acct:alyssa@social.example\", \"to\": \"acct:alyssa@social.example\", } the ActivityPub server should perform the lookup for ActivityStreams(\"acct:alyssa@social.example\", \"social.example\") , i.e. the request GET https://social.example/.well-known/webfinger?resource=acct:alyssa@social.example We now turn our attention to DIDs . In order to resolve the author of { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://chatty.example/ben/456\", \"type\": \"Note\", \"attributedTo\": \"did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5\", \"to\": \"acct:alyssa@social.example\", \"content\": \"Hello\" } one has to resolve the URI did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5 . As this URI does not contain a domain, the domain from the id, i.e. chatty.example is used, so the request GET https://chatty.example/.well-known/webfinger?resource=did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5 is made. The resulting ActivityStreams object should contain { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://chatty.example/bnm789\", \"attachment\": { \"type\": \"VerifiableIdentityStatement\", \"subject\": \"did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5\", \"alsoKnownAs\": \"https://chatty.social/bnm789\", \"proof\": { ... } }, ... } following FEP-c390 so that the authority of ben to use the did can be verified. Background Let's start with Section 3.1 of ActivityPub. It starts with the sentence All Objects in [ActivityStreams] should have unique global identifiers. We first note that the word unique does not appear in [ActivityStreams]. Second it is unclear why it is there and what it means: Does it mean that there is exactly one identifier associated with the object? Does it mean that the global identifier is only used for one object? We will assume that it is the second interpretation. In particular, this means that we can associated multiple identifiers with the same ActivityStreams object. Next comes the following line in [ActivityPub] Publicly dereferencable URIs, such as HTTPS URIs, with their authority belonging to that of their originating server. (Publicly facing content SHOULD use HTTPS URIs). The essential point of this FEP is to extend the range of publicly dereferencable URIs to contain basically any URI by using [Webfinger]. The current usage of Webfinger in the Fediverse is asymmetric. As discussed in MastoGuide , one can associate many URIs of the form acct:user@domain.tld with the same Actor, by just making webfinger return an appropriate response. However, only one acct-URI can be associated with an Actor. This is done by: acct:{preferredUsername}@{domain of actor id} where preferredUsername is from the actor object. Applications to the Actor Object We now discuss applications of the approach of this FEP to the actor object. Preferred Account We will follow this suggestion in [alsoKnownAs and acct:]. The main idea is to associate multiple accounts. For this, we will return to alyssa@social.example , whose Actor object would look like the following omitting irrelevant details { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://social.example/abc123\", \"preferredUsername\": \"alyssa\", ... } By the algorithm discussed in background, we can associate the URI acct:alyssa@social.example with this. Suppose now that Alyssa owns the domain alyssa.cool , and set up WebFinger to answer to GET https://alyssa.cool/.well-known/webfinger?resource=me@alyssa.cool with a link to the above actor. Alyssa would then be disappointed because Fediverse software is not displaying her cooler username. To remedy this, we propose the addition to the actor object { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"xrd\": \"http://docs.oasis-open.org/ns/xri/xrd-1.0#\", \"aliases\": { \"@id\": \"xrd:Alias\", \"@type\": \"@id\", \"@container\": \"@list\" }, } ], \"id\": \"https://social.example/abc123\", \"preferredUsername\": \"alyssa\", \"aliases\": [\"acct:me@alyssa.cool\", \"acct:alyssa@social.example\"], ... } a new generation of Fediverse software will then be able to display the account of Alyssa as me@alyssa.cool . DNS Names Continuing with Alyssa from above, by relying on FEP-612d , she may even associate @alyssa.cool with her account. Unfortunately, a proper URI format is still missing. Using did:key Let's return to Ben and him wanting to use a decentralized identifier, see did-core and did-method-key { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"xrd\": \"http://docs.oasis-open.org/ns/xri/xrd-1.0#\", \"aliases\": { \"@id\": \"xrd:Alias\", \"@type\": \"@id\", \"@container\": \"@list\" }, } ], \"id\": \"https://chatty.social/bnm789\", \"preferredUsername\": \"ben\", \"aliases\": [\"did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5\", \"acct:ben@chatty.social\"], ... } The problem here is that, we do not know if the the did-key belongs to BEN. To remedy this, we will use FEP-c390 . This means that we need to add \"attachment\": { \"type\": \"VerifiableIdentityStatement\", \"subject\": \"did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5\", \"alsoKnownAs\": \"https://chatty.social/bnm789\", \"proof\": { ... } } with an appropriate proof to Ben's actor object. \u53c2\u8003\u6587\u732e [acct URI Scheme] P. Saint-Andre RFC 7565 , 2015 [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ActivityStreams] J. Snell, E. Prodromou, ActivityStreams , 2017 alsoKnownAs and acct: on SocialHub [did-core] Manu Sporny, Dave Longley, Markus Sabadell, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0, 2022 [did-method-key], Dave Longley, Dmitri Zagidulin, Manu Sporny, did-method-key 20221 [FEP-c390] silverpill, FEP-c390 , 2022 [FEP-612d] Helge, FEP-612d 2023 [MastoGuide] jippi Use your own user @ domain for Mastodon discoverability [Webfinger] P. Jones, G. Salgueiro, M. Jones, J. Smarr, RFC 7033 ,2013 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-4adb: Dereferencing identifiers with webfinger"},{"location":"fep/fep-4adb/#fep-4adb-dereferencing-identifiers-with-webfinger","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-4adb: Dereferencing identifiers with webfinger"},{"location":"fep/fep-4adb/#summary","text":"In this FEP, we will formalize the process of dereferencing an URI using webfinger in order for usage in ActivityPub. The main goal is to enable the usage of URIs of the form acct:user@domain or did:example:12345 as ids for objects used in ActivityPub. While this FEP only discusses this in the context of actors, it should be applicable for general objects. In order for a smooth introduction, it is recommended to start deployment with actor objects. This FEP first presents the algorithm and examples, then discusses the usage in the context of the Fediverse. This means the first two sections are for people wanting to implement this FEP, the following sections are for people wanting to decide if this FEP is a good idea.","title":"Summary"},{"location":"fep/fep-4adb/#the-algorithm","text":"[Webfinger] allows us to associate an ActivityStreams object with a pair given by an URI and a domain. This is done through the following steps: Fetch GET https://domain/.well-known/webfinger?resource={URI} . Determine the link property with \"type\":\"application/activity+json\" . Dereference this object. We will denote this object by ActivityStreams(URI, domain) . There are now two cases to resolve an URI: The URI determines the domain denoted by domain(URI) The URI doesn't determine the domain In case 1, it is clear that we associate ActivityStreams(URI, domain(URI)) to the URI. In case 2, we will use the domain associated with the @id of the document the document the URI appeared in. If the document was received through a POST request and doesn't contain an id , or the id is an URI, the domain the POST request originated from should be used. In this case a verification that the URI can be associated with the object MUST be performed. This can for example be achieved through FEP-c390 .","title":"The algorithm"},{"location":"fep/fep-4adb/#_1","text":"We start with the acct URI Scheme . In order to deliver the activity { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Follow\", \"actor\": \"https://chatty.example/ben/\", \"object\": \"acct:alyssa@social.example\", \"to\": \"acct:alyssa@social.example\", } the ActivityPub server should perform the lookup for ActivityStreams(\"acct:alyssa@social.example\", \"social.example\") , i.e. the request GET https://social.example/.well-known/webfinger?resource=acct:alyssa@social.example We now turn our attention to DIDs . In order to resolve the author of { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://chatty.example/ben/456\", \"type\": \"Note\", \"attributedTo\": \"did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5\", \"to\": \"acct:alyssa@social.example\", \"content\": \"Hello\" } one has to resolve the URI did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5 . As this URI does not contain a domain, the domain from the id, i.e. chatty.example is used, so the request GET https://chatty.example/.well-known/webfinger?resource=did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5 is made. The resulting ActivityStreams object should contain { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://chatty.example/bnm789\", \"attachment\": { \"type\": \"VerifiableIdentityStatement\", \"subject\": \"did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5\", \"alsoKnownAs\": \"https://chatty.social/bnm789\", \"proof\": { ... } }, ... } following FEP-c390 so that the authority of ben to use the did can be verified.","title":"\u4f8b"},{"location":"fep/fep-4adb/#background","text":"Let's start with Section 3.1 of ActivityPub. It starts with the sentence All Objects in [ActivityStreams] should have unique global identifiers. We first note that the word unique does not appear in [ActivityStreams]. Second it is unclear why it is there and what it means: Does it mean that there is exactly one identifier associated with the object? Does it mean that the global identifier is only used for one object? We will assume that it is the second interpretation. In particular, this means that we can associated multiple identifiers with the same ActivityStreams object. Next comes the following line in [ActivityPub] Publicly dereferencable URIs, such as HTTPS URIs, with their authority belonging to that of their originating server. (Publicly facing content SHOULD use HTTPS URIs). The essential point of this FEP is to extend the range of publicly dereferencable URIs to contain basically any URI by using [Webfinger]. The current usage of Webfinger in the Fediverse is asymmetric. As discussed in MastoGuide , one can associate many URIs of the form acct:user@domain.tld with the same Actor, by just making webfinger return an appropriate response. However, only one acct-URI can be associated with an Actor. This is done by: acct:{preferredUsername}@{domain of actor id} where preferredUsername is from the actor object.","title":"Background"},{"location":"fep/fep-4adb/#applications-to-the-actor-object","text":"We now discuss applications of the approach of this FEP to the actor object.","title":"Applications to the Actor Object"},{"location":"fep/fep-4adb/#preferred-account","text":"We will follow this suggestion in [alsoKnownAs and acct:]. The main idea is to associate multiple accounts. For this, we will return to alyssa@social.example , whose Actor object would look like the following omitting irrelevant details { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://social.example/abc123\", \"preferredUsername\": \"alyssa\", ... } By the algorithm discussed in background, we can associate the URI acct:alyssa@social.example with this. Suppose now that Alyssa owns the domain alyssa.cool , and set up WebFinger to answer to GET https://alyssa.cool/.well-known/webfinger?resource=me@alyssa.cool with a link to the above actor. Alyssa would then be disappointed because Fediverse software is not displaying her cooler username. To remedy this, we propose the addition to the actor object { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"xrd\": \"http://docs.oasis-open.org/ns/xri/xrd-1.0#\", \"aliases\": { \"@id\": \"xrd:Alias\", \"@type\": \"@id\", \"@container\": \"@list\" }, } ], \"id\": \"https://social.example/abc123\", \"preferredUsername\": \"alyssa\", \"aliases\": [\"acct:me@alyssa.cool\", \"acct:alyssa@social.example\"], ... } a new generation of Fediverse software will then be able to display the account of Alyssa as me@alyssa.cool .","title":"Preferred Account"},{"location":"fep/fep-4adb/#dns-names","text":"Continuing with Alyssa from above, by relying on FEP-612d , she may even associate @alyssa.cool with her account. Unfortunately, a proper URI format is still missing.","title":"DNS Names"},{"location":"fep/fep-4adb/#using-didkey","text":"Let's return to Ben and him wanting to use a decentralized identifier, see did-core and did-method-key { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"xrd\": \"http://docs.oasis-open.org/ns/xri/xrd-1.0#\", \"aliases\": { \"@id\": \"xrd:Alias\", \"@type\": \"@id\", \"@container\": \"@list\" }, } ], \"id\": \"https://chatty.social/bnm789\", \"preferredUsername\": \"ben\", \"aliases\": [\"did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5\", \"acct:ben@chatty.social\"], ... } The problem here is that, we do not know if the the did-key belongs to BEN. To remedy this, we will use FEP-c390 . This means that we need to add \"attachment\": { \"type\": \"VerifiableIdentityStatement\", \"subject\": \"did:key:z6MkekwC6R9bj9ErToB7AiZJfyCSDhaZe1UxhDbCqJrhqpS5\", \"alsoKnownAs\": \"https://chatty.social/bnm789\", \"proof\": { ... } } with an appropriate proof to Ben's actor object.","title":"Using did:key"},{"location":"fep/fep-4adb/#_2","text":"[acct URI Scheme] P. Saint-Andre RFC 7565 , 2015 [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ActivityStreams] J. Snell, E. Prodromou, ActivityStreams , 2017 alsoKnownAs and acct: on SocialHub [did-core] Manu Sporny, Dave Longley, Markus Sabadell, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0, 2022 [did-method-key], Dave Longley, Dmitri Zagidulin, Manu Sporny, did-method-key 20221 [FEP-c390] silverpill, FEP-c390 , 2022 [FEP-612d] Helge, FEP-612d 2023 [MastoGuide] jippi Use your own user @ domain for Mastodon discoverability [Webfinger] P. Jones, G. Salgueiro, M. Jones, J. Smarr, RFC 7033 ,2013","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-4adb/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-4ccd/","text":"FEP-4ccd: Pending Followers Collection and Pending Following Collection Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This specification defines two collections, pendingFollowers and pendingFollowing , with which users can review and manage their pending follow requests. Motivation [ActivityPub] represents a directed social graph with followers and following properties on actors. To initiate a relationship, a Follow activity is sent from the potential follower to the followed actor, who can Accept or Reject it. Between the time that a Follow is sent and the time that it is accepted or rejected, the relationship is in a pending state. This is not represented in the ActivityPub data model. The new pendingFollowers collection can be used to review incoming Follow activities to Accept or Reject them. The new pendingFollowing collection can be used to review outgoing Follow activities to Undo them. Because the full activity data is needed to Accept , Reject or Undo , these collections should include Follow activities, and not just the actors requesting to follow. Details pendingFollowers is a property of an actor. It is a collection of Follow activities that have been sent to the actor, but not yet been accepted or rejected. pendingFollowing is a property of an actor. It is a collection of Follow activities that have been sent by the actor, but not yet been accepted or rejected. Both properties MUST be an OrderedCollection or Collection . Items in the collection MUST be in reverse chronological order. Items in the collections MUST be Follow activities. They MUST be unique by id . Each object of a Follow activity in the pendingFollowing collection MUST be unique by id . Each actor of a Follow activity in the pendingFollowers collection MUST be unique by id . When an Accept , Reject , or Undo activity with a Follow activity as object is processed, that Follow activity MUST NOT be included in the pendingFollowers and pendingFollowing collections in the future. Context The context document for this specification is https://purl.archive.org/socialweb/pending . Its contents are as follows: { \"@context\": { \"pdg\": \"https://purl.archive.org/socialweb/pending#\", \"pendingFollowers\": { \"@id\": \"pdg:pendingFollowers\", \"@type\": \"@id\" }, \"pendingFollowing\": { \"@id\": \"pdg:pendingFollowing\", \"@type\": \"@id\" } } } \u4f8b A publisher can include the pendingFollowers and pendingFollowing collection in the properties of an actor. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/pending\" ], \"id\": \"https://example.com/evanp\", \"type\": \"Person\", \"name\": \"Evan Prodromou\", \"inbox\": \"https://example.com/evanp/inbox\", \"outbox\": \"https://example.com/evanp/outbox\", \"following\": \"https://example.com/evanp/following\", \"followers\": \"https://example.com/evanp/followers\", \"liked\": \"https://example.com/evanp/liked\", \"pendingFollowers\": \"https://example.com/evanp/pendingFollowers\", \"pendingFollowing\": \"https://example.com/evanp/pendingFollowing\" } Retrieving the pendingFollowers collection would show incoming follow requests for this actor. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/pending\" ], \"id\": \"https://example.com/evanp/pendingFollowers\", \"type\": \"OrderedCollection\", \"name\": \"Pending followers for Evan Prodromou\", \"orderedItems\": [ { \"type\": \"Follow\", \"id\": \"https://example.net/alyssa/follow/7\", \"summary\": \"Alyssa wants to follow Evan\", \"content\": \"Hey, Evan! It's Alyssa from the conference.\", \"actor\": { \"id\": \"https://example.net/alyssa\", \"type\": \"Person\", \"name\": \"Alyssa P. Hacker\" }, \"published\": \"2023-06-21T12:00:00Z\" }, { \"type\": [\"http://custom.example/ns/Archive\", \"Follow\"], \"id\": \"https://social.example/jokebot3000/follow/287\", \"summary\": \"Jokebot 3000 wants to follow Evan to archive his jokes\", \"actor\": { \"id\": \"https://social.example/jokebot3000\", \"type\": \"Application\", \"name\": \"Jokebot 3000\" }, \"published\": \"2023-05-07T12:00:00Z\" } ] } Note that the second, earlier Follow activity has a custom type property. Note also that the object of the Follow activities, which will be the same for every activity, is elided for clarity and space. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/pending\", {\"sports\": \"https://sports.example/ns#\"} ], \"id\": \"https://example.com/evanp/pendingFollowing\", \"type\": \"Collection\", \"name\": \"Pending following for Evan Prodromou\", \"items\": [ { \"type\": [\"sports:Fan\", \"Follow\"], \"id\": \"https://example.com/evanp/fan/309\", \"summary\": \"Evan is a fan of Jimena\", \"object\": { \"id\": \"https://tennis.example/jimena\", \"type\": \"Person\", \"name\": \"Jimena Suarez\" }, \"published\": \"2023-04-19T12:00:00Z\" }, { \"type\": \"Follow\", \"id\": \"https://example.net/evanp/follow/214\", \"summary\": \"Evan wants to follow Montreal Weather Updates\", \"object\": { \"id\": \"https://weather.example/canada/quebec/montreal\", \"type\": \"Service\", \"name\": \"Montreal Weather Updates\" }, \"published\": \"2023-02-11T12:00:00Z\" } ] } Note that the first Follow activity has a custom type property. Note also that the actor of the Follow activities, which will be the same for every activity, is elided for clarity and space. Finally, note that even though the collection's type is Collection and the items property is items , the activities still must be in reverse chronological order. Security considerations The pendingFollowers and pendingFollowing collections are sensitive information about an actor's social connections. For privacy, some services and actors do not share the following or followers collections. If not similarly protected, the pendingFollowers and pendingFollowing collections could be used to infer information about the actor's social connections before they are established. Some services or actors do not forward Reject activities to the actor of a Follow activity. Harassing or abusive actors may try to determine if the actor has rejected their follow request by fetching the pendingFollowers collection. For these reasons, publishers SHOULD NOT make the pendingFollowers and pendingFollowing collections visible to unauthenticated users. Publishers SHOULD NOT make the pendingFollowers and pendingFollowing collections visible to authenticated users who are not the actor. \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-4ccd: Pending Followers Collection and Pending Following Collection"},{"location":"fep/fep-4ccd/#fep-4ccd-pending-followers-collection-and-pending-following-collection","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-4ccd: Pending Followers Collection and Pending Following Collection"},{"location":"fep/fep-4ccd/#summary","text":"This specification defines two collections, pendingFollowers and pendingFollowing , with which users can review and manage their pending follow requests.","title":"Summary"},{"location":"fep/fep-4ccd/#motivation","text":"[ActivityPub] represents a directed social graph with followers and following properties on actors. To initiate a relationship, a Follow activity is sent from the potential follower to the followed actor, who can Accept or Reject it. Between the time that a Follow is sent and the time that it is accepted or rejected, the relationship is in a pending state. This is not represented in the ActivityPub data model. The new pendingFollowers collection can be used to review incoming Follow activities to Accept or Reject them. The new pendingFollowing collection can be used to review outgoing Follow activities to Undo them. Because the full activity data is needed to Accept , Reject or Undo , these collections should include Follow activities, and not just the actors requesting to follow.","title":"Motivation"},{"location":"fep/fep-4ccd/#details","text":"pendingFollowers is a property of an actor. It is a collection of Follow activities that have been sent to the actor, but not yet been accepted or rejected. pendingFollowing is a property of an actor. It is a collection of Follow activities that have been sent by the actor, but not yet been accepted or rejected. Both properties MUST be an OrderedCollection or Collection . Items in the collection MUST be in reverse chronological order. Items in the collections MUST be Follow activities. They MUST be unique by id . Each object of a Follow activity in the pendingFollowing collection MUST be unique by id . Each actor of a Follow activity in the pendingFollowers collection MUST be unique by id . When an Accept , Reject , or Undo activity with a Follow activity as object is processed, that Follow activity MUST NOT be included in the pendingFollowers and pendingFollowing collections in the future.","title":"Details"},{"location":"fep/fep-4ccd/#context","text":"The context document for this specification is https://purl.archive.org/socialweb/pending . Its contents are as follows: { \"@context\": { \"pdg\": \"https://purl.archive.org/socialweb/pending#\", \"pendingFollowers\": { \"@id\": \"pdg:pendingFollowers\", \"@type\": \"@id\" }, \"pendingFollowing\": { \"@id\": \"pdg:pendingFollowing\", \"@type\": \"@id\" } } }","title":"Context"},{"location":"fep/fep-4ccd/#_1","text":"A publisher can include the pendingFollowers and pendingFollowing collection in the properties of an actor. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/pending\" ], \"id\": \"https://example.com/evanp\", \"type\": \"Person\", \"name\": \"Evan Prodromou\", \"inbox\": \"https://example.com/evanp/inbox\", \"outbox\": \"https://example.com/evanp/outbox\", \"following\": \"https://example.com/evanp/following\", \"followers\": \"https://example.com/evanp/followers\", \"liked\": \"https://example.com/evanp/liked\", \"pendingFollowers\": \"https://example.com/evanp/pendingFollowers\", \"pendingFollowing\": \"https://example.com/evanp/pendingFollowing\" } Retrieving the pendingFollowers collection would show incoming follow requests for this actor. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/pending\" ], \"id\": \"https://example.com/evanp/pendingFollowers\", \"type\": \"OrderedCollection\", \"name\": \"Pending followers for Evan Prodromou\", \"orderedItems\": [ { \"type\": \"Follow\", \"id\": \"https://example.net/alyssa/follow/7\", \"summary\": \"Alyssa wants to follow Evan\", \"content\": \"Hey, Evan! It's Alyssa from the conference.\", \"actor\": { \"id\": \"https://example.net/alyssa\", \"type\": \"Person\", \"name\": \"Alyssa P. Hacker\" }, \"published\": \"2023-06-21T12:00:00Z\" }, { \"type\": [\"http://custom.example/ns/Archive\", \"Follow\"], \"id\": \"https://social.example/jokebot3000/follow/287\", \"summary\": \"Jokebot 3000 wants to follow Evan to archive his jokes\", \"actor\": { \"id\": \"https://social.example/jokebot3000\", \"type\": \"Application\", \"name\": \"Jokebot 3000\" }, \"published\": \"2023-05-07T12:00:00Z\" } ] } Note that the second, earlier Follow activity has a custom type property. Note also that the object of the Follow activities, which will be the same for every activity, is elided for clarity and space. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/pending\", {\"sports\": \"https://sports.example/ns#\"} ], \"id\": \"https://example.com/evanp/pendingFollowing\", \"type\": \"Collection\", \"name\": \"Pending following for Evan Prodromou\", \"items\": [ { \"type\": [\"sports:Fan\", \"Follow\"], \"id\": \"https://example.com/evanp/fan/309\", \"summary\": \"Evan is a fan of Jimena\", \"object\": { \"id\": \"https://tennis.example/jimena\", \"type\": \"Person\", \"name\": \"Jimena Suarez\" }, \"published\": \"2023-04-19T12:00:00Z\" }, { \"type\": \"Follow\", \"id\": \"https://example.net/evanp/follow/214\", \"summary\": \"Evan wants to follow Montreal Weather Updates\", \"object\": { \"id\": \"https://weather.example/canada/quebec/montreal\", \"type\": \"Service\", \"name\": \"Montreal Weather Updates\" }, \"published\": \"2023-02-11T12:00:00Z\" } ] } Note that the first Follow activity has a custom type property. Note also that the actor of the Follow activities, which will be the same for every activity, is elided for clarity and space. Finally, note that even though the collection's type is Collection and the items property is items , the activities still must be in reverse chronological order.","title":"\u4f8b"},{"location":"fep/fep-4ccd/#security-considerations","text":"The pendingFollowers and pendingFollowing collections are sensitive information about an actor's social connections. For privacy, some services and actors do not share the following or followers collections. If not similarly protected, the pendingFollowers and pendingFollowing collections could be used to infer information about the actor's social connections before they are established. Some services or actors do not forward Reject activities to the actor of a Follow activity. Harassing or abusive actors may try to determine if the actor has rejected their follow request by fetching the pendingFollowers collection. For these reasons, publishers SHOULD NOT make the pendingFollowers and pendingFollowing collections visible to unauthenticated users. Publishers SHOULD NOT make the pendingFollowers and pendingFollowing collections visible to authenticated users who are not the actor.","title":"Security considerations"},{"location":"fep/fep-4ccd/#_2","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-4ccd/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-521a-test-case/","text":"Actor Objects must express signing key as assertionMethod Multikey Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Background FEP-521a defines how Actor object MUST express the public key for its signing key in the assertionMethod property, as a Multikey object of a given shape and id URI shape. About this Test This is a Test Case testing conformance with the one behavior specified in FEP-521a. Test Subject The subject of this test is any data claiming to conform to the specification of an ActivityPub Actor Object and to the FEP-521a extension thereof. This test is not directly applicable to an ActivityPub Server. An ActivityPub Server serves 0 or more Actor Objects. An ActivityPub Server for a big community might serve hundreds of ActivityPub Actor Objects. An ActivityPub Server for a single human may serve only that person's ActivityPub Actor Object. This test applies to Actor Objects , but not all Actor Objects are addressable by an HTTPS URL. The URI that addresses an Actor Object is not the same as the Actor Object. A given URL may resolve to different Actor Objects in different contexts, and a given Actor Object may not be universally addressable across context by any one URL. Inputs This test requires the following inputs : actor - the actor object under tested type: binary data constraints will be interpreted as JSON. If not parseable as JSON, the test result MUST be inapplicable . must be an actor as per core AP test e7ee491d-88d7-4e67-80c8-f74781bb247c i.e. has inbox and outbox If not actor, the test result outcome MUST be inapplicable . must contain a non-empty assertionMethod array if does not, the test result outcome MUST be inapplicable . Applicability This test applies directly to the actor input. If actor is not an Actor Object, the outcome MUST be inapplicable . If actor is not a JSON object, the outcome MUST be inapplicable . If actor JSON does not have a type property, the outcome MUST be inapplicable . If actor JSON does not have an assertionMethod property, the outcome MUST be inapplicable . Test Targets each entry in assertionMethod array is a distinct test target, referred to below as assertionMethod[x] each entry should be a JSON object; each entry that is not is inapplicable (warning) each entry not typed as Multikey is inapplicable (warning) each entry typed as Multikey passes or fails the tests of its validity as a Multikey Expectations assertionMethod[x].id - MUST be a string assertionMethod[x].controller - MUST match the id property, if present, of the assertionMethod array's parent (i.e., the Actor object) assertionMethod[x].publicKeyMultibase - MUST be a base58btc-encoded and appropriately-prefixed (in this case, beginning with z ) expression of a binary public key expression Assumptions 1. How to Determine Whether Actor Object is expressing a key in the FEP-defined shape For the purposes of determining whether the input actor is expressing a key in the shape defined by the FEP: the input is valid JSON the input, once parsed as JSON has an assertionMethod property, containing an array of 0 or more objects if present, each object therein... has an id property, containing a string has a type property, containing a string has a controller property, containing a string ...has a publicKeyMultibase property, containing a string 2. Property value expectations For the purposes of determining whether the input actor is expressing 1 or more keys all the following must be true: the input is valid JSON each member of the assertionMethod array, once parsed as JSON, ... has an id property, which is a URI has an assertionMethod.id property, which is a string unique within the actor object has an assertionMethod.type property whose value is the string \"Multikey\" or an Array containing the string \"Multikey\" has an assertionMethod.controller property whose value is a string identical to the parent object's id property value has an assertionMethod.publicKeyMultibase property equal to a string of base58btc-alphabet characters, i.e. matching the regular expression [1-9A-HJ-NP-Za-km-z]+ Test Cases These are test cases for this test case, and can be used to verify that an implementation of this test case specification will be consistent with other implementations. Missing assertionMethod input actor: { \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\" } test result outcome: inapplicable Misshapen assertionMethod Array input actor: { \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"assertionMethod\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" } test targets none outcome: inapplicable , warning (malformed assertionMethod array) Misshapen assertionMethod Members input actor: { \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"assertionMethod\": [{ \"inappropriateKey\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" }] } test targets none outcome: inapplicable , warning (malformed assertionMethod member) Malformed publicKeyMultibase Value input actor: { \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"assertionMethod\": {[ \"id\": \"https://example.com/#ed25519-key\", \"type\": \"Multikey\", \"controller\": \"https://example.com/\", \"publicKeyMultibase\": \"6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" ]} } test targets actor.assertionMethod[0] outcome: inapplicable , warning (malformed assertionMethod member) Valid Actor input actor : json { \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"id\": \"https://example.com/\", \"assertionMethod\": [ { \"id\": \"https://example.com/#ed25519-key\", \"type\": \"Multikey\", \"controller\": \"https://https://example.com/\", \"publicKeyMultibase\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" }, { \"inappropriateKey\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" } ] } test targets assertionMethod[0] outcome: passed assertionMethod[1] outcome: inapplicable , warning (non-conformant entries) Glossary outcome An outcome is a conclusion that comes from evaluating a test on a test subject. An outcome can be one of the three following types: inapplicable : No part of the test subject matches the applicability passed : A test target meets all expectations failed : A test target does not meet all expectations Requirements Mapping FEP requirement: - Actor Objects must express signing key as assertionMethod Multikey Required for Conformance to FEP-521a Outcome Mapping when test target assertionMethod has outcome passed , requirement is satisfied when test target assertionMethod has outcome failed , requirement is not satisfied when test target assertionMethod has outcome inapplicable , further testing is needed to determine whether this requirement is satisfied Change Log 2024-06-25T00:00:00.000Z - implemented as a free-standing package and submitted to FEP repo 2024-04-11T21:41:20.725Z - first draft by bumblefudge Issues List","title":"Actor Objects must express signing key as assertionMethod Multikey"},{"location":"fep/fep-521a-test-case/#actor-objects-must-express-signing-key-as-assertionmethod-multikey","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Actor Objects must express signing key as assertionMethod Multikey"},{"location":"fep/fep-521a-test-case/#background","text":"FEP-521a defines how Actor object MUST express the public key for its signing key in the assertionMethod property, as a Multikey object of a given shape and id URI shape.","title":"Background"},{"location":"fep/fep-521a-test-case/#about-this-test","text":"This is a Test Case testing conformance with the one behavior specified in FEP-521a.","title":"About this Test"},{"location":"fep/fep-521a-test-case/#test-subject","text":"The subject of this test is any data claiming to conform to the specification of an ActivityPub Actor Object and to the FEP-521a extension thereof. This test is not directly applicable to an ActivityPub Server. An ActivityPub Server serves 0 or more Actor Objects. An ActivityPub Server for a big community might serve hundreds of ActivityPub Actor Objects. An ActivityPub Server for a single human may serve only that person's ActivityPub Actor Object. This test applies to Actor Objects , but not all Actor Objects are addressable by an HTTPS URL. The URI that addresses an Actor Object is not the same as the Actor Object. A given URL may resolve to different Actor Objects in different contexts, and a given Actor Object may not be universally addressable across context by any one URL.","title":"Test Subject"},{"location":"fep/fep-521a-test-case/#inputs","text":"This test requires the following inputs : actor - the actor object under tested type: binary data constraints will be interpreted as JSON. If not parseable as JSON, the test result MUST be inapplicable . must be an actor as per core AP test e7ee491d-88d7-4e67-80c8-f74781bb247c i.e. has inbox and outbox If not actor, the test result outcome MUST be inapplicable . must contain a non-empty assertionMethod array if does not, the test result outcome MUST be inapplicable .","title":"Inputs"},{"location":"fep/fep-521a-test-case/#applicability","text":"This test applies directly to the actor input. If actor is not an Actor Object, the outcome MUST be inapplicable . If actor is not a JSON object, the outcome MUST be inapplicable . If actor JSON does not have a type property, the outcome MUST be inapplicable . If actor JSON does not have an assertionMethod property, the outcome MUST be inapplicable .","title":"Applicability"},{"location":"fep/fep-521a-test-case/#test-targets","text":"each entry in assertionMethod array is a distinct test target, referred to below as assertionMethod[x] each entry should be a JSON object; each entry that is not is inapplicable (warning) each entry not typed as Multikey is inapplicable (warning) each entry typed as Multikey passes or fails the tests of its validity as a Multikey","title":"Test Targets"},{"location":"fep/fep-521a-test-case/#expectations","text":"assertionMethod[x].id - MUST be a string assertionMethod[x].controller - MUST match the id property, if present, of the assertionMethod array's parent (i.e., the Actor object) assertionMethod[x].publicKeyMultibase - MUST be a base58btc-encoded and appropriately-prefixed (in this case, beginning with z ) expression of a binary public key expression","title":"Expectations"},{"location":"fep/fep-521a-test-case/#assumptions","text":"","title":"Assumptions"},{"location":"fep/fep-521a-test-case/#1-how-to-determine-whether-actor-object-is-expressing-a-key-in-the-fep-defined-shape","text":"For the purposes of determining whether the input actor is expressing a key in the shape defined by the FEP: the input is valid JSON the input, once parsed as JSON has an assertionMethod property, containing an array of 0 or more objects if present, each object therein... has an id property, containing a string has a type property, containing a string has a controller property, containing a string ...has a publicKeyMultibase property, containing a string","title":"1. How to Determine Whether Actor Object is expressing a key in the FEP-defined shape"},{"location":"fep/fep-521a-test-case/#2-property-value-expectations","text":"For the purposes of determining whether the input actor is expressing 1 or more keys all the following must be true: the input is valid JSON each member of the assertionMethod array, once parsed as JSON, ... has an id property, which is a URI has an assertionMethod.id property, which is a string unique within the actor object has an assertionMethod.type property whose value is the string \"Multikey\" or an Array containing the string \"Multikey\" has an assertionMethod.controller property whose value is a string identical to the parent object's id property value has an assertionMethod.publicKeyMultibase property equal to a string of base58btc-alphabet characters, i.e. matching the regular expression [1-9A-HJ-NP-Za-km-z]+","title":"2. Property value expectations"},{"location":"fep/fep-521a-test-case/#test-cases","text":"These are test cases for this test case, and can be used to verify that an implementation of this test case specification will be consistent with other implementations.","title":"Test Cases"},{"location":"fep/fep-521a-test-case/#missing-assertionmethod","text":"input actor: { \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\" } test result outcome: inapplicable","title":"Missing assertionMethod"},{"location":"fep/fep-521a-test-case/#misshapen-assertionmethod-array","text":"input actor: { \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"assertionMethod\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" } test targets none outcome: inapplicable , warning (malformed assertionMethod array)","title":"Misshapen assertionMethod Array"},{"location":"fep/fep-521a-test-case/#misshapen-assertionmethod-members","text":"input actor: { \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"assertionMethod\": [{ \"inappropriateKey\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" }] } test targets none outcome: inapplicable , warning (malformed assertionMethod member)","title":"Misshapen assertionMethod Members"},{"location":"fep/fep-521a-test-case/#malformed-publickeymultibase-value","text":"input actor: { \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"assertionMethod\": {[ \"id\": \"https://example.com/#ed25519-key\", \"type\": \"Multikey\", \"controller\": \"https://example.com/\", \"publicKeyMultibase\": \"6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" ]} } test targets actor.assertionMethod[0] outcome: inapplicable , warning (malformed assertionMethod member)","title":"Malformed publicKeyMultibase Value"},{"location":"fep/fep-521a-test-case/#valid-actor","text":"input actor : json { \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"id\": \"https://example.com/\", \"assertionMethod\": [ { \"id\": \"https://example.com/#ed25519-key\", \"type\": \"Multikey\", \"controller\": \"https://https://example.com/\", \"publicKeyMultibase\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" }, { \"inappropriateKey\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" } ] } test targets assertionMethod[0] outcome: passed assertionMethod[1] outcome: inapplicable , warning (non-conformant entries)","title":"Valid Actor"},{"location":"fep/fep-521a-test-case/#glossary","text":"","title":"Glossary"},{"location":"fep/fep-521a-test-case/#outcome","text":"An outcome is a conclusion that comes from evaluating a test on a test subject. An outcome can be one of the three following types: inapplicable : No part of the test subject matches the applicability passed : A test target meets all expectations failed : A test target does not meet all expectations","title":"outcome"},{"location":"fep/fep-521a-test-case/#requirements-mapping","text":"FEP requirement: - Actor Objects must express signing key as assertionMethod Multikey Required for Conformance to FEP-521a Outcome Mapping when test target assertionMethod has outcome passed , requirement is satisfied when test target assertionMethod has outcome failed , requirement is not satisfied when test target assertionMethod has outcome inapplicable , further testing is needed to determine whether this requirement is satisfied","title":"Requirements Mapping"},{"location":"fep/fep-521a-test-case/#change-log","text":"2024-06-25T00:00:00.000Z - implemented as a free-standing package and submitted to FEP repo 2024-04-11T21:41:20.725Z - first draft by bumblefudge","title":"Change Log"},{"location":"fep/fep-521a-test-case/#issues-list","text":"","title":"Issues List"},{"location":"fep/fep-521a/","text":"FEP-521a: Actor\u306e\u516c\u958b\u9375\u306e\u8868\u73fe \u6982\u8981 \u3053\u306e\u63d0\u6848\u3067\u306f\u3001 ActivityPub \u30a2\u30af\u30bf\u30fc\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f\u516c\u958b\u9375\u3092\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 \u6839\u62e0 \u3053\u308c\u307e\u3067\u3001Fediverse\u30b5\u30fc\u30d3\u30b9\u306f publicKey \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5229\u7528\u3057\u3066\u30a2\u30af\u30bf\u30fc\u306e\u516c\u958b\u9375\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u591a\u304f\u306e\u5b9f\u88c5\u306f1\u30a2\u30af\u30bf\u30fc\u306b\u3064\u304d\u4e00\u3064\u306e\u9375\u306e\u307f\u3092\u8a31\u53ef\u3059\u308b\u305f\u3081\u3001\u8ffd\u52a0\u306e\u9375\u304c\u5fc5\u8981\u306a\u30b1\u30fc\u30b9\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u306b\u306f\u65b0\u3057\u3044\u30a2\u30d7\u30ed\u30fc\u30c1\u304c\u5fc5\u8981\u3067\u3057\u305f\u3002 \u3055\u3089\u306b\u3001 publicKey \u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u6700\u65b0\u306e Security Vocabulary \u304b\u3089\u306f\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002 \u8981\u4ef6 \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5185\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u300cMUST\u300d\u3001\u300cMUST NOT\u300d\u3001\u300cREQUIRED\u300d\u3001\u300cSHALL\u300d\u3001\u300cSHALL NOT\u300d\u3001\u300cSHOULD\u300d\u3001\u300cSHOULD NOT\u300d\u3001\u300cRECOMMENDED\u300d\u3001\u300cMAY\u300d\u3001\u304a\u3088\u3073\u300cOPTIONAL\u300d\u306f\u3001 RFC-2119 \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3068\u304a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 Multikey \u5404\u516c\u958b\u9375\u306f\u3001 Controlled Identifiers \u4ed5\u69d8\u306e\u30bb\u30af\u30b7\u30e7\u30f32.2.2 Multikey\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001Multikey\u578b\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8868\u73fe\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093 (MUST)\u3002\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u3001\u6b21\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5fc5\u8981\u3067\u3059\u3002 id : \u516c\u958b\u9375\u306e\u4e00\u610f\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u8b58\u5225\u5b50\u3002 type : \u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u306f Multikey \u6587\u5b57\u5217\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 controller : \u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u306f\u30a2\u30af\u30bf\u30fc\u306eID\u3068\u4e00\u81f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 publicKeyMultibase : Multibase \u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f Multicodec \u306e\u63a5\u982d\u8f9e\u3068\u9375\u3002\u5b9f\u88c5\u3067\u306f base-58-btc \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u9375\u8b58\u5225\u5b50\u3068\u30a2\u30af\u30bf\u30fc\u306e\u8b58\u5225\u5b50\u306f\u540c\u3058 origin \u3067\u3042\u308b\u3079\u304d\u3067\u3059 (SHOULD) Multikey\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u30ad\u30fc\u306e\u6709\u52b9\u671f\u9650\u3092\u793a\u3059 expires \u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u88c5\u3067\u306f\u3001\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u305f\u9375\u3067\u7f72\u540d\u3055\u308c\u305f\u7f72\u540d\u3092\u53d7\u3051\u5165\u308c\u3066\u306f\u3044\u3051\u307e\u305b\u3093 (MUST NOT)\u3002 \u30ad\u30fcID \u8b58\u5225\u5b50\u306f\u3001\u30a2\u30af\u30bf\u30fcID\u306b\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u8b58\u5225\u5b50\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u540c\u3058\u30a2\u30af\u30bf\u30fc\u306e\u7570\u306a\u308b\u516c\u958b\u9375\u306f\u3001\u7570\u306a\u308b\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8ID\u3092\u5229\u7528\u3057\u3066\u8b58\u5225\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u8b58\u5225\u5b50\u3092\u542b\u3080 URI \u306e\u89e3\u6c7a\u306f\u3001 Controlled Identifiers \u4ed5\u69d8\u306e\u30bb\u30af\u30b7\u30e7\u30f33.4 \u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u89e3\u6c7a\u4ed5\u69d8\u3067\u6307\u5b9a\u3055\u308c\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5229\u7528\u3057\u3066\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u9375\u306e\u7a2e\u985e \u5b9f\u88c5\u8005\u306f\u3001 Multicodec \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u4efb\u610f\u306e\u30bf\u30a4\u30d7\u306e\u6697\u53f7\u5316\u30ad\u30fc\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u5236\u5fa1\u3055\u308c\u305f\u8b58\u5225\u5b50\u6587\u66f8 Multikey \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001 Controlled Identifiers \u4ed5\u69d8\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u5236\u5fa1\u3055\u308c\u305f\u8b58\u5225\u5b50\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u898b\u306a\u3055\u308c\u308b\u30a2\u30af\u30bf\u30fc \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u9375\u304cActivityPub\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u7f72\u540d\u306b\u5229\u7528\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u56f3\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u30a2\u30af\u30bf\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e assertionMethod \u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u4ed6\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306f\u73fe\u5728\u3053\u306e\u63d0\u6848\u306e\u7bc4\u56f2\u5916\u3067\u3059\u3002 \u5b9f\u88c5\u3067\u306f\u3001\u3053\u306e\u4ed5\u69d8\u306b\u6e96\u62e0\u3057\u3066\u3044\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 assertionMethod \u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306f\u63a8\u5968\u3055\u308c\u307e\u305b\u3093\u3002\u914d\u5217\u5185\u3067\u975e\u6e96\u62e0\u306e assertionMethod \u30a8\u30f3\u30c8\u30ea\u306b\u906d\u9047\u3057\u305f\u5b9f\u88c5\u306f\u3001\u305d\u308c\u3089\u3092\u7121\u8996\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u4f8b { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/cid/v1\" ], \"type\": \"Person\", \"id\": \"https://server.example/users/alice\", \"inbox\": \"https://server.example/users/alice/inbox\", \"outbox\": \"https://server.example/users/alice/outbox\", \"assertionMethod\": [ { \"id\": \"https://server.example/users/alice#ed25519-key\", \"type\": \"Multikey\", \"controller\": \"https://server.example/users/alice\", \"publicKeyMultibase\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" } ] } \u3053\u306e\u63d0\u6848\u3068FEP-c390\u306e\u9055\u3044 FEP-c390 \u306f\u3001\u5916\u90e8 ID \u3092 ActivityPub \u30a2\u30af\u30bf\u30fc\u306b\u30ea\u30f3\u30af\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u3002\u6709\u52b9\u306a ID \u8a3c\u660e\u306f\u3001\u30a2\u30af\u30bf\u30fc\u3068\u8a3c\u660e\u306e\u30b5\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u540c\u3058\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u3088\u3063\u3066\u5236\u5fa1\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002 \u3053\u306e\u63d0\u6848\u3067\u306f\u3001\u30a2\u30af\u30bf\u30fc\u306e\u516c\u958b\u9375\u3092\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u5bfe\u5fdc\u3059\u308b\u79d8\u5bc6\u9375\u306f\u30b5\u30fc\u30d0\u30fc\u306b\u3088\u3063\u3066\u5236\u5fa1\u3055\u308c\u307e\u3059\u3002 \u30c6\u30b9\u30c8\u30d9\u30af\u30c8\u30eb fep-521a.feature \u3092\u53c2\u7167 \u5b9f\u88c5 Mitra streams Hubzilla Fedify \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Ivan Herman, Manu Sporny, Dave Longley, Security Vocabulary , 2023 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 Dave Longley, Manu Sporny, Markus Sabadello, Drummond Reed, Orie Steele, Christopher Allen, - Controlled Identifiers (CIDs) v1.0 , 2025 Protocol Labs, Multicodec silverpill, FEP-fe34: \u30aa\u30ea\u30b8\u30f3\u30d9\u30fc\u30b9\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30e2\u30c7\u30eb , 2024 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-521a: Actor\u306e\u516c\u958b\u9375\u306e\u8868\u73fe"},{"location":"fep/fep-521a/#fep-521a-actor","text":"","title":"FEP-521a: Actor\u306e\u516c\u958b\u9375\u306e\u8868\u73fe"},{"location":"fep/fep-521a/#_1","text":"\u3053\u306e\u63d0\u6848\u3067\u306f\u3001 ActivityPub \u30a2\u30af\u30bf\u30fc\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f\u516c\u958b\u9375\u3092\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002","title":"\u6982\u8981"},{"location":"fep/fep-521a/#_2","text":"\u3053\u308c\u307e\u3067\u3001Fediverse\u30b5\u30fc\u30d3\u30b9\u306f publicKey \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5229\u7528\u3057\u3066\u30a2\u30af\u30bf\u30fc\u306e\u516c\u958b\u9375\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u591a\u304f\u306e\u5b9f\u88c5\u306f1\u30a2\u30af\u30bf\u30fc\u306b\u3064\u304d\u4e00\u3064\u306e\u9375\u306e\u307f\u3092\u8a31\u53ef\u3059\u308b\u305f\u3081\u3001\u8ffd\u52a0\u306e\u9375\u304c\u5fc5\u8981\u306a\u30b1\u30fc\u30b9\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u306b\u306f\u65b0\u3057\u3044\u30a2\u30d7\u30ed\u30fc\u30c1\u304c\u5fc5\u8981\u3067\u3057\u305f\u3002 \u3055\u3089\u306b\u3001 publicKey \u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u6700\u65b0\u306e Security Vocabulary \u304b\u3089\u306f\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u6839\u62e0"},{"location":"fep/fep-521a/#_3","text":"\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5185\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u300cMUST\u300d\u3001\u300cMUST NOT\u300d\u3001\u300cREQUIRED\u300d\u3001\u300cSHALL\u300d\u3001\u300cSHALL NOT\u300d\u3001\u300cSHOULD\u300d\u3001\u300cSHOULD NOT\u300d\u3001\u300cRECOMMENDED\u300d\u3001\u300cMAY\u300d\u3001\u304a\u3088\u3073\u300cOPTIONAL\u300d\u306f\u3001 RFC-2119 \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3068\u304a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002","title":"\u8981\u4ef6"},{"location":"fep/fep-521a/#multikey","text":"\u5404\u516c\u958b\u9375\u306f\u3001 Controlled Identifiers \u4ed5\u69d8\u306e\u30bb\u30af\u30b7\u30e7\u30f32.2.2 Multikey\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001Multikey\u578b\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8868\u73fe\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093 (MUST)\u3002\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u3001\u6b21\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5fc5\u8981\u3067\u3059\u3002 id : \u516c\u958b\u9375\u306e\u4e00\u610f\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u8b58\u5225\u5b50\u3002 type : \u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u306f Multikey \u6587\u5b57\u5217\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 controller : \u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u306f\u30a2\u30af\u30bf\u30fc\u306eID\u3068\u4e00\u81f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 publicKeyMultibase : Multibase \u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f Multicodec \u306e\u63a5\u982d\u8f9e\u3068\u9375\u3002\u5b9f\u88c5\u3067\u306f base-58-btc \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u9375\u8b58\u5225\u5b50\u3068\u30a2\u30af\u30bf\u30fc\u306e\u8b58\u5225\u5b50\u306f\u540c\u3058 origin \u3067\u3042\u308b\u3079\u304d\u3067\u3059 (SHOULD) Multikey\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u30ad\u30fc\u306e\u6709\u52b9\u671f\u9650\u3092\u793a\u3059 expires \u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u88c5\u3067\u306f\u3001\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u305f\u9375\u3067\u7f72\u540d\u3055\u308c\u305f\u7f72\u540d\u3092\u53d7\u3051\u5165\u308c\u3066\u306f\u3044\u3051\u307e\u305b\u3093 (MUST NOT)\u3002","title":"Multikey"},{"location":"fep/fep-521a/#id","text":"\u8b58\u5225\u5b50\u306f\u3001\u30a2\u30af\u30bf\u30fcID\u306b\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u8b58\u5225\u5b50\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u540c\u3058\u30a2\u30af\u30bf\u30fc\u306e\u7570\u306a\u308b\u516c\u958b\u9375\u306f\u3001\u7570\u306a\u308b\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8ID\u3092\u5229\u7528\u3057\u3066\u8b58\u5225\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u8b58\u5225\u5b50\u3092\u542b\u3080 URI \u306e\u89e3\u6c7a\u306f\u3001 Controlled Identifiers \u4ed5\u69d8\u306e\u30bb\u30af\u30b7\u30e7\u30f33.4 \u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u89e3\u6c7a\u4ed5\u69d8\u3067\u6307\u5b9a\u3055\u308c\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5229\u7528\u3057\u3066\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002","title":"\u30ad\u30fcID"},{"location":"fep/fep-521a/#_4","text":"\u5b9f\u88c5\u8005\u306f\u3001 Multicodec \u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u4efb\u610f\u306e\u30bf\u30a4\u30d7\u306e\u6697\u53f7\u5316\u30ad\u30fc\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002","title":"\u9375\u306e\u7a2e\u985e"},{"location":"fep/fep-521a/#_5","text":"Multikey \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001 Controlled Identifiers \u4ed5\u69d8\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u5236\u5fa1\u3055\u308c\u305f\u8b58\u5225\u5b50\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u898b\u306a\u3055\u308c\u308b\u30a2\u30af\u30bf\u30fc \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u9375\u304cActivityPub\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u7f72\u540d\u306b\u5229\u7528\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u56f3\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u30a2\u30af\u30bf\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e assertionMethod \u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u4ed6\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306f\u73fe\u5728\u3053\u306e\u63d0\u6848\u306e\u7bc4\u56f2\u5916\u3067\u3059\u3002 \u5b9f\u88c5\u3067\u306f\u3001\u3053\u306e\u4ed5\u69d8\u306b\u6e96\u62e0\u3057\u3066\u3044\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 assertionMethod \u914d\u5217\u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306f\u63a8\u5968\u3055\u308c\u307e\u305b\u3093\u3002\u914d\u5217\u5185\u3067\u975e\u6e96\u62e0\u306e assertionMethod \u30a8\u30f3\u30c8\u30ea\u306b\u906d\u9047\u3057\u305f\u5b9f\u88c5\u306f\u3001\u305d\u308c\u3089\u3092\u7121\u8996\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u5236\u5fa1\u3055\u308c\u305f\u8b58\u5225\u5b50\u6587\u66f8"},{"location":"fep/fep-521a/#_6","text":"{ \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/cid/v1\" ], \"type\": \"Person\", \"id\": \"https://server.example/users/alice\", \"inbox\": \"https://server.example/users/alice/inbox\", \"outbox\": \"https://server.example/users/alice/outbox\", \"assertionMethod\": [ { \"id\": \"https://server.example/users/alice#ed25519-key\", \"type\": \"Multikey\", \"controller\": \"https://server.example/users/alice\", \"publicKeyMultibase\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" } ] }","title":"\u4f8b"},{"location":"fep/fep-521a/#fep-c390","text":"FEP-c390 \u306f\u3001\u5916\u90e8 ID \u3092 ActivityPub \u30a2\u30af\u30bf\u30fc\u306b\u30ea\u30f3\u30af\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u3002\u6709\u52b9\u306a ID \u8a3c\u660e\u306f\u3001\u30a2\u30af\u30bf\u30fc\u3068\u8a3c\u660e\u306e\u30b5\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u540c\u3058\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u3088\u3063\u3066\u5236\u5fa1\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002 \u3053\u306e\u63d0\u6848\u3067\u306f\u3001\u30a2\u30af\u30bf\u30fc\u306e\u516c\u958b\u9375\u3092\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u5bfe\u5fdc\u3059\u308b\u79d8\u5bc6\u9375\u306f\u30b5\u30fc\u30d0\u30fc\u306b\u3088\u3063\u3066\u5236\u5fa1\u3055\u308c\u307e\u3059\u3002","title":"\u3053\u306e\u63d0\u6848\u3068FEP-c390\u306e\u9055\u3044"},{"location":"fep/fep-521a/#_7","text":"fep-521a.feature \u3092\u53c2\u7167","title":"\u30c6\u30b9\u30c8\u30d9\u30af\u30c8\u30eb"},{"location":"fep/fep-521a/#_8","text":"Mitra streams Hubzilla Fedify","title":"\u5b9f\u88c5"},{"location":"fep/fep-521a/#_9","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Ivan Herman, Manu Sporny, Dave Longley, Security Vocabulary , 2023 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 Dave Longley, Manu Sporny, Markus Sabadello, Drummond Reed, Orie Steele, Christopher Allen, - Controlled Identifiers (CIDs) v1.0 , 2025 Protocol Labs, Multicodec silverpill, FEP-fe34: \u30aa\u30ea\u30b8\u30f3\u30d9\u30fc\u30b9\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30e2\u30c7\u30eb , 2024","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-521a/#_10","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-5624/","text":"FEP-5624: Per-object reply control policies Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Sometimes, users may want to share an information or a story without inviting replies from outside their circles or from anyone at all. In particular, individuals may want to restrict who can reply to them in order to avoid \u201creply guys\u201d or limit outright harassment, while instutions may want to disable replies on their posts to provide information without having to deal with a moderation burden. This can be broken into an advisory part advertising what sets of actors are expected to be able to reply, and a collaborative verification process where third-parties check with the actor being replied to that the reply is indeed allowed. Requirements The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119]. In the remaining of this FEP, \u201cdistribution authority\u201d (or \u201cauthority\u201d for short) refers to an actor that controls the distribution and audience of replies. The purpose of this wording is to make this FEP applicable both for models where replies are first-class posts, and for \u201cpost and comments\u201d models where comments only exist in the context of a post and the post author decides who gets to see the comments. In the absence of extensions, the \u201cauthority\u201d is the author of the post being replied to. Declaring a reply policy In order to advertise who is allowed to reply to an object, an author MAY set the canReply ( http://joinmastodon.org/ns#canReply ) property on their objects. If set, this property MUST be an empty array or one or more actors or collections. To ease implementation, collections SHOULD be restricted to one of the following: - as:Public , to indicate that anyone can reply - the authority's followers collection (if defined) - the authority's followed collection (if defined) In addition, canReply SHOULD contain every actor mentioned in the original object. Whenever one of these collections is used, the receiving end can easily know whether they are expected to be able to reply. Example object { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\": \"http://joinmastodon.org/ns#\", \"canReply\": \"toot:canReply\" } ], \"attributedTo\": \"https://example.com/users/1\", \"id\": \"https://example.com/users/1/statuses/1\", \"type\": \"Note\", \"content\": \"Hello world\", \"canReply\": \"https://www.w3.org/ns/activitystreams#Public\" } Checking whether the user can reply and submitting the reply to the authority When an object with canReply is set, it SHOULD be conveyed in human-readable form to the user if possible, for instance with something like \u201cOnly mentioned users can reply\u201d or \u201cOnly people Authority follows and mentioned users can reply\u201d. The software SHOULD NOT offer the user to reply unless it is directly mentioned in the object's tag attribute or listed in canReply (either directly or through a collection), or canReply contains a collection for which the recipient cannot efficiently check the membership of the would-be replier. After locally verifying that the replier should be allowed to reply, the replier's end SHOULD POST the Create activity for the reply to the authority's inbox only , and consider the reply to be pending approval. Receiving and accepting a reply When receiving a reply to an object with a canReply property, the authority decides whether the reply is acceptable. If the reply is considered acceptable, the authority MUST reply with an ApproveReply ( http://joinmastodon.org/ns#ApproveReply ) activity with the object property set to the id of the reply object, and its inReplyTo property set to the object it is in reply to. That ApproveReply activity SHOULD be publicly dereferenceable and MUST be dereferenceable by all parties allowed to see the original post. It MUST NOT embed its object nor its inReplyTo as to avoid possible information leaks. Additionally, the authority MAY forward an accepted reply according to its own rules. If the reply is considered unacceptable, the authority SHOULD reply with a RejectReply ( http://joinmastodon.org/ns#RejectReply ) activity. This activity MAY be publicly accessible, but this is not a requirement. The reason for using the new activity types ApproveReply and RejectReply is to be explicit about the purpose of the approval, as one could imagine other kinds of approvals, and remaining implicit may cause ambiguities with other potential extensions. Example ApproveReply activity { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\": \"http://joinmastodon.org/ns#\", \"ApproveReply\": \"toot:ApproveReply\" } ], \"actor\": \"https://example.com/users/1\", \"id\": \"https://example.com/reply_approvals/1\", \"type\": \"ApproveReply\", \"object\": \"https://example.org/users/bob/statuses/3\", \"inReplyTo\": \"https://example.com/users/1/statuses/1\" } Example RejectReply activity { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\": \"http://joinmastodon.org/ns#\", \"RejectReply\": \"toot:RejectReply\" } ], \"actor\": \"https://example.com/users/1\", \"id\": \"https://example.com/reply_approvals/1\", \"type\": \"RejectReply\", \"object\": \"https://example.org/users/bob/statuses/3\" } Receiving approval and distributing the reply After sending the initial Create , the replier SHOULD wait for an ApproveReply activity such as described above. Once the ApproveReply has been received, the replier SHOULD add a replyApproval ( http://joinmastodon.org/ns#replyApproval ) property to their reply object pointing to the ApproveReply activity they received, and then MAY send a Create activity with the modified object to its intended audience. If it instead receives a RejectReply , the reply SHOULD be immediately deleted and the replier MAY be notified. Example reply object with replyApproval { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\": \"http://joinmastodon.org/ns#\", \"canReply\": \"toot:canReply\", \"replyApproval\": \"toot:replyApproval\" } ], \"attributedTo\": \"https://example.com/users/1\", \"id\": \"https://example.org/users/bob/statuses/3\", \"type\": \"Note\", \"content\": \"@alice hello!\", \"inReplyTo\": \"https://example.com/users/1/statuses/1\", \"canReply\": \"https://www.w3.org/ns/activitystreams#Public\", \"replyApproval\": \"https://example.com/reply_approvals/1\", \"tag\": { \"type\": \"Mention\", \"href\": \"https://example.com/users/1\" } } Verifying third-party replies When processing a reply from a remote actor to a remote authority, a recipient SHOULD discard any reply that does not match any of the following conditions: - the object it is in reply to does not set a canReply property - the object has been received through the remote authority - the object it is in reply to has a canReply containing the as:Public collection - the author of the reply appears in a Mention object in the tag property of the object it is in reply to - the object it is in reply to sets a non-empty canReply , and replyApproval can be dereferenced and is a valid ApproveReply activity To be considered valid, the ApproveReply activity referenced in replyApproval MUST satisfy the following properties: - its actor property is the authority - its authenticity can be asserted - its object property is the reply under consideration - its inReplyTo property matches that of the reply under consideration In addition, if the reply is considered valid, but has no valid replyApproval despite the object it is in reply to having a canReply property, the recipient MAY hide the reply from certain views. Revoking a previously-accepted reply The authority may want to perform /a posteriori/ moderation of their replies. To do this, the authority SHOULD send a RejectReply activity to the sender and the reply's audience, with the reply URI as the object property. The object property MUST NOT be embedded, as to avoid possible information leaks. The URI at which the previously-offered ApproveReply was available should return HTTP 404 or redirect to the newly-issued RejectReply activity. Handling a revocation Upon receiving a RejectReply activity for a previously-accepted reply, third-parties SHOULD check that the RejectReply is valid and SHOULD delete or hide the revoked reply if it is. To be considered valid, the RejectReply activity MUST satisfy the following properties: - its actor property is the authority - its authenticity can be asserted - its object property is the reply under consideration Deployment considerations Because it is unrealistic to expect all implementations and deployments to implement this proposal at the same time, deployment SHOULD be gradual, with verification of third-party replies only performed once the other steps are widely implemented. To encourage adoption without breaking compatibility altogether, implementations MAY want to hide non-validated replies from certain views (e.g. requiring a click to see \u201chidden replies\u201d, or not showing the reply to non-followers). Security considerations By not adding a hash or copy of the reply in the ApproveReply activity, malicious actors could exploit this in a split horizon setting, sending different versions of the same activity to different actors. This is, however, already a concern in pretty much all contexts in ActivityPub, and enshrining that information in the ApproveReply activity would have many drawbacks: significantly more complex implementation inability to change the JSON-LD representation after the fact possibly leaking private information if the ApproveReply activity is publicly dereferenceable \u5b9f\u88c5 None so far. \u53c2\u8003\u6587\u732e [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-5624: Per-object reply control policies"},{"location":"fep/fep-5624/#fep-5624-per-object-reply-control-policies","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-5624: Per-object reply control policies"},{"location":"fep/fep-5624/#summary","text":"Sometimes, users may want to share an information or a story without inviting replies from outside their circles or from anyone at all. In particular, individuals may want to restrict who can reply to them in order to avoid \u201creply guys\u201d or limit outright harassment, while instutions may want to disable replies on their posts to provide information without having to deal with a moderation burden. This can be broken into an advisory part advertising what sets of actors are expected to be able to reply, and a collaborative verification process where third-parties check with the actor being replied to that the reply is indeed allowed.","title":"Summary"},{"location":"fep/fep-5624/#requirements","text":"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119]. In the remaining of this FEP, \u201cdistribution authority\u201d (or \u201cauthority\u201d for short) refers to an actor that controls the distribution and audience of replies. The purpose of this wording is to make this FEP applicable both for models where replies are first-class posts, and for \u201cpost and comments\u201d models where comments only exist in the context of a post and the post author decides who gets to see the comments. In the absence of extensions, the \u201cauthority\u201d is the author of the post being replied to.","title":"Requirements"},{"location":"fep/fep-5624/#declaring-a-reply-policy","text":"In order to advertise who is allowed to reply to an object, an author MAY set the canReply ( http://joinmastodon.org/ns#canReply ) property on their objects. If set, this property MUST be an empty array or one or more actors or collections. To ease implementation, collections SHOULD be restricted to one of the following: - as:Public , to indicate that anyone can reply - the authority's followers collection (if defined) - the authority's followed collection (if defined) In addition, canReply SHOULD contain every actor mentioned in the original object. Whenever one of these collections is used, the receiving end can easily know whether they are expected to be able to reply.","title":"Declaring a reply policy"},{"location":"fep/fep-5624/#example-object","text":"{ \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\": \"http://joinmastodon.org/ns#\", \"canReply\": \"toot:canReply\" } ], \"attributedTo\": \"https://example.com/users/1\", \"id\": \"https://example.com/users/1/statuses/1\", \"type\": \"Note\", \"content\": \"Hello world\", \"canReply\": \"https://www.w3.org/ns/activitystreams#Public\" }","title":"Example object"},{"location":"fep/fep-5624/#checking-whether-the-user-can-reply-and-submitting-the-reply-to-the-authority","text":"When an object with canReply is set, it SHOULD be conveyed in human-readable form to the user if possible, for instance with something like \u201cOnly mentioned users can reply\u201d or \u201cOnly people Authority follows and mentioned users can reply\u201d. The software SHOULD NOT offer the user to reply unless it is directly mentioned in the object's tag attribute or listed in canReply (either directly or through a collection), or canReply contains a collection for which the recipient cannot efficiently check the membership of the would-be replier. After locally verifying that the replier should be allowed to reply, the replier's end SHOULD POST the Create activity for the reply to the authority's inbox only , and consider the reply to be pending approval.","title":"Checking whether the user can reply and submitting the reply to the authority"},{"location":"fep/fep-5624/#receiving-and-accepting-a-reply","text":"When receiving a reply to an object with a canReply property, the authority decides whether the reply is acceptable. If the reply is considered acceptable, the authority MUST reply with an ApproveReply ( http://joinmastodon.org/ns#ApproveReply ) activity with the object property set to the id of the reply object, and its inReplyTo property set to the object it is in reply to. That ApproveReply activity SHOULD be publicly dereferenceable and MUST be dereferenceable by all parties allowed to see the original post. It MUST NOT embed its object nor its inReplyTo as to avoid possible information leaks. Additionally, the authority MAY forward an accepted reply according to its own rules. If the reply is considered unacceptable, the authority SHOULD reply with a RejectReply ( http://joinmastodon.org/ns#RejectReply ) activity. This activity MAY be publicly accessible, but this is not a requirement. The reason for using the new activity types ApproveReply and RejectReply is to be explicit about the purpose of the approval, as one could imagine other kinds of approvals, and remaining implicit may cause ambiguities with other potential extensions.","title":"Receiving and accepting a reply"},{"location":"fep/fep-5624/#example-approvereply-activity","text":"{ \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\": \"http://joinmastodon.org/ns#\", \"ApproveReply\": \"toot:ApproveReply\" } ], \"actor\": \"https://example.com/users/1\", \"id\": \"https://example.com/reply_approvals/1\", \"type\": \"ApproveReply\", \"object\": \"https://example.org/users/bob/statuses/3\", \"inReplyTo\": \"https://example.com/users/1/statuses/1\" }","title":"Example ApproveReply activity"},{"location":"fep/fep-5624/#example-rejectreply-activity","text":"{ \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\": \"http://joinmastodon.org/ns#\", \"RejectReply\": \"toot:RejectReply\" } ], \"actor\": \"https://example.com/users/1\", \"id\": \"https://example.com/reply_approvals/1\", \"type\": \"RejectReply\", \"object\": \"https://example.org/users/bob/statuses/3\" }","title":"Example RejectReply activity"},{"location":"fep/fep-5624/#receiving-approval-and-distributing-the-reply","text":"After sending the initial Create , the replier SHOULD wait for an ApproveReply activity such as described above. Once the ApproveReply has been received, the replier SHOULD add a replyApproval ( http://joinmastodon.org/ns#replyApproval ) property to their reply object pointing to the ApproveReply activity they received, and then MAY send a Create activity with the modified object to its intended audience. If it instead receives a RejectReply , the reply SHOULD be immediately deleted and the replier MAY be notified.","title":"Receiving approval and distributing the reply"},{"location":"fep/fep-5624/#example-reply-object-with-replyapproval","text":"{ \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\": \"http://joinmastodon.org/ns#\", \"canReply\": \"toot:canReply\", \"replyApproval\": \"toot:replyApproval\" } ], \"attributedTo\": \"https://example.com/users/1\", \"id\": \"https://example.org/users/bob/statuses/3\", \"type\": \"Note\", \"content\": \"@alice hello!\", \"inReplyTo\": \"https://example.com/users/1/statuses/1\", \"canReply\": \"https://www.w3.org/ns/activitystreams#Public\", \"replyApproval\": \"https://example.com/reply_approvals/1\", \"tag\": { \"type\": \"Mention\", \"href\": \"https://example.com/users/1\" } }","title":"Example reply object with replyApproval"},{"location":"fep/fep-5624/#verifying-third-party-replies","text":"When processing a reply from a remote actor to a remote authority, a recipient SHOULD discard any reply that does not match any of the following conditions: - the object it is in reply to does not set a canReply property - the object has been received through the remote authority - the object it is in reply to has a canReply containing the as:Public collection - the author of the reply appears in a Mention object in the tag property of the object it is in reply to - the object it is in reply to sets a non-empty canReply , and replyApproval can be dereferenced and is a valid ApproveReply activity To be considered valid, the ApproveReply activity referenced in replyApproval MUST satisfy the following properties: - its actor property is the authority - its authenticity can be asserted - its object property is the reply under consideration - its inReplyTo property matches that of the reply under consideration In addition, if the reply is considered valid, but has no valid replyApproval despite the object it is in reply to having a canReply property, the recipient MAY hide the reply from certain views.","title":"Verifying third-party replies"},{"location":"fep/fep-5624/#revoking-a-previously-accepted-reply","text":"The authority may want to perform /a posteriori/ moderation of their replies. To do this, the authority SHOULD send a RejectReply activity to the sender and the reply's audience, with the reply URI as the object property. The object property MUST NOT be embedded, as to avoid possible information leaks. The URI at which the previously-offered ApproveReply was available should return HTTP 404 or redirect to the newly-issued RejectReply activity.","title":"Revoking a previously-accepted reply"},{"location":"fep/fep-5624/#handling-a-revocation","text":"Upon receiving a RejectReply activity for a previously-accepted reply, third-parties SHOULD check that the RejectReply is valid and SHOULD delete or hide the revoked reply if it is. To be considered valid, the RejectReply activity MUST satisfy the following properties: - its actor property is the authority - its authenticity can be asserted - its object property is the reply under consideration","title":"Handling a revocation"},{"location":"fep/fep-5624/#deployment-considerations","text":"Because it is unrealistic to expect all implementations and deployments to implement this proposal at the same time, deployment SHOULD be gradual, with verification of third-party replies only performed once the other steps are widely implemented. To encourage adoption without breaking compatibility altogether, implementations MAY want to hide non-validated replies from certain views (e.g. requiring a click to see \u201chidden replies\u201d, or not showing the reply to non-followers).","title":"Deployment considerations"},{"location":"fep/fep-5624/#security-considerations","text":"By not adding a hash or copy of the reply in the ApproveReply activity, malicious actors could exploit this in a split horizon setting, sending different versions of the same activity to different actors. This is, however, already a concern in pretty much all contexts in ActivityPub, and enshrining that information in the ApproveReply activity would have many drawbacks: significantly more complex implementation inability to change the JSON-LD representation after the fact possibly leaking private information if the ApproveReply activity is publicly dereferenceable","title":"Security considerations"},{"location":"fep/fep-5624/#_1","text":"None so far.","title":"\u5b9f\u88c5"},{"location":"fep/fep-5624/#_2","text":"[RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-5624/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-5bf0/","text":"FEP-5bf0: Collection sorting and filtering Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This proposal would allow Collections to have a streams property, as Actors do. The streams would be of the type CollectionView, a proposed vocabulary extension that represents a sorted and/or filtered version of a Collection. ActivityPub clients could then render CollectionViews without having to perform such filtering or sorting operations themselves. Metadata about how the sorting or filtering has been applied would be applied using new proposed vocabulary extensions that leverage SHACL for describing constraints. Motivations Some ActivityPub clients rely only on C2S protocols for accessing Collections and displaying the nested items. Currently, in order to support filtering or sorting, these clients need to retrieve all paginated items, assemble them, manually sort or filter them, and then re-paginate them. This proposal would allow servers to perform these kinds of operations, either at runtime or ahead of time, to ease the burden on clients. Other servers should be free to explore the Collections, but they can be easily ignored, along with the new properties. Implementation A CollectionView extends from OrderedCollection and represents a filtered and/or sorted version of a Collection. Similarly, a CollectionViewPage extends from OrderedCollectionPage. The method of filtering applied to the CollectionView can be indicated via its \"filter\" property, which maps to one or more SHACL Shapes. The vocabulary would also provide a SHACL Shape for indicating that a property's value is among the items in a particular ActivityStreams Collection. The method of sorting applied to the CollectionView can be indicated via its \"sort\" property, which maps to a SortShape. A SortShape extends SHACL's PropertyShape and adds the \"order\" property which can be mapped to \"Ascending\" or \"Descending\". If there is no \"sort\" property, the order is the same as that of the original Collection. \u4f8b Here, an Actor's Inbox returns all Activities posted by the Actor, and the server also provides filtered versions as streams for client consumption. The first CollectionView returns only the Like Activities. The second CollectionView returns only created Articles with replies, demonstrating multiple filters and filtering on nested properties. The third CollectionView demonstrates how to indicates that a given property's value is in a partiular ActivityStreams Collection. In the example, the CollectionView is returning Activities by Alyssa's Co-workers. (Alyssa has a custom stream of mutual followers who she has labeled as Co-workers.) { \"@context\": { \"@vocab\": \"https://www.w3.org/ns/activitystreams#\", \"fep\": \"https://w3id.org/fep#\", \"CollectionView\": \"fep:CollectionView\", \"viewOf\": \"fep:viewOf\", \"filter\": \"fep:filter\", \"sort\": \"fep:sort\", \"inCollection\": \"fep:inCollection\", \"SortShape\": \"fep:SortShape\", \"order\": \"fep:order\", \"sh\": \"http://www.w3.org/ns/shacl#\", \"PropertyShape\": \"sh:PropertyShape\", \"path\": \"sh:path\", \"hasValue\": \"sh:hasValue\", \"minCount\": \"sh:minCount\" }, \"id\": \"https://example.social/@alyssa/inbox\", \"type\": \"OrderedCollection\", \"name\": \"Inbox\", \"totalItems\": 1000, \"first\": \"https://example.social/@alyssa/inbox/page/1\", \"last\": \"https://example.social/@alyssa/inbox/page/2\", \"streams\": [ { \"id\": \"https://example.social/@alyssa/inbox/likes\", \"type\": \"CollectionView\", \"name\": \"Likes\", \"filter\": { \"type\": \"PropertyShape\", \"path\": \"type\", \"hasValue\": \"Like\" }, \"sort\": { \"type\": \"SortShape\", \"path\": \"published\", \"order\": \"Descending\" }, \"totalItems\": 10, \"first\": \"https://example.social/@alyssa/inbox/likes/page/1\", \"last\": \"https://example.social/@alyssa/inbox/likes/page/1\" }, { \"id\": \"https://example.social/@alyssa/inbox/posts-with-replies\", \"type\": \"CollectionView\", \"name\": \"Posts with Replies\", \"filter\": [ { \"type\": \"PropertyShape\", \"path\": \"type\", \"hasValue\": \"Create\" }, { \"type\": \"PropertyShape\", \"path\": [\"object\", \"inReplyTo\"], \"minCount\": 1 } ], \"sort\": { \"type\": \"SortShape\", \"path\": \"published\", \"order\": \"Descending\" }, \"totalItems\": 10, \"first\": \"https://example.social/@alyssa/inbox/blog-posts/page/1\", \"last\": \"https://example.social/@alyssa/inbox/blog-posts/page/1\", \"viewOf\": \"https://example.social/@alyssa/inbox\" }, { \"id\": \"https://example.social/@alyssa/inbox/notes-by-coworkers\", \"type\": \"CollectionView\", \"name\": \"Posts by Co-Workers\", \"filter\": { \"type\": \"InCollectionShape\", \"path\": \"actor\", \"inCollection\": \"https://example.social/@alyssa/friends/coworkers\" }, \"sort\": { \"type\": \"SortShape\", \"path\": \"published\", \"order\": \"Descending\" }, \"totalItems\": 10, \"first\": \"https://example.social/@alyssa/inbox/notes-by-coworkers/page/1\", \"last\": \"https://example.social/@alyssa/inbox/notes-by-coworkers/page/1\", \"viewOf\": \"https://example.social/@alyssa/inbox\" } ] } Vocabulary Extensions Here are the terms that would needed to be added to the FEP vocabulary: { \"@context\": { \"fep\": \"https://w3id.org/fep#\", \"as\": \"https://www.w3.org/ns/activitystreams#\", \"sh\": \"http://www.w3.org/ns/shacl#\", \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\", \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\" }, \"fep:CollectionView\": { \"@id\": \"fep:CollectionView\", \"@type\": \"rdfs:Class\", \"rdfs:subClassOf\": \"as:OrderedCollection\", \"rdfs:label\": \"Collection View\", \"rdfs:comment\": \"Represents a sorted and/or filtered version of a Collection\" }, \"fep:CollectionViewPage\": { \"@id\": \"fep:CollectionViewPage\", \"@type\": \"rdfs:Class\", \"rdfs:subClassOf\": \"as:OrderedCollectionPage\", \"rdfs:label\": \"Collection View Page\", \"rdfs:comment\": \"Represents a sorted and/or filtered version of a CollectionPage\" }, \"fep:SortShape\": { \"@id\": \"fep:SortShape\", \"@type\": \"rdfs:Class\", \"rdfs:subClassOf\": \"sh:PropertyShape\", \"rdfs:label\": \"Sort Shape\", \"rdfs:comment\": \"A PropertyShape with an 'order' property\" }, \"fep:filter\": { \"@id\": \"fep:filter\", \"@type\": \"rdf:Property\", \"rdfs:domain\": \"fep:CollectionView\", \"rdfs:range\": \"sh:Shape\", \"rdfs:label\": \"Filter\", \"rdfs:comment\": \"The method of filtering applied to the CollectionView\" }, \"fep:sort\": { \"@id\": \"fep:sort\", \"@type\": \"rdf:Property\", \"rdfs:domain\": \"fep:CollectionView\", \"rdfs:range\": \"fep:SortShape\", \"rdfs:label\": \"Sort\", \"rdfs:comment\": \"The method of sorting applied to the CollectionView\" }, \"fep:order\": { \"@id\": \"fep:order\", \"@type\": \"rdf:Property\", \"rdfs:domain\": \"fep:SortShape\", \"rdfs:range\": \"fep:SortOrderType\", \"rdfs:label\": \"Order\", \"rdfs:comment\": \"Indicates whether the sort order is 'Ascending' or 'Descending'\" }, \"fep:SortOrderType\": { \"@id\": \"fep:SortOrderType\", \"@type\": \"rdfs:Class\", \"rdfs:label\": \"Sort Order Type\", \"rdfs:comment\": \"For indicating the sort order\" }, \"fep:Ascending\": { \"@id\": \"fep:Ascending\", \"@type\": \"fep:SortOrderType\", \"rdfs:label\": \"Ascending\", \"rdfs:comment\": \"Indicates ascending sort order\" }, \"fep:Descending\": { \"@id\": \"fep:Descending\", \"@type\": \"fep:SortOrderType\", \"rdfs:label\": \"Descending\", \"rdfs:comment\": \"Indicates descending sort order\" }, \"fep:InCollectionShape\": { \"@id\": \"fep:InCollectionShape\", \"@type\": \"rdfs:Class\", \"rdfs:subClassOf\": \"sh:PropertyShape\", \"rdfs:label\": \"In Collection Shape\", \"rdfs:comment\": \"For filtering on whether a property's value is in a Collection.\", \"sh:js\": \"fep:inCollectionFunction\" }, \"fep:inCollection\": { \"@id\": \"fep:inCollection\", \"@type\": \"rdf:Property\", \"rdfs:domain\": \"fep:InCollectionShape\", \"rdfs:range\": \"sh:IRI\", \"rdfs:label\": \"In Collection\", \"rdfs:comment\": \"Maps a Collection URL to fep:inCollectionFunction\" }, \"fep:inCollectionFunction\": { \"@id\": \"fep:inCollectionFunction\", \"@type\": \"sh:JSFunction\", \"sh:jsFunction\": \"inCollection\", \"sh:jsLibrary\": \"https://w3id.org/fep/functions.js\", \"sh:parameter\": { \"@type\": \"sh:Parameter\", \"sh:path\": \"fep:inCollection\" } }, \"fep:viewOf\": { \"@id\": \"fep:viewOf\", \"@type\": \"rdf:Property\", \"rdfs:label\": \"View of\", \"rdfs:domain\": \"fep:CollectionView\", \"rdfs:range\": \"as:Collection\", \"rdfs:comment\": \"A reference back to the original Collection\" } } Security Servers could in theory make available a templated URL endpoint that allows for arbitrary sorting or filtering. This should be discouraged, as it could lead to database injections. Instead, only predetermined sorted/filtered CollectionViews should be made available via the streams property. \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-5bf0: Collection sorting and filtering"},{"location":"fep/fep-5bf0/#fep-5bf0-collection-sorting-and-filtering","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-5bf0: Collection sorting and filtering"},{"location":"fep/fep-5bf0/#summary","text":"This proposal would allow Collections to have a streams property, as Actors do. The streams would be of the type CollectionView, a proposed vocabulary extension that represents a sorted and/or filtered version of a Collection. ActivityPub clients could then render CollectionViews without having to perform such filtering or sorting operations themselves. Metadata about how the sorting or filtering has been applied would be applied using new proposed vocabulary extensions that leverage SHACL for describing constraints.","title":"Summary"},{"location":"fep/fep-5bf0/#motivations","text":"Some ActivityPub clients rely only on C2S protocols for accessing Collections and displaying the nested items. Currently, in order to support filtering or sorting, these clients need to retrieve all paginated items, assemble them, manually sort or filter them, and then re-paginate them. This proposal would allow servers to perform these kinds of operations, either at runtime or ahead of time, to ease the burden on clients. Other servers should be free to explore the Collections, but they can be easily ignored, along with the new properties.","title":"Motivations"},{"location":"fep/fep-5bf0/#implementation","text":"A CollectionView extends from OrderedCollection and represents a filtered and/or sorted version of a Collection. Similarly, a CollectionViewPage extends from OrderedCollectionPage. The method of filtering applied to the CollectionView can be indicated via its \"filter\" property, which maps to one or more SHACL Shapes. The vocabulary would also provide a SHACL Shape for indicating that a property's value is among the items in a particular ActivityStreams Collection. The method of sorting applied to the CollectionView can be indicated via its \"sort\" property, which maps to a SortShape. A SortShape extends SHACL's PropertyShape and adds the \"order\" property which can be mapped to \"Ascending\" or \"Descending\". If there is no \"sort\" property, the order is the same as that of the original Collection.","title":"Implementation"},{"location":"fep/fep-5bf0/#_1","text":"Here, an Actor's Inbox returns all Activities posted by the Actor, and the server also provides filtered versions as streams for client consumption. The first CollectionView returns only the Like Activities. The second CollectionView returns only created Articles with replies, demonstrating multiple filters and filtering on nested properties. The third CollectionView demonstrates how to indicates that a given property's value is in a partiular ActivityStreams Collection. In the example, the CollectionView is returning Activities by Alyssa's Co-workers. (Alyssa has a custom stream of mutual followers who she has labeled as Co-workers.) { \"@context\": { \"@vocab\": \"https://www.w3.org/ns/activitystreams#\", \"fep\": \"https://w3id.org/fep#\", \"CollectionView\": \"fep:CollectionView\", \"viewOf\": \"fep:viewOf\", \"filter\": \"fep:filter\", \"sort\": \"fep:sort\", \"inCollection\": \"fep:inCollection\", \"SortShape\": \"fep:SortShape\", \"order\": \"fep:order\", \"sh\": \"http://www.w3.org/ns/shacl#\", \"PropertyShape\": \"sh:PropertyShape\", \"path\": \"sh:path\", \"hasValue\": \"sh:hasValue\", \"minCount\": \"sh:minCount\" }, \"id\": \"https://example.social/@alyssa/inbox\", \"type\": \"OrderedCollection\", \"name\": \"Inbox\", \"totalItems\": 1000, \"first\": \"https://example.social/@alyssa/inbox/page/1\", \"last\": \"https://example.social/@alyssa/inbox/page/2\", \"streams\": [ { \"id\": \"https://example.social/@alyssa/inbox/likes\", \"type\": \"CollectionView\", \"name\": \"Likes\", \"filter\": { \"type\": \"PropertyShape\", \"path\": \"type\", \"hasValue\": \"Like\" }, \"sort\": { \"type\": \"SortShape\", \"path\": \"published\", \"order\": \"Descending\" }, \"totalItems\": 10, \"first\": \"https://example.social/@alyssa/inbox/likes/page/1\", \"last\": \"https://example.social/@alyssa/inbox/likes/page/1\" }, { \"id\": \"https://example.social/@alyssa/inbox/posts-with-replies\", \"type\": \"CollectionView\", \"name\": \"Posts with Replies\", \"filter\": [ { \"type\": \"PropertyShape\", \"path\": \"type\", \"hasValue\": \"Create\" }, { \"type\": \"PropertyShape\", \"path\": [\"object\", \"inReplyTo\"], \"minCount\": 1 } ], \"sort\": { \"type\": \"SortShape\", \"path\": \"published\", \"order\": \"Descending\" }, \"totalItems\": 10, \"first\": \"https://example.social/@alyssa/inbox/blog-posts/page/1\", \"last\": \"https://example.social/@alyssa/inbox/blog-posts/page/1\", \"viewOf\": \"https://example.social/@alyssa/inbox\" }, { \"id\": \"https://example.social/@alyssa/inbox/notes-by-coworkers\", \"type\": \"CollectionView\", \"name\": \"Posts by Co-Workers\", \"filter\": { \"type\": \"InCollectionShape\", \"path\": \"actor\", \"inCollection\": \"https://example.social/@alyssa/friends/coworkers\" }, \"sort\": { \"type\": \"SortShape\", \"path\": \"published\", \"order\": \"Descending\" }, \"totalItems\": 10, \"first\": \"https://example.social/@alyssa/inbox/notes-by-coworkers/page/1\", \"last\": \"https://example.social/@alyssa/inbox/notes-by-coworkers/page/1\", \"viewOf\": \"https://example.social/@alyssa/inbox\" } ] }","title":"\u4f8b"},{"location":"fep/fep-5bf0/#vocabulary-extensions","text":"Here are the terms that would needed to be added to the FEP vocabulary: { \"@context\": { \"fep\": \"https://w3id.org/fep#\", \"as\": \"https://www.w3.org/ns/activitystreams#\", \"sh\": \"http://www.w3.org/ns/shacl#\", \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\", \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\" }, \"fep:CollectionView\": { \"@id\": \"fep:CollectionView\", \"@type\": \"rdfs:Class\", \"rdfs:subClassOf\": \"as:OrderedCollection\", \"rdfs:label\": \"Collection View\", \"rdfs:comment\": \"Represents a sorted and/or filtered version of a Collection\" }, \"fep:CollectionViewPage\": { \"@id\": \"fep:CollectionViewPage\", \"@type\": \"rdfs:Class\", \"rdfs:subClassOf\": \"as:OrderedCollectionPage\", \"rdfs:label\": \"Collection View Page\", \"rdfs:comment\": \"Represents a sorted and/or filtered version of a CollectionPage\" }, \"fep:SortShape\": { \"@id\": \"fep:SortShape\", \"@type\": \"rdfs:Class\", \"rdfs:subClassOf\": \"sh:PropertyShape\", \"rdfs:label\": \"Sort Shape\", \"rdfs:comment\": \"A PropertyShape with an 'order' property\" }, \"fep:filter\": { \"@id\": \"fep:filter\", \"@type\": \"rdf:Property\", \"rdfs:domain\": \"fep:CollectionView\", \"rdfs:range\": \"sh:Shape\", \"rdfs:label\": \"Filter\", \"rdfs:comment\": \"The method of filtering applied to the CollectionView\" }, \"fep:sort\": { \"@id\": \"fep:sort\", \"@type\": \"rdf:Property\", \"rdfs:domain\": \"fep:CollectionView\", \"rdfs:range\": \"fep:SortShape\", \"rdfs:label\": \"Sort\", \"rdfs:comment\": \"The method of sorting applied to the CollectionView\" }, \"fep:order\": { \"@id\": \"fep:order\", \"@type\": \"rdf:Property\", \"rdfs:domain\": \"fep:SortShape\", \"rdfs:range\": \"fep:SortOrderType\", \"rdfs:label\": \"Order\", \"rdfs:comment\": \"Indicates whether the sort order is 'Ascending' or 'Descending'\" }, \"fep:SortOrderType\": { \"@id\": \"fep:SortOrderType\", \"@type\": \"rdfs:Class\", \"rdfs:label\": \"Sort Order Type\", \"rdfs:comment\": \"For indicating the sort order\" }, \"fep:Ascending\": { \"@id\": \"fep:Ascending\", \"@type\": \"fep:SortOrderType\", \"rdfs:label\": \"Ascending\", \"rdfs:comment\": \"Indicates ascending sort order\" }, \"fep:Descending\": { \"@id\": \"fep:Descending\", \"@type\": \"fep:SortOrderType\", \"rdfs:label\": \"Descending\", \"rdfs:comment\": \"Indicates descending sort order\" }, \"fep:InCollectionShape\": { \"@id\": \"fep:InCollectionShape\", \"@type\": \"rdfs:Class\", \"rdfs:subClassOf\": \"sh:PropertyShape\", \"rdfs:label\": \"In Collection Shape\", \"rdfs:comment\": \"For filtering on whether a property's value is in a Collection.\", \"sh:js\": \"fep:inCollectionFunction\" }, \"fep:inCollection\": { \"@id\": \"fep:inCollection\", \"@type\": \"rdf:Property\", \"rdfs:domain\": \"fep:InCollectionShape\", \"rdfs:range\": \"sh:IRI\", \"rdfs:label\": \"In Collection\", \"rdfs:comment\": \"Maps a Collection URL to fep:inCollectionFunction\" }, \"fep:inCollectionFunction\": { \"@id\": \"fep:inCollectionFunction\", \"@type\": \"sh:JSFunction\", \"sh:jsFunction\": \"inCollection\", \"sh:jsLibrary\": \"https://w3id.org/fep/functions.js\", \"sh:parameter\": { \"@type\": \"sh:Parameter\", \"sh:path\": \"fep:inCollection\" } }, \"fep:viewOf\": { \"@id\": \"fep:viewOf\", \"@type\": \"rdf:Property\", \"rdfs:label\": \"View of\", \"rdfs:domain\": \"fep:CollectionView\", \"rdfs:range\": \"as:Collection\", \"rdfs:comment\": \"A reference back to the original Collection\" } }","title":"Vocabulary Extensions"},{"location":"fep/fep-5bf0/#security","text":"Servers could in theory make available a templated URL endpoint that allows for arbitrary sorting or filtering. This should be discouraged, as it could lead to database injections. Instead, only predetermined sorted/filtered CollectionViews should be made available via the streams property.","title":"Security"},{"location":"fep/fep-5bf0/#_2","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-5bf0/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-5e53/","text":"FEP-5e53: Opt-out Preference Signals Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Some users have concerns about how their content and/or personal information are used. For example, some users do not want the content they created to be used for training generative AI systems, and some users do not want to have their personal information shared or sold. Several opt-out preference signals (OOPSs) have been standardized or proposed in the form of HTTP headers that can apply to a connection between a user and a central server. In some jurisdictions, companies that administer web sites are required to process and act on OOPSs. This FEP extends ActivityPub to support passing OOPSs along with the content and user information to which they may apply. This FEP refers to existing OOPSs that have already been documented, and does not propose new ones. Declaring an OOPS In order to apply an OOPS to an object, an author MAY set the JSON-LD properties xRobotsTag and/or SPC . For example, { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://fep.example/ns/privacyHeaders\"], \"type\": \"Note\", \"content\": \"Don't surveil me bro\", \"xRobotsTag\": \"noai\", \"SPC\": 1 } A recipient SHOULD process the content and metadata of the object as if the recipient had received it over an HTTP connection with the corresponding header. SPC : process as if the object has been received in an HTTP connection with the Sec-GPC HTTP request header. xRobotsTag : process as if the object had been received with an X-Robots-Tag HTTP response header with a value equal to this property. Deployment considerations The existing Global Privacy Control ( GPC ) standard allows for individuals in an increasing number of jurisdictions to pass a legally binding opt-out preference signal indicating a commonly held privacy norm. However, GPC is implemented as an HTTP request header, which makes it only works from client to server. This limits the ability of users to pass a privacy opt-out in a federated communications medium. A federated system where a user's information may be passed from one server to another is currently at a disadvantage in serving users who wish to opt out, because the opt-out preference signal does not travel with the information to which it applies. SPC is intended to have the same effects as GPC, but for cases where the user does not have a direct HTTP connection to the recipient of some personal information. Adding the SPC opt-out to ActivityPub would bring parity with centralized social sites. Fediverse instances should make SPC configurable by users, and reflect a user's actual intent to opt out. Fediverse instances should detect when a user has turned on GPC or some other privacy opt-out or setting, and offer to apply SPC to that user's objects. Content sharing platforms that operate in a centralized manner are now frequently promoting their support for signaling opt-outs to generative AI training, using the noai value for the X-Robots-Tag header. See RobotsMeta and RobotExclusion . In order for federated content sharing systems to provide an attractive alternative to centralized ones, federated systems will likely need to also offer an opt out signaling feature. Security considerations This proposal depends on compliant processing of OOPSs by all actors. Some jurisdictions require privacy OOPSs to be registered in order to have legal effect. In the event this FEP is accepted, the author intends to pursue registration. \u5b9f\u88c5 None so far. Related proposal FEP-c118 suggests establishing a content licensing framework. This may be possible by adapting this FEP to include the license header from WebLinking . \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 DeviantArt team, UPDATE All Deviations Are Opted Out of AI Datasets , 2022 Google Search Central, Robots meta tag, data-nosnippet, and X-Robots-Tag specifications , undated M. Nottingham, Web Linking , 2010 Martijn Koster, A Standard for Robot Exclusion , 1994 Sebastian Zimmeck, Peter Snyder, Justin Brookman, Aram Zucker-Scharff, Global Privacy Control , 2024 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-5e53: Opt-out Preference Signals"},{"location":"fep/fep-5e53/#fep-5e53-opt-out-preference-signals","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-5e53: Opt-out Preference Signals"},{"location":"fep/fep-5e53/#summary","text":"Some users have concerns about how their content and/or personal information are used. For example, some users do not want the content they created to be used for training generative AI systems, and some users do not want to have their personal information shared or sold. Several opt-out preference signals (OOPSs) have been standardized or proposed in the form of HTTP headers that can apply to a connection between a user and a central server. In some jurisdictions, companies that administer web sites are required to process and act on OOPSs. This FEP extends ActivityPub to support passing OOPSs along with the content and user information to which they may apply. This FEP refers to existing OOPSs that have already been documented, and does not propose new ones.","title":"Summary"},{"location":"fep/fep-5e53/#declaring-an-oops","text":"In order to apply an OOPS to an object, an author MAY set the JSON-LD properties xRobotsTag and/or SPC . For example, { \"@context\": [\"https://www.w3.org/ns/activitystreams\", \"https://fep.example/ns/privacyHeaders\"], \"type\": \"Note\", \"content\": \"Don't surveil me bro\", \"xRobotsTag\": \"noai\", \"SPC\": 1 } A recipient SHOULD process the content and metadata of the object as if the recipient had received it over an HTTP connection with the corresponding header. SPC : process as if the object has been received in an HTTP connection with the Sec-GPC HTTP request header. xRobotsTag : process as if the object had been received with an X-Robots-Tag HTTP response header with a value equal to this property.","title":"Declaring an OOPS"},{"location":"fep/fep-5e53/#deployment-considerations","text":"The existing Global Privacy Control ( GPC ) standard allows for individuals in an increasing number of jurisdictions to pass a legally binding opt-out preference signal indicating a commonly held privacy norm. However, GPC is implemented as an HTTP request header, which makes it only works from client to server. This limits the ability of users to pass a privacy opt-out in a federated communications medium. A federated system where a user's information may be passed from one server to another is currently at a disadvantage in serving users who wish to opt out, because the opt-out preference signal does not travel with the information to which it applies. SPC is intended to have the same effects as GPC, but for cases where the user does not have a direct HTTP connection to the recipient of some personal information. Adding the SPC opt-out to ActivityPub would bring parity with centralized social sites. Fediverse instances should make SPC configurable by users, and reflect a user's actual intent to opt out. Fediverse instances should detect when a user has turned on GPC or some other privacy opt-out or setting, and offer to apply SPC to that user's objects. Content sharing platforms that operate in a centralized manner are now frequently promoting their support for signaling opt-outs to generative AI training, using the noai value for the X-Robots-Tag header. See RobotsMeta and RobotExclusion . In order for federated content sharing systems to provide an attractive alternative to centralized ones, federated systems will likely need to also offer an opt out signaling feature.","title":"Deployment considerations"},{"location":"fep/fep-5e53/#security-considerations","text":"This proposal depends on compliant processing of OOPSs by all actors. Some jurisdictions require privacy OOPSs to be registered in order to have legal effect. In the event this FEP is accepted, the author intends to pursue registration.","title":"Security considerations"},{"location":"fep/fep-5e53/#_1","text":"None so far.","title":"\u5b9f\u88c5"},{"location":"fep/fep-5e53/#related-proposal","text":"FEP-c118 suggests establishing a content licensing framework. This may be possible by adapting this FEP to include the license header from WebLinking .","title":"Related proposal"},{"location":"fep/fep-5e53/#_2","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 DeviantArt team, UPDATE All Deviations Are Opted Out of AI Datasets , 2022 Google Search Central, Robots meta tag, data-nosnippet, and X-Robots-Tag specifications , undated M. Nottingham, Web Linking , 2010 Martijn Koster, A Standard for Robot Exclusion , 1994 Sebastian Zimmeck, Peter Snyder, Justin Brookman, Aram Zucker-Scharff, Global Privacy Control , 2024","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-5e53/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-5feb/","text":"FEP-5feb: Search indexing consent for actors Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP introduces an actor-level attribute that can be used to explicitly express an actor's consent (or lack thereof) to their public objects being indexed for search purposes. Akin to robots.txt and noindex meta tags, this attribute is advisory and relies on the indexers respecting the directive, as public objects can not technically be prevented from being indexed. Requirements The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119]. Specifying search indexing consent at the actor-level Actors can use the indexable ( http://joinmastodon.org/ns#indexable ) attribute to specify whether they consent to their public objects being indexed for search or not. A missing indexable attribute SHOULD be handled as indexable: false . Example { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\":\"http://joinmastodon.org/ns#\", \"indexable\":\"toot:indexable\", } ], \"id\": \"https://example.com/users/1\", \"type\":\"Person\", \"inbox\": \"https://example.com/users/1/inbox\", \"outbox\": \"https://example.com/users/1/outbox\", \"preferredUsername\": \"bob\", \"indexable\": true } Searchable objects Objects authored by an actor with indexable: true and addressed to the as:Public special collection SHOULD be made available for search. Objects authored by an actor with indexable: false MUST NOT be made available for search to other users unless they were previously displayed and interacted with (e.g. it is allowed for a user to search posts they have bookmarked). Handling updates to the indexable attribute Whenever an actor is updated and its attribute is set to indexable: true , its objects SHOULD be made available for search as described in the previous section. Whenever an actor is updated and its attribute is set to indexable: false , its objects MUST be removed from search as described in the previous section. Security considerations Considering this attribute is purely advisory, special care SHOULD be given to the user interface to make sure users are not made to believe the attribute will ensure they never get indexed. \u5b9f\u88c5 Mastodon, as of v4.2.0 \u53c2\u8003\u6587\u732e [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-5feb: Search indexing consent for actors"},{"location":"fep/fep-5feb/#fep-5feb-search-indexing-consent-for-actors","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-5feb: Search indexing consent for actors"},{"location":"fep/fep-5feb/#summary","text":"This FEP introduces an actor-level attribute that can be used to explicitly express an actor's consent (or lack thereof) to their public objects being indexed for search purposes. Akin to robots.txt and noindex meta tags, this attribute is advisory and relies on the indexers respecting the directive, as public objects can not technically be prevented from being indexed.","title":"Summary"},{"location":"fep/fep-5feb/#requirements","text":"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119].","title":"Requirements"},{"location":"fep/fep-5feb/#specifying-search-indexing-consent-at-the-actor-level","text":"Actors can use the indexable ( http://joinmastodon.org/ns#indexable ) attribute to specify whether they consent to their public objects being indexed for search or not. A missing indexable attribute SHOULD be handled as indexable: false .","title":"Specifying search indexing consent at the actor-level"},{"location":"fep/fep-5feb/#example","text":"{ \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\":\"http://joinmastodon.org/ns#\", \"indexable\":\"toot:indexable\", } ], \"id\": \"https://example.com/users/1\", \"type\":\"Person\", \"inbox\": \"https://example.com/users/1/inbox\", \"outbox\": \"https://example.com/users/1/outbox\", \"preferredUsername\": \"bob\", \"indexable\": true }","title":"Example"},{"location":"fep/fep-5feb/#searchable-objects","text":"Objects authored by an actor with indexable: true and addressed to the as:Public special collection SHOULD be made available for search. Objects authored by an actor with indexable: false MUST NOT be made available for search to other users unless they were previously displayed and interacted with (e.g. it is allowed for a user to search posts they have bookmarked).","title":"Searchable objects"},{"location":"fep/fep-5feb/#handling-updates-to-the-indexable-attribute","text":"Whenever an actor is updated and its attribute is set to indexable: true , its objects SHOULD be made available for search as described in the previous section. Whenever an actor is updated and its attribute is set to indexable: false , its objects MUST be removed from search as described in the previous section.","title":"Handling updates to the indexable attribute"},{"location":"fep/fep-5feb/#security-considerations","text":"Considering this attribute is purely advisory, special care SHOULD be given to the user interface to make sure users are not made to believe the attribute will ensure they never get indexed.","title":"Security considerations"},{"location":"fep/fep-5feb/#_1","text":"Mastodon, as of v4.2.0","title":"\u5b9f\u88c5"},{"location":"fep/fep-5feb/#_2","text":"[RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-5feb/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-612d/","text":"FEP-612d: Identifying ActivityPub Objects through DNS Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary In [ActivityPub], objects are identified through their id, which is a dereferenciable URI. For this, one adds a TXT record to DNS with name _apobjid and value corresponding to the URI of the ActivityPub object. If a domain name is then passed to a FediVerse application, it can then perform the DNS lookup, and resolve it to the ActivityPub object. Discussion This FEP is inspired by [BlueSky], and it gets the FediVerse half of the way there. It allows one to look up the ActivityPub Actor from an associated domain name, it does not address the issue of diplaying the domain name instead of the FediVerse handle. One first step would be to include the domain name in alsoKnownAs . Then use some property of the actor to specify, which object to display. Other Mechanisms Two other mechanisms to identify ActivityPub objects beside their id are currently in use: Webfinger The FediVerse handle username@domain.tld is commonly used as an identifier for users on the FediVerse. This handle can be resolved by performing a Webfinger lookup via GET https://domain.tld/.well-known/webfinger?resource=acct:username@domain.tld the activity pub object is then contained in the link with type application/activity+json . HTML Link header The second method, that is less commonly used, is to provide a HTML link header of the form <link href=\"https://activty.pub/object/id\" rel=\"alternate\" type=\"application/activity+json\" /> A FediVerse object receiving this HTML as a response to a lookup, can then parse it and use the link to lookup the corresponding object. Content Negotiation On a server supporting content negotiation, a request with Accept header \"application/activity+json\" will be either served or redirected to the corresponding ActivityPub object. The author does not a method to identify where the ActivityPub object is, as it is being directly served. Example of using DNS to identify an ActivityPub object The following shows an example configuration for the domain mymath.rocks correspond to the actor with FediVerse handle @helge@mymath.rocks , i.e. the author, $ dig _apobjid.mymath.rocks ;; ANSWER SECTION: _apobjid.mymath.rocks. 7200 IN TXT \"https://mymath.rocks/endpoints/SYn3cl_N4HAPfPHgo2x37XunLEmhV9LnxCggcYwyec0\" The corresponding object being { \"@context\": [\"https://www.w3.org/ns/activitystreams\",\"https://w3id.org/security/v1\"], \"id\":\"https://mymath.rocks/endpoints/SYn3cl_N4HAPfPHgo2x37XunLEmhV9LnxCggcYwyec0\", \"name\":\"Helge\", \"preferredUsername\":\"helge\", \"summary\":\"<p>I like Math, cows, and wrote <a href=\\\"https://codeberg.org/bovine/bovine/\\\">bovine</a>.</p>\", \"type\":\"Person\", ... } \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [BlueSky] Jay Graber Domain Names as Handles in Bluesky , 2023 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-612d: Identifying ActivityPub Objects through DNS"},{"location":"fep/fep-612d/#fep-612d-identifying-activitypub-objects-through-dns","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-612d: Identifying ActivityPub Objects through DNS"},{"location":"fep/fep-612d/#summary","text":"In [ActivityPub], objects are identified through their id, which is a dereferenciable URI. For this, one adds a TXT record to DNS with name _apobjid and value corresponding to the URI of the ActivityPub object. If a domain name is then passed to a FediVerse application, it can then perform the DNS lookup, and resolve it to the ActivityPub object.","title":"Summary"},{"location":"fep/fep-612d/#discussion","text":"This FEP is inspired by [BlueSky], and it gets the FediVerse half of the way there. It allows one to look up the ActivityPub Actor from an associated domain name, it does not address the issue of diplaying the domain name instead of the FediVerse handle. One first step would be to include the domain name in alsoKnownAs . Then use some property of the actor to specify, which object to display.","title":"Discussion"},{"location":"fep/fep-612d/#other-mechanisms","text":"Two other mechanisms to identify ActivityPub objects beside their id are currently in use:","title":"Other Mechanisms"},{"location":"fep/fep-612d/#webfinger","text":"The FediVerse handle username@domain.tld is commonly used as an identifier for users on the FediVerse. This handle can be resolved by performing a Webfinger lookup via GET https://domain.tld/.well-known/webfinger?resource=acct:username@domain.tld the activity pub object is then contained in the link with type application/activity+json .","title":"Webfinger"},{"location":"fep/fep-612d/#html-link-header","text":"The second method, that is less commonly used, is to provide a HTML link header of the form <link href=\"https://activty.pub/object/id\" rel=\"alternate\" type=\"application/activity+json\" /> A FediVerse object receiving this HTML as a response to a lookup, can then parse it and use the link to lookup the corresponding object.","title":"HTML Link header"},{"location":"fep/fep-612d/#content-negotiation","text":"On a server supporting content negotiation, a request with Accept header \"application/activity+json\" will be either served or redirected to the corresponding ActivityPub object. The author does not a method to identify where the ActivityPub object is, as it is being directly served.","title":"Content Negotiation"},{"location":"fep/fep-612d/#example-of-using-dns-to-identify-an-activitypub-object","text":"The following shows an example configuration for the domain mymath.rocks correspond to the actor with FediVerse handle @helge@mymath.rocks , i.e. the author, $ dig _apobjid.mymath.rocks ;; ANSWER SECTION: _apobjid.mymath.rocks. 7200 IN TXT \"https://mymath.rocks/endpoints/SYn3cl_N4HAPfPHgo2x37XunLEmhV9LnxCggcYwyec0\" The corresponding object being { \"@context\": [\"https://www.w3.org/ns/activitystreams\",\"https://w3id.org/security/v1\"], \"id\":\"https://mymath.rocks/endpoints/SYn3cl_N4HAPfPHgo2x37XunLEmhV9LnxCggcYwyec0\", \"name\":\"Helge\", \"preferredUsername\":\"helge\", \"summary\":\"<p>I like Math, cows, and wrote <a href=\\\"https://codeberg.org/bovine/bovine/\\\">bovine</a>.</p>\", \"type\":\"Person\", ... }","title":"Example of using DNS to identify an ActivityPub object"},{"location":"fep/fep-612d/#_1","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [BlueSky] Jay Graber Domain Names as Handles in Bluesky , 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-612d/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-61cf/","text":"FEP-61cf: The OpenWebAuth Protocol Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary OpenWebAuth is the \"single sign-on\" mechanism used by Hubzilla, (streams) and other related projects. It allows a browser-based user to log in to services across the Fediverse using a single identity. Once logged in, they can be recognised by other OpenWebAuth-compatible services, without third-party cookies and often without any explicit user interaction. This is not a specification, a proposal, or a \"best practice\" document. The aim is to describe the existing protocol in detail as an aid to implementers, evaluators, and anyone who wants to understand its operation. It is mostly based on reverse-engineering the existing implementations and focuses on the minimal requirements for basic interoperability. In OpenWebAuth, each user is identified by a public/private key pair. The protocol relies on there being a mechanism for other nodes on the network to discover a user's public key. This document assumes that ActivityPub actor objects will be used for this purpose. OpenWebAuth can also work with other protocols such as Zot6 and Nomad but these are not considered here. Overview The protocol takes place between two participants: The home instance , which hosts the user's identity, and is equivalent to the Identity Provider (IdP) in SAML and OpenID Connect. The target instance , which allows remote users to log in to it using the provided identity. This is equivalent to the Relying Party (RP) in SAML and OpenID Connect. Starting the login flow The OpenWebAuth login flow can begin in one of two ways: The user visits the target instance and sees a login screen. They type their Fediverse ID into a form field and click \"Login\". The user follows a link to the target instance. This link has a query parameter, zid= , which specifies the user's Fediverse ID. This zid= mechanism is not necessarily specific to OpenWebAuth. It can be used to start an OAuth2-based login flow in just the same way. Implementers should note, though, that it can make attacks easier to launch; an attacker who can trick a victim into clicking a malicious link can cause them to start the login flow using a maliciously constructed identity, perhaps leading to a MixUpAttack . Operation of the protocol The protocol can be summarised in a sequence diagram as below. This diagram shows the zid= case, where the user is not prompted to log in. sequenceDiagram participant browser as Browser participant target as Target instance participant home as Home instance browser ->> target: GET /page?zid=user@home target ->> home: webfinger user@home home -->> target: location of redirection endpoint target -->> browser: Location: https://home.example/magic?... browser ->> home: GET /magic?... Note over home: Check user is logged in,<br/>eg by checking session cookie home ->> target: webfinger / target -->> home: location of token endpoint rect rgb(216, 255, 216) Note over home,target: Protected by actor's private key home ->> target: GET /token<br/>(signed) target -->> home: <token><br/>(encrypted) end home -->> browser: Location: https://target.example/page?owt=<token> browser ->> target: GET /page?owt=<token> target -->> browser: <contents of page> Regardless of how the flow is started, the protocol begins with the user's browser making a request to the target instance. 1. Redirection to home instance First the target instance identifies the home instance's \"redirection endpoint\". Some existing implementations hard-code this to /magic . New implementations should perform a webfinger lookup on the provided user ID looking for a link with rel set to http://purl.org/openwebauth/v1#redirect . If found, this link's href should be used as the redirection endpoint. The target instance constructs a URL from the redirection endpoint with the following query parameters: - owa : must be set to 1 - bdest : The URL which the browser will be returned to after acquiring a token. This is encoded as UTF-8 and then converted to a hexadecimal string. This is equivalent to the redirect_uri in OAuth2. The bdest URL can include query parameters. The user's browser is redirected to this URL. The target instance should check that the URL has the same origin as the webfinger ID, to avoid acting as an open redirector. 2. Home instance requests a token The /magic endpoint at the user's home instance first checks that the user's browser has a valid session cookie. If so, it decodes the bdest destination URL. It performs a webfinger lookup on the root URL of the destination site and looks for a link with rel set to http://purl.org/openwebauth/v1 . This identifies the target instance's \"token endpoint\". The home instance constructs and issues a signed HTTPS request to this endpoint. The request also contains an additional signed header, X-Open-Web-Auth , containing a random string. Target instances do not use this header; it is provided to add additional entropy to the signature calculation. 3. Target instance provides a token The target instance's token endpoint extracts the keyId , fetches the actor record, extracts the public key and verifies the signature. On success, it generates an URL-safe random string to use as a token. This token is stored locally, associated with the actor who signed the message. The token is also encrypted using the actor's public key and the RSA PKCS #1 v1.5 encryption scheme. The encrypted result is encoded as URL-safe Base64 with no '=' padding bytes. Next it constructs the following JSON object in response: { \"success\": true, \"encrypted_token\": <the base64-encoded token> } On failure it can also return a result with success set to false. 4. Home instance receives the token The signed request issued in step 2 completes. The home instance decodes the JSON response and verifies that success is true. Next it decodes the Base64-encoded encrypted token and decrypts it using the actor's private key. If successful, it takes the bdest destination URL, adds the query parameter: owt=<decrypted token> , and redirects the user's browser to it. 5. User returns to target instance The user arrives back at the target instance. The target instance sees the owt= query parameter and checks its local storage for the token which it saved in step 3. If found, this token identifies the remote user, and the target instance logs them in, overriding any existing login they may have. The token is also deleted from local storage so that it cannot be redeemed more than once. What Next? (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) What does the target instance allow the user to do, now that they have signed in? The simplest option is to treat them as though they had signed in using a local username and password, but this isn't really enough. In an ActivityPub context, a remotely authenticated user will expect to be able to post to the target instance using their existing identity. This poses the question of how the target instance should sign the post, since it does not have access to the user's private key. Hubzilla solves this by attributing the post to the user's identity, but signing it with a key belonging to the target instance; any other instance which receives the post must be aware of this mechanism, or the signature will be rejected. Additional notes HTTP Signatures An OpenWebAuth signed request must have an Authorization header starting with the word Signature followed by the encoded HTTP signature. See ActPubSig for more details on signing Fediverse requests. Target instance's login check To support logged in users, the target instance needs some logic to identify their requests. Normally this is done by checking for a valid session cookie. To support OpenWebAuth this logic must be extended to also check for the zid= and owt= query parameters. Some corner cases are possible here. For instance, the user could already be logged in to the target instance when the OWA login flow begins. When the OpenWebAuth flow succeeds, the owt= query parameter will identify the user who is logged in to the home instance. This will be a user from the domain in the original zid= parameter, but may not be the exact same user. Target instance's token endpoint This endpoint should accept both GET and POST requests. Some home instances will issue POSTs with random bodies. Home instance's /magic endpoint The implementation of this endpoint needs to request a login token from the target instance. This requires it to prove possession of the user's private key, first to calculate a signature for the request and then to decrypt the returned token. These are the only places in the protocol where the private key is needed, implying that only the home instance needs to be a Fediverse instance. The target instance only needs access to public keys, meaning that OpenWebAuth can be used to allow users to log into things that are not instances. \u5b9f\u88c5 OpenWebAuth was developed as part of the Hubzilla / Streams family of projects. More recently it has been added to Friendica and proposed for inclusion in Mastodon and PixelFed. There is a wiki page which lists the current implementation status and links to the relevant pull requests. Security Considerations The purpose of OpenWebAuth is to provide a strong guarantee of a user's identity to the web sites that they visit. This is often considered undesirable and consideration should be given to preventing this information from leaking to sites which may not be acting in the user's best interests. This consideration may involve policies such as displaying a consent screen to the user or otherwise allowing them to choose which target instances they are willing to authenticate themselves to. The user's browser is redirected to their home instance at step 2, giving it an opportunity to implement policies such as these. Unused owt= login tokens are deleted after a couple of minutes. This protects against a potential DoS attack which could fill up the target instance's storage with unused tokens. The zid= query parameter may make a MixUpAttack easier to launch, as discussed briefly above. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Ryan Barrett, nightpool, ActivityPub and HTTP Signatures , 2024 Karsten Meyer zu Selhausen, How to Protect Your OAuth Client Against Mix-Up Attacks , 2020 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-61cf: The OpenWebAuth Protocol"},{"location":"fep/fep-61cf/#fep-61cf-the-openwebauth-protocol","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-61cf: The OpenWebAuth Protocol"},{"location":"fep/fep-61cf/#summary","text":"OpenWebAuth is the \"single sign-on\" mechanism used by Hubzilla, (streams) and other related projects. It allows a browser-based user to log in to services across the Fediverse using a single identity. Once logged in, they can be recognised by other OpenWebAuth-compatible services, without third-party cookies and often without any explicit user interaction. This is not a specification, a proposal, or a \"best practice\" document. The aim is to describe the existing protocol in detail as an aid to implementers, evaluators, and anyone who wants to understand its operation. It is mostly based on reverse-engineering the existing implementations and focuses on the minimal requirements for basic interoperability. In OpenWebAuth, each user is identified by a public/private key pair. The protocol relies on there being a mechanism for other nodes on the network to discover a user's public key. This document assumes that ActivityPub actor objects will be used for this purpose. OpenWebAuth can also work with other protocols such as Zot6 and Nomad but these are not considered here.","title":"Summary"},{"location":"fep/fep-61cf/#overview","text":"The protocol takes place between two participants: The home instance , which hosts the user's identity, and is equivalent to the Identity Provider (IdP) in SAML and OpenID Connect. The target instance , which allows remote users to log in to it using the provided identity. This is equivalent to the Relying Party (RP) in SAML and OpenID Connect.","title":"Overview"},{"location":"fep/fep-61cf/#starting-the-login-flow","text":"The OpenWebAuth login flow can begin in one of two ways: The user visits the target instance and sees a login screen. They type their Fediverse ID into a form field and click \"Login\". The user follows a link to the target instance. This link has a query parameter, zid= , which specifies the user's Fediverse ID. This zid= mechanism is not necessarily specific to OpenWebAuth. It can be used to start an OAuth2-based login flow in just the same way. Implementers should note, though, that it can make attacks easier to launch; an attacker who can trick a victim into clicking a malicious link can cause them to start the login flow using a maliciously constructed identity, perhaps leading to a MixUpAttack .","title":"Starting the login flow"},{"location":"fep/fep-61cf/#operation-of-the-protocol","text":"The protocol can be summarised in a sequence diagram as below. This diagram shows the zid= case, where the user is not prompted to log in. sequenceDiagram participant browser as Browser participant target as Target instance participant home as Home instance browser ->> target: GET /page?zid=user@home target ->> home: webfinger user@home home -->> target: location of redirection endpoint target -->> browser: Location: https://home.example/magic?... browser ->> home: GET /magic?... Note over home: Check user is logged in,<br/>eg by checking session cookie home ->> target: webfinger / target -->> home: location of token endpoint rect rgb(216, 255, 216) Note over home,target: Protected by actor's private key home ->> target: GET /token<br/>(signed) target -->> home: <token><br/>(encrypted) end home -->> browser: Location: https://target.example/page?owt=<token> browser ->> target: GET /page?owt=<token> target -->> browser: <contents of page> Regardless of how the flow is started, the protocol begins with the user's browser making a request to the target instance.","title":"Operation of the protocol"},{"location":"fep/fep-61cf/#1-redirection-to-home-instance","text":"First the target instance identifies the home instance's \"redirection endpoint\". Some existing implementations hard-code this to /magic . New implementations should perform a webfinger lookup on the provided user ID looking for a link with rel set to http://purl.org/openwebauth/v1#redirect . If found, this link's href should be used as the redirection endpoint. The target instance constructs a URL from the redirection endpoint with the following query parameters: - owa : must be set to 1 - bdest : The URL which the browser will be returned to after acquiring a token. This is encoded as UTF-8 and then converted to a hexadecimal string. This is equivalent to the redirect_uri in OAuth2. The bdest URL can include query parameters. The user's browser is redirected to this URL. The target instance should check that the URL has the same origin as the webfinger ID, to avoid acting as an open redirector.","title":"1. Redirection to home instance"},{"location":"fep/fep-61cf/#2-home-instance-requests-a-token","text":"The /magic endpoint at the user's home instance first checks that the user's browser has a valid session cookie. If so, it decodes the bdest destination URL. It performs a webfinger lookup on the root URL of the destination site and looks for a link with rel set to http://purl.org/openwebauth/v1 . This identifies the target instance's \"token endpoint\". The home instance constructs and issues a signed HTTPS request to this endpoint. The request also contains an additional signed header, X-Open-Web-Auth , containing a random string. Target instances do not use this header; it is provided to add additional entropy to the signature calculation.","title":"2. Home instance requests a token"},{"location":"fep/fep-61cf/#3-target-instance-provides-a-token","text":"The target instance's token endpoint extracts the keyId , fetches the actor record, extracts the public key and verifies the signature. On success, it generates an URL-safe random string to use as a token. This token is stored locally, associated with the actor who signed the message. The token is also encrypted using the actor's public key and the RSA PKCS #1 v1.5 encryption scheme. The encrypted result is encoded as URL-safe Base64 with no '=' padding bytes. Next it constructs the following JSON object in response: { \"success\": true, \"encrypted_token\": <the base64-encoded token> } On failure it can also return a result with success set to false.","title":"3. Target instance provides a token"},{"location":"fep/fep-61cf/#4-home-instance-receives-the-token","text":"The signed request issued in step 2 completes. The home instance decodes the JSON response and verifies that success is true. Next it decodes the Base64-encoded encrypted token and decrypts it using the actor's private key. If successful, it takes the bdest destination URL, adds the query parameter: owt=<decrypted token> , and redirects the user's browser to it.","title":"4. Home instance receives the token"},{"location":"fep/fep-61cf/#5-user-returns-to-target-instance","text":"The user arrives back at the target instance. The target instance sees the owt= query parameter and checks its local storage for the token which it saved in step 3. If found, this token identifies the remote user, and the target instance logs them in, overriding any existing login they may have. The token is also deleted from local storage so that it cannot be redeemed more than once.","title":"5. User returns to target instance"},{"location":"fep/fep-61cf/#what-next","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) What does the target instance allow the user to do, now that they have signed in? The simplest option is to treat them as though they had signed in using a local username and password, but this isn't really enough. In an ActivityPub context, a remotely authenticated user will expect to be able to post to the target instance using their existing identity. This poses the question of how the target instance should sign the post, since it does not have access to the user's private key. Hubzilla solves this by attributing the post to the user's identity, but signing it with a key belonging to the target instance; any other instance which receives the post must be aware of this mechanism, or the signature will be rejected.","title":"What Next?"},{"location":"fep/fep-61cf/#additional-notes","text":"","title":"Additional notes"},{"location":"fep/fep-61cf/#http-signatures","text":"An OpenWebAuth signed request must have an Authorization header starting with the word Signature followed by the encoded HTTP signature. See ActPubSig for more details on signing Fediverse requests.","title":"HTTP Signatures"},{"location":"fep/fep-61cf/#target-instances-login-check","text":"To support logged in users, the target instance needs some logic to identify their requests. Normally this is done by checking for a valid session cookie. To support OpenWebAuth this logic must be extended to also check for the zid= and owt= query parameters. Some corner cases are possible here. For instance, the user could already be logged in to the target instance when the OWA login flow begins. When the OpenWebAuth flow succeeds, the owt= query parameter will identify the user who is logged in to the home instance. This will be a user from the domain in the original zid= parameter, but may not be the exact same user.","title":"Target instance's login check"},{"location":"fep/fep-61cf/#target-instances-token-endpoint","text":"This endpoint should accept both GET and POST requests. Some home instances will issue POSTs with random bodies.","title":"Target instance's token endpoint"},{"location":"fep/fep-61cf/#home-instances-magic-endpoint","text":"The implementation of this endpoint needs to request a login token from the target instance. This requires it to prove possession of the user's private key, first to calculate a signature for the request and then to decrypt the returned token. These are the only places in the protocol where the private key is needed, implying that only the home instance needs to be a Fediverse instance. The target instance only needs access to public keys, meaning that OpenWebAuth can be used to allow users to log into things that are not instances.","title":"Home instance's /magic endpoint"},{"location":"fep/fep-61cf/#_1","text":"OpenWebAuth was developed as part of the Hubzilla / Streams family of projects. More recently it has been added to Friendica and proposed for inclusion in Mastodon and PixelFed. There is a wiki page which lists the current implementation status and links to the relevant pull requests.","title":"\u5b9f\u88c5"},{"location":"fep/fep-61cf/#security-considerations","text":"The purpose of OpenWebAuth is to provide a strong guarantee of a user's identity to the web sites that they visit. This is often considered undesirable and consideration should be given to preventing this information from leaking to sites which may not be acting in the user's best interests. This consideration may involve policies such as displaying a consent screen to the user or otherwise allowing them to choose which target instances they are willing to authenticate themselves to. The user's browser is redirected to their home instance at step 2, giving it an opportunity to implement policies such as these. Unused owt= login tokens are deleted after a couple of minutes. This protects against a potential DoS attack which could fill up the target instance's storage with unused tokens. The zid= query parameter may make a MixUpAttack easier to launch, as discussed briefly above.","title":"Security Considerations"},{"location":"fep/fep-61cf/#_2","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Ryan Barrett, nightpool, ActivityPub and HTTP Signatures , 2024 Karsten Meyer zu Selhausen, How to Protect Your OAuth Client Against Mix-Up Attacks , 2020","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-61cf/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-6481/","text":"FEP-6481: Specifying ActivityPub extension support with NodeInfo Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Many FediVerse services extend ActivityPub and ActivityStreams to add their own behaviour, such as custom object types. In order to interoperate with other servers running different software, the service needs to know whether or not the remote server supports these same extensions. This FEP defines a standard method of specifying support for particular extensions in the server's NodeInfo file (as described in FEP-f1d5 ), so that compatibility information can be automatically discovered. History Many FediVerse software platforms such as Bookwyrm and Pixelfed have used the NodeInfo software field to determine if a remote server is running the same software, and is therefore compatible with their extensions. This works, however it restricts full interoperability with different software that could potentially use the same types. Requirements The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in RFC-2119 . Declaring extension support FediVerse software that extends ActivityPub SHOULD indicate extension support in its NodeInfo file. Extension identifiers MUST be valid IRIs. IRIs MAY be created with the w3id.org Permanent Identifier service, and if so they SHOULD redirect to a document that describes the extension. To comply with this FEP, extensions MUST be specified in the metadata section of the NodeInfo file, as shown below: { \"version\": \"2.2\", ..., \"protocols\": [\"activitypub\"], ..., \"metadata\": { \"activitypub\": { \"extensions\": [ \"https://w3id.org/my-project/my-extension#v1\" ] } } } Note: The metadata key activitypub is chosen to match the string in protocols , and is refers to extensions in any of ActivityPub, ActivityStreams and the Activity Vocabulary. It is RECOMMENDED that extension developers specify version information in their IRIs, for instance in a fragment identifier as above. Once defined, IRIs MUST be constant - they cannot be changed while retaining compatibility. For this reason, it is RECOMMENDED to use a long-term service (e.g. w3id.org) for IRIs. Defining IRIs No specific recommendation is made for IRI design, although if using w3id.org, their Naming Policy should be adhered to. \u4f8b This section is non-normative. Manyfold intends to define a new Activity Vocabulary Object type for its own rich content, 3dModel . The specification will define an extension IRI, for instance https://w3id.org/manyfold/3dModel#v1 . Applications that wish to receive Activities with this type can state their support for the extension in their NodeInfo file as follows; Manyfold instances will then know that they can send that object type and it will be understood. { ..., \"metadata\": { \"activitypub\": { \"extensions\": [ \"https://w3id.org/manyfold/3dModel#v1\" ] } } } A similar (entirely theoretical) example for Bookwyrm 's Review object type might be: { ..., \"metadata\": { \"activitypub\": { \"extensions\": [ \"https://joinbookwyrm.org/ns/activitypub#Review\" ] } } } \u53c2\u8003\u6587\u732e FEP-f1d5, NodeInfo in Fediverse Software James Smith, Manyfold ActivityPub design document , 2024 James M. Snell & Evan Prodromou, ActivityStreams 2.0 , 2017 Christine Lemmer-Webber & Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-6481: Specifying ActivityPub extension support with NodeInfo"},{"location":"fep/fep-6481/#fep-6481-specifying-activitypub-extension-support-with-nodeinfo","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-6481: Specifying ActivityPub extension support with NodeInfo"},{"location":"fep/fep-6481/#summary","text":"Many FediVerse services extend ActivityPub and ActivityStreams to add their own behaviour, such as custom object types. In order to interoperate with other servers running different software, the service needs to know whether or not the remote server supports these same extensions. This FEP defines a standard method of specifying support for particular extensions in the server's NodeInfo file (as described in FEP-f1d5 ), so that compatibility information can be automatically discovered.","title":"Summary"},{"location":"fep/fep-6481/#history","text":"Many FediVerse software platforms such as Bookwyrm and Pixelfed have used the NodeInfo software field to determine if a remote server is running the same software, and is therefore compatible with their extensions. This works, however it restricts full interoperability with different software that could potentially use the same types.","title":"History"},{"location":"fep/fep-6481/#requirements","text":"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-6481/#declaring-extension-support","text":"FediVerse software that extends ActivityPub SHOULD indicate extension support in its NodeInfo file. Extension identifiers MUST be valid IRIs. IRIs MAY be created with the w3id.org Permanent Identifier service, and if so they SHOULD redirect to a document that describes the extension. To comply with this FEP, extensions MUST be specified in the metadata section of the NodeInfo file, as shown below: { \"version\": \"2.2\", ..., \"protocols\": [\"activitypub\"], ..., \"metadata\": { \"activitypub\": { \"extensions\": [ \"https://w3id.org/my-project/my-extension#v1\" ] } } } Note: The metadata key activitypub is chosen to match the string in protocols , and is refers to extensions in any of ActivityPub, ActivityStreams and the Activity Vocabulary. It is RECOMMENDED that extension developers specify version information in their IRIs, for instance in a fragment identifier as above. Once defined, IRIs MUST be constant - they cannot be changed while retaining compatibility. For this reason, it is RECOMMENDED to use a long-term service (e.g. w3id.org) for IRIs.","title":"Declaring extension support"},{"location":"fep/fep-6481/#defining-iris","text":"No specific recommendation is made for IRI design, although if using w3id.org, their Naming Policy should be adhered to.","title":"Defining IRIs"},{"location":"fep/fep-6481/#_1","text":"This section is non-normative. Manyfold intends to define a new Activity Vocabulary Object type for its own rich content, 3dModel . The specification will define an extension IRI, for instance https://w3id.org/manyfold/3dModel#v1 . Applications that wish to receive Activities with this type can state their support for the extension in their NodeInfo file as follows; Manyfold instances will then know that they can send that object type and it will be understood. { ..., \"metadata\": { \"activitypub\": { \"extensions\": [ \"https://w3id.org/manyfold/3dModel#v1\" ] } } } A similar (entirely theoretical) example for Bookwyrm 's Review object type might be: { ..., \"metadata\": { \"activitypub\": { \"extensions\": [ \"https://joinbookwyrm.org/ns/activitypub#Review\" ] } } }","title":"\u4f8b"},{"location":"fep/fep-6481/#_2","text":"FEP-f1d5, NodeInfo in Fediverse Software James Smith, Manyfold ActivityPub design document , 2024 James M. Snell & Evan Prodromou, ActivityStreams 2.0 , 2017 Christine Lemmer-Webber & Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-6481/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-6606/","text":"FEP-6606: ActivityPub client to server collections addressing conventions Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This document tries to describe a simple set of conventions to better enable the adressing of [ActivityPub] objects on servers that support [Client to Server Interactions]. Its main purpose is to formalize a basic vocabulary for defining subsets of IRIs [RFC-3987] for collections in a way that can be generalized to both servers and clients. It builds upon the definition of query parametrs [RFC-3986], by introducing a set of additional operators that can be applied to values. What we are trying to solve The main reason that is often cited as making client to server interactions problematic is that the official specification leaves too much to the implementors' discretion. The fact that there is no proscribed method of filtering collections content is one of the stop gaps that prevents a wider adoption of C2S in services and clients. Syntax The following syntax is extracted form RFC-3986 section 3.4, and it formalizes the URL query parameters as representing any string that conforms to the restrictions below between the first \"?\" character and the end of the URL or a \"#\" character marking the start of the fragment part of the URL. query = *( pchar / \"/\" / \"?\" ) pchar = unreserved / pct-encoded / sub-delims / \":\" / \"@\" unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" pct-encoded = \"%\" HEXDIG HEXDIG sub-delims = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\" As we can see this is not formal definition of the query string as a group of key and value pairs, but for our intended use, this is paramount. So we will take this extra step ourselves and extend the definition to be: query = *( query-pair [ qconcat ] ) query-pair = pname [ \"=\" ( pvalue ) ] pname = 1*( pchar ) pvalue = *( pchar ) pchar = unreserved / pct-encoded / new-delims / \":\" / \"@\" qconcat = \"&\" unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" pct-encoded = \"%\" HEXDIG HEXDIG new-delims = \"!\" / \"$\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" To allow for the operators that we want to append to the query values we extend this version with the following elements: query-pair = p-name [ \"=\" ( [ p-operator ] p-value ) ] p-operator = \"!\" / \"~\" p-value = empty-value / *( pchar ) empty-value = \"-\" The operator symbols are \"!\" and \"~\" that correspond to negation respectively fuzzy matching of the query value. Explicitly, when encountering a URL parameter value that has a \"!\" symbol in front of it we mean it as \"different than\". Similarly when encountering a value prepended with the \"~\" symbol, we mean it as \"similar with\" in a textual manner. Additionally we added a nil value symbol \"-\" that can be used for operations where the value to compare against is absent. Please look at the following examples to see how these rules apply and compound with one another: ?element=value // resources matching exactly \"value\" ?element=1&element=2 // resources matching exactly \"1\" or \"2\" ?element=!value1 // resources inversly matching \"value1\" ?element=!1&element=!2 // resources inversly matching \"1\" and \"2\" ?element=~fuzzy // resources fuzzy matching \"fuzzy\" ?element=~one&element=~two // resources fuzzy matching \"one\" or \"two\" ?element=- // resources matching empty element values ?element=!- // resources matching all non empty element values Applicability for ActivityPub Collections In this ection we will define how we are going to apply this newly defined schema to use URL query parameters to filter ActivityPub collections. We will assume a random ActvityPub collection can be found at the folowing URL: https://example.com/random-collection The response to a GET request to this IRI could return something like: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/random-collection\", \"name\": \"Random Collection\", \"type\": \"OrderedCollection\", \"updated\": \"2021-04-09T08:16:05Z\", \"first\": \"https://example.com/random-collection?maxItems=10\", \"totalItems\": 12, \"orderedItems\": [ /* skipping items for brevity */ ] } The filtering for the elements in the collection will be done by using URL query parameters with the names corresponding to the different properties that we want to filter on for the objects in the collection. Example: https://example.com/random-collection?type=Place // will return only objects with the type `Place` that exist in the // Random Collection. https://example.com/random-collection?summary=~test%20example // will return only objects containing a summary property that contains // the \"test example\" text. \u5b9f\u88c5 The grammar described in this document represents a simplified version of the mechanism that services using the [GoActivityPub] library use for their C2S addressing. \u53c2\u8003\u6587\u732e [RFC-3987] M. Duerst, M. Suignard Internationalized Resource Identifiers , 2005 [RFC-3986] T. Berners-Lee Query component of URIs , 2005 [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Client to Server Interactions] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels [GoActivityPub] M. Orcsik, Github Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"FEP-6606: ActivityPub client to server collections addressing conventions"},{"location":"fep/fep-6606/#fep-6606-activitypub-client-to-server-collections-addressing-conventions","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-6606: ActivityPub client to server collections addressing conventions"},{"location":"fep/fep-6606/#summary","text":"This document tries to describe a simple set of conventions to better enable the adressing of [ActivityPub] objects on servers that support [Client to Server Interactions]. Its main purpose is to formalize a basic vocabulary for defining subsets of IRIs [RFC-3987] for collections in a way that can be generalized to both servers and clients. It builds upon the definition of query parametrs [RFC-3986], by introducing a set of additional operators that can be applied to values.","title":"Summary"},{"location":"fep/fep-6606/#what-we-are-trying-to-solve","text":"The main reason that is often cited as making client to server interactions problematic is that the official specification leaves too much to the implementors' discretion. The fact that there is no proscribed method of filtering collections content is one of the stop gaps that prevents a wider adoption of C2S in services and clients.","title":"What we are trying to solve"},{"location":"fep/fep-6606/#syntax","text":"The following syntax is extracted form RFC-3986 section 3.4, and it formalizes the URL query parameters as representing any string that conforms to the restrictions below between the first \"?\" character and the end of the URL or a \"#\" character marking the start of the fragment part of the URL. query = *( pchar / \"/\" / \"?\" ) pchar = unreserved / pct-encoded / sub-delims / \":\" / \"@\" unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" pct-encoded = \"%\" HEXDIG HEXDIG sub-delims = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\" As we can see this is not formal definition of the query string as a group of key and value pairs, but for our intended use, this is paramount. So we will take this extra step ourselves and extend the definition to be: query = *( query-pair [ qconcat ] ) query-pair = pname [ \"=\" ( pvalue ) ] pname = 1*( pchar ) pvalue = *( pchar ) pchar = unreserved / pct-encoded / new-delims / \":\" / \"@\" qconcat = \"&\" unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" pct-encoded = \"%\" HEXDIG HEXDIG new-delims = \"!\" / \"$\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" To allow for the operators that we want to append to the query values we extend this version with the following elements: query-pair = p-name [ \"=\" ( [ p-operator ] p-value ) ] p-operator = \"!\" / \"~\" p-value = empty-value / *( pchar ) empty-value = \"-\" The operator symbols are \"!\" and \"~\" that correspond to negation respectively fuzzy matching of the query value. Explicitly, when encountering a URL parameter value that has a \"!\" symbol in front of it we mean it as \"different than\". Similarly when encountering a value prepended with the \"~\" symbol, we mean it as \"similar with\" in a textual manner. Additionally we added a nil value symbol \"-\" that can be used for operations where the value to compare against is absent. Please look at the following examples to see how these rules apply and compound with one another: ?element=value // resources matching exactly \"value\" ?element=1&element=2 // resources matching exactly \"1\" or \"2\" ?element=!value1 // resources inversly matching \"value1\" ?element=!1&element=!2 // resources inversly matching \"1\" and \"2\" ?element=~fuzzy // resources fuzzy matching \"fuzzy\" ?element=~one&element=~two // resources fuzzy matching \"one\" or \"two\" ?element=- // resources matching empty element values ?element=!- // resources matching all non empty element values","title":"Syntax"},{"location":"fep/fep-6606/#applicability-for-activitypub-collections","text":"In this ection we will define how we are going to apply this newly defined schema to use URL query parameters to filter ActivityPub collections. We will assume a random ActvityPub collection can be found at the folowing URL: https://example.com/random-collection The response to a GET request to this IRI could return something like: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/random-collection\", \"name\": \"Random Collection\", \"type\": \"OrderedCollection\", \"updated\": \"2021-04-09T08:16:05Z\", \"first\": \"https://example.com/random-collection?maxItems=10\", \"totalItems\": 12, \"orderedItems\": [ /* skipping items for brevity */ ] } The filtering for the elements in the collection will be done by using URL query parameters with the names corresponding to the different properties that we want to filter on for the objects in the collection. Example: https://example.com/random-collection?type=Place // will return only objects with the type `Place` that exist in the // Random Collection. https://example.com/random-collection?summary=~test%20example // will return only objects containing a summary property that contains // the \"test example\" text.","title":"Applicability for ActivityPub Collections"},{"location":"fep/fep-6606/#_1","text":"The grammar described in this document represents a simplified version of the mechanism that services using the [GoActivityPub] library use for their C2S addressing.","title":"\u5b9f\u88c5"},{"location":"fep/fep-6606/#_2","text":"[RFC-3987] M. Duerst, M. Suignard Internationalized Resource Identifiers , 2005 [RFC-3986] T. Berners-Lee Query component of URIs , 2005 [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Client to Server Interactions] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels [GoActivityPub] M. Orcsik, Github","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-6606/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-67ff/","text":"FEP-67ff: FEDERATION.md slug \"67ff\" authors silverpill @silverpill@mitra.social status FINAL dateReceived 2023-09-05 dateFinalized 2024-09-22 trackingIssue Tracking Issue discussionsTo Discussions To original https://codeberg.org/fediverse/fep/src/branch/main/fep/67ff/fep-67ff.md \u6982\u8981 FEDERATION.md \u306f\u3001\u9023\u643a\u30b5\u30fc\u30d3\u30b9\u3068\u306e\u76f8\u4e92\u904b\u7528\u6027\u3092\u9054\u6210\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u542b\u3080\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\u3053\u306e\u63d0\u6848\u306f\u3001Darius Kazemi \u306b\u3088\u3063\u3066 SocialHub \u30d5\u30a9\u30fc\u30e9\u30e0\u306e \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5316\u3055\u308c\u305f\u9023\u643a\u306e\u6319\u52d5\u306b\u3064\u3044\u3066\u306e\u534a\u6a19\u6e96\u7684\u306a\u65b9\u6cd5\uff1f \u3068\u3044\u3046\u30c8\u30d4\u30c3\u30af\u3067\u6700\u521d\u306b\u63d0\u6848\u3055\u308c\u307e\u3057\u305f\u3002 \u8981\u4ef6 \u3053\u306e\u6587\u66f8\u306b\u304a\u3051\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u300cMUST\u300d\u300cMUST NOT\u300d\u300cREQUIRED\u300d\u300cSHALL\u300d\u300cSHALL NOT\u300d\u300cSHOULD\u300d\u300cSHOULD NOT\u300d\u300cRECOMMENDED\u300d\u300cMAY\u300d\u300cOPTIONAL\u300d\u306f\u3001 RFC-2119 \u306b\u8a18\u8f09\u3055\u308c\u305f\u901a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 \u69cb\u9020 FEDERATION.md \u30d5\u30a1\u30a4\u30eb\u306f\u4efb\u610f\u306e\u69cb\u9020\u3068\u5185\u5bb9\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u552f\u4e00\u306e\u8981\u4ef6\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a \u6709\u52b9\u306a Markdown \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30fc\u30c9\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30eb\u30fc\u30c8\u306b\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u4ed6\u306e\u5834\u6240\u306b\u3042\u308b\u5834\u5408\u3001 FEDERATION.md \u30d5\u30a1\u30a4\u30eb\u306f\u305d\u306e\u5834\u6240\u3078\u306e\u30ea\u30f3\u30af\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u5b9f\u88c5\u3055\u308c\u305f\u9023\u643a\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u542b\u3080\u3079\u304d\u3067\u3059\u3002 \u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b Fediverse Enhancement Proposals (FEPs) \u306e\u30ea\u30b9\u30c8\u3092\u542b\u3080\u3079\u304d\u3067\u3059\u3002 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) # Federation ## \u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u9023\u643a\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u6a19\u6e96 - [ActivityPub](https://www.w3.org/TR/activitypub/) (\u30b5\u30fc\u30d0\u30fc\u9593) - [WebFinger](https://webfinger.net/) - [Http Signatures](https://datatracker.ietf.org/doc/html/draft-cavage-http-signatures) - [NodeInfo](https://nodeinfo.diaspora.software/) ## \u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308bFEPs - [FEP-f1d5: Fediverse\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u304a\u3051\u308bNodeInfo](https://codeberg.org/fediverse/fep/src/branch/main/fep/f1d5/fep-f1d5.md) ## ActivityPub <!-- \u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u3068\u62e1\u5f35\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 --> ## \u8ffd\u52a0\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 <!-- \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30da\u30fc\u30b8\u3078\u306e\u30ea\u30f3\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 --> \u5b9f\u88c5 gathio Streams Smithereen Mastodon Hometown Mitra Emissary Vervis WordPress Postmarks Bovine in repo and the symlink BookWyrm Hatsu tootik Bridgy Fed Friendica PieFed Akkoma Iceshrimp.NET Forte NeoDB FIRM \u53c2\u8003\u6587\u732e Darius Kazemi, \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5316\u3055\u308c\u305f\u9023\u643a\u306e\u6319\u52d5\u306b\u3064\u3044\u3066\u306e\u534a\u6a19\u6e96\u7684\u306a\u65b9\u6cd5\uff1f , 2020 S. Bradner, RFC\u306b\u304a\u3051\u308b\u8981\u4ef6\u30ec\u30d9\u30eb\u3092\u793a\u3059\u305f\u3081\u306e\u30ad\u30fc\u30ef\u30fc\u30c9 , 1997 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-67ff: FEDERATION.md"},{"location":"fep/fep-67ff/#fep-67ff-federationmd","text":"slug \"67ff\" authors silverpill @silverpill@mitra.social status FINAL dateReceived 2023-09-05 dateFinalized 2024-09-22 trackingIssue Tracking Issue discussionsTo Discussions To original https://codeberg.org/fediverse/fep/src/branch/main/fep/67ff/fep-67ff.md","title":"FEP-67ff: FEDERATION.md"},{"location":"fep/fep-67ff/#_1","text":"FEDERATION.md \u306f\u3001\u9023\u643a\u30b5\u30fc\u30d3\u30b9\u3068\u306e\u76f8\u4e92\u904b\u7528\u6027\u3092\u9054\u6210\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u542b\u3080\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\u3053\u306e\u63d0\u6848\u306f\u3001Darius Kazemi \u306b\u3088\u3063\u3066 SocialHub \u30d5\u30a9\u30fc\u30e9\u30e0\u306e \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5316\u3055\u308c\u305f\u9023\u643a\u306e\u6319\u52d5\u306b\u3064\u3044\u3066\u306e\u534a\u6a19\u6e96\u7684\u306a\u65b9\u6cd5\uff1f \u3068\u3044\u3046\u30c8\u30d4\u30c3\u30af\u3067\u6700\u521d\u306b\u63d0\u6848\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u6982\u8981"},{"location":"fep/fep-67ff/#_2","text":"\u3053\u306e\u6587\u66f8\u306b\u304a\u3051\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u300cMUST\u300d\u300cMUST NOT\u300d\u300cREQUIRED\u300d\u300cSHALL\u300d\u300cSHALL NOT\u300d\u300cSHOULD\u300d\u300cSHOULD NOT\u300d\u300cRECOMMENDED\u300d\u300cMAY\u300d\u300cOPTIONAL\u300d\u306f\u3001 RFC-2119 \u306b\u8a18\u8f09\u3055\u308c\u305f\u901a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002","title":"\u8981\u4ef6"},{"location":"fep/fep-67ff/#_3","text":"FEDERATION.md \u30d5\u30a1\u30a4\u30eb\u306f\u4efb\u610f\u306e\u69cb\u9020\u3068\u5185\u5bb9\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u552f\u4e00\u306e\u8981\u4ef6\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a \u6709\u52b9\u306a Markdown \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30fc\u30c9\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30eb\u30fc\u30c8\u306b\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u4ed6\u306e\u5834\u6240\u306b\u3042\u308b\u5834\u5408\u3001 FEDERATION.md \u30d5\u30a1\u30a4\u30eb\u306f\u305d\u306e\u5834\u6240\u3078\u306e\u30ea\u30f3\u30af\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u5b9f\u88c5\u3055\u308c\u305f\u9023\u643a\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u542b\u3080\u3079\u304d\u3067\u3059\u3002 \u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b Fediverse Enhancement Proposals (FEPs) \u306e\u30ea\u30b9\u30c8\u3092\u542b\u3080\u3079\u304d\u3067\u3059\u3002","title":"\u69cb\u9020"},{"location":"fep/fep-67ff/#_4","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) # Federation ## \u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u9023\u643a\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u6a19\u6e96 - [ActivityPub](https://www.w3.org/TR/activitypub/) (\u30b5\u30fc\u30d0\u30fc\u9593) - [WebFinger](https://webfinger.net/) - [Http Signatures](https://datatracker.ietf.org/doc/html/draft-cavage-http-signatures) - [NodeInfo](https://nodeinfo.diaspora.software/) ## \u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308bFEPs - [FEP-f1d5: Fediverse\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u304a\u3051\u308bNodeInfo](https://codeberg.org/fediverse/fep/src/branch/main/fep/f1d5/fep-f1d5.md) ## ActivityPub <!-- \u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u3068\u62e1\u5f35\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 --> ## \u8ffd\u52a0\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 <!-- \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30da\u30fc\u30b8\u3078\u306e\u30ea\u30f3\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 -->","title":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"fep/fep-67ff/#_5","text":"gathio Streams Smithereen Mastodon Hometown Mitra Emissary Vervis WordPress Postmarks Bovine in repo and the symlink BookWyrm Hatsu tootik Bridgy Fed Friendica PieFed Akkoma Iceshrimp.NET Forte NeoDB FIRM","title":"\u5b9f\u88c5"},{"location":"fep/fep-67ff/#_6","text":"Darius Kazemi, \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5316\u3055\u308c\u305f\u9023\u643a\u306e\u6319\u52d5\u306b\u3064\u3044\u3066\u306e\u534a\u6a19\u6e96\u7684\u306a\u65b9\u6cd5\uff1f , 2020 S. Bradner, RFC\u306b\u304a\u3051\u308b\u8981\u4ef6\u30ec\u30d9\u30eb\u3092\u793a\u3059\u305f\u3081\u306e\u30ad\u30fc\u30ef\u30fc\u30c9 , 1997","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-67ff/#_7","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-6fcd/","text":"FEP-6fcd: Account Export Container Format Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP describes a lightweight general purpose account export container format, with the following properties: General purpose, allowing for easy adaptation of existing ActivityPub, social media, and cryptographic key material export formats Extensible, upgradable, and self-documenting (in the human-readable sense) Works with FEP-7952: Roadmap for Actor and Object Portability Serves as a concrete serialization of the result of the Export operation described in FEP-9091: Export Actor Service Endpoint Out of scope: Encryption -- handled in a separate layer Compression -- handled in a separate layer (how to turn a .tar file into a .tar.gz is well known) Inspirations and Prior Art (Undocumented) Mastodon Account Export features IndieWeb Blog Archive Format WordPress Export Format DIF Universal Wallet Backup Containers spec (in progress) Overall Concept Serialize export data into files and directories Add a lightweight manifest.yml file that describes what's in the files and directories Wrap everything into a .tar file. Manifest File Reserved Properties (Required) ubc-version : Version of the Account Export Container Format spec (Required) contents : A listing of files and directories in this .tar file (Optional) meta : A metadata section describing who this export belongs to, what app or service created it, and so on. ActivityPub Export Example Example result of exporting an ActivityPub account: $ tar -vtf ap-account-export-2024-06-11.tar -rw-rw-r-- 0 0 1K Jun 11 15:38 manifest.yml drwxrwxr-x 0 0 4.0K Jun 11 15:38 activitypub/ drwxrwxr-x 0 0 4.0K Jun 11 15:38 key/ Example corresponding manifest.yml file: # (Required) Universal Backup Container spec version ubc-version: 0.1 # (Optional) Metadata section meta: created: 2024-01-01 createdBy: # (Optional) URL to a Controller document, such as an ActivityPub profile using FEP-521a # @see https://codeberg.org/fediverse/fep/src/branch/main/fep/521a/fep-521a.md controller: https://alice-personal-site.example/actor # (Optional) The app or service that created this export client: name: \"Example Exporter App\" url: https://codeberg.example.com/example-export-app # (Required, but can be empty) Contents section, listing the other files and directories contents: # This file manifest.yml: url: https://codeberg.org/fediverse/fep/src/branch/main/fep/6fcd/fep-6fcd.md#manifest-file # Directory with ActivityPub-relevant exports activitypub: contents: # Serialized ActivityPub Actor profile actor.json: url: https://www.w3.org/TR/activitypub/#actor-objects # ActivityStreams OrderedCollection representing the contents of the actor's Outbox outbox.json: url: https://www.w3.org/TR/activitystreams-core/#collections following_accounts.csv: url: https://docs.joinmastodon.org/user/moving/#export followers.csv: url: https://docs.joinmastodon.org/user/moving/#export lists.csv: url: https://docs.joinmastodon.org/user/moving/#export bookmarks.csv: url: https://docs.joinmastodon.org/user/moving/#export blocks.csv: url: https://docs.joinmastodon.org/user/moving/#export mutes.csv: url: https://docs.joinmastodon.org/user/moving/#export # Directory of object attachments (post images, etc) attachments: url: https://www.w3.org/TR/activitystreams-vocabulary/#dfn-attachment contents: # Actor profile avatar avatar.jpg: url: https://www.w3.org/TR/activitystreams-vocabulary/#dfn-icon # 'key' dir, serialized private/public key pairs, # such as those declared in a FEP-521a Actor profile key: url: https://codeberg.org/fediverse/fep/src/branch/main/fep/521a/fep-521a.md contents: key-1234.json: url: https://www.w3.org/TR/vc-di-eddsa/#representation-eddsa-rdfc-2022 Example exported key file: $ cat key/key-1234.json { \"@context\": [\"https://w3id.org/security/multikey/v1\"], \"type\": \"Multikey\", \"id\": \"https://alice-personal-site.example/actor#key1234\", \"controller\": \"https://alice-personal-site.example/actor\", \"publicKeyMultibase\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\", \"privateKeyMultibase\": \"z3u2en7t5LR2WtQH5PfFqMqwVHBeXouLzo6haApm8XHqvjxq\" } Example Blog Archive Format Export $ tar -vtf bar-account-export-2024-06-11.tar -rw-rw-r-- 0 0 1K Jun 11 15:38 manifest.yml -rw-rw-r-- 0 0 100K Jun 11 15:38 index.html -rw-rw-r-- 0 0 50K Jun 11 15:38 feed.json drwxrwxr-x 0 0 4.0K Jun 11 15:38 uploads/ Example corresponding manifest.yml file: ubc-version: 0.1 meta: created: 2024-01-01 contents: # This file manifest.yml: url: https://codeberg.org/fediverse/fep/src/branch/main/fep/6fcd/fep-6fcd.md#manifest-file index.html: url: https://indieweb.org/blog_archive_format feed.json: url: https://indieweb.org/blog_archive_format uploads: url: https://indieweb.org/blog_archive_format \u53c2\u8003\u6587\u732e FEP-521a: Representing actor's public keys Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, 1997 Dave Longley, Manu Sporny, Data Integrity EdDSA Cryptosuites v1.0, 2023 Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"FEP-6fcd: Account Export Container Format"},{"location":"fep/fep-6fcd/#fep-6fcd-account-export-container-format","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-6fcd: Account Export Container Format"},{"location":"fep/fep-6fcd/#summary","text":"This FEP describes a lightweight general purpose account export container format, with the following properties: General purpose, allowing for easy adaptation of existing ActivityPub, social media, and cryptographic key material export formats Extensible, upgradable, and self-documenting (in the human-readable sense) Works with FEP-7952: Roadmap for Actor and Object Portability Serves as a concrete serialization of the result of the Export operation described in FEP-9091: Export Actor Service Endpoint Out of scope: Encryption -- handled in a separate layer Compression -- handled in a separate layer (how to turn a .tar file into a .tar.gz is well known)","title":"Summary"},{"location":"fep/fep-6fcd/#inspirations-and-prior-art","text":"(Undocumented) Mastodon Account Export features IndieWeb Blog Archive Format WordPress Export Format DIF Universal Wallet Backup Containers spec (in progress)","title":"Inspirations and Prior Art"},{"location":"fep/fep-6fcd/#overall-concept","text":"Serialize export data into files and directories Add a lightweight manifest.yml file that describes what's in the files and directories Wrap everything into a .tar file.","title":"Overall Concept"},{"location":"fep/fep-6fcd/#manifest-file","text":"","title":"Manifest File"},{"location":"fep/fep-6fcd/#reserved-properties","text":"(Required) ubc-version : Version of the Account Export Container Format spec (Required) contents : A listing of files and directories in this .tar file (Optional) meta : A metadata section describing who this export belongs to, what app or service created it, and so on.","title":"Reserved Properties"},{"location":"fep/fep-6fcd/#activitypub-export-example","text":"Example result of exporting an ActivityPub account: $ tar -vtf ap-account-export-2024-06-11.tar -rw-rw-r-- 0 0 1K Jun 11 15:38 manifest.yml drwxrwxr-x 0 0 4.0K Jun 11 15:38 activitypub/ drwxrwxr-x 0 0 4.0K Jun 11 15:38 key/ Example corresponding manifest.yml file: # (Required) Universal Backup Container spec version ubc-version: 0.1 # (Optional) Metadata section meta: created: 2024-01-01 createdBy: # (Optional) URL to a Controller document, such as an ActivityPub profile using FEP-521a # @see https://codeberg.org/fediverse/fep/src/branch/main/fep/521a/fep-521a.md controller: https://alice-personal-site.example/actor # (Optional) The app or service that created this export client: name: \"Example Exporter App\" url: https://codeberg.example.com/example-export-app # (Required, but can be empty) Contents section, listing the other files and directories contents: # This file manifest.yml: url: https://codeberg.org/fediverse/fep/src/branch/main/fep/6fcd/fep-6fcd.md#manifest-file # Directory with ActivityPub-relevant exports activitypub: contents: # Serialized ActivityPub Actor profile actor.json: url: https://www.w3.org/TR/activitypub/#actor-objects # ActivityStreams OrderedCollection representing the contents of the actor's Outbox outbox.json: url: https://www.w3.org/TR/activitystreams-core/#collections following_accounts.csv: url: https://docs.joinmastodon.org/user/moving/#export followers.csv: url: https://docs.joinmastodon.org/user/moving/#export lists.csv: url: https://docs.joinmastodon.org/user/moving/#export bookmarks.csv: url: https://docs.joinmastodon.org/user/moving/#export blocks.csv: url: https://docs.joinmastodon.org/user/moving/#export mutes.csv: url: https://docs.joinmastodon.org/user/moving/#export # Directory of object attachments (post images, etc) attachments: url: https://www.w3.org/TR/activitystreams-vocabulary/#dfn-attachment contents: # Actor profile avatar avatar.jpg: url: https://www.w3.org/TR/activitystreams-vocabulary/#dfn-icon # 'key' dir, serialized private/public key pairs, # such as those declared in a FEP-521a Actor profile key: url: https://codeberg.org/fediverse/fep/src/branch/main/fep/521a/fep-521a.md contents: key-1234.json: url: https://www.w3.org/TR/vc-di-eddsa/#representation-eddsa-rdfc-2022 Example exported key file: $ cat key/key-1234.json { \"@context\": [\"https://w3id.org/security/multikey/v1\"], \"type\": \"Multikey\", \"id\": \"https://alice-personal-site.example/actor#key1234\", \"controller\": \"https://alice-personal-site.example/actor\", \"publicKeyMultibase\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\", \"privateKeyMultibase\": \"z3u2en7t5LR2WtQH5PfFqMqwVHBeXouLzo6haApm8XHqvjxq\" }","title":"ActivityPub Export Example"},{"location":"fep/fep-6fcd/#example-blog-archive-format-export","text":"$ tar -vtf bar-account-export-2024-06-11.tar -rw-rw-r-- 0 0 1K Jun 11 15:38 manifest.yml -rw-rw-r-- 0 0 100K Jun 11 15:38 index.html -rw-rw-r-- 0 0 50K Jun 11 15:38 feed.json drwxrwxr-x 0 0 4.0K Jun 11 15:38 uploads/ Example corresponding manifest.yml file: ubc-version: 0.1 meta: created: 2024-01-01 contents: # This file manifest.yml: url: https://codeberg.org/fediverse/fep/src/branch/main/fep/6fcd/fep-6fcd.md#manifest-file index.html: url: https://indieweb.org/blog_archive_format feed.json: url: https://indieweb.org/blog_archive_format uploads: url: https://indieweb.org/blog_archive_format","title":"Example Blog Archive Format Export"},{"location":"fep/fep-6fcd/#_1","text":"FEP-521a: Representing actor's public keys Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, 1997 Dave Longley, Manu Sporny, Data Integrity EdDSA Cryptosuites v1.0, 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-6fcd/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-73cd/","text":"FEP-73cd: Migration User Stories Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary In the interest of clarifying and aligning on the problem-space of user account migration, multiple-account management, and export/import/migration of content/activity history, these user stories are offered to organize discussion and solution-sharing. Contributing Any one of these user stories could be further elaborated in the spirit of the SWAT exercise that served as ActivityPub's initial \"definition of done\", perhaps in a separate FEP and/or SocialHub thread. Migration User Stories PRs welcome! Add or update! 1, 2, and 3 describe follower/profile migration, while 4,5,6 and 7 describe migration of posted activities. Alice wants to move her account from Alpha to Gamma, both of which are online and federated to one another, without losing her follow relationships in either direction. Four possible variants, not mutually exclusive: A. Alice would like her account on Alpha terminated with some kind of human-readable redirect, i.e., links to old Alice@Alpha content display a warning that \u201cAlice doesn't live here anymore\u201d. B. Alice would like Alpha to dynamically redirect any links to Alice@Alpha or to any specific content she posted/generated there to a reasonable default \u201chomepage\u201d for Alice@Gamma. C. Alice would like Alpha to dynamically redirect any links to Alice@Alpha content to the migrated contents @Gamma (i.e. 301 HTTP codes and nginx-style URL rewrites). D. Alice would like her account on Alpha to remain active and accept new posts as a personal account, but would like her followers to know about the new professional account as well. A selection of professional posts from Alpha will be ported over so that her new professional account can carry over a little backhistory (with a disclaimer that they were originally uploaded to Alpha). E. In addition to her followers and followees, Alice would like to bring her \"unfollows\" from Alpha to Gamma, i.e. the specific accounts she has manually blocked or muted. F. In addition to her followers, followees, and \"unfollows,\" Alice would like to bring her Alpha's carefully-curated \"defederation list,\" i.e. its server-level blocklist, from Alpha to Gamma, since Gamma is a younger and less robustly administered community than Alpha. Bob is asked to leave Alpha by its moderation team, who have disabled new posts on that account but are allowing Bob to execute a one-way, permanent migration to a new server of Bob's choosing as a courtesy. Bob logs in to Alpha and permanently migrates to a new server with which Alpha is federated, allowing a server-to-server connection. Bob instead finds a new home on the server Beta, which is specifically de-federated by Alpha for incompatible moderation policies. Bob would like to announce to his followers his new account, without Alpha and Beta having to communicate with one another (since Alpha refuses connections with Beta altogether). Charlie would like to move his profile, followers, and his years of original content to Gamma from Delta, because the latter was recently and unexpectedly taken offline by government intervention. Before going dark, Gamma had already authorized a custom client for Charlie, which he used to sign each posts with a self-managed private key, and Charlie had backed up his followers/following lists. Delta is able to load all of the above and authenticate them to display on his new account. Bob would also like to move his previous content from Alpha to Beta, which are defederated. After having his service partially limited, he is able to export his archive of Alpha content (including media uploads but no moderation records, as Alpha does not generate any) and import it to Beta to be considered for republication. Charlie also managed to expert an archive of his Gamma content after authorizing Charlie's custom client (including media uploads and moderation records), and is able to use said client to authenticate this content to Delta, who can consider it for republication despite Gamma being offline. After using Delta for some time, Charlie moves on to server Epsilon, which Daniel wants to migrate to from Delta. Epsilon has no moderation policy because Daniel is its only user and he has full admin rights over it. Epsilon loads a recent backup, skipping over the moderation policies exported by Delta. At time of import, Delta does not support all the same features and Activity types that Gamma did at time of export. Two variants, not mutually exclusive: A. Delta's import wizard warns Charlie to keep his backup and try again later. Years later, he does, and additional content is imported now that Delta supports a bigger subset of Gamma's Activity types, without duplicating the content previously imported. B. Delta stored all the un-imported Gamma Activities in a separate archive for Charlie. Years later, when Charlie exports this historic data along with Delta data to Epsilon, both the un-imported Gamma content, the imported Gamma content, and the newer Delta content alike get included in his new backup, and it all gets imported to Epsilon. Use-Case to FEP Mapping Note: this section is largely subjective and intended as an aid to decision-making, NOT as any kind of definitive statement about the utility or necessity of other FEPs. Feel free to PR in links to blog posts or other tutorials that explain a given implementation of any user stories to the \"profile\" row in the form [1](<link>), [2](<link>)... Key: [R]equired [H]elpful [U]nknown [1/2/3] Optionality sets Use cases: 1A 1B 1C 1D 2 3 4 5 6 7A 7B FEP-7628 \"Move Actor\" ( push mode) R1 R1 R FEP-7628 \"Move Actor\" ( pull mode) R2 R FEP-c390 \"Identity Proofs\" H H R FEP-ae97 \"Client-Side Activity Signing\" R FEP-ef61 \"Portable Objects\" R R H H FEP-8b32 \"Object Integrity Proofs\" (req'd by ^) R^ R^ H^ H^ FEP-521a \"Actor's Public Keys\" H H H H FEP-TBD [Per-user? Per-server? both?] \"Moderation Records\" R H FEP-TBD \"Forwarding and Redirecting Migrated Actors\" H R R? H H R FEP-TBD \"Activity Archives/Export Format\" R R Profiles needed to combine the above? Open Questions arbitrary Actor Metadata k/v pairs as per FEP-fb2a might be useful as a legacy/fallback for some of the above? likewise the custom TXT record that FEP-612d proposes for mapping domains to actors might be a useful way of doing \"migration from dead server\" or some such? exporting activity-histories should probably also export histories of each activity in that activity history, as per FEP-bad1, Object History collection do FEP-bad1 histories span multiple services? if so, does \"this content was originally uploaded to another server\" belong in a new FEP or what? migrating accounts should probably migrate PENDING follows as per FEP-4ccd , and/or do a full follower sync as per FEP-8fcf \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ABC] Alyssa P. Hacker, An example proposal , 2020 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-73cd: Migration User Stories"},{"location":"fep/fep-73cd/#fep-73cd-migration-user-stories","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-73cd: Migration User Stories"},{"location":"fep/fep-73cd/#summary","text":"In the interest of clarifying and aligning on the problem-space of user account migration, multiple-account management, and export/import/migration of content/activity history, these user stories are offered to organize discussion and solution-sharing.","title":"Summary"},{"location":"fep/fep-73cd/#contributing","text":"Any one of these user stories could be further elaborated in the spirit of the SWAT exercise that served as ActivityPub's initial \"definition of done\", perhaps in a separate FEP and/or SocialHub thread.","title":"Contributing"},{"location":"fep/fep-73cd/#migration-user-stories","text":"PRs welcome! Add or update! 1, 2, and 3 describe follower/profile migration, while 4,5,6 and 7 describe migration of posted activities. Alice wants to move her account from Alpha to Gamma, both of which are online and federated to one another, without losing her follow relationships in either direction. Four possible variants, not mutually exclusive: A. Alice would like her account on Alpha terminated with some kind of human-readable redirect, i.e., links to old Alice@Alpha content display a warning that \u201cAlice doesn't live here anymore\u201d. B. Alice would like Alpha to dynamically redirect any links to Alice@Alpha or to any specific content she posted/generated there to a reasonable default \u201chomepage\u201d for Alice@Gamma. C. Alice would like Alpha to dynamically redirect any links to Alice@Alpha content to the migrated contents @Gamma (i.e. 301 HTTP codes and nginx-style URL rewrites). D. Alice would like her account on Alpha to remain active and accept new posts as a personal account, but would like her followers to know about the new professional account as well. A selection of professional posts from Alpha will be ported over so that her new professional account can carry over a little backhistory (with a disclaimer that they were originally uploaded to Alpha). E. In addition to her followers and followees, Alice would like to bring her \"unfollows\" from Alpha to Gamma, i.e. the specific accounts she has manually blocked or muted. F. In addition to her followers, followees, and \"unfollows,\" Alice would like to bring her Alpha's carefully-curated \"defederation list,\" i.e. its server-level blocklist, from Alpha to Gamma, since Gamma is a younger and less robustly administered community than Alpha. Bob is asked to leave Alpha by its moderation team, who have disabled new posts on that account but are allowing Bob to execute a one-way, permanent migration to a new server of Bob's choosing as a courtesy. Bob logs in to Alpha and permanently migrates to a new server with which Alpha is federated, allowing a server-to-server connection. Bob instead finds a new home on the server Beta, which is specifically de-federated by Alpha for incompatible moderation policies. Bob would like to announce to his followers his new account, without Alpha and Beta having to communicate with one another (since Alpha refuses connections with Beta altogether). Charlie would like to move his profile, followers, and his years of original content to Gamma from Delta, because the latter was recently and unexpectedly taken offline by government intervention. Before going dark, Gamma had already authorized a custom client for Charlie, which he used to sign each posts with a self-managed private key, and Charlie had backed up his followers/following lists. Delta is able to load all of the above and authenticate them to display on his new account. Bob would also like to move his previous content from Alpha to Beta, which are defederated. After having his service partially limited, he is able to export his archive of Alpha content (including media uploads but no moderation records, as Alpha does not generate any) and import it to Beta to be considered for republication. Charlie also managed to expert an archive of his Gamma content after authorizing Charlie's custom client (including media uploads and moderation records), and is able to use said client to authenticate this content to Delta, who can consider it for republication despite Gamma being offline. After using Delta for some time, Charlie moves on to server Epsilon, which Daniel wants to migrate to from Delta. Epsilon has no moderation policy because Daniel is its only user and he has full admin rights over it. Epsilon loads a recent backup, skipping over the moderation policies exported by Delta. At time of import, Delta does not support all the same features and Activity types that Gamma did at time of export. Two variants, not mutually exclusive: A. Delta's import wizard warns Charlie to keep his backup and try again later. Years later, he does, and additional content is imported now that Delta supports a bigger subset of Gamma's Activity types, without duplicating the content previously imported. B. Delta stored all the un-imported Gamma Activities in a separate archive for Charlie. Years later, when Charlie exports this historic data along with Delta data to Epsilon, both the un-imported Gamma content, the imported Gamma content, and the newer Delta content alike get included in his new backup, and it all gets imported to Epsilon.","title":"Migration User Stories"},{"location":"fep/fep-73cd/#use-case-to-fep-mapping","text":"Note: this section is largely subjective and intended as an aid to decision-making, NOT as any kind of definitive statement about the utility or necessity of other FEPs. Feel free to PR in links to blog posts or other tutorials that explain a given implementation of any user stories to the \"profile\" row in the form [1](<link>), [2](<link>)... Key: [R]equired [H]elpful [U]nknown [1/2/3] Optionality sets Use cases: 1A 1B 1C 1D 2 3 4 5 6 7A 7B FEP-7628 \"Move Actor\" ( push mode) R1 R1 R FEP-7628 \"Move Actor\" ( pull mode) R2 R FEP-c390 \"Identity Proofs\" H H R FEP-ae97 \"Client-Side Activity Signing\" R FEP-ef61 \"Portable Objects\" R R H H FEP-8b32 \"Object Integrity Proofs\" (req'd by ^) R^ R^ H^ H^ FEP-521a \"Actor's Public Keys\" H H H H FEP-TBD [Per-user? Per-server? both?] \"Moderation Records\" R H FEP-TBD \"Forwarding and Redirecting Migrated Actors\" H R R? H H R FEP-TBD \"Activity Archives/Export Format\" R R Profiles needed to combine the above?","title":"Use-Case to FEP Mapping"},{"location":"fep/fep-73cd/#open-questions","text":"arbitrary Actor Metadata k/v pairs as per FEP-fb2a might be useful as a legacy/fallback for some of the above? likewise the custom TXT record that FEP-612d proposes for mapping domains to actors might be a useful way of doing \"migration from dead server\" or some such? exporting activity-histories should probably also export histories of each activity in that activity history, as per FEP-bad1, Object History collection do FEP-bad1 histories span multiple services? if so, does \"this content was originally uploaded to another server\" belong in a new FEP or what? migrating accounts should probably migrate PENDING follows as per FEP-4ccd , and/or do a full follower sync as per FEP-8fcf","title":"Open Questions"},{"location":"fep/fep-73cd/#_1","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ABC] Alyssa P. Hacker, An example proposal , 2020","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-73cd/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-7458/","text":"FEP-7458: Using the replies collection Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Replies are not defined in ActivityPub, as there are no specified side effects for simply encountering objects or activities with inReplyTo set. Most current implementations implicitly reconstruct replies at consumption time, and may silently and implicitly maintain the replies collection at the producer's side. This FEP provides guidance for explicitly using the replies collection, and explicitly managing it. Problem statement (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) ActivityPub defines side effects for activities, not side effects for encountering objects. One popular use-case in the social web is replying to an object with your own object; this indicates that your object is a response to the other object. However, this is about as far as most implementations go in maintaining the \"reply\" relation. It is generally assumed that objects will be delivered to other servers via a Create activity, and that the object of that Create activity will be cached, and that the \"reply\" will somehow be tracked and attached to the referent object. The ActivityPub spec only mentions \"replies\" in one place, in the context of inbox forwarding as intended to avoid the problem of \"ghost replies\". The implication of this is that senders are expected to address all relevant parties ahead-of-time, as a matter of convention. What is missing is a mechanism for managing replies that would recognize the canonicity and authority of the actor managing their own replies explicitly, rather than depending on implicit reconstruction after-the-fact. FEP-5624 takes a different approach that doubles down on this implicit reconstruction. Meanwhile, FEP-7888 specifies a similar mechanism for managing contexts that recognizes the canonicity and authority of the actor managing the conversation explicitly, rather than depending on implicit reconstruction after-the-fact. Implicit reconstruction is usually based on reply trees, but explicit construction is based on Add and Remove activities. The current FEP aims to be written in a way that supports explicit replies management while being orthogonal to the use of context . In other words, the authoring actor has the option to use inReplyTo as metadata, while separately choosing to participate in a context or not. Example flow (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Alice makes a post: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://alice.example/outbox/1\", \"summary\": \"Alice created a note\", \"actor\": \"https://alice.example\", \"type\": \"Create\", \"object\": { \"id\": \"https://alice.example/objects/1\", \"type\": \"Note\", \"content\": \"Hello\", \"replies\": \"https://alice.example/objects/1/replies\" }, \"cc\": [\"https://alice.example/followers\", \"as:Public\"] } Bob makes a reply: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://bob.example/outbox/2\", \"summary\": \"Bob replied to Alice's note\", \"actor\": \"https://bob.example\", \"type\": \"Create\", \"object\": { \"id\": \"https://bob.example/objects/2\", \"type\": \"Note\", \"content\": \"Hi!\", \"inReplyTo\": \"https://alice.example/objects/1\" }, \"to\": \"https://alice.example\", \"cc\": [\"https://alice.example/followers\", \"https://bob.example/followers\"] } Alice explicitly approves Bob's reply, either automatically or manually. Alice forwards Bob's activity to Alice's followers, as requested by Bob. Alice also adds Bob's reply to the replies collection: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://alice.example/outbox/3\", \"summary\": \"Alice added Bob's note as a reply\", \"actor\": \"https://alice.example\", \"type\": \"Add\", \"object\": \"https://bob.example/objects/2\", \"target\": \"https://alice.example/objects/1/replies\", \"to\": \"https://bob.example\", \"cc\": [\"https://alice.example/followers\", \"https://bob.example/followers\"] } Bob sees this and updates the original reply to something offensive: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://bob.example/outbox/4\", \"summary\": \"Bob updated a note\", \"actor\": \"https://bob.example\", \"type\": \"Update\", \"object\": { \"id\": \"https://bob.example/objects/2\", \"type\": \"Note\", \"content\": \"Alice sucks lol\", \"inReplyTo\": \"https://alice.example/objects/1\" }, \"to\": \"https://alice.example\", \"cc\": [\"https://alice.example/followers\", \"https://bob.example/followers\"] } Perhaps Alice forwards this activity automatically, or perhaps not; at some later point, Alice notices that the reply has been edited. Alice therefore decides to remove the reply: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://alice.example/outbox/5\", \"summary\": \"Alice removed a reply\", \"actor\": \"https://alice.example\", \"type\": \"Remove\", \"object\": \"https://bob.example/objects/2\", \"target\": \"https://alice.example/objects/1/replies\", \"to\": \"https://bob.example\", \"cc\": [\"https://alice.example/followers\", \"https://bob.example/followers\"] } Bob maliciously chooses not to forward this removal activity. Charlie follows Bob, but not Alice. Charlie's client has received activities 2, 3, and 4 in Charlie's inbox. Under current behavior, Charlie would have fetched Alice's post, but not have checked Alice's replies collection or used it in any way. Bob's reply would still be visible as a reply to Alice's post. Under proposed behavior, Charlie would instead defer to checking Alice's replies collection. Bob's reply would not be contained in that collection, as Alice has removed it. Therefore, Charlie does not see or treat Bob's reply as a verified reply. Behavioral requirements When encountering an object with inReplyTo set, ActivityPub clients SHOULD verify that the current object is indeed a valid member of the inReplyTo.replies collection. (A further FEP may provide a mechanism to establish proof of this without having to check the entire collection.) If the current object is not present in the replies collection, then ActivityPub clients MAY choose to mark this reply as unverified, or otherwise hide it entirely when presenting replies from a cache. Upon encountering an activity or its object where inReplyTo is set to some object attributedTo the current actor, an ActivityPub actor SHOULD send an activity with the following properties: type array MUST include Add object MUST be the object declaring an inReplyTo target MUST be your own object's replies collection the activity's addressing properties SHOULD include the object.attributedTo actor, as well as potentially their followers , in addition to any other addressed actors (such as your own followers or some other audience ) ActivityPub actors SHOULD signal removal of an object from a replies collection that they own by sending an activity with the following properties: type array MUST include Remove object MUST be the object declaring an inReplyTo target MUST be your own object's replies collection the activity's addressing properties SHOULD include the object.attributedTo actor, as well as potentially their followers , in addition to any other addressed actors (such as your own followers or some other audience ) \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Dennis Schubert, ActivityPub: One protocol to rule them all? # Replies and Interactions , 2018 Claire, FEP-5624: Per-object reply control policies , 2022 a, FEP-7888: Demystifying the context property , 2023 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-7458: Using the replies collection"},{"location":"fep/fep-7458/#fep-7458-using-the-replies-collection","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-7458: Using the replies collection"},{"location":"fep/fep-7458/#summary","text":"Replies are not defined in ActivityPub, as there are no specified side effects for simply encountering objects or activities with inReplyTo set. Most current implementations implicitly reconstruct replies at consumption time, and may silently and implicitly maintain the replies collection at the producer's side. This FEP provides guidance for explicitly using the replies collection, and explicitly managing it.","title":"Summary"},{"location":"fep/fep-7458/#problem-statement","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) ActivityPub defines side effects for activities, not side effects for encountering objects. One popular use-case in the social web is replying to an object with your own object; this indicates that your object is a response to the other object. However, this is about as far as most implementations go in maintaining the \"reply\" relation. It is generally assumed that objects will be delivered to other servers via a Create activity, and that the object of that Create activity will be cached, and that the \"reply\" will somehow be tracked and attached to the referent object. The ActivityPub spec only mentions \"replies\" in one place, in the context of inbox forwarding as intended to avoid the problem of \"ghost replies\". The implication of this is that senders are expected to address all relevant parties ahead-of-time, as a matter of convention. What is missing is a mechanism for managing replies that would recognize the canonicity and authority of the actor managing their own replies explicitly, rather than depending on implicit reconstruction after-the-fact. FEP-5624 takes a different approach that doubles down on this implicit reconstruction. Meanwhile, FEP-7888 specifies a similar mechanism for managing contexts that recognizes the canonicity and authority of the actor managing the conversation explicitly, rather than depending on implicit reconstruction after-the-fact. Implicit reconstruction is usually based on reply trees, but explicit construction is based on Add and Remove activities. The current FEP aims to be written in a way that supports explicit replies management while being orthogonal to the use of context . In other words, the authoring actor has the option to use inReplyTo as metadata, while separately choosing to participate in a context or not.","title":"Problem statement"},{"location":"fep/fep-7458/#example-flow","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Alice makes a post: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://alice.example/outbox/1\", \"summary\": \"Alice created a note\", \"actor\": \"https://alice.example\", \"type\": \"Create\", \"object\": { \"id\": \"https://alice.example/objects/1\", \"type\": \"Note\", \"content\": \"Hello\", \"replies\": \"https://alice.example/objects/1/replies\" }, \"cc\": [\"https://alice.example/followers\", \"as:Public\"] } Bob makes a reply: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://bob.example/outbox/2\", \"summary\": \"Bob replied to Alice's note\", \"actor\": \"https://bob.example\", \"type\": \"Create\", \"object\": { \"id\": \"https://bob.example/objects/2\", \"type\": \"Note\", \"content\": \"Hi!\", \"inReplyTo\": \"https://alice.example/objects/1\" }, \"to\": \"https://alice.example\", \"cc\": [\"https://alice.example/followers\", \"https://bob.example/followers\"] } Alice explicitly approves Bob's reply, either automatically or manually. Alice forwards Bob's activity to Alice's followers, as requested by Bob. Alice also adds Bob's reply to the replies collection: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://alice.example/outbox/3\", \"summary\": \"Alice added Bob's note as a reply\", \"actor\": \"https://alice.example\", \"type\": \"Add\", \"object\": \"https://bob.example/objects/2\", \"target\": \"https://alice.example/objects/1/replies\", \"to\": \"https://bob.example\", \"cc\": [\"https://alice.example/followers\", \"https://bob.example/followers\"] } Bob sees this and updates the original reply to something offensive: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://bob.example/outbox/4\", \"summary\": \"Bob updated a note\", \"actor\": \"https://bob.example\", \"type\": \"Update\", \"object\": { \"id\": \"https://bob.example/objects/2\", \"type\": \"Note\", \"content\": \"Alice sucks lol\", \"inReplyTo\": \"https://alice.example/objects/1\" }, \"to\": \"https://alice.example\", \"cc\": [\"https://alice.example/followers\", \"https://bob.example/followers\"] } Perhaps Alice forwards this activity automatically, or perhaps not; at some later point, Alice notices that the reply has been edited. Alice therefore decides to remove the reply: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://alice.example/outbox/5\", \"summary\": \"Alice removed a reply\", \"actor\": \"https://alice.example\", \"type\": \"Remove\", \"object\": \"https://bob.example/objects/2\", \"target\": \"https://alice.example/objects/1/replies\", \"to\": \"https://bob.example\", \"cc\": [\"https://alice.example/followers\", \"https://bob.example/followers\"] } Bob maliciously chooses not to forward this removal activity. Charlie follows Bob, but not Alice. Charlie's client has received activities 2, 3, and 4 in Charlie's inbox. Under current behavior, Charlie would have fetched Alice's post, but not have checked Alice's replies collection or used it in any way. Bob's reply would still be visible as a reply to Alice's post. Under proposed behavior, Charlie would instead defer to checking Alice's replies collection. Bob's reply would not be contained in that collection, as Alice has removed it. Therefore, Charlie does not see or treat Bob's reply as a verified reply.","title":"Example flow"},{"location":"fep/fep-7458/#behavioral-requirements","text":"When encountering an object with inReplyTo set, ActivityPub clients SHOULD verify that the current object is indeed a valid member of the inReplyTo.replies collection. (A further FEP may provide a mechanism to establish proof of this without having to check the entire collection.) If the current object is not present in the replies collection, then ActivityPub clients MAY choose to mark this reply as unverified, or otherwise hide it entirely when presenting replies from a cache. Upon encountering an activity or its object where inReplyTo is set to some object attributedTo the current actor, an ActivityPub actor SHOULD send an activity with the following properties: type array MUST include Add object MUST be the object declaring an inReplyTo target MUST be your own object's replies collection the activity's addressing properties SHOULD include the object.attributedTo actor, as well as potentially their followers , in addition to any other addressed actors (such as your own followers or some other audience ) ActivityPub actors SHOULD signal removal of an object from a replies collection that they own by sending an activity with the following properties: type array MUST include Remove object MUST be the object declaring an inReplyTo target MUST be your own object's replies collection the activity's addressing properties SHOULD include the object.attributedTo actor, as well as potentially their followers , in addition to any other addressed actors (such as your own followers or some other audience )","title":"Behavioral requirements"},{"location":"fep/fep-7458/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Dennis Schubert, ActivityPub: One protocol to rule them all? # Replies and Interactions , 2018 Claire, FEP-5624: Per-object reply control policies , 2022 a, FEP-7888: Demystifying the context property , 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-7458/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-7502/","text":"FEP-7502: Limiting visibility to authenticated actors Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Some servers require authentication for all requests made via ActivityPub, even for GET requests on public objects addressed to as:Public . This violates the requirement that anything addressed to as:Public is made available without requiring authentication. This FEP proposes an alternative addressing that may be used in such scenarios, signaling that the object is not fully public but is otherwise available to any actor. Prior art (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) ActivityPub issue 339 discusses the shortcomings of as:Public and proposed a new delivery/addressing target of as:Authenticated , but this proposal was never adopted. The distinction between the two is as follows: Public : Available to anyone without authentication Authenticated : Available to any actor after authentication Issues raised with this approach include: the lack of semantic clarity around addressing pseudo-collections (including as:Public) as it relates to post-delivery use cases the ease of creating puppet actors making this ineffective for anti-abuse use cases the potential for tracking authenticated fetches that may occur The concern with semantic clarity is unaddressed, as replacing as:Public with a different mechanism to signal fully public objects is out-of-scope for this FEP. However, this mechanism is still useful for addressing different concerns: signaling an intent to disallow unauthenticated access, instead of lying about the object being fully \"public\" a minimal level of tracking authentication being desirable in cases where blocks are to be enforced, by adding friction to fetching In WAC , there is a distinction made between an \"agent\" ( http://xmlns.com/foaf/0.1/Agent ) and an \"authenticated agent\" ( http://www.w3.org/ns/auth/acl#AuthenticatedAgent ). This FEP proposes an addressing target for the latter. Proposal In addition to collections and objects, Activities may additionally be addressed to a special \"authenticated\" collection, with the identifier http://www.w3.org/ns/auth/acl#AuthenticatedAgent . Activities addressed to this special URI shall be accessible to all actors, with authentication. Implementations MUST NOT deliver to the \"authenticated\" special collection; it is not capable of receiving actual activities. An activity SHOULD NOT be addressed to both \"public\" and \"authenticated\". In such a case, addressing to \"authenticated\" has no effect while also addressed to \"public\". Overview ActivityPub Clients MAY author an activity that is addressed to or cc or includes in the audience the \"authenticated agents\" special identifier. ActivityPub Servers receiving such an activity addressed to \"authenticated agents\" MUST enforce some method of authenticating actors on fetch, if the activity is persisted. (No specific method is required by this FEP, but in most practical cases it is currently sufficient to use the HTTP Signatures Cavage draft and sign the GET request with a domain-wide internal fetch actor representing the service running on that domain.) ActivityPub Federated Servers that operate as an \"instance\" receiving such an activity addressed to \"authenticated agents\" MUST NOT serve representations of the received activity to any logged-out users. \u5b9f\u88c5 Pixelfed intends to implement this FEP when \"signed fetch\" is enabled, such that the resulting data returned after a signed fetch does not include as:Public . Terms defined Authenticated URI http://www.w3.org/ns/auth/acl#AuthenticatedAgent Label Anyone authenticated Subclass of Agent Is defined by Basic Access Control ontology \u53c2\u8003\u6587\u732e ActivityPub Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 339 kaniini, as:Authenticated proposal , 2019 WAC Sarven Capadisli, Tim Berners-Lee, Henry Story, Web Access Control , 2023 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-7502: Limiting visibility to authenticated actors"},{"location":"fep/fep-7502/#fep-7502-limiting-visibility-to-authenticated-actors","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-7502: Limiting visibility to authenticated actors"},{"location":"fep/fep-7502/#summary","text":"Some servers require authentication for all requests made via ActivityPub, even for GET requests on public objects addressed to as:Public . This violates the requirement that anything addressed to as:Public is made available without requiring authentication. This FEP proposes an alternative addressing that may be used in such scenarios, signaling that the object is not fully public but is otherwise available to any actor.","title":"Summary"},{"location":"fep/fep-7502/#prior-art","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) ActivityPub issue 339 discusses the shortcomings of as:Public and proposed a new delivery/addressing target of as:Authenticated , but this proposal was never adopted. The distinction between the two is as follows: Public : Available to anyone without authentication Authenticated : Available to any actor after authentication Issues raised with this approach include: the lack of semantic clarity around addressing pseudo-collections (including as:Public) as it relates to post-delivery use cases the ease of creating puppet actors making this ineffective for anti-abuse use cases the potential for tracking authenticated fetches that may occur The concern with semantic clarity is unaddressed, as replacing as:Public with a different mechanism to signal fully public objects is out-of-scope for this FEP. However, this mechanism is still useful for addressing different concerns: signaling an intent to disallow unauthenticated access, instead of lying about the object being fully \"public\" a minimal level of tracking authentication being desirable in cases where blocks are to be enforced, by adding friction to fetching In WAC , there is a distinction made between an \"agent\" ( http://xmlns.com/foaf/0.1/Agent ) and an \"authenticated agent\" ( http://www.w3.org/ns/auth/acl#AuthenticatedAgent ). This FEP proposes an addressing target for the latter.","title":"Prior art"},{"location":"fep/fep-7502/#proposal","text":"In addition to collections and objects, Activities may additionally be addressed to a special \"authenticated\" collection, with the identifier http://www.w3.org/ns/auth/acl#AuthenticatedAgent . Activities addressed to this special URI shall be accessible to all actors, with authentication. Implementations MUST NOT deliver to the \"authenticated\" special collection; it is not capable of receiving actual activities. An activity SHOULD NOT be addressed to both \"public\" and \"authenticated\". In such a case, addressing to \"authenticated\" has no effect while also addressed to \"public\".","title":"Proposal"},{"location":"fep/fep-7502/#overview","text":"ActivityPub Clients MAY author an activity that is addressed to or cc or includes in the audience the \"authenticated agents\" special identifier. ActivityPub Servers receiving such an activity addressed to \"authenticated agents\" MUST enforce some method of authenticating actors on fetch, if the activity is persisted. (No specific method is required by this FEP, but in most practical cases it is currently sufficient to use the HTTP Signatures Cavage draft and sign the GET request with a domain-wide internal fetch actor representing the service running on that domain.) ActivityPub Federated Servers that operate as an \"instance\" receiving such an activity addressed to \"authenticated agents\" MUST NOT serve representations of the received activity to any logged-out users.","title":"Overview"},{"location":"fep/fep-7502/#_1","text":"Pixelfed intends to implement this FEP when \"signed fetch\" is enabled, such that the resulting data returned after a signed fetch does not include as:Public .","title":"\u5b9f\u88c5"},{"location":"fep/fep-7502/#terms-defined","text":"","title":"Terms defined"},{"location":"fep/fep-7502/#_2","text":"ActivityPub Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 339 kaniini, as:Authenticated proposal , 2019 WAC Sarven Capadisli, Tim Berners-Lee, Henry Story, Web Access Control , 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-7502/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-7628/","text":"FEP-7628: Move actor Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Migration of followers from one ActivityPub actor to another. History Move activity is defined in Activity Vocabulary . Mastodon started using Move activity for migrating accounts in 2019 . The activity is sent by the old server to actor's followers and actors who receive this activity un-follow the old account and follow the new account. Streams implements Nomadic Identity mechanism, that makes identity independent from a server. Nomadic accounts are currently not supported by ActivityPub but are available via the Nomad protocol . Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Linked actors One persona can be represented by one or more actors. Different actors are considered associated with one persona if and only if they are linked . Possible ways to link actors: alsoKnownAs property of an actor object. This method is used by Mastodon . FEP-c390 identity proofs. Actors are linked if they have identity proofs with the same subject property. rel-me links. Actors are linked if their profile metadata contains verified rel-me links pointing to the same website. Migration Among actors associated with a persona, there MUST be one primary actor. Migration of an account means the change of a primary actor. Move activity Move activity is used to notify other actors about the migration. It MUST have the following properties: type : the type of activity MUST be Move . actor : the actor performing the migration. object : the old primary actor ID. target : the new primary actor ID. The activity is considered valid if object and target actors are linked. Upon receiving valid Move activity, all actors following object MAY un-follow it by sending Undo(Follow) activity and MUST either send Follow activity to the target or otherwise notify the user that their contact has moved. This activity comes in two sub-types: Move sent by the old actor ( push mode ). In this case, the old server needs to be online. Move sent by the new actor ( pull mode ). In this case, the old server doesn't need to be online, but the person using the actor SHOULD have a reserve copy of the follower list. Example (activity subtype 1, push mode): { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://server1.example/activities/9b496346-fa69-40ac-bc4e-7ac06192abe1\", \"type\": \"Move\", \"actor\": \"https://server1.example/users/alice\", \"object\": \"https://server1.example/users/alice\", \"target\": \"https://server2.example/users/alice\", \"to\": \"https://www.w3.org/ns/activitystreams#Public\", \"cc\": \"https://server1.example/users/alice/followers\" } Example (activity subtype 2, pull mode): { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://server2.example/activities/9b496346-fa69-40ac-bc4e-7ac06192abe1\", \"type\": \"Move\", \"actor\": \"https://server2.example/users/alice\", \"object\": \"https://server1.example/users/alice\", \"target\": \"https://server2.example/users/alice\", \"to\": \"https://www.w3.org/ns/activitystreams#Public\", \"cc\": \"https://server2.example/users/alice/followers\" } movedTo and copiedTo properties If previous primary actor is deactivated after migration, it MUST have movedTo property containing the ID of the new primary actor. Publishers SHOULD NOT deliver activities to actor's inbox if movedTo property is present. If previous primary actor is not deactivated, copiedTo property MUST be used. movedTo The location of the new primary actor. The actor containing this property should be considered inactive. URI: https://w3id.org/fep/7628#movedTo copiedTo The location of the new primary actor. URI: https://w3id.org/fep/7628#copiedTo \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 silverpill, FEP-c390: Identity Proofs , 2022 indieweb.org editors, rel-me , 2013 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-7628: Move actor"},{"location":"fep/fep-7628/#fep-7628-move-actor","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-7628: Move actor"},{"location":"fep/fep-7628/#summary","text":"Migration of followers from one ActivityPub actor to another.","title":"Summary"},{"location":"fep/fep-7628/#history","text":"Move activity is defined in Activity Vocabulary . Mastodon started using Move activity for migrating accounts in 2019 . The activity is sent by the old server to actor's followers and actors who receive this activity un-follow the old account and follow the new account. Streams implements Nomadic Identity mechanism, that makes identity independent from a server. Nomadic accounts are currently not supported by ActivityPub but are available via the Nomad protocol .","title":"History"},{"location":"fep/fep-7628/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-7628/#linked-actors","text":"One persona can be represented by one or more actors. Different actors are considered associated with one persona if and only if they are linked . Possible ways to link actors: alsoKnownAs property of an actor object. This method is used by Mastodon . FEP-c390 identity proofs. Actors are linked if they have identity proofs with the same subject property. rel-me links. Actors are linked if their profile metadata contains verified rel-me links pointing to the same website.","title":"Linked actors"},{"location":"fep/fep-7628/#migration","text":"Among actors associated with a persona, there MUST be one primary actor. Migration of an account means the change of a primary actor.","title":"Migration"},{"location":"fep/fep-7628/#move-activity","text":"Move activity is used to notify other actors about the migration. It MUST have the following properties: type : the type of activity MUST be Move . actor : the actor performing the migration. object : the old primary actor ID. target : the new primary actor ID. The activity is considered valid if object and target actors are linked. Upon receiving valid Move activity, all actors following object MAY un-follow it by sending Undo(Follow) activity and MUST either send Follow activity to the target or otherwise notify the user that their contact has moved. This activity comes in two sub-types: Move sent by the old actor ( push mode ). In this case, the old server needs to be online. Move sent by the new actor ( pull mode ). In this case, the old server doesn't need to be online, but the person using the actor SHOULD have a reserve copy of the follower list. Example (activity subtype 1, push mode): { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://server1.example/activities/9b496346-fa69-40ac-bc4e-7ac06192abe1\", \"type\": \"Move\", \"actor\": \"https://server1.example/users/alice\", \"object\": \"https://server1.example/users/alice\", \"target\": \"https://server2.example/users/alice\", \"to\": \"https://www.w3.org/ns/activitystreams#Public\", \"cc\": \"https://server1.example/users/alice/followers\" } Example (activity subtype 2, pull mode): { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://server2.example/activities/9b496346-fa69-40ac-bc4e-7ac06192abe1\", \"type\": \"Move\", \"actor\": \"https://server2.example/users/alice\", \"object\": \"https://server1.example/users/alice\", \"target\": \"https://server2.example/users/alice\", \"to\": \"https://www.w3.org/ns/activitystreams#Public\", \"cc\": \"https://server2.example/users/alice/followers\" }","title":"Move activity"},{"location":"fep/fep-7628/#movedto-and-copiedto-properties","text":"If previous primary actor is deactivated after migration, it MUST have movedTo property containing the ID of the new primary actor. Publishers SHOULD NOT deliver activities to actor's inbox if movedTo property is present. If previous primary actor is not deactivated, copiedTo property MUST be used. movedTo The location of the new primary actor. The actor containing this property should be considered inactive. URI: https://w3id.org/fep/7628#movedTo copiedTo The location of the new primary actor. URI: https://w3id.org/fep/7628#copiedTo","title":"movedTo and copiedTo properties"},{"location":"fep/fep-7628/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 silverpill, FEP-c390: Identity Proofs , 2022 indieweb.org editors, rel-me , 2013","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-7628/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-76ea/","text":"FEP-76ea: Conversation Threads Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP defines a way to identify the conversation thread of an object with Activity Streams 2.0. Motivation Threaded conversations are a common data structure for social software. This is defined as a tree with the original post at its root, replies to that post as child nodes, all replies to those replies as their children, and so on recursively. Some social software restricts the depth of the thread, while others allow for unlimited depth. Identifying the thread that an AS2 object is part of allows for the construction of a conversation view of the thread. It is possible with Activity Streams 2.0 to construct a conversation thread by following the inReplyTo property of an object until the original post is found, and then expanding the replies property of the original post recursively. With ActivityPub, however, this can require a lot of different HTTPS requests to different servers, which can be slow and inefficient. This FEP defines an extension property, thread , that can be used to identify the conversation thread of an object. ActivityPub is the primary use case for Activity Streams 2.0, but not the only one. Where specific processing requirements of ActivityPub implementations are made, they are specifically noted. General processing hints for other use cases are also provided. Context The context URL for this FEP is https://purl.archive.org/socialweb/thread . The context is as follows: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"thr\": \"https://purl.archive.org/socialweb/thread#\", \"thread\": { \"@id\": \"thr:thread\", \"@type\": \"@id\" }, \"root\": { \"@id\": \"thr:root\", \"@type\": \"@id\" } } Terms The context defines two properties. thread The thread property is an OrderedCollection that contains all of the objects in the conversation thread. The collection is ordered in reverse chronological order, with the most recent object first. The thread collection does not directly represent the tree structure of the conversation thread; it is a flat list of objects. The tree structure can be reconstructed by following the inReplyTo and/or replies properties of each object in the collection. The thread property extends the context property from the Activity Vocabulary. The thread property does not replace the replies property of an object. replies contains the possibly curated collection of direct replies to the object; thread contains the full conversation tree, up- and down-thread. root The root property is an Object that is the original post of the conversation thread. The root property is usually the last (earliest) object in the thread collection. This property gives an easy way for a consumer to find the root post of the thread without having to search the orderedItems collection, navigate through multiple OrderedCollectionPage pages, or traverse the inReplyTo properties of the objects in the collection. Note that thread and root are partially inverse properties. The thread property of the root property of a collection SHOULD contain the id of the thread collection. However, the root property of the thread property of an object MAY not contain the object's id , because the object is in the thread, but is not the root. Thread maintenance As with the replies property, the processor implementing the original post of a thread SHOULD maintain the thread collection by adding new objects to the collection as they are received. In ActivityPub , this could be done when the processor receives an object with an inReplyTo property that matches an object in the thread collection. To facilitate collection synchronization, the processor SHOULD distribute an Add activity to the audience of the original object with the new object as the object property and the thread as the target property. However, private replies \"down-thread\" may not be addressed to the author of the original post and may not be available to the processor for the original post. The processor implementing the original post MAY curate the thread collection by filtering objects from the collection. This could be done to remove spam, off-topic, or abusive content from the thread. In ActivityPub , if an object is removed from the thread, he processor SHOULD distribute a Remove activity to the audience of the original object with the new object as the object property and the thread as the target property. The tree structure of the thread should be maintained; every object in the thread collection, except the root, should have an inReplyTo property that matches the id of another object in the collection. If the processor removes an object from the collection, it SHOULD remove all objects that are in reply to that object, and their replies, and so on. The replies property of objects in the thread collection MAY be maintained by other processors. Curation of the replies collections or of the thread collection may mean that objects may be omitted from one collection or the other. However, the replies collection of the original post SHOULD be a subset of the thread collection. \u4f8b Example 1 An example of a Note object with a thread property: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/note/123\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/user/1\", \"to\": [ \"https://remote.example/user/17\", \"https://remote.example/user/17/followers\" ], \"content\": \"I concur!\", \"thread\": \"https://remote.example/thread/117\", \"inReplyTo\": \"https://remote.example/note/117\" } Example 2 An example of an Image object with a thread property. The Image is a root or original post with no inReplyTo property: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/image/123\", \"type\": \"Image\", \"name\": \"A photo of a cat\", \"attributedTo\": \"https://example.com/user/1\", \"to\": \"https://example.com/user/1/followers\", \"url\": { \"type\": \"Link\", \"mediaType\": \"image/jpeg\", \"href\": \"https://example.com/image/123.jpg\" }, \"replies\": \"https://example.com/replies/123\", \"thread\": { \"id\": \"https://example.com/thread/123\", \"to\": \"https://example.com/user/1/followers\", \"type\": \"OrderedCollection\", \"totalItems\": 4, \"orderedItems\": [ { \"id\": \"https://fourth.example/note/721\", \"attributedTo\": \"https://fourth.example/user/4\", \"to\": [ \"https://example.com/user/1\", \"https://example.com/user/1/followers\", \"https://other.example/user/2\" ], \"inReplyTo\": \"https://other.example/note/338\" }, { \"id\": \"https://third.example/note/992\", \"attributedTo\": \"https://third.example/user/3\", \"to\": \"https://example.com/user/1\", \"inReplyTo\": \"https://example.com/image/123\" }, { \"id\": \"https://other.example/note/338\", \"attributedTo\": \"https://other.example/user/2\", \"to\": [ \"https://example.com/user/1\", \"https://example.com/user/1/followers\" ], \"inReplyTo\": \"https://example.com/image/123\" }, \"https://example.com/image/123\" ] } } Note that not all objects in the thread collection need to be addressed to the same audience. The audience of the thread collection is the audience of the original post. Example 3 This is a Note object that is a reply to two different objects, and thus is part of two different threads. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/note/789\", \"attributedTo\": \"https://example.com/user/1\", \"to\": \"as:Public\", \"content\": \"These are both good points.\", \"inReplyTo\": [ \"https://remote.example/note/57\", \"https://other.example/note/456\" ], \"thread\": [ \"https://remote.example/thread/57\", \"https://other.example/thread/456\" ] } Example 4 Objects in a thread that have been deleted by their author can be represented in the thread collection with a Tombstone object. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/note/345\", \"attributedTo\": \"https://example.com/user/1\", \"to\": \"as:Public\", \"content\": \"Activity Streams 2.0 is awesome!\", \"replies\": \"https://example.com/replies/345\", \"thread\": { \"id\": \"https://example.com/thread/345\", \"to\": \"as:Public\", \"type\": \"OrderedCollection\", \"orderedItems\": [ { \"id\": \"https://third.example/note/567\", }, { \"type\": \"Tombstone\", \"id\": \"https://remote.example/note/456\", \"inReplyTo\": \"https://example.com/note/345\", \"deleted\": \"2024-10-03T00:00:00Z\" }, \"https://example.com/note/345\" ] } } Example 5 The thread collection can be paged, as with other collections. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/note/678\", \"attributedTo\": \"https://example.com/user/1\", \"to\": \"as:Public\", \"content\": \"Is Wario A Libertarian?\", \"replies\": \"https://example.com/replies/678\", \"thread\": { \"id\": \"https://example.com/thread/678\", \"to\": \"as:Public\", \"type\": \"OrderedCollection\", \"totalItems\": 244780, \"first\": \"https://example.com/thread/678/page/12239\", \"last\": \"https://example.com/thread/678/page/1\" } } Example 6 The root property can be used to identify the original post of a thread. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/thread/654\", \"type\": \"OrderedCollection\", \"totalItems\": 457, \"first\": \"https://example.com/thread/654/page/23\", \"last\": \"https://example.com/thread/654/page/1\", \"root\": \"https://example.com/note/654\" } Security Considerations Not all objects in the thread collection may be addressed to the same audience. Representations of the collection SHOULD NOT include the content property or other sensitive information from objects in the collection that are not addressed to the recipient of the representation. In ActivityPub , the orderedItems property of the thread collection MAY be filtered for the recipient of the representation. Previous work The ostatus:conversation property is used in Mastodon and elsewhere to identify the thread of an object, but it is not necessarily dereferenceable. Some implementations of ActivityPub use the context property to represent the thread of an object. This FEP provides a more specific property, which frees up the \"intentionally vague\" context property for other uses. It also avoids the confusing clash with the @context property of JSON-LD. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-76ea: Conversation Threads"},{"location":"fep/fep-76ea/#fep-76ea-conversation-threads","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-76ea: Conversation Threads"},{"location":"fep/fep-76ea/#summary","text":"This FEP defines a way to identify the conversation thread of an object with Activity Streams 2.0.","title":"Summary"},{"location":"fep/fep-76ea/#motivation","text":"Threaded conversations are a common data structure for social software. This is defined as a tree with the original post at its root, replies to that post as child nodes, all replies to those replies as their children, and so on recursively. Some social software restricts the depth of the thread, while others allow for unlimited depth. Identifying the thread that an AS2 object is part of allows for the construction of a conversation view of the thread. It is possible with Activity Streams 2.0 to construct a conversation thread by following the inReplyTo property of an object until the original post is found, and then expanding the replies property of the original post recursively. With ActivityPub, however, this can require a lot of different HTTPS requests to different servers, which can be slow and inefficient. This FEP defines an extension property, thread , that can be used to identify the conversation thread of an object. ActivityPub is the primary use case for Activity Streams 2.0, but not the only one. Where specific processing requirements of ActivityPub implementations are made, they are specifically noted. General processing hints for other use cases are also provided.","title":"Motivation"},{"location":"fep/fep-76ea/#context","text":"The context URL for this FEP is https://purl.archive.org/socialweb/thread . The context is as follows: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"thr\": \"https://purl.archive.org/socialweb/thread#\", \"thread\": { \"@id\": \"thr:thread\", \"@type\": \"@id\" }, \"root\": { \"@id\": \"thr:root\", \"@type\": \"@id\" } }","title":"Context"},{"location":"fep/fep-76ea/#terms","text":"The context defines two properties.","title":"Terms"},{"location":"fep/fep-76ea/#thread","text":"The thread property is an OrderedCollection that contains all of the objects in the conversation thread. The collection is ordered in reverse chronological order, with the most recent object first. The thread collection does not directly represent the tree structure of the conversation thread; it is a flat list of objects. The tree structure can be reconstructed by following the inReplyTo and/or replies properties of each object in the collection. The thread property extends the context property from the Activity Vocabulary. The thread property does not replace the replies property of an object. replies contains the possibly curated collection of direct replies to the object; thread contains the full conversation tree, up- and down-thread.","title":"thread"},{"location":"fep/fep-76ea/#root","text":"The root property is an Object that is the original post of the conversation thread. The root property is usually the last (earliest) object in the thread collection. This property gives an easy way for a consumer to find the root post of the thread without having to search the orderedItems collection, navigate through multiple OrderedCollectionPage pages, or traverse the inReplyTo properties of the objects in the collection. Note that thread and root are partially inverse properties. The thread property of the root property of a collection SHOULD contain the id of the thread collection. However, the root property of the thread property of an object MAY not contain the object's id , because the object is in the thread, but is not the root.","title":"root"},{"location":"fep/fep-76ea/#thread-maintenance","text":"As with the replies property, the processor implementing the original post of a thread SHOULD maintain the thread collection by adding new objects to the collection as they are received. In ActivityPub , this could be done when the processor receives an object with an inReplyTo property that matches an object in the thread collection. To facilitate collection synchronization, the processor SHOULD distribute an Add activity to the audience of the original object with the new object as the object property and the thread as the target property. However, private replies \"down-thread\" may not be addressed to the author of the original post and may not be available to the processor for the original post. The processor implementing the original post MAY curate the thread collection by filtering objects from the collection. This could be done to remove spam, off-topic, or abusive content from the thread. In ActivityPub , if an object is removed from the thread, he processor SHOULD distribute a Remove activity to the audience of the original object with the new object as the object property and the thread as the target property. The tree structure of the thread should be maintained; every object in the thread collection, except the root, should have an inReplyTo property that matches the id of another object in the collection. If the processor removes an object from the collection, it SHOULD remove all objects that are in reply to that object, and their replies, and so on. The replies property of objects in the thread collection MAY be maintained by other processors. Curation of the replies collections or of the thread collection may mean that objects may be omitted from one collection or the other. However, the replies collection of the original post SHOULD be a subset of the thread collection.","title":"Thread maintenance"},{"location":"fep/fep-76ea/#_1","text":"","title":"\u4f8b"},{"location":"fep/fep-76ea/#example-1","text":"An example of a Note object with a thread property: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/note/123\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/user/1\", \"to\": [ \"https://remote.example/user/17\", \"https://remote.example/user/17/followers\" ], \"content\": \"I concur!\", \"thread\": \"https://remote.example/thread/117\", \"inReplyTo\": \"https://remote.example/note/117\" }","title":"Example 1"},{"location":"fep/fep-76ea/#example-2","text":"An example of an Image object with a thread property. The Image is a root or original post with no inReplyTo property: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/image/123\", \"type\": \"Image\", \"name\": \"A photo of a cat\", \"attributedTo\": \"https://example.com/user/1\", \"to\": \"https://example.com/user/1/followers\", \"url\": { \"type\": \"Link\", \"mediaType\": \"image/jpeg\", \"href\": \"https://example.com/image/123.jpg\" }, \"replies\": \"https://example.com/replies/123\", \"thread\": { \"id\": \"https://example.com/thread/123\", \"to\": \"https://example.com/user/1/followers\", \"type\": \"OrderedCollection\", \"totalItems\": 4, \"orderedItems\": [ { \"id\": \"https://fourth.example/note/721\", \"attributedTo\": \"https://fourth.example/user/4\", \"to\": [ \"https://example.com/user/1\", \"https://example.com/user/1/followers\", \"https://other.example/user/2\" ], \"inReplyTo\": \"https://other.example/note/338\" }, { \"id\": \"https://third.example/note/992\", \"attributedTo\": \"https://third.example/user/3\", \"to\": \"https://example.com/user/1\", \"inReplyTo\": \"https://example.com/image/123\" }, { \"id\": \"https://other.example/note/338\", \"attributedTo\": \"https://other.example/user/2\", \"to\": [ \"https://example.com/user/1\", \"https://example.com/user/1/followers\" ], \"inReplyTo\": \"https://example.com/image/123\" }, \"https://example.com/image/123\" ] } } Note that not all objects in the thread collection need to be addressed to the same audience. The audience of the thread collection is the audience of the original post.","title":"Example 2"},{"location":"fep/fep-76ea/#example-3","text":"This is a Note object that is a reply to two different objects, and thus is part of two different threads. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/note/789\", \"attributedTo\": \"https://example.com/user/1\", \"to\": \"as:Public\", \"content\": \"These are both good points.\", \"inReplyTo\": [ \"https://remote.example/note/57\", \"https://other.example/note/456\" ], \"thread\": [ \"https://remote.example/thread/57\", \"https://other.example/thread/456\" ] }","title":"Example 3"},{"location":"fep/fep-76ea/#example-4","text":"Objects in a thread that have been deleted by their author can be represented in the thread collection with a Tombstone object. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/note/345\", \"attributedTo\": \"https://example.com/user/1\", \"to\": \"as:Public\", \"content\": \"Activity Streams 2.0 is awesome!\", \"replies\": \"https://example.com/replies/345\", \"thread\": { \"id\": \"https://example.com/thread/345\", \"to\": \"as:Public\", \"type\": \"OrderedCollection\", \"orderedItems\": [ { \"id\": \"https://third.example/note/567\", }, { \"type\": \"Tombstone\", \"id\": \"https://remote.example/note/456\", \"inReplyTo\": \"https://example.com/note/345\", \"deleted\": \"2024-10-03T00:00:00Z\" }, \"https://example.com/note/345\" ] } }","title":"Example 4"},{"location":"fep/fep-76ea/#example-5","text":"The thread collection can be paged, as with other collections. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/note/678\", \"attributedTo\": \"https://example.com/user/1\", \"to\": \"as:Public\", \"content\": \"Is Wario A Libertarian?\", \"replies\": \"https://example.com/replies/678\", \"thread\": { \"id\": \"https://example.com/thread/678\", \"to\": \"as:Public\", \"type\": \"OrderedCollection\", \"totalItems\": 244780, \"first\": \"https://example.com/thread/678/page/12239\", \"last\": \"https://example.com/thread/678/page/1\" } }","title":"Example 5"},{"location":"fep/fep-76ea/#example-6","text":"The root property can be used to identify the original post of a thread. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/thread\" ], \"id\": \"https://example.com/thread/654\", \"type\": \"OrderedCollection\", \"totalItems\": 457, \"first\": \"https://example.com/thread/654/page/23\", \"last\": \"https://example.com/thread/654/page/1\", \"root\": \"https://example.com/note/654\" }","title":"Example 6"},{"location":"fep/fep-76ea/#security-considerations","text":"Not all objects in the thread collection may be addressed to the same audience. Representations of the collection SHOULD NOT include the content property or other sensitive information from objects in the collection that are not addressed to the recipient of the representation. In ActivityPub , the orderedItems property of the thread collection MAY be filtered for the recipient of the representation.","title":"Security Considerations"},{"location":"fep/fep-76ea/#previous-work","text":"The ostatus:conversation property is used in Mastodon and elsewhere to identify the thread of an object, but it is not necessarily dereferenceable. Some implementations of ActivityPub use the context property to represent the thread of an object. This FEP provides a more specific property, which frees up the \"intentionally vague\" context property for other uses. It also avoids the confusing clash with the @context property of JSON-LD.","title":"Previous work"},{"location":"fep/fep-76ea/#_2","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-76ea/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-7888/","text":"FEP-7888: Demystifying the context property Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary ActivityStreams Vocabulary defines the context property, but it is \"intentionally vague\". Unfortunately, this makes the definition so vague as to be practically useless. This FEP aims to provide more guidance on possible uses of the context property, as well as formalizing some best practices. Overview (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) See \"Appendix A: Rationale\" for fuller analysis of the definition, as well as use cases that can be mapped onto context . In short: It is possible for objects to exist within implicit contexts. For example, you might group all objects sharing a certain tag , or all objects having a common audience . An explicit context embodies purpose . Things grouped by the same context \"belong together\" in a way that can't be said about things grouped by the same tag . Objects with a context exist within that context, and are meant to be seen and interpreted in context of something else. In most cases, you do not want to view the object on its own; it should be viewed together with other objects, contextually. You might use context to represent a \"thread\", \"topic\", \"conversation\", \"room\", \"channel\", \"forum\", \"wall\", \"guild\", \"space\", \"project\", or so on. The requirements below can be summarized like so: Publishers can use context for signaling which objects belong together purposefully, i.e. objects that are meant to be viewed or processed together. Ideally, make the context resolve to something useful. Depending on which properties the resolved context has, various use cases can make use of those properties. For example, if the context is attributedTo some owner, others can keep that owner in the loop when interacting with their context. Similar considerations apply to followers and audience . If the context has some canonical collection associated with it that represents the contents of that context, then that collection can be used for backfill, authorization, moderation, synchronization, and so on. Consumers can use context to group related objects by the context's id . The graph source for those objects is up to you, but in the case where your source is an SQL database, it probably makes sense to have the context.id be the value of a column which is indexed so you can efficiently use a WHERE clause in your query. Declaring a context does not imply that the context owner acknowledges that object. A canonical collection can help with verifying this for the purpose of authorization or moderation. Interactions with an object that has a context might exist within that same context, or they might declare their own context, or they might not declare a context. If you're declaring someone else's context, then you might want to keep them in the loop, in the same way that you'd keep someone in the loop if you replied to their object or tagged their object. This would be signaled via context.attributedTo similarly to inReplyTo.attributedTo or tag[*].attributedTo . Publishing context When generating an object with a context as a publisher: Purpose A context SHOULD have a purpose; consider tag for looser references. Objects sharing a certain context SHOULD be strongly related and intended to be viewed in the same grouping. Dereferencing and resolving A context SHOULD be resolvable. The resolved object or link can describe the context with at least the additional information needed to fully process the activity or object. Examples of generally useful properties include but are not limited to: attributedTo denotes the authority for that context. (This authority might be a good target for addressing and delivery of related activities.) audience indicates intent for or potential interest by some entities. (These entities might be a good target for addressing and delivery of related activities.) followers signals that the context might be a followable object. (This followers collection might be a good target for addressing and delivery of related activities.) outbox might contain relevant Activities performed by the context, if it is an actor. Ideally, the resolved context SHOULD in some way have an associated Collection which can contain the related items. (The exact semantics of discovering this Collection are out of scope of this FEP.) Consuming context When encountering an object with a context as a consumer or browser: Group objects by context At minimum, you SHOULD consider the current object alongside other objects referencing the same context (by id ) instead of considering the current object independently. By default, the graph source for objects that are being considered for inclusion is arbitrary. This can be some dataset, or it can be some relevant collection's items. For example, you might conssider the outbox and/or inbox of one or more actors, or you might consider a specific property path on the context (if resolvable). Canonical collections of objects within an authoritative context If the context resolves to an object of a certain type, then that type MAY indicate that a certain relation represents a canonical Collection of all objects that the authority considers to be included. (The definition of such types and relations is out of scope of this FEP.) For authoritative contexts that include such a canonical Collection, you SHOULD NOT assume that an object has been accepted into that collection simply because it declares context . Consumers SHOULD make efforts to verify reverse claims of inclusion. If a client or user-agent is unable to verify this claim, then the client or user-agent SHOULD indicate to users that the object's claim of being included in the authoritative context is unverified. Criteria for establishing proof of inclusion in a collection is out of scope for this FEP, but might include: Viewing the collection directly and encountering the object as a collection item Querying the collection via some querying mechanism that allows determining if a given object is included in a collection. Having knowledge that the authority Added the object to the collection, with knowledge that the object wasn't subsequently Removed. Interacting with context Choosing whether to participate in the same context When encountering an object with a context and choosing to author your own object or activity that interacts with this object: You MAY copy a context as-is, if you wish for your object to be included in that same context. You MAY set your own context , if you wish for your object to exist in a different context. You MAY remove the context entirely, if you wish for your object to exist on its own. Note that context can be present on either the object, the activity, or both. It is also possible for different context references to be placed on each. This depends on how context is used. In the case of an activity wrapping an object with context, if the activity is deemed to exist in the same context as the object, then you SHOULD use the same context reference on both the object and also on its wrapping activity. Keeping relevant entities in the loop Per PUB Section 6.1 \"Client Addressing\": Clients SHOULD look at any objects attached to the new Activity via the object , target , inReplyTo and/or tag fields, retrieve their actor or attributedTo properties, and MAY also retrieve their addressing properties, and add these to the to or cc fields of the new Activity being created. Clients MAY recurse through attached objects, but if doing so, SHOULD set a limit for this recursion. (Note that this does not suggest that the client should \"unpack\" collections of actors being addressed as individual recipients). Clients MAY give the user the chance to amend this addressing in the UI. This FEP extends the recommendation to look at object , target , inReplyTo , and/or tag to also include context . If copying someone else's context, you SHOULD send your activity to the owner(s) of the context(s), defined via context.attributedTo if resolvable. This is similar to how one might address the author of an object that they are responding to via inReplyTo.attributedTo , as a social courtesy. You MAY also want to address context.followers and/or addressing properties like context.audience . Appendix A: Rationale (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) The existing definition From the current definition in VOCAB : https://www.w3.org/TR/activitystreams-vocabulary/#dfn-context Identifies the context within which the object exists or an activity was performed. The notion of \"context\" used is intentionally vague. The intended function is to serve as a means of grouping objects and activities that share a common originating context or purpose. An example could be all activities relating to a common project or event. Aside from being \"intentionally vague\", the definition is also somewhat circular; it requires knowing what a context is and having some conceptual understanding of the notion of \"context\". However, we are given some guidance towards its \"intended function\", which is to group objects by some common purpose or origin. Purpose and intent; or, why not use a tag? We might similarly use a tag for grouping objects and activities. Several fediverse projects often include a Hashtag (defined as an extension within the ActivityStreams namespace, but not actually adopted or defined formally). This Hashtag signals an intent to be included or discovered through a collection of objects bearing the same Hashtag , uniquely identified by its name . The maintenance of such implicit collections is assumed to be the responsibility of the receiving server, although an href might be provided for convenience, in order to browse the implicit collection of tagged objects as seen from that origin server. (This also makes the Hashtag a sub-type of Link .) The key property of such a tag is to signal a general, implicit association by reference. We might then consider a context to be an explicit association, but such an explicit association requires an explicit definition. The different types of context, and how they are actually the same Various dictionaries define context generally as something that helps you understand the situation. Following from this, the context should be something that helps you process the activity or object. Ignoring the context may lead to misunderstanding the activity or object; the object or activity exists within that context, and should be understood in context of that context. Specific contexts can be thought of in several applications: the \"authoritative context\" is a context in which some authority can be applied; the \"conversational context\" is a context which represents some conversation and possibly its history; the \"originating context\" is a context which represents some intended starting point that you might look at first. We might continue to articulate further types of contexts, but the general pattern that emerges is that a context exists to form a purposeful grouping, regardless of the specific purpose. For example, if we had the notion of a conversation, then we might reasonably say that someone owns this conversation and can apply their authority to it. Looking at some object or activity within this context is generally not recommended on its own; it is better to view the entire conversation or some page of it rather than viewing a singular object. Sample workflows and use-cases involving context The context may be presented using the following abstractions: A \"topic\" in a forum presentation A \"conversation\" in a social networking presentation A \"room\" in a chatting or messaging presentation A \"thread\" in any of the above contexts (forum thread, social media thread, chat thread) Contexts may be associated with other contexts: A forum topic/thread may be nested in a \"forum\" or \"forum category\", and may be nested in another parent forum as a sub-forum. A \"wall\" on a social networking profile may contain conversations, which in turn contain the posts/comments A \"guild\" or \"space\" may contain multiple chat rooms with a common audience It is also possible to not have a context. Such objects exist only in the general context of their author (via attributedTo ) or other implicit contexts, and are otherwise self-sufficient. This can include: An article published on a web site, particularly one meant to be accessible directly via a permalink A post in a blogging or microblogging environment, particularly one that does not represent a conversation, or where inReplyTo is meant only as a loose reference. An activity intended for or acting upon an object without a context Appendix B: Examples (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Example 1: A minimal example for participating in a context You encounter the following object: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-object\", \"context\": \"https://domain.example/some-context\", \"content\": \"Hello world\", \"summary\": \"<some-object> exists in <some-context> and has content saying \\\"Hello world\\\".\" } You wish to participate in the context, so you dereference the context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-context\", \"attributedTo\": \"https://domain.example/context-owner\", \"audience\": \"https://domain.example/context-audience\", \"type\": \"https://extension.example/SomeType\", \"https://extension.example/someProperty\": { \"id\": \"https://domain.example/some-context/collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [\"https://domain.example/some-object\"], }, \"summary\": \"<some-context> is a context owned by <context-owner> and with an audience of <context-audience>. It has a canonical collection <some-context/collection> which currently contains <some-object>.\" } You send your activity to the context authority, while copying their context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/your-activity\", \"actor\": \"https://domain.example/you\", \"type\": \"Create\", \"object\": { \"id\": \"https://domain.example/your-object\", \"context\": \"https://domain.example/some-context\", \"content\": \"Hello!\" }, \"audience\": [\"https://domain.example/context-owner\", \"https://domain.example/context-audience\"], \"summary\": \"<you> Created <your-object> in <some-context>, and are delivering this activity addressing <context-owner> and <context-audience>.\" } The context authority then might forward this activity to the context audience. The context authority also might add your object or message to the context's canonical collection: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/their-activity\", \"actor\": \"https://domain.example/context-owner\", \"type\": \"Add\", \"object\": \"https://domain.example/your-object\", \"target\": \"https://domain.example/some-context/collection\", \"audience\": [ \"https://domain.example/context-owner-followers\", \"https://domain.example/context-audience\", \"https://domain.example/you\", // to keep you in the loop \"https://domain.example/your-followers\" // for inbox forwarding ], \"summary\": \"The <context-owner> Added <your-object> to <some-context/collection>, and they are delivering this activity addressing their followers, the <context-audience>, <you>, and <your-followers>.\" } The resulting state of the context's canonical collection is now like so: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-context\", \"attributedTo\": \"https://domain.example/context-owner\", \"audience\": \"https://domain.example/context-audience\", \"type\": \"https://extension.example/SomeType\", \"https://extension.example/someProperty\": { \"id\": \"https://domain.example/some-context/collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/some-object\", \"https://domain.example/your-object\" ], }, \"summary\": \"<some-context/collection> now contains <some-object> and <your-object> after the latter has been Added to the OrderedCollection by <context-owner>.\" } Third-party observers (such as members of https://domain.example/context-audience ) can validate or identify the Add activity as modifying a canonical collection by using the following checks: Add.actor == target.attributedTo (the actor is allowed to modify a collection that they own) target == object.context (the object is being added into its declared context) Alternatively, observers can use the Add as a signal to invalidate their cache of the canonical collection and refetch it. Example 2: Choosing not to participate in the same context You encounter the following object: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-object\", \"context\": \"https://domain.example/some-context\", \"content\": \"Hello world\", \"summary\": \"<some-object> exists in <some-context> and has content saying \\\"Hello world\\\".\" } You want to establish your own context, separately from the current object's context, so you create a canonical collection to be referenced from a context object, then create that context object. This results in two activities: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/creating-a-context-collection\", \"actor\": \"https://domain.example/you\", \"type\": \"Create\", \"object\": { \"id\": \"https://domain.example/a-different-context/collection\", \"type\": \"OrderedCollection\", \"attributedTo\": \"https://domain.example/you\" }, \"summary\": \"<you> Created <a-different-context/collection>, which is an OrderedCollection.\" } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/creating-a-different-context\", \"actor\": \"https://domain.example/you\", \"type\": \"Create\", \"object\": { \"id\": \"https://domain.example/a-different-context\", \"type\": \"https://extension.example/SomeType\", \"https://extension.example/someProperty\": \"https://domain.example/a-different-context/collection\", \"attributedTo\": \"https://domain.example/you\" }, \"summary\": \"<you> Created <a-different-context>, which is SomeType and has an associated OrderedCollection via someProperty.\" } You can now set this new context on your interaction, with the intent that your interaction is shown in a separate grouping from the original object: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/creating-a-post-in-a-different-context\", \"actor\": \"https://domain.example/you\", \"type\": \"Create\", \"object\": { \"id\": \"https://domain.example/a-post-in-a-different-context\", \"content\": \"Starting a new thread to say \\\"Hello World\\\" in a different context.\", \"inReplyTo\": { \"id\": \"https://domain.example/some-object\", \"context\": \"https://domain.example/some-context\", \"content\": \"Hello world\", \"summary\": \"<some-object> exists in <some-context> and has content saying \\\"Hello world\\\".\" }, \"context\": \"https://domain.example/a-different-context\" }, \"summary\": \"<you> Created <a-post-in-a-different-context> which is inReplyTo <some-object> in <some-context>, but your object is in <a-different-context>.\" } You add your object to your own context's canonical collection: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/their-activity\", \"actor\": \"https://domain.example/you\", \"type\": \"Add\", \"object\": \"https://domain.example/a-post-in-a-different-context\", \"target\": \"https://domain.example/a-different-context/collection\", \"summary\": \"<you> Added <a-post-in-a-different-context> to <a-different-context/collection>.\" } The original object's context is unchanged: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-context\", \"attributedTo\": \"https://domain.example/context-owner\", \"audience\": \"https://domain.example/context-audience\", \"type\": \"https://extension.example/SomeType\", \"https://extension.example/someProperty\": { \"id\": \"https://domain.example/some-context/collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [\"https://domain.example/some-object\"], }, \"summary\": \"<some-context> is a context owned by <context-owner> and with an audience of <context-audience>. It has a canonical collection <some-context/collection> which currently contains <some-object>.\" } Your context now looks like this: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/a-different-context\", \"attributedTo\": \"https://domain.example/you\", \"audience\": \"https://domain.example/some-audience\", \"type\": \"https://extension.example/SomeType\", \"https://extension.example/someProperty\": { \"id\": \"https://domain.example/a-different-context/collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [\"https://domain.example/a-post-in-a-different-context\"], }, \"summary\": \"<a-different-context> is a context owned by <you> and with an audience of <some-audience>. It has a canonical collection <a-different-context/collection> which currently contains <a-post-in-a-different-context>.\" } Example 3: Encountering multiple contexts { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-object\", \"context\": [\"https://domain.example/some-context\", \"https://domain.example/some-other-context\"] \"content\": \"Hello world\", \"summary\": \"<some-object> exists in <some-context> and <some-other-context> and has content saying \\\"Hello world\\\".\" } You dereference the two contexts: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-context\", \"attributedTo\": \"https://domain.example/context-owner\", \"type\": \"Object\", \"summary\": \"<some-context> is an Object owned by <context-owner>.\", \"https://extension.example/someProperty\": \"https://domain.example/some-context/collection\" } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-other-context\", \"attributedTo\": \"https://domain.example/other-context-owner\", \"type\": \"Object\", \"summary\": \"<some-other-context> is an Object owned by <other-context-owner>.\", \"https://extension.example/someProperty\": \"https://domain.example/some-other-context/collection\" } You can now choose to participate in either context, both contexts, a different context, or no context. To participate in both contexts: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/your-activity\", \"actor\": \"https://domain.example/you\", \"type\": \"Create\", \"object\": { \"id\": \"https://domain.example/your-object\", \"context\": [\"https://domain.example/some-context\", \"https://domain.example/some-other-context\"], \"content\": \"Hello!\" }, \"audience\": [\"https://domain.example/context-owner\", \"https://domain.example/other-context-owner\"], \"summary\": \"<you> Created <your-object> in <some-context> and <some-other-context>, and are delivering this activity addressing <context-owner> and <other-context-owner>.\" } It may be that you are refused addition into some context, but granted addition into some other context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/context-1-activity\", \"actor\": \"https://domain.example/context-owner\", \"type\": \"Reject\", \"object\": \"https://domain.example/your-activity\", \"summary\": \"<context-owner> Rejected <your-activity>.\", \"content\": \"Sorry, I don't want to add your object to my context.\" } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/context-2-activity\", \"actor\": \"https://domain.example/other-context-owner\", \"type\": \"Add\", \"object\": \"https://domain.example/your-object\", \"target\": \"https://domain.example/some-other-context/collection\", \"summary\": \"<other-context-owner> Added <your-object> to <some-other-context>.\" } A third-party observer encounters your object: { \"id\": \"https://domain.example/your-object\", \"context\": [\"https://domain.example/some-context\", \"https://domain.example/some-other-context\"], \"content\": \"Hello!\" } They attempt to verify that your object is included in the first context, and find that it is not included: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-context/collection\", \"attributedTo\": \"https://domain.example/other-context-owner\", \"type\": \"OrderedCollection\", \"orderedItems\": [\"https://domain.example/some-object\", \"https://domain.example/your-object\"], \"summary\": \"<some-other-context/collection> is an OrderedCollection owned by <other-context-owner>. It currently contains <some-object> and <your-object>.\" } The third-party observer attempts to verify that your object is included in the second context, and finds that it is included: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-other-context/collection\", \"attributedTo\": \"https://domain.example/other-context-owner\", \"type\": \"OrderedCollection\", \"orderedItems\": [\"https://domain.example/some-other-object\", \"https://domain.example/your-object\"], \"summary\": \"<some-other-context/collection> is an OrderedCollection owned by <other-context-owner>. It currently contains <some-other-object> and <your-object>.\" } The third-party observer's client renders your object as unverifiably within some context, and verifiably within some other context. <you> Created <your-object> <your-object> has content: \"Hello!\" <your-object> is part of the following contexts: - <some-context> (\u2753 unverified) - <some-other-context> (\u2705 verified) The third-party observer may then choose to navigate to (and possibly participate in) the latter context. Appendix C: Creating and maintaining contexts and their associated collections using ActivityPub C2S (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Because PUB does not define the use of context as a property or the notion of a canonical collection, it is up to ActivityPub Clients to manage contexts and their canonical collections for themselves. The following algorithm may be used to create an object within a context that has a canonical collection: Create the canonical Collection that will be associated with the context. Save the generated Collection id to be used in the next step. Create the Object that will be used as context . If the Object has a canonical Collection associated with it, then specify the appropriate property relation using the id from the previous step. Save the generated context id to be used in the next step. Create the Object that will exist within the context, and specify the context as the id from the previous step. Set an appropriate audience or use to / cc to deliver the Create activity as-is. Save the generated object id to be used in the next step. Add the Object to the context's canonical Collection, using the id s obtained from the responses for steps 1 and 3. You may wish to deliver this Add activity via to / cc / audience targeting your intended recipients, especially if you did not deliver the Create Object from step 3. \u53c2\u8003\u6587\u732e VOCAB James M Snell, Evan Prodromou, Activity Vocabulary , 2017 PUB Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-7888: Demystifying the context property"},{"location":"fep/fep-7888/#fep-7888-demystifying-the-context-property","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-7888: Demystifying the context property"},{"location":"fep/fep-7888/#summary","text":"ActivityStreams Vocabulary defines the context property, but it is \"intentionally vague\". Unfortunately, this makes the definition so vague as to be practically useless. This FEP aims to provide more guidance on possible uses of the context property, as well as formalizing some best practices.","title":"Summary"},{"location":"fep/fep-7888/#overview","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) See \"Appendix A: Rationale\" for fuller analysis of the definition, as well as use cases that can be mapped onto context . In short: It is possible for objects to exist within implicit contexts. For example, you might group all objects sharing a certain tag , or all objects having a common audience . An explicit context embodies purpose . Things grouped by the same context \"belong together\" in a way that can't be said about things grouped by the same tag . Objects with a context exist within that context, and are meant to be seen and interpreted in context of something else. In most cases, you do not want to view the object on its own; it should be viewed together with other objects, contextually. You might use context to represent a \"thread\", \"topic\", \"conversation\", \"room\", \"channel\", \"forum\", \"wall\", \"guild\", \"space\", \"project\", or so on. The requirements below can be summarized like so: Publishers can use context for signaling which objects belong together purposefully, i.e. objects that are meant to be viewed or processed together. Ideally, make the context resolve to something useful. Depending on which properties the resolved context has, various use cases can make use of those properties. For example, if the context is attributedTo some owner, others can keep that owner in the loop when interacting with their context. Similar considerations apply to followers and audience . If the context has some canonical collection associated with it that represents the contents of that context, then that collection can be used for backfill, authorization, moderation, synchronization, and so on. Consumers can use context to group related objects by the context's id . The graph source for those objects is up to you, but in the case where your source is an SQL database, it probably makes sense to have the context.id be the value of a column which is indexed so you can efficiently use a WHERE clause in your query. Declaring a context does not imply that the context owner acknowledges that object. A canonical collection can help with verifying this for the purpose of authorization or moderation. Interactions with an object that has a context might exist within that same context, or they might declare their own context, or they might not declare a context. If you're declaring someone else's context, then you might want to keep them in the loop, in the same way that you'd keep someone in the loop if you replied to their object or tagged their object. This would be signaled via context.attributedTo similarly to inReplyTo.attributedTo or tag[*].attributedTo .","title":"Overview"},{"location":"fep/fep-7888/#publishing-context","text":"When generating an object with a context as a publisher:","title":"Publishing context"},{"location":"fep/fep-7888/#purpose","text":"A context SHOULD have a purpose; consider tag for looser references. Objects sharing a certain context SHOULD be strongly related and intended to be viewed in the same grouping.","title":"Purpose"},{"location":"fep/fep-7888/#dereferencing-and-resolving","text":"A context SHOULD be resolvable. The resolved object or link can describe the context with at least the additional information needed to fully process the activity or object. Examples of generally useful properties include but are not limited to: attributedTo denotes the authority for that context. (This authority might be a good target for addressing and delivery of related activities.) audience indicates intent for or potential interest by some entities. (These entities might be a good target for addressing and delivery of related activities.) followers signals that the context might be a followable object. (This followers collection might be a good target for addressing and delivery of related activities.) outbox might contain relevant Activities performed by the context, if it is an actor. Ideally, the resolved context SHOULD in some way have an associated Collection which can contain the related items. (The exact semantics of discovering this Collection are out of scope of this FEP.)","title":"Dereferencing and resolving"},{"location":"fep/fep-7888/#consuming-context","text":"When encountering an object with a context as a consumer or browser:","title":"Consuming context"},{"location":"fep/fep-7888/#group-objects-by-context","text":"At minimum, you SHOULD consider the current object alongside other objects referencing the same context (by id ) instead of considering the current object independently. By default, the graph source for objects that are being considered for inclusion is arbitrary. This can be some dataset, or it can be some relevant collection's items. For example, you might conssider the outbox and/or inbox of one or more actors, or you might consider a specific property path on the context (if resolvable).","title":"Group objects by context"},{"location":"fep/fep-7888/#canonical-collections-of-objects-within-an-authoritative-context","text":"If the context resolves to an object of a certain type, then that type MAY indicate that a certain relation represents a canonical Collection of all objects that the authority considers to be included. (The definition of such types and relations is out of scope of this FEP.) For authoritative contexts that include such a canonical Collection, you SHOULD NOT assume that an object has been accepted into that collection simply because it declares context . Consumers SHOULD make efforts to verify reverse claims of inclusion. If a client or user-agent is unable to verify this claim, then the client or user-agent SHOULD indicate to users that the object's claim of being included in the authoritative context is unverified. Criteria for establishing proof of inclusion in a collection is out of scope for this FEP, but might include: Viewing the collection directly and encountering the object as a collection item Querying the collection via some querying mechanism that allows determining if a given object is included in a collection. Having knowledge that the authority Added the object to the collection, with knowledge that the object wasn't subsequently Removed.","title":"Canonical collections of objects within an authoritative context"},{"location":"fep/fep-7888/#interacting-with-context","text":"","title":"Interacting with context"},{"location":"fep/fep-7888/#choosing-whether-to-participate-in-the-same-context","text":"When encountering an object with a context and choosing to author your own object or activity that interacts with this object: You MAY copy a context as-is, if you wish for your object to be included in that same context. You MAY set your own context , if you wish for your object to exist in a different context. You MAY remove the context entirely, if you wish for your object to exist on its own. Note that context can be present on either the object, the activity, or both. It is also possible for different context references to be placed on each. This depends on how context is used. In the case of an activity wrapping an object with context, if the activity is deemed to exist in the same context as the object, then you SHOULD use the same context reference on both the object and also on its wrapping activity.","title":"Choosing whether to participate in the same context"},{"location":"fep/fep-7888/#keeping-relevant-entities-in-the-loop","text":"Per PUB Section 6.1 \"Client Addressing\": Clients SHOULD look at any objects attached to the new Activity via the object , target , inReplyTo and/or tag fields, retrieve their actor or attributedTo properties, and MAY also retrieve their addressing properties, and add these to the to or cc fields of the new Activity being created. Clients MAY recurse through attached objects, but if doing so, SHOULD set a limit for this recursion. (Note that this does not suggest that the client should \"unpack\" collections of actors being addressed as individual recipients). Clients MAY give the user the chance to amend this addressing in the UI. This FEP extends the recommendation to look at object , target , inReplyTo , and/or tag to also include context . If copying someone else's context, you SHOULD send your activity to the owner(s) of the context(s), defined via context.attributedTo if resolvable. This is similar to how one might address the author of an object that they are responding to via inReplyTo.attributedTo , as a social courtesy. You MAY also want to address context.followers and/or addressing properties like context.audience .","title":"Keeping relevant entities in the loop"},{"location":"fep/fep-7888/#appendix-a-rationale","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002)","title":"Appendix A: Rationale"},{"location":"fep/fep-7888/#the-existing-definition","text":"From the current definition in VOCAB : https://www.w3.org/TR/activitystreams-vocabulary/#dfn-context Identifies the context within which the object exists or an activity was performed. The notion of \"context\" used is intentionally vague. The intended function is to serve as a means of grouping objects and activities that share a common originating context or purpose. An example could be all activities relating to a common project or event. Aside from being \"intentionally vague\", the definition is also somewhat circular; it requires knowing what a context is and having some conceptual understanding of the notion of \"context\". However, we are given some guidance towards its \"intended function\", which is to group objects by some common purpose or origin.","title":"The existing definition"},{"location":"fep/fep-7888/#purpose-and-intent-or-why-not-use-a-tag","text":"We might similarly use a tag for grouping objects and activities. Several fediverse projects often include a Hashtag (defined as an extension within the ActivityStreams namespace, but not actually adopted or defined formally). This Hashtag signals an intent to be included or discovered through a collection of objects bearing the same Hashtag , uniquely identified by its name . The maintenance of such implicit collections is assumed to be the responsibility of the receiving server, although an href might be provided for convenience, in order to browse the implicit collection of tagged objects as seen from that origin server. (This also makes the Hashtag a sub-type of Link .) The key property of such a tag is to signal a general, implicit association by reference. We might then consider a context to be an explicit association, but such an explicit association requires an explicit definition.","title":"Purpose and intent; or, why not use a tag?"},{"location":"fep/fep-7888/#the-different-types-of-context-and-how-they-are-actually-the-same","text":"Various dictionaries define context generally as something that helps you understand the situation. Following from this, the context should be something that helps you process the activity or object. Ignoring the context may lead to misunderstanding the activity or object; the object or activity exists within that context, and should be understood in context of that context. Specific contexts can be thought of in several applications: the \"authoritative context\" is a context in which some authority can be applied; the \"conversational context\" is a context which represents some conversation and possibly its history; the \"originating context\" is a context which represents some intended starting point that you might look at first. We might continue to articulate further types of contexts, but the general pattern that emerges is that a context exists to form a purposeful grouping, regardless of the specific purpose. For example, if we had the notion of a conversation, then we might reasonably say that someone owns this conversation and can apply their authority to it. Looking at some object or activity within this context is generally not recommended on its own; it is better to view the entire conversation or some page of it rather than viewing a singular object.","title":"The different types of context, and how they are actually the same"},{"location":"fep/fep-7888/#sample-workflows-and-use-cases-involving-context","text":"The context may be presented using the following abstractions: A \"topic\" in a forum presentation A \"conversation\" in a social networking presentation A \"room\" in a chatting or messaging presentation A \"thread\" in any of the above contexts (forum thread, social media thread, chat thread) Contexts may be associated with other contexts: A forum topic/thread may be nested in a \"forum\" or \"forum category\", and may be nested in another parent forum as a sub-forum. A \"wall\" on a social networking profile may contain conversations, which in turn contain the posts/comments A \"guild\" or \"space\" may contain multiple chat rooms with a common audience It is also possible to not have a context. Such objects exist only in the general context of their author (via attributedTo ) or other implicit contexts, and are otherwise self-sufficient. This can include: An article published on a web site, particularly one meant to be accessible directly via a permalink A post in a blogging or microblogging environment, particularly one that does not represent a conversation, or where inReplyTo is meant only as a loose reference. An activity intended for or acting upon an object without a context","title":"Sample workflows and use-cases involving context"},{"location":"fep/fep-7888/#appendix-b-examples","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002)","title":"Appendix B: Examples"},{"location":"fep/fep-7888/#example-1-a-minimal-example-for-participating-in-a-context","text":"You encounter the following object: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-object\", \"context\": \"https://domain.example/some-context\", \"content\": \"Hello world\", \"summary\": \"<some-object> exists in <some-context> and has content saying \\\"Hello world\\\".\" } You wish to participate in the context, so you dereference the context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-context\", \"attributedTo\": \"https://domain.example/context-owner\", \"audience\": \"https://domain.example/context-audience\", \"type\": \"https://extension.example/SomeType\", \"https://extension.example/someProperty\": { \"id\": \"https://domain.example/some-context/collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [\"https://domain.example/some-object\"], }, \"summary\": \"<some-context> is a context owned by <context-owner> and with an audience of <context-audience>. It has a canonical collection <some-context/collection> which currently contains <some-object>.\" } You send your activity to the context authority, while copying their context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/your-activity\", \"actor\": \"https://domain.example/you\", \"type\": \"Create\", \"object\": { \"id\": \"https://domain.example/your-object\", \"context\": \"https://domain.example/some-context\", \"content\": \"Hello!\" }, \"audience\": [\"https://domain.example/context-owner\", \"https://domain.example/context-audience\"], \"summary\": \"<you> Created <your-object> in <some-context>, and are delivering this activity addressing <context-owner> and <context-audience>.\" } The context authority then might forward this activity to the context audience. The context authority also might add your object or message to the context's canonical collection: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/their-activity\", \"actor\": \"https://domain.example/context-owner\", \"type\": \"Add\", \"object\": \"https://domain.example/your-object\", \"target\": \"https://domain.example/some-context/collection\", \"audience\": [ \"https://domain.example/context-owner-followers\", \"https://domain.example/context-audience\", \"https://domain.example/you\", // to keep you in the loop \"https://domain.example/your-followers\" // for inbox forwarding ], \"summary\": \"The <context-owner> Added <your-object> to <some-context/collection>, and they are delivering this activity addressing their followers, the <context-audience>, <you>, and <your-followers>.\" } The resulting state of the context's canonical collection is now like so: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-context\", \"attributedTo\": \"https://domain.example/context-owner\", \"audience\": \"https://domain.example/context-audience\", \"type\": \"https://extension.example/SomeType\", \"https://extension.example/someProperty\": { \"id\": \"https://domain.example/some-context/collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [ \"https://domain.example/some-object\", \"https://domain.example/your-object\" ], }, \"summary\": \"<some-context/collection> now contains <some-object> and <your-object> after the latter has been Added to the OrderedCollection by <context-owner>.\" } Third-party observers (such as members of https://domain.example/context-audience ) can validate or identify the Add activity as modifying a canonical collection by using the following checks: Add.actor == target.attributedTo (the actor is allowed to modify a collection that they own) target == object.context (the object is being added into its declared context) Alternatively, observers can use the Add as a signal to invalidate their cache of the canonical collection and refetch it.","title":"Example 1: A minimal example for participating in a context"},{"location":"fep/fep-7888/#example-2-choosing-not-to-participate-in-the-same-context","text":"You encounter the following object: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-object\", \"context\": \"https://domain.example/some-context\", \"content\": \"Hello world\", \"summary\": \"<some-object> exists in <some-context> and has content saying \\\"Hello world\\\".\" } You want to establish your own context, separately from the current object's context, so you create a canonical collection to be referenced from a context object, then create that context object. This results in two activities: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/creating-a-context-collection\", \"actor\": \"https://domain.example/you\", \"type\": \"Create\", \"object\": { \"id\": \"https://domain.example/a-different-context/collection\", \"type\": \"OrderedCollection\", \"attributedTo\": \"https://domain.example/you\" }, \"summary\": \"<you> Created <a-different-context/collection>, which is an OrderedCollection.\" } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/creating-a-different-context\", \"actor\": \"https://domain.example/you\", \"type\": \"Create\", \"object\": { \"id\": \"https://domain.example/a-different-context\", \"type\": \"https://extension.example/SomeType\", \"https://extension.example/someProperty\": \"https://domain.example/a-different-context/collection\", \"attributedTo\": \"https://domain.example/you\" }, \"summary\": \"<you> Created <a-different-context>, which is SomeType and has an associated OrderedCollection via someProperty.\" } You can now set this new context on your interaction, with the intent that your interaction is shown in a separate grouping from the original object: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/creating-a-post-in-a-different-context\", \"actor\": \"https://domain.example/you\", \"type\": \"Create\", \"object\": { \"id\": \"https://domain.example/a-post-in-a-different-context\", \"content\": \"Starting a new thread to say \\\"Hello World\\\" in a different context.\", \"inReplyTo\": { \"id\": \"https://domain.example/some-object\", \"context\": \"https://domain.example/some-context\", \"content\": \"Hello world\", \"summary\": \"<some-object> exists in <some-context> and has content saying \\\"Hello world\\\".\" }, \"context\": \"https://domain.example/a-different-context\" }, \"summary\": \"<you> Created <a-post-in-a-different-context> which is inReplyTo <some-object> in <some-context>, but your object is in <a-different-context>.\" } You add your object to your own context's canonical collection: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/their-activity\", \"actor\": \"https://domain.example/you\", \"type\": \"Add\", \"object\": \"https://domain.example/a-post-in-a-different-context\", \"target\": \"https://domain.example/a-different-context/collection\", \"summary\": \"<you> Added <a-post-in-a-different-context> to <a-different-context/collection>.\" } The original object's context is unchanged: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-context\", \"attributedTo\": \"https://domain.example/context-owner\", \"audience\": \"https://domain.example/context-audience\", \"type\": \"https://extension.example/SomeType\", \"https://extension.example/someProperty\": { \"id\": \"https://domain.example/some-context/collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [\"https://domain.example/some-object\"], }, \"summary\": \"<some-context> is a context owned by <context-owner> and with an audience of <context-audience>. It has a canonical collection <some-context/collection> which currently contains <some-object>.\" } Your context now looks like this: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/a-different-context\", \"attributedTo\": \"https://domain.example/you\", \"audience\": \"https://domain.example/some-audience\", \"type\": \"https://extension.example/SomeType\", \"https://extension.example/someProperty\": { \"id\": \"https://domain.example/a-different-context/collection\", \"type\": \"OrderedCollection\", \"orderedItems\": [\"https://domain.example/a-post-in-a-different-context\"], }, \"summary\": \"<a-different-context> is a context owned by <you> and with an audience of <some-audience>. It has a canonical collection <a-different-context/collection> which currently contains <a-post-in-a-different-context>.\" }","title":"Example 2: Choosing not to participate in the same context"},{"location":"fep/fep-7888/#example-3-encountering-multiple-contexts","text":"{ \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-object\", \"context\": [\"https://domain.example/some-context\", \"https://domain.example/some-other-context\"] \"content\": \"Hello world\", \"summary\": \"<some-object> exists in <some-context> and <some-other-context> and has content saying \\\"Hello world\\\".\" } You dereference the two contexts: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-context\", \"attributedTo\": \"https://domain.example/context-owner\", \"type\": \"Object\", \"summary\": \"<some-context> is an Object owned by <context-owner>.\", \"https://extension.example/someProperty\": \"https://domain.example/some-context/collection\" } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-other-context\", \"attributedTo\": \"https://domain.example/other-context-owner\", \"type\": \"Object\", \"summary\": \"<some-other-context> is an Object owned by <other-context-owner>.\", \"https://extension.example/someProperty\": \"https://domain.example/some-other-context/collection\" } You can now choose to participate in either context, both contexts, a different context, or no context. To participate in both contexts: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/your-activity\", \"actor\": \"https://domain.example/you\", \"type\": \"Create\", \"object\": { \"id\": \"https://domain.example/your-object\", \"context\": [\"https://domain.example/some-context\", \"https://domain.example/some-other-context\"], \"content\": \"Hello!\" }, \"audience\": [\"https://domain.example/context-owner\", \"https://domain.example/other-context-owner\"], \"summary\": \"<you> Created <your-object> in <some-context> and <some-other-context>, and are delivering this activity addressing <context-owner> and <other-context-owner>.\" } It may be that you are refused addition into some context, but granted addition into some other context: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/context-1-activity\", \"actor\": \"https://domain.example/context-owner\", \"type\": \"Reject\", \"object\": \"https://domain.example/your-activity\", \"summary\": \"<context-owner> Rejected <your-activity>.\", \"content\": \"Sorry, I don't want to add your object to my context.\" } { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/context-2-activity\", \"actor\": \"https://domain.example/other-context-owner\", \"type\": \"Add\", \"object\": \"https://domain.example/your-object\", \"target\": \"https://domain.example/some-other-context/collection\", \"summary\": \"<other-context-owner> Added <your-object> to <some-other-context>.\" } A third-party observer encounters your object: { \"id\": \"https://domain.example/your-object\", \"context\": [\"https://domain.example/some-context\", \"https://domain.example/some-other-context\"], \"content\": \"Hello!\" } They attempt to verify that your object is included in the first context, and find that it is not included: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-context/collection\", \"attributedTo\": \"https://domain.example/other-context-owner\", \"type\": \"OrderedCollection\", \"orderedItems\": [\"https://domain.example/some-object\", \"https://domain.example/your-object\"], \"summary\": \"<some-other-context/collection> is an OrderedCollection owned by <other-context-owner>. It currently contains <some-object> and <your-object>.\" } The third-party observer attempts to verify that your object is included in the second context, and finds that it is included: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://domain.example/some-other-context/collection\", \"attributedTo\": \"https://domain.example/other-context-owner\", \"type\": \"OrderedCollection\", \"orderedItems\": [\"https://domain.example/some-other-object\", \"https://domain.example/your-object\"], \"summary\": \"<some-other-context/collection> is an OrderedCollection owned by <other-context-owner>. It currently contains <some-other-object> and <your-object>.\" } The third-party observer's client renders your object as unverifiably within some context, and verifiably within some other context. <you> Created <your-object> <your-object> has content: \"Hello!\" <your-object> is part of the following contexts: - <some-context> (\u2753 unverified) - <some-other-context> (\u2705 verified) The third-party observer may then choose to navigate to (and possibly participate in) the latter context.","title":"Example 3: Encountering multiple contexts"},{"location":"fep/fep-7888/#appendix-c-creating-and-maintaining-contexts-and-their-associated-collections-using-activitypub-c2s","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Because PUB does not define the use of context as a property or the notion of a canonical collection, it is up to ActivityPub Clients to manage contexts and their canonical collections for themselves. The following algorithm may be used to create an object within a context that has a canonical collection: Create the canonical Collection that will be associated with the context. Save the generated Collection id to be used in the next step. Create the Object that will be used as context . If the Object has a canonical Collection associated with it, then specify the appropriate property relation using the id from the previous step. Save the generated context id to be used in the next step. Create the Object that will exist within the context, and specify the context as the id from the previous step. Set an appropriate audience or use to / cc to deliver the Create activity as-is. Save the generated object id to be used in the next step. Add the Object to the context's canonical Collection, using the id s obtained from the responses for steps 1 and 3. You may wish to deliver this Add activity via to / cc / audience targeting your intended recipients, especially if you did not deliver the Create Object from step 3.","title":"Appendix C: Creating and maintaining contexts and their associated collections using ActivityPub C2S"},{"location":"fep/fep-7888/#_1","text":"VOCAB James M Snell, Evan Prodromou, Activity Vocabulary , 2017 PUB Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-7888/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-7952/","text":"FEP-7952: Roadmap For Actor and Object Portability Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Portability : A set of design choices, data models, and protocols, that enable an end-user to automatically migrate from one service provider to another with the least amount of data loss and service disruption , including loss of or disruption to the user's social graph (Followers and Following collections, etc). We focus on automated migration because the option of fully manual migration always exists, such as re-typing all of one's messages and content, manually re-adding everyone to one's following collection, manually contacting everyone on one's former followers list and asking them to re-follow, and so on. However, that's an extreme failure state in usability terms; we want to avoid that. This FEP targets two main categories of migration, covering user stories 1A-1F and 2 + 3 in FEP-73cd: User Migration Stories , respectively. It also draws inspiration from an earlier information document, FEP-cd47: Federation-friendly Addressing and Deduplication Use-Cases . Migration from a live (cooperating) server Note that the data handling and formatting recommendations made here will be strictly complementary to the in-progress LOLA proposal , which target the same user stories. Migration from a backup/export produced by a dead (or non-cooperating) server Current Approaches Most current Fediverse implementations tend to follow a pattern of comprehensive service providers (or instances ) that bundle the following concerns into a single service running on a web domain: Identity hosting (hosting of the Actor profile object, which serves as the source of truth for all others in the list) Authentication and authorship/provenance of objects Key management (used for HTTP Signatures for Server to Server request authentication) ActivityPub Object and Collection storage (typically in a database) Message Transfer Services (hosting of inboxes and outboxes, delivering of outgoing objects, notifications, etc) Instance-based content moderation Community discovery (via the instance's Local feed) Front-end clients, i.e. \u201cwebsite\u201d and/or mobile app (most current implementations bundle the backend system with a made-for-purpose front end that runs off the same server) This tight coupling of concerns constrains the possibilities for migrating from a live server, and the daunting task of automating migrations to other, less-bundled architectures has yet to be attempted. Its strict reliance on interactive HTTP signatures in concern #2 also excludes migration from a dead server altogether, severely degrading user experience when servers go offline. For example, a typical current Move Actor implementation (such as the one implemented by Mastodon , or specified in FEP-7628 ) only assists the user with automatically migrating their Followers list (by setting up a bi-directional alsoKnownAs links and sending the Move activity to all of their followers). In addition, some implementations allow the manual export and re-import of the Following lists, mutes, blocks and bookmarks. However, important content like posts, media attachments, reactions, reposts and so on, does not get automatically transferred. This FEP proposes a roadmap (a set of steps, design concepts, and recommendations) that enables more complete live migrations, as well as enabling migrations from dead server backups. Roadmap For Portability The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC-2119 . 1. Unbundle the services and concerns of a typical instance Sign everything : Recognize client-side cryptographic signatures as proof of authorship, in addition to the current practice of relying solely on the instance URL: add verification key(s) to the Actor object via FEP-521a Sign individual activities using the same key(s), as specified in FEP-8b32: Object Integrity Proofs B.Y.O. Actor ID : Using Object Integrity proofs enables Identity Hosting to be separated from the other instance concerns. Actor profiles can now be hosted separately from the instance, which in turn enables service providers to offer their users a \u201cBYO (Bring Your Own) domain name\u201d feature. Separate Inbox/Outbox : (Optional) The previous steps enable message transfer and Inbox/Outbox hosting to be outsourced to separate service providers (the Actor profile links to these in the usual manner). Separate Object and Collection hosting : (Optional) Similarly, AP Objects and Collections can now be stored on domains separate from the Actor's domain (since authorship and controller-ship can be proven cryptographically, in a domain-independent way). This enables the user to migrate storage service providers without having to change their Actor ID. 2. Implement Portable (migration-stable) Object IDs Separating the object storage provider from the Actor profile hosting provider enables the implementation of Object IDs that can remain unchanged through migrations and export/import cycles. Specifically, we're looking for Object IDs that remain unchanged even after migrating the objects to be hosted at a different storage provider. There are several methods of achieving these types of portable IDs, including: FEP-ef61: Portable Objects , which introduces a new ap:// URI scheme. Actor-Relative URLs (regular https URLs that are redirected to their current location), specified in FEP-e3e9: Actor-Relative URLs Various content-based identifier schemes (such as IPFS CIDs, Named Information Hashes, etc.) As long as a user's identity provider's web domain remains constant, they can migrate to different inbox/outbox and storage providers, without breaking portable links. That is, users will be able to switch hosting and service providers to different domains, without breaking signatures, replies and threading, likes, following and followers, or anything else. This means that: Object and Collection hosting can now be extracted to general-purpose storage providers that are on different domains than the Actor profiles Actors can migrate between different storage providers without changing the Actor id and url. Moderation actions gain additional features for fine-grained handling of services distinct from individual objects: Individual Actor IDs can be blocked/moderated, as is currently possible Actor profile providers (in the example above, https://alice-personal-site.example or https://example.com/users/alice ) can now also be blocked/moderated or accrue reputational weighting Object-hosting or inbox providers (in the example below, https://storage-provider.example ) might also be worth tracking separately for some moderation or spam-/sybil-protection use-cases. 3. Create account export/import features that assume Actor-Relative URLs and segmented services Exporting an account based on this model segments neatly and brings with it verifiability, if each object was separately signed by a key published in the still-live Actor object. Importing from such a file is trivial to implement compared to today's account migrations that need to be aware of the data structures and addressing schemes of the previous server. 4. Enable verifiable Actor URL migration If the user wants to move their Actor to a different domain, or switch identity hosting services, a future FEP could define this in a simple, Verifiable Credential-style data model containing attestations and proofs that the new actor is equivalent to the old, controlled by the same subject, etc. This would generalize and standardize one currently thorny requirement of interoperable migration, that of authenticating migration requests. Note: one possible extension of this authentication artefact would be to incorporate \"pre-rotation\" style commitments of the sort used in distributed key management. End Result: Stable, migration-aware distributed data Taken together, these items allow for painless automated migration between service providers, without broken links or effort duplication, and enables restoration from backup and thus migration from dead servers. \u4f8b Example 1: Standalone ActivityPub Actor Profile Hosted at https://alice-personal-site.example/actor { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\", \"https://w3id.org/security/multikey/v1\" ], \"id\": \"https://alice-personal-site.example/actor\", \"type\": \"Person\", \"name\": \"Alice\", \"preferredUsername\": \"alice\", \"inbox\": \"https://service-provider.example/users/alice/inbox\", \"outbox\": \"https://service-provider.example/users/alice/outbox\", \"assertionMethod\": [ { \"id\": \"https://alice-personal-site.example/actor#ed25519-key\", \"type\": \"Multikey\", \"controller\": \"https://alice-personal-site.example/actor\", \"publicKeyMultibase\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" } ], \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#storage\", \"serviceEndpoint\": \"https://storage-provider.example/users/1234\" }] } Things to note: The Actor profile's URL is hosted on https://alice-personal-site.example/actor , but the Inbox and Outbox services are hosted separately, at https://service-provider.example/users/alice/inbox The assertionMethod section, as defined in FEP-521a . The service section, which sets up the ability to use Actor-Relative URLs for mapping (and thus routing) all requests to their current locations at service providers (see FEP-e939 ). \u53c2\u8003\u6587\u732e FEP-521a: Representing actor's public keys FEP-73cd: Migration User Stories FEP-8b32: Object Integrity Proofs FEP-cd47: Federation-friendly Addressing and Deduplication Use-Cases FEP-e939: Actor-Relative URLs Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, 1997 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2023 Manu Sporny, Dave Longley, Markus Sabadell, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0, 2022 Dave Longley, Manu Sporny, Data Integrity EdDSA Cryptosuites v1.0, 2023 A. Rundgren, B. Jordan, S. Erdtman, JSON Canonicalization Scheme (JCS), 2020 Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"FEP-7952: Roadmap For Actor and Object Portability"},{"location":"fep/fep-7952/#fep-7952-roadmap-for-actor-and-object-portability","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-7952: Roadmap For Actor and Object Portability"},{"location":"fep/fep-7952/#summary","text":"Portability : A set of design choices, data models, and protocols, that enable an end-user to automatically migrate from one service provider to another with the least amount of data loss and service disruption , including loss of or disruption to the user's social graph (Followers and Following collections, etc). We focus on automated migration because the option of fully manual migration always exists, such as re-typing all of one's messages and content, manually re-adding everyone to one's following collection, manually contacting everyone on one's former followers list and asking them to re-follow, and so on. However, that's an extreme failure state in usability terms; we want to avoid that. This FEP targets two main categories of migration, covering user stories 1A-1F and 2 + 3 in FEP-73cd: User Migration Stories , respectively. It also draws inspiration from an earlier information document, FEP-cd47: Federation-friendly Addressing and Deduplication Use-Cases .","title":"Summary"},{"location":"fep/fep-7952/#migration-from-a-live-cooperating-server","text":"Note that the data handling and formatting recommendations made here will be strictly complementary to the in-progress LOLA proposal , which target the same user stories.","title":"Migration from a live (cooperating) server"},{"location":"fep/fep-7952/#migration-from-a-backupexport-produced-by-a-dead-or-non-cooperating-server","text":"","title":"Migration from a backup/export produced by a dead (or non-cooperating) server"},{"location":"fep/fep-7952/#current-approaches","text":"Most current Fediverse implementations tend to follow a pattern of comprehensive service providers (or instances ) that bundle the following concerns into a single service running on a web domain: Identity hosting (hosting of the Actor profile object, which serves as the source of truth for all others in the list) Authentication and authorship/provenance of objects Key management (used for HTTP Signatures for Server to Server request authentication) ActivityPub Object and Collection storage (typically in a database) Message Transfer Services (hosting of inboxes and outboxes, delivering of outgoing objects, notifications, etc) Instance-based content moderation Community discovery (via the instance's Local feed) Front-end clients, i.e. \u201cwebsite\u201d and/or mobile app (most current implementations bundle the backend system with a made-for-purpose front end that runs off the same server) This tight coupling of concerns constrains the possibilities for migrating from a live server, and the daunting task of automating migrations to other, less-bundled architectures has yet to be attempted. Its strict reliance on interactive HTTP signatures in concern #2 also excludes migration from a dead server altogether, severely degrading user experience when servers go offline. For example, a typical current Move Actor implementation (such as the one implemented by Mastodon , or specified in FEP-7628 ) only assists the user with automatically migrating their Followers list (by setting up a bi-directional alsoKnownAs links and sending the Move activity to all of their followers). In addition, some implementations allow the manual export and re-import of the Following lists, mutes, blocks and bookmarks. However, important content like posts, media attachments, reactions, reposts and so on, does not get automatically transferred. This FEP proposes a roadmap (a set of steps, design concepts, and recommendations) that enables more complete live migrations, as well as enabling migrations from dead server backups.","title":"Current Approaches"},{"location":"fep/fep-7952/#roadmap-for-portability","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC-2119 .","title":"Roadmap For Portability"},{"location":"fep/fep-7952/#1-unbundle-the-services-and-concerns-of-a-typical-instance","text":"Sign everything : Recognize client-side cryptographic signatures as proof of authorship, in addition to the current practice of relying solely on the instance URL: add verification key(s) to the Actor object via FEP-521a Sign individual activities using the same key(s), as specified in FEP-8b32: Object Integrity Proofs B.Y.O. Actor ID : Using Object Integrity proofs enables Identity Hosting to be separated from the other instance concerns. Actor profiles can now be hosted separately from the instance, which in turn enables service providers to offer their users a \u201cBYO (Bring Your Own) domain name\u201d feature. Separate Inbox/Outbox : (Optional) The previous steps enable message transfer and Inbox/Outbox hosting to be outsourced to separate service providers (the Actor profile links to these in the usual manner). Separate Object and Collection hosting : (Optional) Similarly, AP Objects and Collections can now be stored on domains separate from the Actor's domain (since authorship and controller-ship can be proven cryptographically, in a domain-independent way). This enables the user to migrate storage service providers without having to change their Actor ID.","title":"1. Unbundle the services and concerns of a typical instance"},{"location":"fep/fep-7952/#2-implement-portable-migration-stable-object-ids","text":"Separating the object storage provider from the Actor profile hosting provider enables the implementation of Object IDs that can remain unchanged through migrations and export/import cycles. Specifically, we're looking for Object IDs that remain unchanged even after migrating the objects to be hosted at a different storage provider. There are several methods of achieving these types of portable IDs, including: FEP-ef61: Portable Objects , which introduces a new ap:// URI scheme. Actor-Relative URLs (regular https URLs that are redirected to their current location), specified in FEP-e3e9: Actor-Relative URLs Various content-based identifier schemes (such as IPFS CIDs, Named Information Hashes, etc.) As long as a user's identity provider's web domain remains constant, they can migrate to different inbox/outbox and storage providers, without breaking portable links. That is, users will be able to switch hosting and service providers to different domains, without breaking signatures, replies and threading, likes, following and followers, or anything else. This means that: Object and Collection hosting can now be extracted to general-purpose storage providers that are on different domains than the Actor profiles Actors can migrate between different storage providers without changing the Actor id and url. Moderation actions gain additional features for fine-grained handling of services distinct from individual objects: Individual Actor IDs can be blocked/moderated, as is currently possible Actor profile providers (in the example above, https://alice-personal-site.example or https://example.com/users/alice ) can now also be blocked/moderated or accrue reputational weighting Object-hosting or inbox providers (in the example below, https://storage-provider.example ) might also be worth tracking separately for some moderation or spam-/sybil-protection use-cases.","title":"2. Implement Portable (migration-stable) Object IDs"},{"location":"fep/fep-7952/#3-create-account-exportimport-features-that-assume-actor-relative-urls-and-segmented-services","text":"Exporting an account based on this model segments neatly and brings with it verifiability, if each object was separately signed by a key published in the still-live Actor object. Importing from such a file is trivial to implement compared to today's account migrations that need to be aware of the data structures and addressing schemes of the previous server.","title":"3. Create account export/import features that assume Actor-Relative URLs and segmented services"},{"location":"fep/fep-7952/#4-enable-verifiable-actor-url-migration","text":"If the user wants to move their Actor to a different domain, or switch identity hosting services, a future FEP could define this in a simple, Verifiable Credential-style data model containing attestations and proofs that the new actor is equivalent to the old, controlled by the same subject, etc. This would generalize and standardize one currently thorny requirement of interoperable migration, that of authenticating migration requests. Note: one possible extension of this authentication artefact would be to incorporate \"pre-rotation\" style commitments of the sort used in distributed key management.","title":"4. Enable verifiable Actor URL migration"},{"location":"fep/fep-7952/#end-result-stable-migration-aware-distributed-data","text":"Taken together, these items allow for painless automated migration between service providers, without broken links or effort duplication, and enables restoration from backup and thus migration from dead servers.","title":"End Result: Stable, migration-aware distributed data"},{"location":"fep/fep-7952/#_1","text":"","title":"\u4f8b"},{"location":"fep/fep-7952/#example-1-standalone-activitypub-actor-profile","text":"Hosted at https://alice-personal-site.example/actor { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\", \"https://w3id.org/security/multikey/v1\" ], \"id\": \"https://alice-personal-site.example/actor\", \"type\": \"Person\", \"name\": \"Alice\", \"preferredUsername\": \"alice\", \"inbox\": \"https://service-provider.example/users/alice/inbox\", \"outbox\": \"https://service-provider.example/users/alice/outbox\", \"assertionMethod\": [ { \"id\": \"https://alice-personal-site.example/actor#ed25519-key\", \"type\": \"Multikey\", \"controller\": \"https://alice-personal-site.example/actor\", \"publicKeyMultibase\": \"z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\" } ], \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#storage\", \"serviceEndpoint\": \"https://storage-provider.example/users/1234\" }] } Things to note: The Actor profile's URL is hosted on https://alice-personal-site.example/actor , but the Inbox and Outbox services are hosted separately, at https://service-provider.example/users/alice/inbox The assertionMethod section, as defined in FEP-521a . The service section, which sets up the ability to use Actor-Relative URLs for mapping (and thus routing) all requests to their current locations at service providers (see FEP-e939 ).","title":"Example 1: Standalone ActivityPub Actor Profile"},{"location":"fep/fep-7952/#_2","text":"FEP-521a: Representing actor's public keys FEP-73cd: Migration User Stories FEP-8b32: Object Integrity Proofs FEP-cd47: Federation-friendly Addressing and Deduplication Use-Cases FEP-e939: Actor-Relative URLs Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, 1997 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2023 Manu Sporny, Dave Longley, Markus Sabadell, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0, 2022 Dave Longley, Manu Sporny, Data Integrity EdDSA Cryptosuites v1.0, 2023 A. Rundgren, B. Jordan, S. Erdtman, JSON Canonicalization Scheme (JCS), 2020","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-7952/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-7d8c/","text":"FEP-7d8c: Documentation: Automation of FEP Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP discusses scripts and woodpecker configuration used to automate parts of the FEP process. The FEP process is described in FEP-a4ed . As FEP-a4ed , this is a living document, and should be updated as the FEP process evolves. Vision Automation has the goal of reducing the burden on facilitators by: allowing people without deep knowledge of git to become facilitators. Basically, the job will boil down to read a document and ensure it meets our standards, then click \"merge\". performing as many checks as possible via automation Once one has simplified this job, one can seek broader adoption of the FEP process.. Todos This is a living document. So let's have a todo list [ ] Check for broken links [ ] Simplify creating FEPs. Does one really need git and a codeberg account? [ ] Code documentation to enable more people to write tools, e.g. an automatic generation of which FEP is used where The first two items have been on my personal todo list for a long time, and might stay there ... so feel free to pick them up. Automation Automation for the FEP repository uses the codeberg woodpecker . There are two jobs: test runs basic checks on the contained FEPs readme updates the README.md file and creates the tracking issue Automation code is written in python and is contained in the script folder . Configuration variables To be able to do these configuration tasks, you need to be in the admin group. See the first discussion here . The configuration .woodpecker/readme.yml uses two secrets: codeberg_api_token, a codeberg API token used to create the tracking issues. deploy_key, an SSH private key used to push to the codeberg repository. Furthermore, the environment variable CI_REPO_CLONE_SSH_URL is used see woodpecker documentation . We will now discuss how to obtain these secrets. The api token API tokens can be generated on codeberg under user settings -> applications -> select permissions -> issue : Read and Write and giving it a name. They are hexstrings with 40 characters (if I counted correctly), e.g. 33104dd6847e87ef3d6925effdfc852349233034 Deploy key As already mentioned the deploy key is an ssh key. One can generate these on linux via ssh-keygen -t ed25519 -f deploy_key Do not specify a passphrase. Examples: $ cat deploy_key -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW QyNTUxOQAAACCQ5XqPCdvHPHsukhPS+RMDpMnOCCLW0csGGoFgijQRiwAAAJDpM7fx6TO3 8QAAAAtzc2gtZWQyNTUxOQAAACCQ5XqPCdvHPHsukhPS+RMDpMnOCCLW0csGGoFgijQRiw AAAEB2ofBDBwUcZs5FHsaFMvyO95Qrvn8+PO3BchraucMRwJDleo8J28c8ey6SE9L5EwOk yc4IItbRywYagWCKNBGLAAAADWhlbGdlQHJhaW5ib3c= -----END OPENSSH PRIVATE KEY----- $ cat deploy_key.pub ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJDleo8J28c8ey6SE9L5EwOkyc4IItbRywYagWCKNBGL helge@rainbow The public key deploy_key.pub should be added to the codeberg repo under settings -> deploy keys -> add deploy key and checking the enable write access checkbox. See here . Adding the secrets to woodpecker One can add these secrets on woodpecker , then selecting the settings wheel -> secrets -> add secret . The secrets only need to available for the push action (corresponding to a merged pull request). \u53c2\u8003\u6587\u732e pukkamustard, FEP-a4ed: The Fediverse Enhancement Proposal Process , 2020 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-7d8c: Documentation: Automation of FEP"},{"location":"fep/fep-7d8c/#fep-7d8c-documentation-automation-of-fep","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-7d8c: Documentation: Automation of FEP"},{"location":"fep/fep-7d8c/#summary","text":"This FEP discusses scripts and woodpecker configuration used to automate parts of the FEP process. The FEP process is described in FEP-a4ed . As FEP-a4ed , this is a living document, and should be updated as the FEP process evolves.","title":"Summary"},{"location":"fep/fep-7d8c/#vision","text":"Automation has the goal of reducing the burden on facilitators by: allowing people without deep knowledge of git to become facilitators. Basically, the job will boil down to read a document and ensure it meets our standards, then click \"merge\". performing as many checks as possible via automation Once one has simplified this job, one can seek broader adoption of the FEP process..","title":"Vision"},{"location":"fep/fep-7d8c/#todos","text":"This is a living document. So let's have a todo list [ ] Check for broken links [ ] Simplify creating FEPs. Does one really need git and a codeberg account? [ ] Code documentation to enable more people to write tools, e.g. an automatic generation of which FEP is used where The first two items have been on my personal todo list for a long time, and might stay there ... so feel free to pick them up.","title":"Todos"},{"location":"fep/fep-7d8c/#automation","text":"Automation for the FEP repository uses the codeberg woodpecker . There are two jobs: test runs basic checks on the contained FEPs readme updates the README.md file and creates the tracking issue Automation code is written in python and is contained in the script folder .","title":"Automation"},{"location":"fep/fep-7d8c/#configuration-variables","text":"To be able to do these configuration tasks, you need to be in the admin group. See the first discussion here . The configuration .woodpecker/readme.yml uses two secrets: codeberg_api_token, a codeberg API token used to create the tracking issues. deploy_key, an SSH private key used to push to the codeberg repository. Furthermore, the environment variable CI_REPO_CLONE_SSH_URL is used see woodpecker documentation . We will now discuss how to obtain these secrets.","title":"Configuration variables"},{"location":"fep/fep-7d8c/#the-api-token","text":"API tokens can be generated on codeberg under user settings -> applications -> select permissions -> issue : Read and Write and giving it a name. They are hexstrings with 40 characters (if I counted correctly), e.g. 33104dd6847e87ef3d6925effdfc852349233034","title":"The api token"},{"location":"fep/fep-7d8c/#deploy-key","text":"As already mentioned the deploy key is an ssh key. One can generate these on linux via ssh-keygen -t ed25519 -f deploy_key Do not specify a passphrase. Examples: $ cat deploy_key -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW QyNTUxOQAAACCQ5XqPCdvHPHsukhPS+RMDpMnOCCLW0csGGoFgijQRiwAAAJDpM7fx6TO3 8QAAAAtzc2gtZWQyNTUxOQAAACCQ5XqPCdvHPHsukhPS+RMDpMnOCCLW0csGGoFgijQRiw AAAEB2ofBDBwUcZs5FHsaFMvyO95Qrvn8+PO3BchraucMRwJDleo8J28c8ey6SE9L5EwOk yc4IItbRywYagWCKNBGLAAAADWhlbGdlQHJhaW5ib3c= -----END OPENSSH PRIVATE KEY----- $ cat deploy_key.pub ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJDleo8J28c8ey6SE9L5EwOkyc4IItbRywYagWCKNBGL helge@rainbow The public key deploy_key.pub should be added to the codeberg repo under settings -> deploy keys -> add deploy key and checking the enable write access checkbox. See here .","title":"Deploy key"},{"location":"fep/fep-7d8c/#adding-the-secrets-to-woodpecker","text":"One can add these secrets on woodpecker , then selecting the settings wheel -> secrets -> add secret . The secrets only need to available for the push action (corresponding to a merged pull request).","title":"Adding the secrets to woodpecker"},{"location":"fep/fep-7d8c/#_1","text":"pukkamustard, FEP-a4ed: The Fediverse Enhancement Proposal Process , 2020","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-7d8c/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-888d/","text":"FEP-888d: Using https://w3id.org/fep as a base for FEP-specific namespaces Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary It is considered best practice in the linked-data ecosystem to have IRIs be HTTPS URIs that resolve to a definition of the term being used, and it is desirable to define such terms in a JSON-LD context file that is referenced by its IRI rather than having the full @context object embedded in every single document. ActivityStreams 2.0 and ActivityPub do this with the normative context and namespace provided at https://www.w3.org/ns/activitystreams , but this namespace is not generally open to extensions or to experimental terms. This FEP therefore proposes using https://w3id.org/fep as a base IRI for the FEP process, allowing sub-namespaces for each FEP. Acknowledgements (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) The core idea behind this FEP is attributed to helge on SocialHub 1 . Specifically, the proposal to register fep at the W3ID service is adopted wholesale, with alterations made to the specifics of implementing the redirect mappings using .htaccess rules. These alterations are intended to allow easier sub-namespace allocation for each FEP. Requirements The key words \"MUST\", \"SHOULD\", \"MAY\" are to be interpreted as described in RFC-2119 . Introduction (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) The Resource Description Framework (RDF), of which JSON-LD is a serialization, uses URIs to identify nodes on a graph, define properties of those nodes, and create relationships between those nodes. Each statement in RDF represents a fact that is constructed by linking a subject to an object with a predicate; for example, in the statement \"Alice knows Bob\", the subject Alice is related to the object Bob by the predicate knows . To avoid ambiguity, we can specify a URI for what it means to \"know\" someone. Such a URI represents a named property or named predicate, and it exists within a namespace, often associated with some ontology or vocabulary. ActivityStreams 2.0 provides and defines the Activity Vocabulary at https://www.w3.org/ns/activitystreams , and terms defined within may use either the base IRI https://www.w3.org/ns/activitystreams# or the compact IRI as: . For example, we can consider the definition of \"Public\" addressing within ActivityPub , represented by the Public magic collection. When the normative ActivityStreams 2.0 context is applied, the IRI for this collection may be equivalently expressed as Public , as:Public , or https://www.w3.org/ns/activitystreams#Public . Historically, extension terms within early ActivityPub implementations assumed that those extension terms would be readily adopted within the ActivityStreams namespace, but this did not happen. Currently, terms such as Hashtag , manuallyApprovesFollowers , movedTo , and sensitive are manually defined with compact IRIs using the as: prefix, in effect making it so that any implementation that wishes to understand these properties and types must manually define those terms as well, in the exact same way. Later extension terms were defined within vendor-specific namespaces such as http://joinmastodon.org/ns or https://joinpeertube.org/ns . With the increased adoption of ActivityPub by software projects and the diverse needs of such projects, each project will often define its own vendor-specific namespace to contain its own terms. This has led to a multitude of namespaces and extension terms, which must be cherry-picked as needed by JSON-LD consumers wishing to maintain compatibility. Additionally, some of these terms are defined incorrectly within @context , leading to the necessity of compatibility hacks on a per-project basis. Even terms defined correctly may overlap with other terms, and proposed new terms must be parented within a vendor namespace, creating the potential for conflict on which vendor should adopt which term. The aim of this FEP is to provide a vendor-independent namespace under which extension terms can be defined pursuant to the FEP process and the above problems can be reduced. Prior art (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Within the XMPP ecosystem, the core XMPP specification is defined within an RFC, and further functionality is afforded by the \"eXtensible\" nature of XMPP. The XMPP Standards Foundation (XSF) maintains the process for stewarding new extensions via XMPP Extension Protocols (XEPs). XML namespacing for such extensions is provided by urn:xmpp: , as the XML ecosystem generally prefers using URNs rather than using HTTPS URIs. Such URNs are fully location-independent and not vulnerable to DNS expiry, lapsing, or insolvency. Instead, they are assigned within the authority of the XSF. The XSF maintains an XMPP Registrar and allows XEPs to request and define sub-namespaces beneath urn:xmpp: . In exchange, these URNs are not generally dereferencable without a resolver that looks up the URN within the XEP database. Within the RDF and linked-data ecosystems, there is a strong preference for HTTP or HTTPS URIs, as these can usually be dereferenced via the HTTP protocol for additional information about the subject of the URI. In cases where the URI does not resolve, the URI serves as an identifier not much different than a URN, but with its authority derived from DNS domain rather than from some organizational authority. The reliance on DNS domain creates an issue where the primary domain associated with a group or organization might change. If a previously-used domain is reassigned to a different party, then the new party can mint URIs that accidentally or intentionally conflict with previously-assigned URIs. To mitigate the DNS authority reassignment issue, trusted intermediary services can maintain a \"persistent URL\" (PURL) service, which allows assigning identifiers on the intermediary domain that will redirect to some other URI. This layer of indirection allows changing the location of the resource by simply changing the redirect's target. W3ID is one such service, operated by the W3C Permanent Identifier Community Group and available at https://w3id.org . At the time of writing this FEP, top-level directory names can be claimed by individuals who submit pull requests to the w3id.org repository on GitHub, and .htaccess files allow redirection based on rewrite rules that transform incoming requests to some other target. Specification Design goals Broad design goals for the redirect mapping include: Content negotiation for JSON-LD consumers. IRIs SHOULD return machine-friendly context documents or term definitions when requested via the Accept: application/ld+json HTTP header, and SHOULD otherwise return human-friendly proposal documents or term definitions by default. Sub-namespaces for each FEP. Identifiers for each term SHOULD be allocated within the namespace of the FEP that defines them. At minimum, the following redirects SHOULD resolve as follows: https://w3id.org/fep Accept: * => the FEP repository or current home page https://w3id.org/fep/(:id) Accept: application/ld+json => a specific FEP's context document Accept: * => a specific FEP's proposal document Additionally, the following MAY resolve: https://w3id.org/fep/(:id)/(:term) Accept: application/ld+json => a specific FEP's specific term definition in JSON-LD ontology/schema Accept: application/rdf+xml => a specific FEP's specific term definition in RDF/XML ontology/schema Accept: text/turtle => a specific FEP's specific term definition in Turtle ontology/schema Accept: * => a specific FEP's specific term's folder Mapping w3id.org/fep to fediverse/fep on Codeberg At the time of writing this FEP, the Codeberg repository at https://codeberg.org/fediverse/fep is used to host FEP-related files, and can similarly be used to host context documents. Example (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) An example .htaccess file is co-located with this FEP, and reproduced below for convenience: RewriteEngine on # catch root request RewriteRule ^\\/?$ https://codeberg.org/fediverse/fep [R=302,L] # Catch FEP documents ## By content negotiation ### JSON-LD RewriteCond %{HTTP_ACCEPT} application/ld\\+json RewriteRule ^([A-Za-z0-9]+)\\/?$ https://raw.codeberg.page/fediverse/fep/fep/$1/fep-$1.jsonld [R=302,L] ### RDF+XML RewriteCond %{HTTP_ACCEPT} application/rdf\\+xml RewriteRule ^([A-Za-z0-9]+)\\/?$ https://fediverse.codeberg.page/fep/fep/$1/fep-$1.rdf [R=302,L] ### Turtle RewriteCond %{HTTP_ACCEPT} text/turtle RewriteRule ^([A-Za-z0-9]+)\\/?$ https://fediverse.codeberg.page/fep/fep/$1/fep-$1.ttl [R=302,L] ## By URL hacking RewriteRule ^([A-Za-z0-9]+).jsonld$ https://raw.codeberg.page/fediverse/fep/fep/$1/fep-$1.jsonld [R=302,L] RewriteRule ^([A-Za-z0-9]+).rdf$ https://raw.codeberg.page/fediverse/fep/fep/$1/fep-$1.rdf [R=302,L] RewriteRule ^([A-Za-z0-9]+).ttl$ https://raw.codeberg.page/fediverse/fep/fep/$1/fep-$1.ttl [R=302,L] ## By default, take you to the FEP document RewriteRule ^([A-Za-z0-9]+)\\/?$ https://codeberg.org/fediverse/fep/src/branch/main/fep/$1/fep-$1.md [R=302,L] # Catch term definitions/schemas/ontologies ## By content negotiation ### JSON-LD RewriteCond %{HTTP_ACCEPT} application/ld\\+json RewriteRule ^([A-Za-z0-9]+)\\/(.*?)\\/?$ https://raw.codeberg.page/fediverse/fep/fep/$1/$2/$2.jsonld [R=302,L] ### RDF+XML RewriteCond %{HTTP_ACCEPT} application/rdf\\+xml RewriteRule ^([A-Za-z0-9]+)\\/(.*?)\\/?$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.rdf [R=302,L] ### Turtle RewriteCond %{HTTP_ACCEPT} text/turtle RewriteRule ^([A-Za-z0-9]+)\\/(.*?)\\/?$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.ttl [R=302,L] ### test html RewriteCond %{HTTP_ACCEPT} ^text/html$ RewriteRule ^([A-Za-z0-9]+)\\/(.*?)\\/?$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.html [R=302,L] ## By URL hacking RewriteRule ^([A-Za-z0-9]+)\\/(.*?).jsonld$ https://raw.codeberg.page/fediverse/fep/fep/$1/$2/$2.jsonld [R=302,L] RewriteRule ^([A-Za-z0-9]+)\\/(.*?).rdf$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.rdf [R=302,L] RewriteRule ^([A-Za-z0-9]+)\\/(.*?).ttl$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.ttl [R=302,L] RewriteRule ^([A-Za-z0-9]+)\\/(.*?).html$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.html [R=302,L] RewriteRule ^([A-Za-z0-9]+)\\/(.*?).md$ https://fediverse.codeberg.page/fep/fep/$1/$2/README.md [R=302,L] ## By default, just take you to the term's folder RewriteRule ^([A-Za-z0-9]+)\\/(.*?)\\/?$ https://codeberg.org/fediverse/fep/src/branch/main/fep/$1/$2 [R=302,L] # a generic catch-all rule RewriteRule ^(.*)\\/?$ https://codeberg.org/fediverse/fep/raw/branch/main/fep/$1 [R=302,L] Defining terms associated with an FEP FEPs that wish to define extension terms within the w3id.org/fep namespace MUST provide a JSON-LD document co-located within their FEP folder with a filename of the form fep-xxxx.jsonld , where xxxx is the FEP's slug. This document MUST include at least a @context key, whose value is a JSON object containing term definitions. Simple term definitions map a term key to an IRI value. Expanded term definitions contain @id for each term, with @type of @id if the term links to another node on the graph. Refer to LD-TERM-DFN for additional guidance on defining terms within JSON-LD. The document MAY include additional metadata outside of the @context , such as schema or ontology definitions. If this is done, then you SHOULD NOT include any prefixes in your @context that are only used within the graph, as these can pollute the usage as a context document. Once the FEP is marked FINAL , the context document MAY be cached forever if referenced. FEPs that define extension terms MAY instead define extension terms within a vendor-specific namespace, but generally this SHOULD NOT be done. Example using paths (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) For example, say we wanted to define the following terms within the current FEP-888d: SomeType is a term for some type exampleA is a term for a property with some literal value (string, boolean, number) exampleB is a term for a property that links to another node on the graph (for example, another object) exampleC is a term for a property that is an ordered list of literal values that are specifically non-negative integers The context document might look like this, at minimum: { \"@context\": { \"SomeType\": \"https://w3id.org/fep/888d/SomeType\", \"exampleA\": \"https://w3id.org/fep/888d/exampleA\", \"exampleB\": { \"@id\": \"https://w3id.org/fep/888d/exampleB\", \"@type\": \"@id\" }, \"exampleC\": { \"@id\": \"https://w3id.org/fep/888d/exampleC\", \"@type\": \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\", \"@container\": \"@list\" } } } Refer to LD-TERM-DFN for additional guidance on defining terms within JSON-LD. A folder within the FEP's directory should be used to provide additional documentation for the term, such as ontology or schema definitions via JSON-LD, RDF/XML, and/or Turtle. Example using fragment identifiers (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Depending on convenience or preference, the context document might instead look like this: { \"@context\": { \"SomeType\": \"https://w3id.org/fep/888d#SomeType\", \"exampleA\": \"https://w3id.org/fep/888d#exampleA\", \"exampleB\": { \"@id\": \"https://w3id.org/fep/888d#exampleB\", \"@type\": \"@id\" }, \"exampleC\": { \"@id\": \"https://w3id.org/fep/888d#exampleC\", \"@type\": \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\", \"@container\": \"@list\" } } } Refer to LD-TERM-DFN for additional guidance on defining terms within JSON-LD. In such a case, the FEP document should include an element with an HTML identifier that exactly matches the term name, so that the IRI fragment resolves properly. In practice, this means one of the following: Using a heading with a name that exactly matches the term name. This should be autolinked correctly by most Markdown processors. Be warned that this may cause problems for FEPs that define terms conflicting with common header names, such as summary , acknowledgements , requirements , references , copyright , and so on, including any headers that the FEP author includes for purposes other than explicitly defining the term. Using a heading with a custom attribute containing an ID. Some Markdown processors such as Goldmark will handle cases such as ### h3 {#custom-identifier} and render <h3 id=\"custom-identifier\">h3</h3> . Markdown specifications such as CommonMark currently do not support custom attributes, but some Markdown processors such as Goldmark support custom attributes on headers (but not on arbitrary elements). See CM-ATTRS for more discussion of this feature. Using an HTML definition list, with id attributes exactly matching the term name. HTML within Markdown files is generally rendered as-is, although it may be sanitized, stripped, or disallowed for security purposes. In cases where it is allowed, however, it can be an effective way to express term definitions within an FEP document. Defining terms in a machine-readable way (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) If terms are defined within HTML using RDFa, and this HTML is embedded in the Markdown contents of the FEP document, then these term definitions can be used to programmatically generate machine-readable term definitions, schemas, and ontologies in multiple formats. A Python script is provided within the FEP repository at scripts/make_definitions.py for convenience. To make use of the script, it is necessary to structure term definitions in a specific way. We define a \"term definition\" to be any HTML element that adheres to the following requirements: The HTML element has an HTML id attribute equal to the shorthand term name. The HTML element has an RDFa resource attribute equal to the term's full IRI. Generally, this HTML element should be a <section> tag, and it should contain a definition list ( <dl></dl> ) where each term ( <dt></dt> ) and definition ( <dd></dd> ) provide a key-value pair representing a property of that term definition. Examples may be provided within a preformatted code block ( <pre><code></code></pre> ), and multiple examples may be provided. Example code blocks can have a title attribute on the <pre> tag. It is generally recommended to put any term definitions below a heading called something like \"Terms defined\". For all term definitions regardless of type, it is recommended to include the following properties in your definition list: rdfs:label is a natural language label that can replace the shorthand term. For example, a term that is normally expressed with the shorthand hasValue might be labelled has value in plain English. rdfs:comment is a natural language description that gives more detail about what the term means. rdfs:isDefinedBy is a reference pointing to where the term is defined. Usually this is the current FEP, but meta-FEPs that bundle other FEPs may use this property to refer to the original FEP that defined a term. For term definitions that define a class (such as rdfs:Class or owl:Class ), it is recommended to include the following properties in your definition list if appropriate: rdfs:seeAlso is a reference to some other resource that provides more information about the current term. Usually this can be used to link a class to the properties that instances of that class may have. rdfs:subClassOf is a property that declares the current class to inherit from the object. Logically, if something is an instance of the current class, it is also an instance of the superclass. For example, in AS2-Vocab , OrderedCollection is a subclass of Collection , so all OrderedCollection objects are also implied to have a type of Collection as well, even if not explicitly declared to be one. For term definitions that define a property (such as rdf:Property , owl:DatatypeProperty , or owl:ObjectProperty ), it is recommended to include the following properties in your definition list if appropriate: rdfs:domain is the Domain of the property. Logically, this implies that if a property p has a domain D , and a given resource has the property p , then that resource has a type of D . For example, in AS2-Vocab the domain of actor is Activity , so anything that has an actor is implied to be an Activity even if not explicitly declared to be one. rdfs:range is the Range of the property. Logically, this implies that if a property p has a range R , and a given resource is the value of p , then that resource has a type of R . For example, in AS2-Vocab the range of replies is Collection , so anything that is the value of replies is implied to be a Collection even if not explicitly declared to be one. In cases where a property is Required, this can be stated by declaring that the property of owl:minCardinality has a content of 1 (with a datatype of xsd:nonNegativeInteger ). In other words, a property with a minimum cardinality of 1 must have at least one value. If the property is not Required, then this statement can be amended to have a content of 0 , or in other words, you are stating that this property must have at least 0 values (which allows having no values). In cases where a property is Functional, this can be stated by declaring that the property of owl:maxCardinality has a content of 1 (with a datatype of xsd:nonNegativeInteger ). In other words, a property with a maximum cardinality of 1 can have at most one value. If the property is not Functional, then this statement can be omitted. rdfs:seeAlso is a reference to some other resource that provides more information about the current term. Usually this can be used to link a property to other related terms, such as term definitions that can be used as the value of this property. If the term definition contains JSON-LD keywords like @id , @vocab , @set , or @list within a <dd> element whose corresponding <dt> element's inner text exactly matches Range , then these keywords can be used to automatically generate a context document. Set the attribute excluded on the term definition to a non-empty value to exclude it from auto-generated context term definitions. Using the python script Source code for the script is available in make_definition.py , currently co-located in the FEP-888d folder. The script will operate according to the following logic: Options available GENERATE_CONTEXT_FROM_TERMDEFS: if true, will automatically generate a context. The generated context can be manipulated by the presence of JSON-LD keywords like @id , @vocab , @set , and @list . OUTPUT_FORMATS: a list of formats to be used when generating outputs for both singular term definitions as well as FEP-wide schema or ontology files. PATH_TO_CONTEXT: a pre-written context document whose context mapping will be injected into the JSON-LD output of the FEP. Defaults to the JSON-LD alternate format of the FEP ( fep-$SLUG.jsonld co-located within the FEP folder). Failure to read this path as valid JSON will lead to an empty context mapping. Algorithm 1) Render markdown as HTML. 2) Find all HTML elements that have id and resource . These are considered \"term definitions\". 3) Initialize an empty graph for the entire FEP. 4) Initialize an empty context mapping for the entire FEP. 4.1) If GENERATE_CONTEXT_FROM_TERMDEFS is set to false, then try to load an existing context mapping from PATH_TO_CONTEXT. 5) Loop over all elements identified as \"term definitions\". 5.1) Initialize an empty graph for the current term. 5.2) Set the subject s equal to the resource attribute of the element. 5.3) Set term_type equal to the typeof attribute of the element. 5.4) Add a statement to the current term graph, of the form s rdf:type term_type . 5.5) Loop over all child elements with a property attribute. These are considered \"property definitions\". 5.5.1) Set the predicate p equal to the property attribute. 5.5.2) Set the object o equal to the resource attribute. If not present, then set the object o equal to the href attribute. If not present, then set the object o equal to the content attribute. If not present, then set the object o equal to the inner text of the current element. 5.5.3) Set the language lang equal to the lang attribute. 5.5.4) Set the datatype datatype equal to the datatype attribute. 5.5.5) Add a statement to the current term's graph using s , p , o , lang , and datatype , making sure to expand any CURIEs according to the RDFa initial context. 5.5.5.1) If there is a datatype or lang , then the object o is a Literal. 5.5.5.2) Otherwise, the object o is an IRI reference. 5.6) If GENERATE_CONTEXT_FROM_TERMDEFS is set to true and the current element does not have an excluded attribute, then extract JSON-LD keywords and automatically generate a context term definition. 5.6.1) Set the shorthand term_name equal to the id attribute of the element. 5.6.2) Initialize an options mapping to keep track of extended term definitions. 5.6.3) Pairwise combine each child <dt> element with its corresponding child <dd> element. 5.6.4) Find a <dt> element whose inner text is exactly \"Range\". [TODO: something less fragile?] 5.6.5) Check the corresponding <dd> element for a resource attribute. If there is one, extract this IRI as type_iri . 5.6.5.1) If this type_iri starts with xsd , then insert @type: type_iri into the options mapping. 5.6.6) Check the text content of the <dd> element for a substring @id . If found, then insert @type: @id into the options mapping. 5.6.7) Check the text content of the <dd> element for a substring @vocab . If found, then insert @type: @vocab into the options mapping. 5.6.8) Check the text content of the <dd> element for a substring @set . If found, then insert @container: @set into the options mapping. 5.6.9) Check the text content of the <dd> element for a substring @list . If found, then insert @container: @list into the options mapping. 5.6.10) If the options mapping is not empty, then insert @id: s into the options mapping. 5.6.11) If the options mapping is not empty, then map term_name to the options mapping. Otherwise, map term_name to the string s . This is considered a \"context term definition\". 5.6.12) Insert the context term definition into the context mapping. 5.7) Merge the current term graph into the FEP-wide graph. 5.8) If the subject s is not a fragment identifier, then for each alternate output format in OUTPUT_FORMATS, serialize the current term graph to that format and write it to a file within a co-located subfolder with the name term_name . 5.8.1) If HTML+RDFa is one of the OUTPUT_FORMATS, then the term definition element can be copied as-is. 5.8.2) If Markdown is one of the OUTPUT_FORMATS: 5.8.2.1) Write a first-level heading with the shorthand term_name set equal to the id attribute of the term definition. 5.8.2.2) Pairwise combine each child <dt> element with its corresponding child <dd> element. 5.8.2.3) For each pair of <dt> and <dd> element, write a definition list term and definition list definition. 5.8.2.4) Extract examples by finding all HTML elements that are <pre> . 5.8.2.5) If any examples were found, write a second-level heading with the text set to Examples . 5.8.2.5) For each example block found: 5.8.2.5.1) If a title attribute is present, then write a paragraph with the text set to the value of title . 5.8.2.5.2) Write the start of the code block with backticks. If a lang attribute is present, then append its value immediately afterward. 5.8.2.5.3) Write the inner text of the example. 5.8.2.5.4) Write the closing backticks for closing the code block. 6) For each alternate output format in OUTPUT_FORMATS, serialize the FEP-wide graph to that format and write it to a file co-located with the name fep-$SLUG.$FORMAT . For example, if Turtle output is enabled, then fep-xxxx.ttl will be written. For JSON-LD output, use the current context mapping when serializing the FEP-wide graph. For HTML+RDFa or Markdown output, ignore these formats. (Outputting HTML can be done as part of a separate process of rendering the Markdown with a static site generator. Outputting the Markdown makes no sense since it is the source material and should not be overwritten.) 6.3) If GENERATE_CONTEXT_FROM_TERMDEFS is set to true but JSON-LD is not one of the output formats, then initialize and serialize an empty graph, using the generated context term definition. 6.1.1) Remove the graph from the context document. 6.1.2) Save the generated context document as fep-xxxx.jsonld . Usage Install required python dependencies, for example in a virtual environment: python-markdown beautifulsoup4 rdflib markdownify python-frontmatter The script should be run in the base directory of the fediverse/fep repo. python make_definitions.py $SLUG will read term definitions from the contents of fep/$SLUG/fep-$SLUG.md , then generate alternate formats for the FEP. If your terms are defined with fragment identifiers (of the form https://w3id.org/fep/xxxx#term ), then only the FEP itself will be generated in alternate formats. If your terms are defined with absolute identifiers (of the form https://w3id.org/fep/xxxx/term ), then co-located subdirectories will be created as well, and singular term definitions will be generated in chosen output formats. If a context.jsonld document is present in the FEP folder, then it will be copied into the JSON-LD alternate format output. The current default output formats are: .ttl (Turtle) .rdf (RDF/XML) .jsonld (JSON-LD) .html (HTML+RDFa) (singular term definitions only) .md (README.md for the Codeberg repo viewer) (singular term definitions only) python make_definitions.py $SLUG -c will do everything in the above bullet point, except for copying context.jsonld . Instead, it will check for JSON-LD keywords and attempt to auto-generate a context document based on those keywords. If JSON-LD output is disabled, the script will generate only a context document instead of a combined context document and schema or ontology. Example terms defined by this FEP (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Using the same fictitious terms from the above examples: SomeType is a term for some type exampleA is a term for a property with some literal value (string, boolean, number) exampleB is a term for a property that links to another node on the graph (for example, another object) exampleC is a term for a property that is an ordered list of literal values that are specifically non-negative integers ExcludedExample is a term for some class that is useful for ontology but not intended to be used for the context mapping We can formulate the following machine-readable term definition blocks, which are intended to provide a range of examples of various RDFa syntactical constructs for demonstration purposes. Specifically, the following mechanisms are demonstrated: Declaring a resource with a typeof some class Declaring a natural language property with a specified lang Specifically, the rdfs:label and rdfs:comment properties provide natural language representations and descriptions of the defined term Declaring that a property has a value that is a resource Declaring a property where the object value is referred to by href instead of resource (for example, in an anchor link) Declaring multiple values for a given property by including multiple tags Providing additional schema metadata that wasn't provided in the @context , such as signaling that a property is required or functional Declaring that a property has literal content instead of referring to a resource, and that this content can have its own datatype to which it can be coerced Excluding a term definition from the automatically generated context document, using the excluded attribute SomeType URI https://w3id.org/fep/888d/SomeType Label Some Type Comment Some type. Subclass of Object See also exampleA | exampleB | exampleC Is defined by FEP-888d { \"@context\": \"https://w3id.org/fep/888d\", \"@type\": \"SomeType\", \"exampleA\": true, \"exampleB\": \"https://example.com/some-object\", \"exampleC\": [1, 1] } exampleA URI https://w3id.org/fep/888d/exampleA Label has example relation A with the literal value Comment A property with some literal value (string, boolean, number) Domain SomeType Range A literal value Required Yes Functional Yes Is defined by FEP-888d { \"@context\": \"https://w3id.org/fep/888d\", \"@type\": \"SomeType\", \"exampleA\": true, \"exampleB\": \"https://example.com/some-object\", \"exampleC\": [1, 1] } exampleB URI https://w3id.org/fep/888d/exampleB Label has example relation B with Comment A property that links to another node on the graph (for example, another object) Domain SomeType Range An object (@id) Required No Functional No Is defined by FEP-888d { \"@context\": \"https://w3id.org/fep/888d\", \"@type\": \"SomeType\", \"exampleA\": true, \"exampleB\": \"https://example.com/some-object\", \"exampleC\": [1, 1] } exampleC URI https://w3id.org/fep/888d/exampleC Label has an exampleC value of Comment A property that is an ordered list of literal values that are specifically non-negative integers Domain SomeType Range A list of non-negative integers (@list) Required No Functional Yes Is defined by FEP-888d { \"@context\": \"https://w3id.org/fep/888d\", \"@type\": \"SomeType\", \"exampleA\": true, \"exampleB\": \"https://example.com/some-object\", \"exampleC\": [1, 1] } ExcludedExample URI https://w3id.org/fep/888d#ExcludedExample Label Excluded Example Comment A class that is useful for ontology but not intended to be used for the context mapping Subclass of Object Is defined by FEP-888d \u53c2\u8003\u6587\u732e ActivityPub Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 AS2-Core James M Snell, Evan Prodromou, Activity Streams 2.0 , 2017 AS2-Vocab James M Snell, Evan Prodromou, Activity Vocabulary , 2017 CM-ATTRS mb21, Consistent attribute syntax , 2014 LD-TERM-DFN Gregg Kellogg, Pierre-Antoine Champin, Dave Longley, JSON-LD 1.1 - Section 9.15.1 \"Expanded term definition\" , 2020 RFC-2119 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels 1 helge, FEP-2e40: The FEP Vocabulary Extension Process , 2023 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-888d: Using https://w3id.org/fep as a base for FEP-specific namespaces"},{"location":"fep/fep-888d/#fep-888d-using-httpsw3idorgfep-as-a-base-for-fep-specific-namespaces","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-888d: Using https://w3id.org/fep as a base for FEP-specific namespaces"},{"location":"fep/fep-888d/#summary","text":"It is considered best practice in the linked-data ecosystem to have IRIs be HTTPS URIs that resolve to a definition of the term being used, and it is desirable to define such terms in a JSON-LD context file that is referenced by its IRI rather than having the full @context object embedded in every single document. ActivityStreams 2.0 and ActivityPub do this with the normative context and namespace provided at https://www.w3.org/ns/activitystreams , but this namespace is not generally open to extensions or to experimental terms. This FEP therefore proposes using https://w3id.org/fep as a base IRI for the FEP process, allowing sub-namespaces for each FEP.","title":"Summary"},{"location":"fep/fep-888d/#acknowledgements","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) The core idea behind this FEP is attributed to helge on SocialHub 1 . Specifically, the proposal to register fep at the W3ID service is adopted wholesale, with alterations made to the specifics of implementing the redirect mappings using .htaccess rules. These alterations are intended to allow easier sub-namespace allocation for each FEP.","title":"Acknowledgements"},{"location":"fep/fep-888d/#requirements","text":"The key words \"MUST\", \"SHOULD\", \"MAY\" are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-888d/#introduction","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) The Resource Description Framework (RDF), of which JSON-LD is a serialization, uses URIs to identify nodes on a graph, define properties of those nodes, and create relationships between those nodes. Each statement in RDF represents a fact that is constructed by linking a subject to an object with a predicate; for example, in the statement \"Alice knows Bob\", the subject Alice is related to the object Bob by the predicate knows . To avoid ambiguity, we can specify a URI for what it means to \"know\" someone. Such a URI represents a named property or named predicate, and it exists within a namespace, often associated with some ontology or vocabulary. ActivityStreams 2.0 provides and defines the Activity Vocabulary at https://www.w3.org/ns/activitystreams , and terms defined within may use either the base IRI https://www.w3.org/ns/activitystreams# or the compact IRI as: . For example, we can consider the definition of \"Public\" addressing within ActivityPub , represented by the Public magic collection. When the normative ActivityStreams 2.0 context is applied, the IRI for this collection may be equivalently expressed as Public , as:Public , or https://www.w3.org/ns/activitystreams#Public . Historically, extension terms within early ActivityPub implementations assumed that those extension terms would be readily adopted within the ActivityStreams namespace, but this did not happen. Currently, terms such as Hashtag , manuallyApprovesFollowers , movedTo , and sensitive are manually defined with compact IRIs using the as: prefix, in effect making it so that any implementation that wishes to understand these properties and types must manually define those terms as well, in the exact same way. Later extension terms were defined within vendor-specific namespaces such as http://joinmastodon.org/ns or https://joinpeertube.org/ns . With the increased adoption of ActivityPub by software projects and the diverse needs of such projects, each project will often define its own vendor-specific namespace to contain its own terms. This has led to a multitude of namespaces and extension terms, which must be cherry-picked as needed by JSON-LD consumers wishing to maintain compatibility. Additionally, some of these terms are defined incorrectly within @context , leading to the necessity of compatibility hacks on a per-project basis. Even terms defined correctly may overlap with other terms, and proposed new terms must be parented within a vendor namespace, creating the potential for conflict on which vendor should adopt which term. The aim of this FEP is to provide a vendor-independent namespace under which extension terms can be defined pursuant to the FEP process and the above problems can be reduced.","title":"Introduction"},{"location":"fep/fep-888d/#prior-art","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Within the XMPP ecosystem, the core XMPP specification is defined within an RFC, and further functionality is afforded by the \"eXtensible\" nature of XMPP. The XMPP Standards Foundation (XSF) maintains the process for stewarding new extensions via XMPP Extension Protocols (XEPs). XML namespacing for such extensions is provided by urn:xmpp: , as the XML ecosystem generally prefers using URNs rather than using HTTPS URIs. Such URNs are fully location-independent and not vulnerable to DNS expiry, lapsing, or insolvency. Instead, they are assigned within the authority of the XSF. The XSF maintains an XMPP Registrar and allows XEPs to request and define sub-namespaces beneath urn:xmpp: . In exchange, these URNs are not generally dereferencable without a resolver that looks up the URN within the XEP database. Within the RDF and linked-data ecosystems, there is a strong preference for HTTP or HTTPS URIs, as these can usually be dereferenced via the HTTP protocol for additional information about the subject of the URI. In cases where the URI does not resolve, the URI serves as an identifier not much different than a URN, but with its authority derived from DNS domain rather than from some organizational authority. The reliance on DNS domain creates an issue where the primary domain associated with a group or organization might change. If a previously-used domain is reassigned to a different party, then the new party can mint URIs that accidentally or intentionally conflict with previously-assigned URIs. To mitigate the DNS authority reassignment issue, trusted intermediary services can maintain a \"persistent URL\" (PURL) service, which allows assigning identifiers on the intermediary domain that will redirect to some other URI. This layer of indirection allows changing the location of the resource by simply changing the redirect's target. W3ID is one such service, operated by the W3C Permanent Identifier Community Group and available at https://w3id.org . At the time of writing this FEP, top-level directory names can be claimed by individuals who submit pull requests to the w3id.org repository on GitHub, and .htaccess files allow redirection based on rewrite rules that transform incoming requests to some other target.","title":"Prior art"},{"location":"fep/fep-888d/#specification","text":"","title":"Specification"},{"location":"fep/fep-888d/#design-goals","text":"Broad design goals for the redirect mapping include: Content negotiation for JSON-LD consumers. IRIs SHOULD return machine-friendly context documents or term definitions when requested via the Accept: application/ld+json HTTP header, and SHOULD otherwise return human-friendly proposal documents or term definitions by default. Sub-namespaces for each FEP. Identifiers for each term SHOULD be allocated within the namespace of the FEP that defines them. At minimum, the following redirects SHOULD resolve as follows: https://w3id.org/fep Accept: * => the FEP repository or current home page https://w3id.org/fep/(:id) Accept: application/ld+json => a specific FEP's context document Accept: * => a specific FEP's proposal document Additionally, the following MAY resolve: https://w3id.org/fep/(:id)/(:term) Accept: application/ld+json => a specific FEP's specific term definition in JSON-LD ontology/schema Accept: application/rdf+xml => a specific FEP's specific term definition in RDF/XML ontology/schema Accept: text/turtle => a specific FEP's specific term definition in Turtle ontology/schema Accept: * => a specific FEP's specific term's folder","title":"Design goals"},{"location":"fep/fep-888d/#mapping-w3idorgfep-to-fediversefep-on-codeberg","text":"At the time of writing this FEP, the Codeberg repository at https://codeberg.org/fediverse/fep is used to host FEP-related files, and can similarly be used to host context documents.","title":"Mapping w3id.org/fep to fediverse/fep on Codeberg"},{"location":"fep/fep-888d/#example","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) An example .htaccess file is co-located with this FEP, and reproduced below for convenience: RewriteEngine on # catch root request RewriteRule ^\\/?$ https://codeberg.org/fediverse/fep [R=302,L] # Catch FEP documents ## By content negotiation ### JSON-LD RewriteCond %{HTTP_ACCEPT} application/ld\\+json RewriteRule ^([A-Za-z0-9]+)\\/?$ https://raw.codeberg.page/fediverse/fep/fep/$1/fep-$1.jsonld [R=302,L] ### RDF+XML RewriteCond %{HTTP_ACCEPT} application/rdf\\+xml RewriteRule ^([A-Za-z0-9]+)\\/?$ https://fediverse.codeberg.page/fep/fep/$1/fep-$1.rdf [R=302,L] ### Turtle RewriteCond %{HTTP_ACCEPT} text/turtle RewriteRule ^([A-Za-z0-9]+)\\/?$ https://fediverse.codeberg.page/fep/fep/$1/fep-$1.ttl [R=302,L] ## By URL hacking RewriteRule ^([A-Za-z0-9]+).jsonld$ https://raw.codeberg.page/fediverse/fep/fep/$1/fep-$1.jsonld [R=302,L] RewriteRule ^([A-Za-z0-9]+).rdf$ https://raw.codeberg.page/fediverse/fep/fep/$1/fep-$1.rdf [R=302,L] RewriteRule ^([A-Za-z0-9]+).ttl$ https://raw.codeberg.page/fediverse/fep/fep/$1/fep-$1.ttl [R=302,L] ## By default, take you to the FEP document RewriteRule ^([A-Za-z0-9]+)\\/?$ https://codeberg.org/fediverse/fep/src/branch/main/fep/$1/fep-$1.md [R=302,L] # Catch term definitions/schemas/ontologies ## By content negotiation ### JSON-LD RewriteCond %{HTTP_ACCEPT} application/ld\\+json RewriteRule ^([A-Za-z0-9]+)\\/(.*?)\\/?$ https://raw.codeberg.page/fediverse/fep/fep/$1/$2/$2.jsonld [R=302,L] ### RDF+XML RewriteCond %{HTTP_ACCEPT} application/rdf\\+xml RewriteRule ^([A-Za-z0-9]+)\\/(.*?)\\/?$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.rdf [R=302,L] ### Turtle RewriteCond %{HTTP_ACCEPT} text/turtle RewriteRule ^([A-Za-z0-9]+)\\/(.*?)\\/?$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.ttl [R=302,L] ### test html RewriteCond %{HTTP_ACCEPT} ^text/html$ RewriteRule ^([A-Za-z0-9]+)\\/(.*?)\\/?$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.html [R=302,L] ## By URL hacking RewriteRule ^([A-Za-z0-9]+)\\/(.*?).jsonld$ https://raw.codeberg.page/fediverse/fep/fep/$1/$2/$2.jsonld [R=302,L] RewriteRule ^([A-Za-z0-9]+)\\/(.*?).rdf$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.rdf [R=302,L] RewriteRule ^([A-Za-z0-9]+)\\/(.*?).ttl$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.ttl [R=302,L] RewriteRule ^([A-Za-z0-9]+)\\/(.*?).html$ https://fediverse.codeberg.page/fep/fep/$1/$2/$2.html [R=302,L] RewriteRule ^([A-Za-z0-9]+)\\/(.*?).md$ https://fediverse.codeberg.page/fep/fep/$1/$2/README.md [R=302,L] ## By default, just take you to the term's folder RewriteRule ^([A-Za-z0-9]+)\\/(.*?)\\/?$ https://codeberg.org/fediverse/fep/src/branch/main/fep/$1/$2 [R=302,L] # a generic catch-all rule RewriteRule ^(.*)\\/?$ https://codeberg.org/fediverse/fep/raw/branch/main/fep/$1 [R=302,L]","title":"Example"},{"location":"fep/fep-888d/#defining-terms-associated-with-an-fep","text":"FEPs that wish to define extension terms within the w3id.org/fep namespace MUST provide a JSON-LD document co-located within their FEP folder with a filename of the form fep-xxxx.jsonld , where xxxx is the FEP's slug. This document MUST include at least a @context key, whose value is a JSON object containing term definitions. Simple term definitions map a term key to an IRI value. Expanded term definitions contain @id for each term, with @type of @id if the term links to another node on the graph. Refer to LD-TERM-DFN for additional guidance on defining terms within JSON-LD. The document MAY include additional metadata outside of the @context , such as schema or ontology definitions. If this is done, then you SHOULD NOT include any prefixes in your @context that are only used within the graph, as these can pollute the usage as a context document. Once the FEP is marked FINAL , the context document MAY be cached forever if referenced. FEPs that define extension terms MAY instead define extension terms within a vendor-specific namespace, but generally this SHOULD NOT be done.","title":"Defining terms associated with an FEP"},{"location":"fep/fep-888d/#example-using-paths","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) For example, say we wanted to define the following terms within the current FEP-888d: SomeType is a term for some type exampleA is a term for a property with some literal value (string, boolean, number) exampleB is a term for a property that links to another node on the graph (for example, another object) exampleC is a term for a property that is an ordered list of literal values that are specifically non-negative integers The context document might look like this, at minimum: { \"@context\": { \"SomeType\": \"https://w3id.org/fep/888d/SomeType\", \"exampleA\": \"https://w3id.org/fep/888d/exampleA\", \"exampleB\": { \"@id\": \"https://w3id.org/fep/888d/exampleB\", \"@type\": \"@id\" }, \"exampleC\": { \"@id\": \"https://w3id.org/fep/888d/exampleC\", \"@type\": \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\", \"@container\": \"@list\" } } } Refer to LD-TERM-DFN for additional guidance on defining terms within JSON-LD. A folder within the FEP's directory should be used to provide additional documentation for the term, such as ontology or schema definitions via JSON-LD, RDF/XML, and/or Turtle.","title":"Example using paths"},{"location":"fep/fep-888d/#example-using-fragment-identifiers","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Depending on convenience or preference, the context document might instead look like this: { \"@context\": { \"SomeType\": \"https://w3id.org/fep/888d#SomeType\", \"exampleA\": \"https://w3id.org/fep/888d#exampleA\", \"exampleB\": { \"@id\": \"https://w3id.org/fep/888d#exampleB\", \"@type\": \"@id\" }, \"exampleC\": { \"@id\": \"https://w3id.org/fep/888d#exampleC\", \"@type\": \"http://www.w3.org/2001/XMLSchema#nonNegativeInteger\", \"@container\": \"@list\" } } } Refer to LD-TERM-DFN for additional guidance on defining terms within JSON-LD. In such a case, the FEP document should include an element with an HTML identifier that exactly matches the term name, so that the IRI fragment resolves properly. In practice, this means one of the following: Using a heading with a name that exactly matches the term name. This should be autolinked correctly by most Markdown processors. Be warned that this may cause problems for FEPs that define terms conflicting with common header names, such as summary , acknowledgements , requirements , references , copyright , and so on, including any headers that the FEP author includes for purposes other than explicitly defining the term. Using a heading with a custom attribute containing an ID. Some Markdown processors such as Goldmark will handle cases such as ### h3 {#custom-identifier} and render <h3 id=\"custom-identifier\">h3</h3> . Markdown specifications such as CommonMark currently do not support custom attributes, but some Markdown processors such as Goldmark support custom attributes on headers (but not on arbitrary elements). See CM-ATTRS for more discussion of this feature. Using an HTML definition list, with id attributes exactly matching the term name. HTML within Markdown files is generally rendered as-is, although it may be sanitized, stripped, or disallowed for security purposes. In cases where it is allowed, however, it can be an effective way to express term definitions within an FEP document.","title":"Example using fragment identifiers"},{"location":"fep/fep-888d/#defining-terms-in-a-machine-readable-way","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) If terms are defined within HTML using RDFa, and this HTML is embedded in the Markdown contents of the FEP document, then these term definitions can be used to programmatically generate machine-readable term definitions, schemas, and ontologies in multiple formats. A Python script is provided within the FEP repository at scripts/make_definitions.py for convenience. To make use of the script, it is necessary to structure term definitions in a specific way. We define a \"term definition\" to be any HTML element that adheres to the following requirements: The HTML element has an HTML id attribute equal to the shorthand term name. The HTML element has an RDFa resource attribute equal to the term's full IRI. Generally, this HTML element should be a <section> tag, and it should contain a definition list ( <dl></dl> ) where each term ( <dt></dt> ) and definition ( <dd></dd> ) provide a key-value pair representing a property of that term definition. Examples may be provided within a preformatted code block ( <pre><code></code></pre> ), and multiple examples may be provided. Example code blocks can have a title attribute on the <pre> tag. It is generally recommended to put any term definitions below a heading called something like \"Terms defined\". For all term definitions regardless of type, it is recommended to include the following properties in your definition list: rdfs:label is a natural language label that can replace the shorthand term. For example, a term that is normally expressed with the shorthand hasValue might be labelled has value in plain English. rdfs:comment is a natural language description that gives more detail about what the term means. rdfs:isDefinedBy is a reference pointing to where the term is defined. Usually this is the current FEP, but meta-FEPs that bundle other FEPs may use this property to refer to the original FEP that defined a term. For term definitions that define a class (such as rdfs:Class or owl:Class ), it is recommended to include the following properties in your definition list if appropriate: rdfs:seeAlso is a reference to some other resource that provides more information about the current term. Usually this can be used to link a class to the properties that instances of that class may have. rdfs:subClassOf is a property that declares the current class to inherit from the object. Logically, if something is an instance of the current class, it is also an instance of the superclass. For example, in AS2-Vocab , OrderedCollection is a subclass of Collection , so all OrderedCollection objects are also implied to have a type of Collection as well, even if not explicitly declared to be one. For term definitions that define a property (such as rdf:Property , owl:DatatypeProperty , or owl:ObjectProperty ), it is recommended to include the following properties in your definition list if appropriate: rdfs:domain is the Domain of the property. Logically, this implies that if a property p has a domain D , and a given resource has the property p , then that resource has a type of D . For example, in AS2-Vocab the domain of actor is Activity , so anything that has an actor is implied to be an Activity even if not explicitly declared to be one. rdfs:range is the Range of the property. Logically, this implies that if a property p has a range R , and a given resource is the value of p , then that resource has a type of R . For example, in AS2-Vocab the range of replies is Collection , so anything that is the value of replies is implied to be a Collection even if not explicitly declared to be one. In cases where a property is Required, this can be stated by declaring that the property of owl:minCardinality has a content of 1 (with a datatype of xsd:nonNegativeInteger ). In other words, a property with a minimum cardinality of 1 must have at least one value. If the property is not Required, then this statement can be amended to have a content of 0 , or in other words, you are stating that this property must have at least 0 values (which allows having no values). In cases where a property is Functional, this can be stated by declaring that the property of owl:maxCardinality has a content of 1 (with a datatype of xsd:nonNegativeInteger ). In other words, a property with a maximum cardinality of 1 can have at most one value. If the property is not Functional, then this statement can be omitted. rdfs:seeAlso is a reference to some other resource that provides more information about the current term. Usually this can be used to link a property to other related terms, such as term definitions that can be used as the value of this property. If the term definition contains JSON-LD keywords like @id , @vocab , @set , or @list within a <dd> element whose corresponding <dt> element's inner text exactly matches Range , then these keywords can be used to automatically generate a context document. Set the attribute excluded on the term definition to a non-empty value to exclude it from auto-generated context term definitions.","title":"Defining terms in a machine-readable way"},{"location":"fep/fep-888d/#using-the-python-script","text":"Source code for the script is available in make_definition.py , currently co-located in the FEP-888d folder. The script will operate according to the following logic:","title":"Using the python script"},{"location":"fep/fep-888d/#options-available","text":"GENERATE_CONTEXT_FROM_TERMDEFS: if true, will automatically generate a context. The generated context can be manipulated by the presence of JSON-LD keywords like @id , @vocab , @set , and @list . OUTPUT_FORMATS: a list of formats to be used when generating outputs for both singular term definitions as well as FEP-wide schema or ontology files. PATH_TO_CONTEXT: a pre-written context document whose context mapping will be injected into the JSON-LD output of the FEP. Defaults to the JSON-LD alternate format of the FEP ( fep-$SLUG.jsonld co-located within the FEP folder). Failure to read this path as valid JSON will lead to an empty context mapping.","title":"Options available"},{"location":"fep/fep-888d/#algorithm","text":"1) Render markdown as HTML. 2) Find all HTML elements that have id and resource . These are considered \"term definitions\". 3) Initialize an empty graph for the entire FEP. 4) Initialize an empty context mapping for the entire FEP. 4.1) If GENERATE_CONTEXT_FROM_TERMDEFS is set to false, then try to load an existing context mapping from PATH_TO_CONTEXT. 5) Loop over all elements identified as \"term definitions\". 5.1) Initialize an empty graph for the current term. 5.2) Set the subject s equal to the resource attribute of the element. 5.3) Set term_type equal to the typeof attribute of the element. 5.4) Add a statement to the current term graph, of the form s rdf:type term_type . 5.5) Loop over all child elements with a property attribute. These are considered \"property definitions\". 5.5.1) Set the predicate p equal to the property attribute. 5.5.2) Set the object o equal to the resource attribute. If not present, then set the object o equal to the href attribute. If not present, then set the object o equal to the content attribute. If not present, then set the object o equal to the inner text of the current element. 5.5.3) Set the language lang equal to the lang attribute. 5.5.4) Set the datatype datatype equal to the datatype attribute. 5.5.5) Add a statement to the current term's graph using s , p , o , lang , and datatype , making sure to expand any CURIEs according to the RDFa initial context. 5.5.5.1) If there is a datatype or lang , then the object o is a Literal. 5.5.5.2) Otherwise, the object o is an IRI reference. 5.6) If GENERATE_CONTEXT_FROM_TERMDEFS is set to true and the current element does not have an excluded attribute, then extract JSON-LD keywords and automatically generate a context term definition. 5.6.1) Set the shorthand term_name equal to the id attribute of the element. 5.6.2) Initialize an options mapping to keep track of extended term definitions. 5.6.3) Pairwise combine each child <dt> element with its corresponding child <dd> element. 5.6.4) Find a <dt> element whose inner text is exactly \"Range\". [TODO: something less fragile?] 5.6.5) Check the corresponding <dd> element for a resource attribute. If there is one, extract this IRI as type_iri . 5.6.5.1) If this type_iri starts with xsd , then insert @type: type_iri into the options mapping. 5.6.6) Check the text content of the <dd> element for a substring @id . If found, then insert @type: @id into the options mapping. 5.6.7) Check the text content of the <dd> element for a substring @vocab . If found, then insert @type: @vocab into the options mapping. 5.6.8) Check the text content of the <dd> element for a substring @set . If found, then insert @container: @set into the options mapping. 5.6.9) Check the text content of the <dd> element for a substring @list . If found, then insert @container: @list into the options mapping. 5.6.10) If the options mapping is not empty, then insert @id: s into the options mapping. 5.6.11) If the options mapping is not empty, then map term_name to the options mapping. Otherwise, map term_name to the string s . This is considered a \"context term definition\". 5.6.12) Insert the context term definition into the context mapping. 5.7) Merge the current term graph into the FEP-wide graph. 5.8) If the subject s is not a fragment identifier, then for each alternate output format in OUTPUT_FORMATS, serialize the current term graph to that format and write it to a file within a co-located subfolder with the name term_name . 5.8.1) If HTML+RDFa is one of the OUTPUT_FORMATS, then the term definition element can be copied as-is. 5.8.2) If Markdown is one of the OUTPUT_FORMATS: 5.8.2.1) Write a first-level heading with the shorthand term_name set equal to the id attribute of the term definition. 5.8.2.2) Pairwise combine each child <dt> element with its corresponding child <dd> element. 5.8.2.3) For each pair of <dt> and <dd> element, write a definition list term and definition list definition. 5.8.2.4) Extract examples by finding all HTML elements that are <pre> . 5.8.2.5) If any examples were found, write a second-level heading with the text set to Examples . 5.8.2.5) For each example block found: 5.8.2.5.1) If a title attribute is present, then write a paragraph with the text set to the value of title . 5.8.2.5.2) Write the start of the code block with backticks. If a lang attribute is present, then append its value immediately afterward. 5.8.2.5.3) Write the inner text of the example. 5.8.2.5.4) Write the closing backticks for closing the code block. 6) For each alternate output format in OUTPUT_FORMATS, serialize the FEP-wide graph to that format and write it to a file co-located with the name fep-$SLUG.$FORMAT . For example, if Turtle output is enabled, then fep-xxxx.ttl will be written. For JSON-LD output, use the current context mapping when serializing the FEP-wide graph. For HTML+RDFa or Markdown output, ignore these formats. (Outputting HTML can be done as part of a separate process of rendering the Markdown with a static site generator. Outputting the Markdown makes no sense since it is the source material and should not be overwritten.) 6.3) If GENERATE_CONTEXT_FROM_TERMDEFS is set to true but JSON-LD is not one of the output formats, then initialize and serialize an empty graph, using the generated context term definition. 6.1.1) Remove the graph from the context document. 6.1.2) Save the generated context document as fep-xxxx.jsonld .","title":"Algorithm"},{"location":"fep/fep-888d/#usage","text":"Install required python dependencies, for example in a virtual environment: python-markdown beautifulsoup4 rdflib markdownify python-frontmatter The script should be run in the base directory of the fediverse/fep repo. python make_definitions.py $SLUG will read term definitions from the contents of fep/$SLUG/fep-$SLUG.md , then generate alternate formats for the FEP. If your terms are defined with fragment identifiers (of the form https://w3id.org/fep/xxxx#term ), then only the FEP itself will be generated in alternate formats. If your terms are defined with absolute identifiers (of the form https://w3id.org/fep/xxxx/term ), then co-located subdirectories will be created as well, and singular term definitions will be generated in chosen output formats. If a context.jsonld document is present in the FEP folder, then it will be copied into the JSON-LD alternate format output. The current default output formats are: .ttl (Turtle) .rdf (RDF/XML) .jsonld (JSON-LD) .html (HTML+RDFa) (singular term definitions only) .md (README.md for the Codeberg repo viewer) (singular term definitions only) python make_definitions.py $SLUG -c will do everything in the above bullet point, except for copying context.jsonld . Instead, it will check for JSON-LD keywords and attempt to auto-generate a context document based on those keywords. If JSON-LD output is disabled, the script will generate only a context document instead of a combined context document and schema or ontology.","title":"Usage"},{"location":"fep/fep-888d/#example-terms-defined-by-this-fep","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Using the same fictitious terms from the above examples: SomeType is a term for some type exampleA is a term for a property with some literal value (string, boolean, number) exampleB is a term for a property that links to another node on the graph (for example, another object) exampleC is a term for a property that is an ordered list of literal values that are specifically non-negative integers ExcludedExample is a term for some class that is useful for ontology but not intended to be used for the context mapping We can formulate the following machine-readable term definition blocks, which are intended to provide a range of examples of various RDFa syntactical constructs for demonstration purposes. Specifically, the following mechanisms are demonstrated: Declaring a resource with a typeof some class Declaring a natural language property with a specified lang Specifically, the rdfs:label and rdfs:comment properties provide natural language representations and descriptions of the defined term Declaring that a property has a value that is a resource Declaring a property where the object value is referred to by href instead of resource (for example, in an anchor link) Declaring multiple values for a given property by including multiple tags Providing additional schema metadata that wasn't provided in the @context , such as signaling that a property is required or functional Declaring that a property has literal content instead of referring to a resource, and that this content can have its own datatype to which it can be coerced Excluding a term definition from the automatically generated context document, using the excluded attribute","title":"Example terms defined by this FEP"},{"location":"fep/fep-888d/#_1","text":"ActivityPub Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 AS2-Core James M Snell, Evan Prodromou, Activity Streams 2.0 , 2017 AS2-Vocab James M Snell, Evan Prodromou, Activity Vocabulary , 2017 CM-ATTRS mb21, Consistent attribute syntax , 2014 LD-TERM-DFN Gregg Kellogg, Pierre-Antoine Champin, Dave Longley, JSON-LD 1.1 - Section 9.15.1 \"Expanded term definition\" , 2020 RFC-2119 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels 1 helge, FEP-2e40: The FEP Vocabulary Extension Process , 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-888d/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-8b32/","text":"FEP-8b32: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6574\u5408\u6027\u8a3c\u660e Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u304c\u5b8c\u4e86\u3057\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6982\u8981 \u3053\u306e\u63d0\u6848\u3067\u306f\u3001 ActivityPub \u30b5\u30fc\u30d0\u30fc\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u81ea\u5df1\u8a8d\u8a3c\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 HTTP \u7f72\u540d\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u9593\u306e\u3084\u308a\u53d6\u308a\u4e2d\u306e\u8a8d\u8a3c\u306b\u3088\u304f\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u3053\u308c\u306b\u3088\u308a\u8a8d\u8a3c\u304c\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u306e\u914d\u4fe1\u306b\u7d50\u3073\u4ed8\u3051\u3089\u308c\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u67d4\u8edf\u6027\u304c\u5236\u9650\u3055\u308c\u307e\u3059\u3002 \u6574\u5408\u6027\u8a3c\u660e\u306f\u3001\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u3068\u305d\u308c\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8868\u3059\u5c5e\u6027\u306e\u30bb\u30c3\u30c8\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u8a3c\u660e\u306f\u4efb\u610f\u306e\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u307e\u305f\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3067\u304d\u3001\u53d7\u4fe1\u8005\u306f\u30a2\u30af\u30bf\u30fc\u306e ID \u3068\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u3092\u691c\u8a3c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u8a8d\u8a3c\u304c\u30c8\u30e9\u30f3\u30b9\u30dd\u30fc\u30c8\u304b\u3089\u5207\u308a\u96e2\u3055\u308c\u3001\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u306e\u30ea\u30ec\u30fc\u3001\u57cb\u3081\u8fbc\u307f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u7f72\u540d\u306a\u3069\u200b\u200b\u3001\u3055\u307e\u3056\u307e\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u6539\u5584\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002 \u6b74\u53f2 Mastodon \u306f 2017\u5e74\u304b\u3089 Linked Data \u7f72\u540d\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u5f8c\u3001\u4ed6\u306e\u591a\u304f\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u30b5\u30dd\u30fc\u30c8\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u7f72\u540d\u306f\u6574\u5408\u6027\u8a3c\u660e\u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u6a19\u6e96\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u305f\u53e4\u3044 Linked Data Signatures 1.0 \u4ed5\u69d8\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002 \u8981\u4ef6 \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5185\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u300cMUST\u300d\u3001\u300cMUST NOT\u300d\u3001\u300cREQUIRED\u300d\u3001\u300cSHALL\u300d\u3001\u300cSHALL NOT\u300d\u3001\u300cSHOULD\u300d\u3001\u300cSHOULD NOT\u300d\u3001\u300cRECOMMENDED\u300d\u3001\u300cMAY\u300d\u3001\u304a\u3088\u3073\u300cOPTIONAL\u300d\u306f\u3001 RFC-2119 \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3068\u304a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 \u5b8c\u5168\u6027\u306e\u8a3c\u660e \u63d0\u6848\u3055\u308c\u305f\u8a8d\u8a3c\u30e1\u30ab\u30cb\u30ba\u30e0\u306f\u3001 \u30c7\u30fc\u30bf\u6574\u5408\u6027 \u4ed5\u69d8\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002 \u8a3c\u660e\u306e\u751f\u6210 \u8a3c\u660e\u306f\u3001\u30c7\u30fc\u30bf\u6574\u5408\u6027\u4ed5\u69d8\u306e \u30bb\u30af\u30b7\u30e7\u30f34.2\u300c\u8a3c\u660e\u306e\u8ffd\u52a0\u300d \u306b\u5f93\u3063\u3066\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u8a3c\u660e\u751f\u6210\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u6b21\u306e\u624b\u9806\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002 \u6b63\u898f\u5316 \u306f\u3001\u4f55\u3089\u304b\u306e\u6c7a\u5b9a\u8ad6\u7684\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5f93\u3063\u3066\u3001JSON \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30cf\u30c3\u30b7\u30e5\u306b\u9069\u3057\u305f\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30cf\u30c3\u30b7\u30e5\u5316 \u306f\u3001\u6697\u53f7\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u5909\u63db\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u8b58\u5225\u5b50\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u3067\u3059\u3002 \u7f72\u540d\u751f\u6210 \u306f\u3001\u5165\u529b\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u3092\u5909\u66f4\u304b\u3089\u4fdd\u8b77\u3059\u308b\u5024\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u3067\u3059\u3002 \u7d50\u679c\u306e\u8a3c\u660e\u306f\u3001\u5143\u306eJSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e proof \u30ad\u30fc\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u8907\u6570\u306e\u8a3c\u660e\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u6574\u5408\u6027\u8a3c\u660e\u3067\u4f7f\u7528\u3055\u308c\u308b\u5c5e\u6027\u306e\u30ea\u30b9\u30c8\u306f\u3001\u30c7\u30fc\u30bf\u6574\u5408\u6027\u4ed5\u69d8\u306e \u30bb\u30af\u30b7\u30e7\u30f32.1 \u8a3c\u660e \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a3c\u660e\u30bf\u30a4\u30d7\u306f\u30bb\u30af\u30b7\u30e7\u30f33.1 DataIntegrityProof \u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b DataIntegrityProof \u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 proofPurpose \u5c5e\u6027\u306e\u5024\u306f assertionMethod \u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 \u8a3c\u660e\u306e verificationMethod \u5c5e\u6027\u306e\u5024\u306f\u3001\u516c\u958b\u9375\u306eHTTP(S)URL\u307e\u305f\u306f DID URL \u3068\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u691c\u8a3c\u65b9\u6cd5\u3092\u8868\u73fe\u3059\u308b \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u306f\u3001\u30a2\u30af\u30bf\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u307e\u305f\u306f ActivityPub \u30a2\u30af\u30bf\u30fc\u306b\u8a3c\u660e\u7684\u306b\u95a2\u9023\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u4ed6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8( DID \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306a\u3069)\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044[MUST]\u3002\u691c\u8a3c\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e assertionMethod \u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u95a2\u9023\u4ed8\u3051\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044[MUST]\u3002\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u30a2\u30af\u30bf\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u5834\u5408\u3001\u5b9f\u88c5\u8005\u306f\u3001 FEP-521a \u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001 assertionMethod \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f7f\u7528\u3059\u3079\u304d\u3067\u3042\u308b[SHOULD]\u3002 Proof verification Recipients of an object SHOULD perform proof verification if it contains integrity proofs. Verification process MUST follow the Data Integrity specification, section 4.4 Verify Proof . It starts with the removal of the proof value from the JSON object. Then verification method is retrieved from the controller document as described in Controller Documents specification, section 3.3 Retrieve Verification Method . Then the object is canonicalized, hashed and signature verification is performed according to the parameters specified in the proof. If both HTTP signature and integrity proof are used, the integrity proof MUST be given precedence over HTTP signature. The HTTP signature MAY be dismissed. Algorithms Implementers are expected to pursue broad interoperability when choosing algorithms for integrity proofs. eddsa-jcs-2022 cryptosuite is RECOMMENDED: Canonicalization: JCS Hashing: SHA-256 Signatures: EdDSA [!WARNING] eddsa-jcs-2022 cryptosuite specification is not stable and may change before it becomes a W3C Recommendation. Backward compatibility Integrity proofs and linked data signatures can be used together, as they rely on different properties ( proof and signature , respectively). If compatiblity with legacy systems is desired, the integrity proof MUST be created and inserted before the generation of the linked data signature. If both proof and signature are present in a received object, the linked data signature MUST be removed before the verification of the integrity proof. Special cases Activities The controller of the verification method MUST match the actor of activity, or be associated with that actor. \u4f8b Signed object { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"id\": \"https://server.example/objects/1\", \"type\": \"Note\", \"attributedTo\": \"https://server.example/users/alice\", \"content\": \"Hello world\", \"proof\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"https://server.example/users/alice#ed25519-key\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\", \"created\": \"2023-02-24T23:36:38Z\" } } Signed activity { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"id\": \"https://server.example/activities/1\", \"type\": \"Create\", \"actor\": \"https://server.example/users/alice\", \"object\": { \"id\": \"https://server.example/objects/1\", \"type\": \"Note\", \"attributedTo\": \"https://server.example/users/alice\", \"content\": \"Hello world\" }, \"proof\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"https://server.example/users/alice#ed25519-key\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\", \"created\": \"2023-02-24T23:36:38Z\" } } Signed activity with embedded signed object { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\", { \"object\": { \"@id\": \"as:object\", \"@type\": \"@json\" } } ], \"id\": \"https://server.example/activities/1\", \"type\": \"Create\", \"actor\": \"https://server.example/users/alice\", \"object\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"id\": \"https://server.example/objects/1\", \"type\": \"Note\", \"attributedTo\": \"https://server.example/users/alice\", \"content\": \"Hello world\", \"proof\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"https://server.example/users/alice#ed25519-key\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\", \"created\": \"2023-02-24T23:36:38Z\" } }, \"proof\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"https://server.example/users/alice#ed25519-key\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\", \"created\": \"2023-02-24T23:36:38Z\" } } Test vectors See fep-8b32.feature \u5b9f\u88c5 Mitra Vervis ( generation , verification ) Streams Hubzilla Fedify Use cases Forwarding from inbox Conversation Containers FEP-ef61: Portable Objects FEP-ae97: Client-side activity signing \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2024 Manu Sporny, Dave Longley, Markus Sabadello, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0 , 2022 Dave Longley, Manu Sporny, Markus Sabadello, Drummond Reed, Orie Steele, Christopher Allen, Controller Documents 1.0 , 2024 silverpill, FEP-521a: Representing actor's public keys , 2023 Dave Longley, Manu Sporny, Data Integrity EdDSA Cryptosuites v1.0 , 2024 A. Rundgren, B. Jordan, S. Erdtman, JSON Canonicalization Scheme (JCS) , 2020 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-8b32: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6574\u5408\u6027\u8a3c\u660e"},{"location":"fep/fep-8b32/#fep-8b32","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u304c\u5b8c\u4e86\u3057\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-8b32: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6574\u5408\u6027\u8a3c\u660e"},{"location":"fep/fep-8b32/#_1","text":"\u3053\u306e\u63d0\u6848\u3067\u306f\u3001 ActivityPub \u30b5\u30fc\u30d0\u30fc\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u81ea\u5df1\u8a8d\u8a3c\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 HTTP \u7f72\u540d\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u9593\u306e\u3084\u308a\u53d6\u308a\u4e2d\u306e\u8a8d\u8a3c\u306b\u3088\u304f\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u3053\u308c\u306b\u3088\u308a\u8a8d\u8a3c\u304c\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u306e\u914d\u4fe1\u306b\u7d50\u3073\u4ed8\u3051\u3089\u308c\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u67d4\u8edf\u6027\u304c\u5236\u9650\u3055\u308c\u307e\u3059\u3002 \u6574\u5408\u6027\u8a3c\u660e\u306f\u3001\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u3068\u305d\u308c\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8868\u3059\u5c5e\u6027\u306e\u30bb\u30c3\u30c8\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u8a3c\u660e\u306f\u4efb\u610f\u306e\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u307e\u305f\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3067\u304d\u3001\u53d7\u4fe1\u8005\u306f\u30a2\u30af\u30bf\u30fc\u306e ID \u3068\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u3092\u691c\u8a3c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u8a8d\u8a3c\u304c\u30c8\u30e9\u30f3\u30b9\u30dd\u30fc\u30c8\u304b\u3089\u5207\u308a\u96e2\u3055\u308c\u3001\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u306e\u30ea\u30ec\u30fc\u3001\u57cb\u3081\u8fbc\u307f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u7f72\u540d\u306a\u3069\u200b\u200b\u3001\u3055\u307e\u3056\u307e\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u6539\u5584\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u6982\u8981"},{"location":"fep/fep-8b32/#_2","text":"Mastodon \u306f 2017\u5e74\u304b\u3089 Linked Data \u7f72\u540d\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u5f8c\u3001\u4ed6\u306e\u591a\u304f\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u30b5\u30dd\u30fc\u30c8\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u7f72\u540d\u306f\u6574\u5408\u6027\u8a3c\u660e\u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u6a19\u6e96\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u305f\u53e4\u3044 Linked Data Signatures 1.0 \u4ed5\u69d8\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002","title":"\u6b74\u53f2"},{"location":"fep/fep-8b32/#_3","text":"\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5185\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u300cMUST\u300d\u3001\u300cMUST NOT\u300d\u3001\u300cREQUIRED\u300d\u3001\u300cSHALL\u300d\u3001\u300cSHALL NOT\u300d\u3001\u300cSHOULD\u300d\u3001\u300cSHOULD NOT\u300d\u3001\u300cRECOMMENDED\u300d\u3001\u300cMAY\u300d\u3001\u304a\u3088\u3073\u300cOPTIONAL\u300d\u306f\u3001 RFC-2119 \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3068\u304a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002","title":"\u8981\u4ef6"},{"location":"fep/fep-8b32/#_4","text":"\u63d0\u6848\u3055\u308c\u305f\u8a8d\u8a3c\u30e1\u30ab\u30cb\u30ba\u30e0\u306f\u3001 \u30c7\u30fc\u30bf\u6574\u5408\u6027 \u4ed5\u69d8\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002","title":"\u5b8c\u5168\u6027\u306e\u8a3c\u660e"},{"location":"fep/fep-8b32/#_5","text":"\u8a3c\u660e\u306f\u3001\u30c7\u30fc\u30bf\u6574\u5408\u6027\u4ed5\u69d8\u306e \u30bb\u30af\u30b7\u30e7\u30f34.2\u300c\u8a3c\u660e\u306e\u8ffd\u52a0\u300d \u306b\u5f93\u3063\u3066\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u8a3c\u660e\u751f\u6210\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u6b21\u306e\u624b\u9806\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002 \u6b63\u898f\u5316 \u306f\u3001\u4f55\u3089\u304b\u306e\u6c7a\u5b9a\u8ad6\u7684\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5f93\u3063\u3066\u3001JSON \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30cf\u30c3\u30b7\u30e5\u306b\u9069\u3057\u305f\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30cf\u30c3\u30b7\u30e5\u5316 \u306f\u3001\u6697\u53f7\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u5909\u63db\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u8b58\u5225\u5b50\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u3067\u3059\u3002 \u7f72\u540d\u751f\u6210 \u306f\u3001\u5165\u529b\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u3092\u5909\u66f4\u304b\u3089\u4fdd\u8b77\u3059\u308b\u5024\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u3067\u3059\u3002 \u7d50\u679c\u306e\u8a3c\u660e\u306f\u3001\u5143\u306eJSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e proof \u30ad\u30fc\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u8907\u6570\u306e\u8a3c\u660e\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u6574\u5408\u6027\u8a3c\u660e\u3067\u4f7f\u7528\u3055\u308c\u308b\u5c5e\u6027\u306e\u30ea\u30b9\u30c8\u306f\u3001\u30c7\u30fc\u30bf\u6574\u5408\u6027\u4ed5\u69d8\u306e \u30bb\u30af\u30b7\u30e7\u30f32.1 \u8a3c\u660e \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a3c\u660e\u30bf\u30a4\u30d7\u306f\u30bb\u30af\u30b7\u30e7\u30f33.1 DataIntegrityProof \u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b DataIntegrityProof \u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 proofPurpose \u5c5e\u6027\u306e\u5024\u306f assertionMethod \u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 \u8a3c\u660e\u306e verificationMethod \u5c5e\u6027\u306e\u5024\u306f\u3001\u516c\u958b\u9375\u306eHTTP(S)URL\u307e\u305f\u306f DID URL \u3068\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u691c\u8a3c\u65b9\u6cd5\u3092\u8868\u73fe\u3059\u308b \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u306f\u3001\u30a2\u30af\u30bf\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u307e\u305f\u306f ActivityPub \u30a2\u30af\u30bf\u30fc\u306b\u8a3c\u660e\u7684\u306b\u95a2\u9023\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u4ed6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8( DID \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306a\u3069)\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044[MUST]\u3002\u691c\u8a3c\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e assertionMethod \u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u95a2\u9023\u4ed8\u3051\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044[MUST]\u3002\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u30a2\u30af\u30bf\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u5834\u5408\u3001\u5b9f\u88c5\u8005\u306f\u3001 FEP-521a \u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001 assertionMethod \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f7f\u7528\u3059\u3079\u304d\u3067\u3042\u308b[SHOULD]\u3002","title":"\u8a3c\u660e\u306e\u751f\u6210"},{"location":"fep/fep-8b32/#proof-verification","text":"Recipients of an object SHOULD perform proof verification if it contains integrity proofs. Verification process MUST follow the Data Integrity specification, section 4.4 Verify Proof . It starts with the removal of the proof value from the JSON object. Then verification method is retrieved from the controller document as described in Controller Documents specification, section 3.3 Retrieve Verification Method . Then the object is canonicalized, hashed and signature verification is performed according to the parameters specified in the proof. If both HTTP signature and integrity proof are used, the integrity proof MUST be given precedence over HTTP signature. The HTTP signature MAY be dismissed.","title":"Proof verification"},{"location":"fep/fep-8b32/#algorithms","text":"Implementers are expected to pursue broad interoperability when choosing algorithms for integrity proofs. eddsa-jcs-2022 cryptosuite is RECOMMENDED: Canonicalization: JCS Hashing: SHA-256 Signatures: EdDSA [!WARNING] eddsa-jcs-2022 cryptosuite specification is not stable and may change before it becomes a W3C Recommendation.","title":"Algorithms"},{"location":"fep/fep-8b32/#backward-compatibility","text":"Integrity proofs and linked data signatures can be used together, as they rely on different properties ( proof and signature , respectively). If compatiblity with legacy systems is desired, the integrity proof MUST be created and inserted before the generation of the linked data signature. If both proof and signature are present in a received object, the linked data signature MUST be removed before the verification of the integrity proof.","title":"Backward compatibility"},{"location":"fep/fep-8b32/#special-cases","text":"","title":"Special cases"},{"location":"fep/fep-8b32/#activities","text":"The controller of the verification method MUST match the actor of activity, or be associated with that actor.","title":"Activities"},{"location":"fep/fep-8b32/#_6","text":"","title":"\u4f8b"},{"location":"fep/fep-8b32/#signed-object","text":"{ \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"id\": \"https://server.example/objects/1\", \"type\": \"Note\", \"attributedTo\": \"https://server.example/users/alice\", \"content\": \"Hello world\", \"proof\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"https://server.example/users/alice#ed25519-key\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\", \"created\": \"2023-02-24T23:36:38Z\" } }","title":"Signed object"},{"location":"fep/fep-8b32/#signed-activity","text":"{ \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"id\": \"https://server.example/activities/1\", \"type\": \"Create\", \"actor\": \"https://server.example/users/alice\", \"object\": { \"id\": \"https://server.example/objects/1\", \"type\": \"Note\", \"attributedTo\": \"https://server.example/users/alice\", \"content\": \"Hello world\" }, \"proof\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"https://server.example/users/alice#ed25519-key\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\", \"created\": \"2023-02-24T23:36:38Z\" } }","title":"Signed activity"},{"location":"fep/fep-8b32/#signed-activity-with-embedded-signed-object","text":"{ \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\", { \"object\": { \"@id\": \"as:object\", \"@type\": \"@json\" } } ], \"id\": \"https://server.example/activities/1\", \"type\": \"Create\", \"actor\": \"https://server.example/users/alice\", \"object\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"id\": \"https://server.example/objects/1\", \"type\": \"Note\", \"attributedTo\": \"https://server.example/users/alice\", \"content\": \"Hello world\", \"proof\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"https://server.example/users/alice#ed25519-key\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\", \"created\": \"2023-02-24T23:36:38Z\" } }, \"proof\": { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\" ], \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"verificationMethod\": \"https://server.example/users/alice#ed25519-key\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\", \"created\": \"2023-02-24T23:36:38Z\" } }","title":"Signed activity with embedded signed object"},{"location":"fep/fep-8b32/#test-vectors","text":"See fep-8b32.feature","title":"Test vectors"},{"location":"fep/fep-8b32/#_7","text":"Mitra Vervis ( generation , verification ) Streams Hubzilla Fedify","title":"\u5b9f\u88c5"},{"location":"fep/fep-8b32/#use-cases","text":"Forwarding from inbox Conversation Containers FEP-ef61: Portable Objects FEP-ae97: Client-side activity signing","title":"Use cases"},{"location":"fep/fep-8b32/#_8","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2024 Manu Sporny, Dave Longley, Markus Sabadello, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0 , 2022 Dave Longley, Manu Sporny, Markus Sabadello, Drummond Reed, Orie Steele, Christopher Allen, Controller Documents 1.0 , 2024 silverpill, FEP-521a: Representing actor's public keys , 2023 Dave Longley, Manu Sporny, Data Integrity EdDSA Cryptosuites v1.0 , 2024 A. Rundgren, B. Jordan, S. Erdtman, JSON Canonicalization Scheme (JCS) , 2020","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-8b32/#_9","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-8c3f/","text":"FEP-8c3f: Web Monetization Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Web Monetization federation via [ActivityPub]. History The ability to transfer money has been a long-standing omission from the web platform. As a result, the web suffers from a flood of advertising and corrupt business models. Web Monetization provides an open, native, efficient, and automatic way to compensate creators, pay for API calls, and support crucial web infrastructure. [Web Monetization] is being proposed as a W3C standard at the Web Platform Incubator Community Group . Requirements In GNU social this is implemented on a plugin using an extra property gs:webmonetizationWallet on the actor object. Example { \"type\": \"Person\", \"streams\": [], \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"gs\": \"https://www.gnu.org/software/social/ns#\" }, { \"webmonetizationWallet\": { \"@id\": \"gs:webmonetizationWallet\", \"@type\": \"@id\" } } ], \"id\": \"https://social.gnusocial.rocks/actor/42\", \"inbox\": \"https://social.gnusocial.rocks/actor/42/inbox.json\", \"outbox\": \"https://social.gnusocial.rocks/actor/42/outbox.json\", \"following\": \"https://instance.gnusocial.test/actor/42/subscriptions\", \"followers\": \"https://instance.gnusocial.test/actor/42/subscribers\", \"preferredUsername\": \"alice\", \"name\": \"Alyssa P.Hacker\", \"url\": \"https://social.gnusocial.rocks/@alice\", \"webmonetizationWallet\": \"$wallet.example.com/alice\" } About the value of gs:webmonetizationWallet That string is the same as the example one in Web Monetization specification and it consists on a payment pointer . Payment Pointers start with a $ character to distinguish them from other identifiers and make it obvious that they are related to payments. To convert a Payment Pointer to a URL the $ is replaced with the standard prefix of a secure URL, https:// . \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Web Monetization] Adrian Hope-Bailie, Ben Sharafian, Nick Dudfield, Web Monetization , 2021 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-8c3f: Web Monetization"},{"location":"fep/fep-8c3f/#fep-8c3f-web-monetization","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-8c3f: Web Monetization"},{"location":"fep/fep-8c3f/#summary","text":"Web Monetization federation via [ActivityPub].","title":"Summary"},{"location":"fep/fep-8c3f/#history","text":"The ability to transfer money has been a long-standing omission from the web platform. As a result, the web suffers from a flood of advertising and corrupt business models. Web Monetization provides an open, native, efficient, and automatic way to compensate creators, pay for API calls, and support crucial web infrastructure. [Web Monetization] is being proposed as a W3C standard at the Web Platform Incubator Community Group .","title":"History"},{"location":"fep/fep-8c3f/#requirements","text":"In GNU social this is implemented on a plugin using an extra property gs:webmonetizationWallet on the actor object.","title":"Requirements"},{"location":"fep/fep-8c3f/#example","text":"{ \"type\": \"Person\", \"streams\": [], \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"gs\": \"https://www.gnu.org/software/social/ns#\" }, { \"webmonetizationWallet\": { \"@id\": \"gs:webmonetizationWallet\", \"@type\": \"@id\" } } ], \"id\": \"https://social.gnusocial.rocks/actor/42\", \"inbox\": \"https://social.gnusocial.rocks/actor/42/inbox.json\", \"outbox\": \"https://social.gnusocial.rocks/actor/42/outbox.json\", \"following\": \"https://instance.gnusocial.test/actor/42/subscriptions\", \"followers\": \"https://instance.gnusocial.test/actor/42/subscribers\", \"preferredUsername\": \"alice\", \"name\": \"Alyssa P.Hacker\", \"url\": \"https://social.gnusocial.rocks/@alice\", \"webmonetizationWallet\": \"$wallet.example.com/alice\" }","title":"Example"},{"location":"fep/fep-8c3f/#about-the-value-of-gswebmonetizationwallet","text":"That string is the same as the example one in Web Monetization specification and it consists on a payment pointer . Payment Pointers start with a $ character to distinguish them from other identifiers and make it obvious that they are related to payments. To convert a Payment Pointer to a URL the $ is replaced with the standard prefix of a secure URL, https:// .","title":"About the value of gs:webmonetizationWallet"},{"location":"fep/fep-8c3f/#_1","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Web Monetization] Adrian Hope-Bailie, Ben Sharafian, Nick Dudfield, Web Monetization , 2021","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-8c3f/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-8fcf/","text":"FEP-8fcf: Followers collection synchronization across servers Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary In ActivityPub, follow relationships are established, updated and removed by sending activities such as Follow , Accept or Reject , which are assumed to be correctly and promptly processed upon receipt. However, due to incompatible protocol extensions, software bugs, server crashes or database rollbacks, the two ends of a Follow relationship may end up out of sync. This can be especially damaging when a remote instance has outdated information about follow relationships that should have been revoked, as some implementations may deliver activities addressed to the sender's followers collection by using the sharedInbox mechanism and letting the recipient use the sender's followers collection for local delivery and access control. This proposal describes an optional mechanism for detecting discrepancies in following relationships across instances, with minimal overhead and without loss of privacy. Requirements The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119]. The proposed protocol for followers collection synchronization makes a number of assumptions that may not be suitable to every implementation or deployment. Implementations and deployments MUST NOT implement the mechanisms described in this proposal unless they match the following requirements: - actors managed by an instance are required to all share the same exact URI scheme and authority for their id , inbox and sharedInbox URIs - such instances are required to manage all actors using the same URI scheme and authority for either their id , inbox or sharedInbox URIs (that is, for instance, two fediverse implementations cannot implement this proposal if they are set up on the same exact same domain name, unless implementing an additional mechanism to share follower information between them, which is out of scope for this proposal). The reason for those requirements is to prevent the partial followers collection described below from missing legitimate followers, which could result in followers being removed for no reason. Failing to implement this proposed synchronization mechanism should not impact compatibility with other implementations, as it is completely optional. Partial follower collection For efficiency and privacy purposes, we consider a subset of an actor's followers collection. This subset is the set of an actor's followers whose id shares an instance's specific URI scheme and authority. For instance, if https://example.org/users/1 has the following followers: - https://example.org/users/2 - https://testing.example.org/users/1 - https://next.example.org/users/foo - https://testing.example.org/users/2 The partial follower collection of https://example.org/users/1 for the instance serving https://testing.example.org/users/1 is: - https://testing.example.org/users/1 - https://testing.example.org/users/2 Partial follower collection digest To enable quick checking of partial followers consistency across instances, a partial follower collection digest is computed. This digest is created by XORing together the individual SHA256 digests of each follower's id . partialCollectionDigest = SHA256(follower1) XOR SHA256(follower2) XOR ... XOR SHA256(followerN) For instance, the partial follower collection digest of https://example.org/users/1 for the instance serving https://testing.example.org/users/1 is: 3a06e99569547f444c352ab7f52e4bab207abec5ca6f07b0045cfdc9723f8fa9 XOR f939a1585d4a8f02ee339210dbe7315d7003476663d6095f7d996fc4bc7a49b6 = c33f48cd341ef046a206b8a72ec97af65079f9a3a9b90eef79c5920dce45c61f The Collection-Synchronization HTTP Header The Collection-Synchronization HTTP header provides a mechanism for quickly checking whether the sender's followers collection part that is relevant to the recipient is consistent with the recipient's knowledge. The header field name is Collection-Synchronization and its value is a list of parameters and values, formatted according to the signature syntax defined in [HTTP-Signatures], Section 4.1. Example: Collection-Synchronization: collectionId=\"https://example.org/users/1/followers\", url=\"https://example.org/users/1/followers_synchronization\", digest=\"c33f48cd341ef046a206b8a72ec97af65079f9a3a9b90eef79c5920dce45c61f\" Collection Synchronization Header Parameters The Collection-Synchronization header's parameters are defined as follows: collectionId : this is URI of the collection that supports synchronization. It must be the sender's followers collection. url : this is the URL of the partial followers collection intended for the receiving instance. Accessing it should require authentication from the receiving instance. digest : the partial follower collection digest intended for the receiving instance. Synchronization procedure On the sender end When delivering an Activity to an inbox (or sharedInbox ), an instance MAY set a Collection-Synchronization header intended for the corresponding instance (determined by the inbox URI scheme and authority). When exactly to set this header is up to the sender, but it is recommended to at least send it for any Create activity addressed specifically to the sender's followers collection. On the receiving end On the receiving end, upon receiving an Activity delivery with a signed Collection-Synchronization header, the receiver MUST check that: - the collectionId attribute matches the sender's followers collection id - the url attribute also matches the same authority (so that the instance cannot get tricked into requesting the followers list of a third-party individual) If any of those checks fails, the receiver MUST ignore the Collection-Synchronization header. The receiver SHOULD then compute the partial collection digest for the sender's followers based on its own knowledge. If the digest does not match the digest attribute of the header, it SHOULD then query the url , authenticating itself to the remote server using [HTTP-Signatures] or another method. Having fetched the up-to-date partial followers collection from the autoritative server, the receiving end: - SHOULD remove from its local copy of the followers collection any local actor not listed in the partial followers collection. - MAY consider any pending outgoing follow listed in the partial followers collection as accepted. - SHOULD send an Undo Follow for any other local follower listed in the partial followers collection but not known locally. \u5b9f\u88c5 This proposal is implemented by Mastodon since the following Pull Request: https://github.com/tootsuite/mastodon/pull/14510 \u53c2\u8003\u6587\u732e [RFC-2119] S. Bradner, [Key words for use in RFCs to Indicate Requirement Levels](https://tools.ietf.org/html/rfc2119.html [HTTP-Signatures] A. Backman, J. Richer, M. Sporny, Signing HTTP Messages \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-8fcf: Followers collection synchronization across servers"},{"location":"fep/fep-8fcf/#fep-8fcf-followers-collection-synchronization-across-servers","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-8fcf: Followers collection synchronization across servers"},{"location":"fep/fep-8fcf/#summary","text":"In ActivityPub, follow relationships are established, updated and removed by sending activities such as Follow , Accept or Reject , which are assumed to be correctly and promptly processed upon receipt. However, due to incompatible protocol extensions, software bugs, server crashes or database rollbacks, the two ends of a Follow relationship may end up out of sync. This can be especially damaging when a remote instance has outdated information about follow relationships that should have been revoked, as some implementations may deliver activities addressed to the sender's followers collection by using the sharedInbox mechanism and letting the recipient use the sender's followers collection for local delivery and access control. This proposal describes an optional mechanism for detecting discrepancies in following relationships across instances, with minimal overhead and without loss of privacy.","title":"Summary"},{"location":"fep/fep-8fcf/#requirements","text":"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119]. The proposed protocol for followers collection synchronization makes a number of assumptions that may not be suitable to every implementation or deployment. Implementations and deployments MUST NOT implement the mechanisms described in this proposal unless they match the following requirements: - actors managed by an instance are required to all share the same exact URI scheme and authority for their id , inbox and sharedInbox URIs - such instances are required to manage all actors using the same URI scheme and authority for either their id , inbox or sharedInbox URIs (that is, for instance, two fediverse implementations cannot implement this proposal if they are set up on the same exact same domain name, unless implementing an additional mechanism to share follower information between them, which is out of scope for this proposal). The reason for those requirements is to prevent the partial followers collection described below from missing legitimate followers, which could result in followers being removed for no reason. Failing to implement this proposed synchronization mechanism should not impact compatibility with other implementations, as it is completely optional.","title":"Requirements"},{"location":"fep/fep-8fcf/#partial-follower-collection","text":"For efficiency and privacy purposes, we consider a subset of an actor's followers collection. This subset is the set of an actor's followers whose id shares an instance's specific URI scheme and authority. For instance, if https://example.org/users/1 has the following followers: - https://example.org/users/2 - https://testing.example.org/users/1 - https://next.example.org/users/foo - https://testing.example.org/users/2 The partial follower collection of https://example.org/users/1 for the instance serving https://testing.example.org/users/1 is: - https://testing.example.org/users/1 - https://testing.example.org/users/2","title":"Partial follower collection"},{"location":"fep/fep-8fcf/#partial-follower-collection-digest","text":"To enable quick checking of partial followers consistency across instances, a partial follower collection digest is computed. This digest is created by XORing together the individual SHA256 digests of each follower's id . partialCollectionDigest = SHA256(follower1) XOR SHA256(follower2) XOR ... XOR SHA256(followerN) For instance, the partial follower collection digest of https://example.org/users/1 for the instance serving https://testing.example.org/users/1 is: 3a06e99569547f444c352ab7f52e4bab207abec5ca6f07b0045cfdc9723f8fa9 XOR f939a1585d4a8f02ee339210dbe7315d7003476663d6095f7d996fc4bc7a49b6 = c33f48cd341ef046a206b8a72ec97af65079f9a3a9b90eef79c5920dce45c61f","title":"Partial follower collection digest"},{"location":"fep/fep-8fcf/#the-collection-synchronization-http-header","text":"The Collection-Synchronization HTTP header provides a mechanism for quickly checking whether the sender's followers collection part that is relevant to the recipient is consistent with the recipient's knowledge. The header field name is Collection-Synchronization and its value is a list of parameters and values, formatted according to the signature syntax defined in [HTTP-Signatures], Section 4.1. Example: Collection-Synchronization: collectionId=\"https://example.org/users/1/followers\", url=\"https://example.org/users/1/followers_synchronization\", digest=\"c33f48cd341ef046a206b8a72ec97af65079f9a3a9b90eef79c5920dce45c61f\"","title":"The Collection-Synchronization HTTP Header"},{"location":"fep/fep-8fcf/#collection-synchronization-header-parameters","text":"The Collection-Synchronization header's parameters are defined as follows: collectionId : this is URI of the collection that supports synchronization. It must be the sender's followers collection. url : this is the URL of the partial followers collection intended for the receiving instance. Accessing it should require authentication from the receiving instance. digest : the partial follower collection digest intended for the receiving instance.","title":"Collection Synchronization Header Parameters"},{"location":"fep/fep-8fcf/#synchronization-procedure","text":"","title":"Synchronization procedure"},{"location":"fep/fep-8fcf/#on-the-sender-end","text":"When delivering an Activity to an inbox (or sharedInbox ), an instance MAY set a Collection-Synchronization header intended for the corresponding instance (determined by the inbox URI scheme and authority). When exactly to set this header is up to the sender, but it is recommended to at least send it for any Create activity addressed specifically to the sender's followers collection.","title":"On the sender end"},{"location":"fep/fep-8fcf/#on-the-receiving-end","text":"On the receiving end, upon receiving an Activity delivery with a signed Collection-Synchronization header, the receiver MUST check that: - the collectionId attribute matches the sender's followers collection id - the url attribute also matches the same authority (so that the instance cannot get tricked into requesting the followers list of a third-party individual) If any of those checks fails, the receiver MUST ignore the Collection-Synchronization header. The receiver SHOULD then compute the partial collection digest for the sender's followers based on its own knowledge. If the digest does not match the digest attribute of the header, it SHOULD then query the url , authenticating itself to the remote server using [HTTP-Signatures] or another method. Having fetched the up-to-date partial followers collection from the autoritative server, the receiving end: - SHOULD remove from its local copy of the followers collection any local actor not listed in the partial followers collection. - MAY consider any pending outgoing follow listed in the partial followers collection as accepted. - SHOULD send an Undo Follow for any other local follower listed in the partial followers collection but not known locally.","title":"On the receiving end"},{"location":"fep/fep-8fcf/#_1","text":"This proposal is implemented by Mastodon since the following Pull Request: https://github.com/tootsuite/mastodon/pull/14510","title":"\u5b9f\u88c5"},{"location":"fep/fep-8fcf/#_2","text":"[RFC-2119] S. Bradner, [Key words for use in RFCs to Indicate Requirement Levels](https://tools.ietf.org/html/rfc2119.html [HTTP-Signatures] A. Backman, J. Richer, M. Sporny, Signing HTTP Messages","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-8fcf/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-9091/","text":"FEP-9091: Export Actor Service Endpoint Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP defines an API endpoint used to initiate the \"Export Actor\" operation. The output and semantics of the result of the export operation is out of scope, and left to subsequent FEPs. The endpoint only specifies how to start the operation, and by extension, how to tell if a given Actor's server supports this operation. Data Model: Export Service Endpoint Conforming ActivityPub Actor profiles MUST specify their export API endpoints using the service descriptor property (inspired by the DID Core Services section, and used in other FEPs such as FEP-e3e9: Actor Relative URLs ): The expanded type of the service descriptor object MUST be https://w3id.org/fep/9091#Export (see example below). The service property MUST NOT contain more than one node with the #Export type. If a client encounters multiple service descriptor objects with type ending in #Export , the client SHOULD just use the first entry. Example Actor Profile with Export Service Endpoint { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\" ], \"id\": \"https://alice-personal-site.example/actor\", \"type\": \"Person\", \"name\": \"Alice\", \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#export\", \"type\": \"https://w3id.org/fep/9091#Export\", \"serviceEndpoint\": \"https://alice-personal-site.example/actor/accountExport\" }] } Protocol: Initiating the Export Actor Operation If a client conforming to this FEP wishes to start the 'Export Actor' process, such as to create a backup of the Actor profile, its private key material, and all content associated with this actor, the client MUST perform the following steps: Fetch the Actor profile object. Locate the service description object with the expanded type equal to https://w3id.org/fep/9091#Export . Locate the corresponding serviceEndpoint URL, in that description object. If no such service description item exists, this means that the server hosting the Actor's profile does not support this operation. The client makes an HTTP POST to the URL in the serviceEndpoint to initiate the export operation. The client MUST include appropriate authorization credentials that indicate that it is authorized to perform this operation (that it's authorized to receive the highly private result of account export). The exact format of these authorization credentials is out of scope of this FEP. Example Request and Response Example synchronous request (with an empty body) and response: POST /actor/accountExport HTTP/1.1 Host: alice-personal-site.example Authorization: Bearer .... Accept: application/x-tar Content-Length: 0 HTTP/1.1 200 OK Content-type: application/x-tar Transfer-Encoding: chunked <binary data of the resulting .tar file> \u53c2\u8003\u6587\u732e FEP-e3e9: Actor Relative URLs Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, 1997 Manu Sporny, Dave Longley, Markus Sabadell, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0, 2022 Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"FEP-9091: Export Actor Service Endpoint"},{"location":"fep/fep-9091/#fep-9091-export-actor-service-endpoint","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-9091: Export Actor Service Endpoint"},{"location":"fep/fep-9091/#summary","text":"This FEP defines an API endpoint used to initiate the \"Export Actor\" operation. The output and semantics of the result of the export operation is out of scope, and left to subsequent FEPs. The endpoint only specifies how to start the operation, and by extension, how to tell if a given Actor's server supports this operation.","title":"Summary"},{"location":"fep/fep-9091/#data-model-export-service-endpoint","text":"Conforming ActivityPub Actor profiles MUST specify their export API endpoints using the service descriptor property (inspired by the DID Core Services section, and used in other FEPs such as FEP-e3e9: Actor Relative URLs ): The expanded type of the service descriptor object MUST be https://w3id.org/fep/9091#Export (see example below). The service property MUST NOT contain more than one node with the #Export type. If a client encounters multiple service descriptor objects with type ending in #Export , the client SHOULD just use the first entry.","title":"Data Model: Export Service Endpoint"},{"location":"fep/fep-9091/#example-actor-profile-with-export-service-endpoint","text":"{ \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\" ], \"id\": \"https://alice-personal-site.example/actor\", \"type\": \"Person\", \"name\": \"Alice\", \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#export\", \"type\": \"https://w3id.org/fep/9091#Export\", \"serviceEndpoint\": \"https://alice-personal-site.example/actor/accountExport\" }] }","title":"Example Actor Profile with Export Service Endpoint"},{"location":"fep/fep-9091/#protocol-initiating-the-export-actor-operation","text":"If a client conforming to this FEP wishes to start the 'Export Actor' process, such as to create a backup of the Actor profile, its private key material, and all content associated with this actor, the client MUST perform the following steps: Fetch the Actor profile object. Locate the service description object with the expanded type equal to https://w3id.org/fep/9091#Export . Locate the corresponding serviceEndpoint URL, in that description object. If no such service description item exists, this means that the server hosting the Actor's profile does not support this operation. The client makes an HTTP POST to the URL in the serviceEndpoint to initiate the export operation. The client MUST include appropriate authorization credentials that indicate that it is authorized to perform this operation (that it's authorized to receive the highly private result of account export). The exact format of these authorization credentials is out of scope of this FEP.","title":"Protocol: Initiating the Export Actor Operation"},{"location":"fep/fep-9091/#example-request-and-response","text":"Example synchronous request (with an empty body) and response: POST /actor/accountExport HTTP/1.1 Host: alice-personal-site.example Authorization: Bearer .... Accept: application/x-tar Content-Length: 0 HTTP/1.1 200 OK Content-type: application/x-tar Transfer-Encoding: chunked <binary data of the resulting .tar file>","title":"Example Request and Response"},{"location":"fep/fep-9091/#_1","text":"FEP-e3e9: Actor Relative URLs Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, 1997 Manu Sporny, Dave Longley, Markus Sabadell, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0, 2022","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-9091/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-96ff/","text":"FEP-96ff: Explicit signalling of ActivityPub Semantics Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary A number of vulnerabilities have occurred in ActivityPub implementations due to \"type confusion\" attacks - where unrelated files on the same hostnmae as an ActivityPub implementation are processed as obejcts with ActivityPub semantics. Such attacks have been mitigated by carefuly validating the Content-Type header (and by implementations ensuring that users cannot create files with the application/activity+json or application/ld+json content types), but it would bolster such defences if messages intended to be processed with ActivityPub semantics Additionally, ActivityPub nominally supports transfer syntaxes other than JSON-LD (such as any other RDF syntax like Turtle; or potentially a more bandwidth efficient syntax such as a hypothetical CBOR-LD). Strict content type filtering permanently prevents usage of such syntaxes in the future The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \" SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC2119 . Signalling of ActivityPub Semantics An implementation signifies its intention to use ActivityPub semantics for a request or response body by including a Link header with relation type type and contents of https://www.w3.org/TR/activitypub/ . This header usage is borrowed from LDP , which uses the same relation type to indicate support of LDP semantics. Link: <https://www.w3.org/TR/activitypub/>;rel=\"type\" A conformant implementation MUST include this link relation in any HTTP messages it intends to be processed with ActivityPub semantics. A conformant implementation MUST process a HTTP message and where this link relation is present and the content type is an implementation supported transport syntax for ActivityStreams 2 with ActivityPub semantics. A conformant implementation MAY process a HTTP message without any Link header with relation \"type\", where the Content-Type header contains exactly the value application/activity+json or application/ld+json with a profile parameter containing the token https://www.w3.org/ns/activitystreams with ActivityPub semantics (This enables backwards compatibility with existing implementations.) A conformant implementation MUST NOT process any other HTTP messages with ActivityPub semantics. Conformant implementations MUST support messages containing multiple Link headers, including multiple link headers with the \"type\" relation. The following examples are all valid and indicate that processing should occur with ActivityPub semantics: Link: <https://www.w3.org/TR/activitypub/>;rel=\"type\" Link: <https://www.w3.org/TR/activitypub/>;rel=\"type\", <https://example.com/>;rel=\"test\" link: <https://www.w3.org/TR/activitypub/>;rel=\"type\", <https://example.com/>;rel=\"type\" LINK: <https://www.w3.org/TR/activitypub/>;rel=\"type\" Link: <https://example.com/>;rel=\"test\" Link: <https://www.w3.org/TR/activitypub/>;rel=\"type\" lInK: <https://example.com/>;rel=\"type\" Implementations are encouraged to periodically add additional Link relations to their messages to ensure support by counterparties. (This process is typically termed greasing , after the GREASE extension to TLS) For the avoidance of doubt, ActivityPub semantics apply only in cases where implementations expect to transfer ActivityStreams 2 documents with the semantics described in the ActivityPub specification . This link relation MUST NOT be included for other exchanges that an ActivityPub implementation may perform, including but not limited to WebFinger queries. Why not just rely upon the content type? The content type alone does not specify semantics. The ActivityStreams 2 syntax can be used independently of ActivityPub, and non-ActivityPub systems such as Cohost produce ActivityStreams 2 documents. Additionally, even though ActivityPub implementations can prevent the creation of unexpected resources with an ActivityStreams content type, they cannot prevent other applications running on the same name from permitting the untrusted creation of such resources. It is hoped that a future version of this specification (after widespread deployment of explicit tagging of messages with explicit semantics) can omit the permission to determine semantics based upon media type. Vulnerabilities (Non-Normative) The following is a list of known implementation vulnerabilities which would have been prevented by implementation of this mechanism: CVE-2024-25623 : Lack of media type verification of Activity Streams objects allows impersonation of remote accounts (Mastodon) GHSA-qqrm-9grj-6v32 : Lack of media type verification of Activity Streams objects allows impersonation and takeover of remote accounts (Misskey) Strict content type validation , Pixelfed (Same as previous two), no vulnerability ID assigned add stricter checks during all stages of dereferencing remote AS objects , GoToSocial, No vulnerability ID assigned GHSA-xmw2-875x-rq88 : Possibility of a fake account on a domain with arbitrary user content (Kitsune) Pleroma Issue 1948 : Messages can be spoofed If all implmenetations strictly required implementation of the link relation check, the following vulnerabilities would also be prevented: CVE-2023-36460 , Arbitrary file creation through media attachments (Mastodon) (This is not presently proposed because it would break compatibility with existing implementations) These lists are likely not exhaustive. \u53c2\u8003\u6587\u732e ActivityPub Christine Lemmer Webber, Jessica Tallon et al, 2018 Linked Data Platform 1.0 , Steve Speicher, John Arwe, Ashok Malhotra, 2015 Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"FEP-96ff: Explicit signalling of ActivityPub Semantics"},{"location":"fep/fep-96ff/#fep-96ff-explicit-signalling-of-activitypub-semantics","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-96ff: Explicit signalling of ActivityPub Semantics"},{"location":"fep/fep-96ff/#summary","text":"A number of vulnerabilities have occurred in ActivityPub implementations due to \"type confusion\" attacks - where unrelated files on the same hostnmae as an ActivityPub implementation are processed as obejcts with ActivityPub semantics. Such attacks have been mitigated by carefuly validating the Content-Type header (and by implementations ensuring that users cannot create files with the application/activity+json or application/ld+json content types), but it would bolster such defences if messages intended to be processed with ActivityPub semantics Additionally, ActivityPub nominally supports transfer syntaxes other than JSON-LD (such as any other RDF syntax like Turtle; or potentially a more bandwidth efficient syntax such as a hypothetical CBOR-LD). Strict content type filtering permanently prevents usage of such syntaxes in the future The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \" SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC2119 .","title":"Summary"},{"location":"fep/fep-96ff/#signalling-of-activitypub-semantics","text":"An implementation signifies its intention to use ActivityPub semantics for a request or response body by including a Link header with relation type type and contents of https://www.w3.org/TR/activitypub/ . This header usage is borrowed from LDP , which uses the same relation type to indicate support of LDP semantics. Link: <https://www.w3.org/TR/activitypub/>;rel=\"type\" A conformant implementation MUST include this link relation in any HTTP messages it intends to be processed with ActivityPub semantics. A conformant implementation MUST process a HTTP message and where this link relation is present and the content type is an implementation supported transport syntax for ActivityStreams 2 with ActivityPub semantics. A conformant implementation MAY process a HTTP message without any Link header with relation \"type\", where the Content-Type header contains exactly the value application/activity+json or application/ld+json with a profile parameter containing the token https://www.w3.org/ns/activitystreams with ActivityPub semantics (This enables backwards compatibility with existing implementations.) A conformant implementation MUST NOT process any other HTTP messages with ActivityPub semantics. Conformant implementations MUST support messages containing multiple Link headers, including multiple link headers with the \"type\" relation. The following examples are all valid and indicate that processing should occur with ActivityPub semantics: Link: <https://www.w3.org/TR/activitypub/>;rel=\"type\" Link: <https://www.w3.org/TR/activitypub/>;rel=\"type\", <https://example.com/>;rel=\"test\" link: <https://www.w3.org/TR/activitypub/>;rel=\"type\", <https://example.com/>;rel=\"type\" LINK: <https://www.w3.org/TR/activitypub/>;rel=\"type\" Link: <https://example.com/>;rel=\"test\" Link: <https://www.w3.org/TR/activitypub/>;rel=\"type\" lInK: <https://example.com/>;rel=\"type\" Implementations are encouraged to periodically add additional Link relations to their messages to ensure support by counterparties. (This process is typically termed greasing , after the GREASE extension to TLS) For the avoidance of doubt, ActivityPub semantics apply only in cases where implementations expect to transfer ActivityStreams 2 documents with the semantics described in the ActivityPub specification . This link relation MUST NOT be included for other exchanges that an ActivityPub implementation may perform, including but not limited to WebFinger queries.","title":"Signalling of ActivityPub Semantics"},{"location":"fep/fep-96ff/#why-not-just-rely-upon-the-content-type","text":"The content type alone does not specify semantics. The ActivityStreams 2 syntax can be used independently of ActivityPub, and non-ActivityPub systems such as Cohost produce ActivityStreams 2 documents. Additionally, even though ActivityPub implementations can prevent the creation of unexpected resources with an ActivityStreams content type, they cannot prevent other applications running on the same name from permitting the untrusted creation of such resources. It is hoped that a future version of this specification (after widespread deployment of explicit tagging of messages with explicit semantics) can omit the permission to determine semantics based upon media type.","title":"Why not just rely upon the content type?"},{"location":"fep/fep-96ff/#vulnerabilities-non-normative","text":"The following is a list of known implementation vulnerabilities which would have been prevented by implementation of this mechanism: CVE-2024-25623 : Lack of media type verification of Activity Streams objects allows impersonation of remote accounts (Mastodon) GHSA-qqrm-9grj-6v32 : Lack of media type verification of Activity Streams objects allows impersonation and takeover of remote accounts (Misskey) Strict content type validation , Pixelfed (Same as previous two), no vulnerability ID assigned add stricter checks during all stages of dereferencing remote AS objects , GoToSocial, No vulnerability ID assigned GHSA-xmw2-875x-rq88 : Possibility of a fake account on a domain with arbitrary user content (Kitsune) Pleroma Issue 1948 : Messages can be spoofed If all implmenetations strictly required implementation of the link relation check, the following vulnerabilities would also be prevented: CVE-2023-36460 , Arbitrary file creation through media attachments (Mastodon) (This is not presently proposed because it would break compatibility with existing implementations) These lists are likely not exhaustive.","title":"Vulnerabilities (Non-Normative)"},{"location":"fep/fep-96ff/#_1","text":"ActivityPub Christine Lemmer Webber, Jessica Tallon et al, 2018 Linked Data Platform 1.0 , Steve Speicher, John Arwe, Ashok Malhotra, 2015","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-96ff/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-9967/","text":"FEP-9967: Polls Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary How to make polls in ActivityPub network. History Mastodon implemented polls in 2019 ( documentation ). ActivityStreams specification provides recommendations for representing questions, but these recommendations were found to be impractical and the de-facto standard differs from them. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Question object A poll is represented by a Question object. It MUST be published with Create activity (in contrast with ActivityStreams vocabulary where Question itself is defined as intransitive activity). A Question object is typically structured similarly to a Note . In addition to common properties such as attributedTo and content , it MUST have one of the following: oneOf , if the poll requires choosing a single option. anyOf , if the poll allows choosing multiple options. The value of this property MUST be an array of objects representing poll options: type : the Note string. name : the text of the poll option. replies : the total number of votes, as a collection: type : the Collection string. totalItems : the total number of votes for this poll option. The name of a poll option MUST be unique within a poll. Question objects SHOULD also have an endTime property indicating the time when the poll ends. Polls without ending time are not widely supported. Some implementations use closed property instead of endTime or in addition to it (even if the poll is open). Consumers MUST process closed in the same way as endTime . Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://social.example/polls/1\", \"type\": \"Question\", \"attributedTo\": \"https://social.example/actors/1\", \"to\": \"https://www.w3.org/ns/activitystreams#Public\", \"content\": \"<p>Question</p>\", \"endTime\": \"2024-07-17T18:18:17Z\", \"oneOf\": [ { \"type\": \"Note\", \"name\": \"Answer 1\", \"replies\": { \"type\": \"Collection\", \"totalItems\": 596 } }, { \"type\": \"Note\", \"name\": \"Answer 2\", \"replies\": { \"type\": \"Collection\", \"totalItems\": 379 } } ] } Voting A vote is represented by a Note object with the following structure: id : the ID of the vote. type : the Note string. attributedTo : the actor that is making this vote. inReplyTo : the ID of the Question object. name : the value of the name property of the chosen poll option. to : the author of the poll. The object MUST NOT have a content property. This object is wrapped in a Create activity and sent to the author of the poll. If the poll is anonymous, this activity MUST NOT be delivered to anyone else. When a poll allows multiple choices, each vote MUST be sent as a separate activity. Example of a vote: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://social.example/votes/1\", \"type\": \"Note\", \"attributedTo\": \"https://social.example/actors/2\", \"inReplyTo\": \"https://social.example/polls/1\", \"name\": \"Answer 1\", \"to\": \"https://social.example/actors/1\" } The structure of a vote is very similar to a direct reply. It can be identified as a Note with name and inReplyTo properties, but without a content property. [!NOTE] The method of identifying votes described here is not reliable. An alternative representation is being discussed (the Respond activity). Upon receving a vote, the author of the poll performs the following checks: The voter has a permission to vote (if the poll is not public). The poll is still active (if endTime is specified). The vote with a specified ID is not already registered. The vote with a specified name is not already registered (if multiple choices are not allowed). If any of these checks fails, the vote MUST be ignored. Otherwise, the author of the poll updates the vote count for a specified poll option (the totalItems property of a corresponding replies collection). Publishing results When actor that published a poll receives a vote, it publishes an Update activity containing the Question object with updated results. This activity MUST be delivered to the audience of the poll and to every actor that voted in the poll. The embedded Question object MUST have an updated property. Editing options The type of a poll (single choice / multiple choices) and its options might be changed at any time. In that case the author of the poll MUST reset the vote counts. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 Mastodon contributors, Polls \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-9967: Polls"},{"location":"fep/fep-9967/#fep-9967-polls","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-9967: Polls"},{"location":"fep/fep-9967/#summary","text":"How to make polls in ActivityPub network.","title":"Summary"},{"location":"fep/fep-9967/#history","text":"Mastodon implemented polls in 2019 ( documentation ). ActivityStreams specification provides recommendations for representing questions, but these recommendations were found to be impractical and the de-facto standard differs from them.","title":"History"},{"location":"fep/fep-9967/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-9967/#question-object","text":"A poll is represented by a Question object. It MUST be published with Create activity (in contrast with ActivityStreams vocabulary where Question itself is defined as intransitive activity). A Question object is typically structured similarly to a Note . In addition to common properties such as attributedTo and content , it MUST have one of the following: oneOf , if the poll requires choosing a single option. anyOf , if the poll allows choosing multiple options. The value of this property MUST be an array of objects representing poll options: type : the Note string. name : the text of the poll option. replies : the total number of votes, as a collection: type : the Collection string. totalItems : the total number of votes for this poll option. The name of a poll option MUST be unique within a poll. Question objects SHOULD also have an endTime property indicating the time when the poll ends. Polls without ending time are not widely supported. Some implementations use closed property instead of endTime or in addition to it (even if the poll is open). Consumers MUST process closed in the same way as endTime . Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://social.example/polls/1\", \"type\": \"Question\", \"attributedTo\": \"https://social.example/actors/1\", \"to\": \"https://www.w3.org/ns/activitystreams#Public\", \"content\": \"<p>Question</p>\", \"endTime\": \"2024-07-17T18:18:17Z\", \"oneOf\": [ { \"type\": \"Note\", \"name\": \"Answer 1\", \"replies\": { \"type\": \"Collection\", \"totalItems\": 596 } }, { \"type\": \"Note\", \"name\": \"Answer 2\", \"replies\": { \"type\": \"Collection\", \"totalItems\": 379 } } ] }","title":"Question object"},{"location":"fep/fep-9967/#voting","text":"A vote is represented by a Note object with the following structure: id : the ID of the vote. type : the Note string. attributedTo : the actor that is making this vote. inReplyTo : the ID of the Question object. name : the value of the name property of the chosen poll option. to : the author of the poll. The object MUST NOT have a content property. This object is wrapped in a Create activity and sent to the author of the poll. If the poll is anonymous, this activity MUST NOT be delivered to anyone else. When a poll allows multiple choices, each vote MUST be sent as a separate activity. Example of a vote: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://social.example/votes/1\", \"type\": \"Note\", \"attributedTo\": \"https://social.example/actors/2\", \"inReplyTo\": \"https://social.example/polls/1\", \"name\": \"Answer 1\", \"to\": \"https://social.example/actors/1\" } The structure of a vote is very similar to a direct reply. It can be identified as a Note with name and inReplyTo properties, but without a content property. [!NOTE] The method of identifying votes described here is not reliable. An alternative representation is being discussed (the Respond activity). Upon receving a vote, the author of the poll performs the following checks: The voter has a permission to vote (if the poll is not public). The poll is still active (if endTime is specified). The vote with a specified ID is not already registered. The vote with a specified name is not already registered (if multiple choices are not allowed). If any of these checks fails, the vote MUST be ignored. Otherwise, the author of the poll updates the vote count for a specified poll option (the totalItems property of a corresponding replies collection).","title":"Voting"},{"location":"fep/fep-9967/#publishing-results","text":"When actor that published a poll receives a vote, it publishes an Update activity containing the Question object with updated results. This activity MUST be delivered to the audience of the poll and to every actor that voted in the poll. The embedded Question object MUST have an updated property.","title":"Publishing results"},{"location":"fep/fep-9967/#editing-options","text":"The type of a poll (single choice / multiple choices) and its options might be changed at any time. In that case the author of the poll MUST reset the vote counts.","title":"Editing options"},{"location":"fep/fep-9967/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 Mastodon contributors, Polls","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-9967/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-9fde/","text":"FEP-9fde: Mechanism for servers to expose supported operations Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Version Date Changes 3.1 2024-03-13 - Convert to FEP format - Incorporate feedback from Johannes Ernst and Steve Bates - Renamed clientApis to operations so this is usable for server-server operations too - Added \"Open questions\" section 3.0 2024-01-22 Re-write; include the operation information in the nodeinfo 2.0 2023-09-25 Re-write; replace the original suggestion to use the OpenAPI definition with a simpler specification 1.0 2023-08-14 Initial draft Summary This document proposes an extension to the NodeInfo schema ( FEP-f1d5 ) that would allow developers of Mastodon and Mastodon-like servers to unambigiously communicate the operations their servers support, and allow developers of software that interoperates with those servers to detect those features, promoting interoperability and easier adoption of new features. Synopsis This document is written for: The maintainers of the NodeInfo specification Developers of Mastodon and Mastodon-like servers Developers of clients for those servers After reading this document you should: Understand the general problem this is intended to solve Understand the proposed solution Understand alternatives to the solution, and why they are not appropriate Understand the open questions for this proposal Be able to provide feedback on the proposal Requirements The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in RFC-2119 . Overview [!IMPORTANT] Other servers are also clients The primary perspective of this document's author is as an end-user client developer dealing with the Mastodon client API, and the examples are written from that perspective. However, this proposal can also be used to describe operations between different servers in the Fediverse using other protocols (e.g., ActivityPub). For any given interaction between a pair of servers one of them is going to be acting as the client in the interaction, and will need to know the operations the server supports. For the purposes of this document a \"Mastodon or Mastodon-like\" server is a server that presents the Mastodon client API , optionally with extensions to that API that provide additional functionality. These servers include, but are not limited to: Mastodon Glitch Hometown Pleroma Akkoma Firefish Iceshrimp Sharkey Friendica GoToSocial Clients of these servers have an API discovery problem. Since different servers support different (but similar) APIs the client has to determine what API operations the server supports. Given the wide variety of servers that are available, and their many forks, it's not feasible for clients to maintain an accurate list of all the possible server software names while mapping the names to API features. Instead the server should have a mechanism for advertising the operations it supports. The client would use this when determining what features to show the user, without needing to employ complex, error-prone heuristics. This would also provide a clear mechanism for Mastodon and Mastodon-like servers to incrementally deploy new features and deprecate old ones without inconveniencing clients. It also provides a clear mechanism to advertise server functionality without continually bolting it on to the \"instance info\" mechanism in the inconsistent fashion that has been done so far. The rest of this document sets out the specific problems I'm interested in solving, with motivating examples, and then describes how the new approach would solve these problems. Problems The supported API is not easily discoverable Changes are made to the Mastodon API in a manner that is not easily discoverable by clients. For example, Add POST /api/v1/conversations/:id/unread by ClearlyClaire \u00b7 Pull Request #25509 \u00b7 mastodon/mastodon \u00b7 GitHub adds a new API endpoint ( api/v1/conversations/:id/unread ). The only way a client can discover that this API exists is to maintain, per-client, a mapping between Mastodon server version and the API supported at each version. This is: A lot of work for each client Something that every client needs to do Easy to get wrong Doesn't scale across multitudes of different servers No standard way for Mastodon servers to advertise that some functionality is disabled or unavailable The Instance information contains a configuration block that has some, but not all the information necessary to determine the features a server supports. Other servers have extended this information in incompatible ways (e.g., the pleroma block). Other servers may not implement the functionality at all. For example, GoToSocial did not implement support for the Mastodon client-side filter API until version 0.15.0. No standard way for Mastodon-like servers to advertise their additional functionality to clients Mastodon-like servers implement some or all of the Mastodon API. In many cases they also extend the API, providing additional functionality (local-only posting, quoting, markdown formatting, bookmarks, etc.) In some cases that functionality has already been incorporated in Mastodon (e.g., bookmarks), in other cases there are plans to include that functionality in Mastodon (e.g., quoting, markdown formatting). This leads to three problems. There is no simple way for clients to know which parts of the Mastodon API the server supports There is no simple way for clients to know if the server supports additional operations If Mastodon decides to implement an API that was first introduced in a Mastodon-like server there is no way for clients to detect this, without recompiling the client with new information about what features a given Mastodon server version implements Server developers have too much to do Server developers already have a lot of work to do. Any proposal should therefore be straightforward to implement. Additional complexity, such as changing the contents of existing API responses, or requiring developers of different servers to tightly coordinate when new functionality is introduced is going to make it less likely that groups adopt any proposed solutions. Proposed solution A given Mastodon or Mastodon-like server supports a set of operations . To expose those to the user a Mastodon client needs to know: Which operations does the server support? What's the overlap between the operations the server supports and the operations the client supports? Therefore we need: A unique identifer for each operation that a set of servers supports identically A mechanism for a server to report the operations it supports A unique identifier for each operation Operations are identified by the reverse FQDN of the server software that first implemented that operation, then an arbitrary number of additional dot-separated labels determined by the server authors. This ensures that operation IDs are unique without needing tight coordination between different server developer groups. For example: org.joinmastodon.api.statuses.post org.joinmastodon.api.statuses.translate io.github.glitch-soc.api.statuses.bookmark dev.iceshrimp.api.notes.reactions.create [!NOTE] Precise reverse FQDN to use for each server is to be decided This example use the reverse FQDNs for the server's primary websites or documentation sites, but each server group would determine and document the reverse FQDN for their server's operations. [!NOTE] Dot-separated labels SHOULD map 1:1 to API endpoint components In these examples the dotted components after the api correspond to the path components of the API endpoint. While there is no requirement that they do so server implementors are RECOMMENDED to do so, as it makes it easier for developers to mentally map between the operation identifier and the API path when they are working with the code. Each label within the operation identifier is represented in lower-case US-ASCII (a character set containing 128 characters associated with code points in the range 0..7F) . If a server team wishes to define an operation that uses a non-US-ASCII label they MUST encode the operation label to US-ASCII using the ToASCII transformation described in RFC 3490 - Internationalizing Domain Names in Applications (IDNA) . Each operation has one or more versions Each operation exists at one or more semver-compatible (v2.0.0) versions. Semver is used because it is a widely deployed standard, easily understandable, and client libraries that can parse this format are available across many different programming languages. For example, in the Mastodon API documentation \" Post a new status \" describes the API for posting a new status. That API has changed three times in the Mastodon server implementation. Initial implementation Support for scheduled_at Support for poll There are no backwards-incompatible breaking changes across those versions so this is the same operation at three different versions; per Semver the major version stays the same and the minor version is incremented. 1.0.0 - initial implementation 1.1.0 - support for scheduled_at 1.2.0 - support for polls [!IMPORTANT] These version numbers are unrelated to the version number of the software that introduced the operation Example: Bookmarks Bookmarking statuses originated in the glitch-soc fork and was incorporated in to Mastodon. Therefore, the ID for the bookmark operations -- if they are compatible with the glitch-soc implementation -- use the io.github.glitch-soc.api prefix. io.github.glitch-soc.api.statuses.bookmark @ 1.0.0 - bookmark a status io.github.glitch-soc.api.statuses.unbookmark @ 1.0.0 - remove a status from bookmarks io.github.glitch-soc.api.timeline.bookmarks @ 1.0.0 - fetch a timeline of the user's bookmarks io.github.glitch-soc.api.timeline.bookmarks @ 1.1.0 - fetch a timeline of the user's bookmarks, supporting min_id and max_id simultaneously Client discovery of supported operations and endpoints Clients must be able to discover which operations the server supports and the endpoints to use for those operations. To do this the nodeinfo (determined via /.well-known/nodeinfo ) schema should be extended to support a new operations property. The property's value is a map from a string key -- the operation ID -- to a set of one or more Semver versions of the operation that the server supports. For example: \"operations\": { ... \"org.joinmastodon.api.some.operation\": [\"1.0.0\", \"1.1.0\", \"1.2.0\", \"2.0.0\"] ... } [!NOTE] Unordered versions The supported version operations is not ordered; client code MUST treat this as a set, not a list. [!NOTE] Not limited to Mastodon / Mastodon-like servers This operations map is not limited to operations supported by Mastodon/Mastodon-like servers. This is a general mechanism that can be used by servers to expose information about their supported operations and could be used by other Fediverse software like Lemmy, KBin, etc. Because of the Semver rules for breaking changes servers MAY omit earlier versions from the list if they are included in a later version. In the previous example the 1.0.0 and 1.1.0 versions can be omitted as a server supporting v1.2.0 of an operation implicitly supports all preceding versions with the same major number. \"operations\": { ... \"org.joinmastodon.api.some.operation\": [\"1.2.0\", \"2.0.0\"] ... } [!NOTE] There is no need to specify the operation semantics The semantics of each {operation, version} pair are already known by the client (for each operation it supports). Semantics like whether these endpoints are GET , POST , DELETE , or PATCH , the exact names of the URL query parameters, the API endpoint, etc. In other words, servers MUST NOT advertise support for an existing operation ID and change anything about how that operation works. The server developers should either define and document a new operation ID, or implement the operation as a new version (bumping the major version if it is a breaking change). ActivityPub extension support Most of this document has presented examples using the Mastodon client API (and related APIs) but, as noted, this proposal also provides a clean mechanism to allow servers to report other extensions they support. Here is an example from FEP 6481 - # Specifying ActivityPub extension support with NodeInfo which is presented as: Manyfold intends to define a new Activity Vocabulary Object type for its own rich content, 3dModel . The specification will define an extension IRI, for instance https://w3id.org/manyfold/3dModel#v1 . Applications that wish to receive Activities with this type can state their support for the extension in their NodeInfo file as follows; Manyfold instances will then know that they can send that object type and it will be understood. { ..., \"metadata\": { \"activitypub\": { \"extensions\": [ \"https://w3id.org/manyfold/3dModel#v1\" ] } } } In this proposal that could represented like this: \"operations\": { \"app.manyfold.activitypub.accept.3dmodel\": [\"1.0.0\"], ... } (the precise name of the operation would need to be determined) Any other server that can accept a 3dModel would expose the same operation. To deploy this... Server developers Servers where the set of supported operations is not user configurable would need to maintain a static map of operations to versions, and return that map as part of the nodeinfo response. If the set of operations is user configurable (e.g., perhaps the server software supports a translation API but the server operator has not enabled translation support) the nodeinfo response would need to be dynamically generated from the current software configuration. In both cases developing a new operation or changing an existing operation would require the developers to: Determine the operation's version number, following semver backwards-compatible rules Document the behaviour of the new operation / version Include the new operation / version in the server's response Client developers To provide the best user experience client developers SHOULD fetch the operations map when the user logs in. If the client supports a particular operation at a particular version the client can query the map and determine whether the concrete version they need is in the map, or met by a higher version. Semver client libraries are available for Kotlin and Java (Android) and Swift (iOS), as well as many other languages. If the server does not support the operation the client MAY fall back to a different operation, or disable the particular operation in the UI. To use the example from earlier, Add POST /api/v1/conversations/:id/unread by ClearlyClaire \u00b7 Pull Request #25509 \u00b7 mastodon/mastodon \u00b7 GitHub which adds a new API endpoint ( api/v1/conversations/:id/unread ). The server would report this as: \"operations\": { ... \"org.joinmastodon.api.conversations.id.unread\": [\"1.0.0\"] ... } and a client that wanted to conditionally support this would query the operations map for org.joinmastodon.api.conversations.id.unread with any version entry with a major version of 1 , and if the operation/version pair is not found then disable the \"Mark a conversation unread\" UI affordances where they occur. Is there a proof of concept? Yes. I have started implementing the client side of this in Pachli . At the moment this uses server version parsing heuristics to maintain a Pachli-specific map of operations and supported versions ( Server.kt ) and then query the server's reported capabilities and adjust the UI accordingly. For example, this snippet conditionally enables the \"edit filters\" UI only if the user's server supports filtering. Maintaining the server-specific operations map in Pachli is error prone, slow to update, and does not benefit the wider ecosystem of Mastodon clients and servers, hence this proposal. This solves... This solves the problems described earlier: \"[[#The supported API is not easily discoverable]]\" The client can easily discover the specific operations the server supports, and adjust UX accordingly \"[[#No standard way for Mastodon servers to advertise that some functionality is disabled]]\" The operations property must reflect the active configuration of the server. \"[[#No standard way for Mastodon-like servers to advertise their functionality to clients]] If a Mastodon-like server implements a Mastodon-compatible API endpoint it lists that endpoint using the relevant org.mastodon... operation identifier. [[#Server developers have too much to do]] This proposal doesn't modify any existing API responses For a given server the list of supported operations can be statically configured, and does not change after the server has launched The work of developing a dictionary of supported operations can be sharded amongst different groups Server developers have a vested interest in contributing details of operations specific to their server, so more third party clients support them Client developers have a vested interest in reviewing and contributing details of operations specific to servers their users use, to make their clients more attractive to potential users No coordination is required between different groups of server developers to develop operation IDs Developers are incentivised to re-use existing operations instead of inventing new ones Implementing an existing operation in a compatible manner with another server increases the speed with which your users will be able to use the feature in their preferred clients. Not in scope This proposal doesn't address how clients can discover any limits associated with the operations. For example, how many characters are allowed per post, or the number of options that can be included in a poll. That information is already included in the server's /api/v2/instance call (in the language of this proposal, the org.mastodon.api.instance operation). I did consider extending the operations definition so that each operation mapped to an object that contained multiple keys, like this: \"operations\": { \"org.joinmastodon.api.statuses.post\": { \"1.0.0\": { \"endpoint\": \"/api/v1/statuses\", \"limits\": { \"max_characters\": 500, // ... }, \"mimeTypes\": [\"text/plain\"], // ... }, \"1.1.0\": { /* ... */ } } } That would significantly complicate this proposal, increasing the risk that it's not adopted. There's also no clear value in doing this. Alternatives considered Reporting capabilities alongside operations It's tempting to think that operations could be broken down in to smaller parts. For example, instead of different versions for the \"post a status\" operation you could include more specific capabilities in the operation description: \"operations\": { ... \"org.joinmastodon.api.statuses.post\": { \"contentWarning\": true, \"polls\": true, \"media\": true, ... } ... } This indicates this server supports the \"post a new status\" operation with statuses that include content warnings, polls, and media. You don't do that because it results in a combinatorial explosion of the different sub-types of operations that clients need to support, without any significant benefit. Even the example above is incomplete; for example, some servers support including images in content warnings, so a simple boolean for the contentWarning property is insufficient. So treating the thing-that-has-to-be-versioned as the operation (post a status, translate, reblog, etc) seems to be the better level of granularity. Reporting capabilities in API responses A server could include metadata in each response that contains an object that describes the operations that can be performed on that object. For example, the Status object could be modified to include an operations property that looks like this: { \"id\": \"103270115826048975\", \"created_at\": \"2019-12-08T03:48:33.901Z\", ... \"operations\": { \"org.joinmastodon.api.statuses.reply\": [\"POST\", \"https://example.com/api/v1/statuses\"], \"org.joinmastodon.api.statuses.view\": [\"GET\", \"https://example.com/api/v1/statuses/103270115826048975\"], \"org.joinmastodon.api.statuses.favourite\": [\"POST\", \"http/api/v1/statuses/103270115826048975/favourite\"], ... etc } } } This is the Hypermedia as the engine of application state (HATEOAS) model. It's an interesting approach, and a possible future direction. But it would require significant work on the part of server developers to implement as it would affect every response returned by the server. On the other hand the approach in this proposal is static content in the nodeinfo response. It's significantly easier to implement and iterate on. Clients keep a hardcoded server version : capabilities map This could go the other way, and instead require servers to have a consistent name and parseable version number, and expect clients to keep a map of \"server A at version V can perform operations X, Y, and Z\". I think this is the wrong approach for two reasons: First : It requires every client development team to independently maintain a mapping between server versions and capabilities It requires client updates whenever a server is released that supports a capability the client already supports on another server Re that last point a worked example might make it clearer. Suppose there are two server types, A and B. A supports operations X and Y, B supports X, Y, and Z. A client is released which supports operations X, Y, and Z, and is hardcoded with knowledge about which server type supports a given operation. A new version of server type A is released which now supports operation Z as well. But users of the client who connect to server type A cannot benefit from this until a new version of the client is released with updated information about the capabilities of server type A. With the proposal in this document this problem does not occur; if a client supports operation Z (at a given version) and a server advertises that it supports that operation then the client can choose to use it without needing a new release. This is better for our users. Second : Server developers do not seem to be interested in reporting useful versions for their software, for example: Sharkey: feat: report server version following semver.org requirements (#371) \u00b7 Issues \u00b7 TransFem.org / Sharkey \u00b7 GitLab Iceshrimp: #502 - Please use semver compatible versions - iceshrimp/iceshrimp - Iceshrimp development Firefish: Enforce semver for reported Firefish versions (#10844) \u00b7 Issues \u00b7 firefish / firefish \u00b7 GitLab Mastodon: Server should refuse to start if configured version is not semver.org compatible \u00b7 Issue #28843 \u00b7 mastodon/mastodon \u00b7 GitHub Return an OpenAPI definition for the supported API OpenAPI is a popular schema for defining an API. The server could just return the OpenAPI schema for the API that it supports. I did consider this (an earlier version of this proposal was built around it). But it complicates the data the client needs to process, and includes data that the client will ignore. Consider the /api/v1/timelines/home endpoint, which would have an operation ID something like org.joinmastodon.api.timelines.home under this proposal. This is the OpenAPI definition for that endpoint, copied from the GoToSocial project's OpenAPI definition ( swagger.yaml , the descriptions have been deleted to keep this a reasonable length): /api/v1/timelines/home: get: description: |- The statuses [... deleted ...] operationId: homeTimeline parameters: - description: [deleted] in: query name: max_id type: string - description: [deleted] in: query name: since_id type: string - description: [deleted] in: query name: min_id type: string - default: 20 description: [deleted] in: query name: limit type: integer produces: - application/json responses: \"200\": description: Array of statuses. headers: Link: description: [deleted] type: string schema: items: $ref: '#/definitions/status' type: array \"400\": description: bad request \"401\": description: unauthorized security: - OAuth2 Bearer: - read:statuses summary: See statuses/posts by accounts you follow. tags: - timelines Most of the information in that definition is redundant for the client . It's absolutely essential information to have for the server developer, and for producing documentation. But the client should already have this compiled in. The contract between the client and the server is that if the server reports that it supports the org.joinmastodon.api.timelines.home operation at v1.0.0 : the endpoint is /api/v1/timelines/home the valid parameters are max_id , since_id , min_id , and limit . the response is JSON, encoding an array of Status there will be pagination details in the Link header authorization is required So returning an OpenAPI definition to the client significantly complicates things for no benefit. OpenAPI is also endpoint-oriented; by which I mean that the definition leads with the endpoint ( /api/v1/statuses ) and then describes the single operation that is present at that endpoint. This is backwards to what we need, where the operation comes first, and multiple operations might be supported at the same endpoint. Use the API path as the key Instead of the proposed format, use the API path as the map key, like this: \"operations\": { \"/api/some/path\": [\"org.joinmastodon.x.y.z:1.0.0\", \"org.joinmastodon.x.y.z:1.1.0\", ...] } I reject this for two reasons: It suggests that servers might decide to implement the same operation under different URL paths. That is unnecessary extra complexity, and per the previous section, the contract between the client and the server is if the server advertises support for operation X the definition of that operation includes that URL path it is served under. It's unfriendly to client developers; a client using this information is trying to answer the question \"Does the server support operation X?\", not \"Does API endpoint /a/b/c exist?\". So the operation identifier should be the lookup key for the map, not the endpoint. Open questions These are questions this proposal does not explicitly answer. I have suggestions, but feedback is appreciated. Can servers set an API prefix? While I do not believe servers should be able to arbitrarily change all aspects of the path an operation is served under it may be useful for servers to be able to specify a path prefix for some or all operations. E.g., a server that supports Mastodon and Friendica APIs might want to offer them at paths that starts mastodon and friendica respectively. To do this the map value would be a second object with prefix and versions keys. \"operations\": { \"org.joinmastodon.api.conversations.id.unread\": { \"prefix\": \"/mastodon\", \"versions\": [\"1.0.0\"] }, \"ca.friendi.api.conversations.id.unread\": { \"prefix\": \"/friendica\", \"versions\": [\"1.0.0\"] } } If the prefix was omitted the default would be / . Adopting this format, even if the only key is versions is probably a good idea initially to support future changes in a backwards-compatible manner. What happens if an operations \"owner\" rebrands or disappears? If a FQDN owner entity rebrands or disappears (e.g., Calckey renamed to Firefish) what happens to the operation identifiers they have defined? I don't think a rebrand should necessitate a wholesale renaming of the operation identifiers, that's unnecessary churn. They may decide to define future operations using the new name. Since the operation identifies are not actual domains / URLs there is no requirement for them to actually resolve to anything, so I don't foresee a technical problem with this approach if a project that defined some operation identifiers shuts down. As long as there is still documentation that defines the API for those operations nothing is lost. Is the reverse-FQDN-with-suffix approach the best format for operations keys? I think so. I did consider using Uniform Resource Name (URN) or Internationalised Resource Identifiers (IRI) . There are advantages; for example, the operation identifier could be a URN or IRI that resolves to a document (perhaps the OpenAPI definition) for the API for that operation. However, that introduces the difficult topic of case-sensitivity when clients are comparing the list of operations the server returns with the list of operations they support. If the operation key was a URN or IRI it is, by definition, case-sensitive in parts. This provides an opportunity for server developers to incorrectly report an identifier with the wrong case, and for client developers to look for operations with the wrong case, impeding interoperability. Suggesting \"Clients should case-fold operation identifiers to lower case before comparing them\" does not solve the problem, as rules for correctly lower-casing text are not well specified, and may differ from implementation to implementation, again impeding interoperability. The approach of using a reverse FQDN with additional labels, and ensuring it is encoded with IDN sidesteps those problems. Is there a 1:1 mapping between operations and API calls? Should every supported API call have an associated operation, or is it OK to consider multiple API calls as a single operation the server supports? I think a 1:1 mapping makes most sense, as it allows server developers to incrementally deploy new features. For example, at the time of writing Friendica only partially supports voting; posts with votes can be displayed and will be returned by the API, but the operations to create a post with a poll, or to vote on a poll are not implemented. With a 1:1 mapping beween API and operations a Friendica server can advertise \"I can return posts that can contain polls; I do not support API calls that post polls or vote on them\". If \"voting\" was treated as a single operation then Friendica would be forced to advertise \"I do not support polls\", and a client might unnecessarily not show polls attached to Friendica posts. Anything other than a 1:1 mapping could also lead to different server developer teams \"bundling\" API calls into single operations in different ways, making things more complex for client developers, not less. Should clients indicate the operation identifier when making a request? When a server supports multiple versions of an API at a single endpoint it can be challenging to reliably determine the version of the API the client is calling. Server software often has to resort to \"sniffing\" the request and deducing the client's intentions by the presence or absence of specific properties in the request. This makes it more difficult to write the code to process the request and to determine what error details should be returned to the client. I think trying to solve this problem is outside the scope of this proposal. However, if this proposal is adopted I recommend server developers include the operation ID as a mandatory specific property in all future changes to their API, so this problem is gradually solved. Does this need to be a new top-level key in the nodeinfo? No. This could also be in the metadata, exposed as: { \"version\": \"2.2\", ... \"metadata\": { \"operations\": { // operation data here } } } Related links / prior art Not an exhaustive list: Mastodon Issues API Documentation via Swagger / RAML / Others \u00b7 Issue #1404 \u00b7 mastodon/mastodon \u00b7 GitHub How to get OpenAPI spec (JSON or YAML) \u00b7 Issue #16328 \u00b7 mastodon/mastodon \u00b7 GitHub OpenAPI documentation generation with rswag specs \u00b7 Issue #20572 \u00b7 mastodon/mastodon \u00b7 GitHub Mastodon PRs (these all attempted to add OpenAPI definitions) docs(open-api): Add OpenAPI Specification by oneslash \u00b7 Pull Request #20000 \u00b7 mastodon/mastodon \u00b7 GitHub Feat/add rswag in order to generate verified openapi docs by casaper \u00b7 Pull Request #20607 \u00b7 mastodon/mastodon \u00b7 GitHub [proposal] Machine readable API specification via OpenAPI by takayamaki \u00b7 Pull Request #25043 \u00b7 mastodon/mastodon \u00b7 GitHub Blog posts Automatically Generating OpenAPI Docs for Mastodon - DEV Community Mastodon-like servers GotoSocial OpenAPI definition of the Mastodon API [feature] Mastodon-compatible API extensions discovery mechanism \u00b7 Issue #1985 \u00b7 superseriousbusiness/gotosocial \u00b7 GitHub FEPs FEP 6481 - # Specifying ActivityPub extension support with NodeInfo \u53c2\u8003\u6587\u732e NodeInfo RFC-2119 - Key words for use in RFCs to Indicate Requirement Levels RFC 3490 - Internationalizing Domain Names in Applications (IDNA) Semantic Versioning OpenAPI Specification \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-9fde: Mechanism for servers to expose supported operations"},{"location":"fep/fep-9fde/#fep-9fde-mechanism-for-servers-to-expose-supported-operations","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Version Date Changes 3.1 2024-03-13 - Convert to FEP format - Incorporate feedback from Johannes Ernst and Steve Bates - Renamed clientApis to operations so this is usable for server-server operations too - Added \"Open questions\" section 3.0 2024-01-22 Re-write; include the operation information in the nodeinfo 2.0 2023-09-25 Re-write; replace the original suggestion to use the OpenAPI definition with a simpler specification 1.0 2023-08-14 Initial draft","title":"FEP-9fde: Mechanism for servers to expose supported operations"},{"location":"fep/fep-9fde/#summary","text":"This document proposes an extension to the NodeInfo schema ( FEP-f1d5 ) that would allow developers of Mastodon and Mastodon-like servers to unambigiously communicate the operations their servers support, and allow developers of software that interoperates with those servers to detect those features, promoting interoperability and easier adoption of new features.","title":"Summary"},{"location":"fep/fep-9fde/#synopsis","text":"This document is written for: The maintainers of the NodeInfo specification Developers of Mastodon and Mastodon-like servers Developers of clients for those servers After reading this document you should: Understand the general problem this is intended to solve Understand the proposed solution Understand alternatives to the solution, and why they are not appropriate Understand the open questions for this proposal Be able to provide feedback on the proposal","title":"Synopsis"},{"location":"fep/fep-9fde/#requirements","text":"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-9fde/#overview","text":"[!IMPORTANT] Other servers are also clients The primary perspective of this document's author is as an end-user client developer dealing with the Mastodon client API, and the examples are written from that perspective. However, this proposal can also be used to describe operations between different servers in the Fediverse using other protocols (e.g., ActivityPub). For any given interaction between a pair of servers one of them is going to be acting as the client in the interaction, and will need to know the operations the server supports. For the purposes of this document a \"Mastodon or Mastodon-like\" server is a server that presents the Mastodon client API , optionally with extensions to that API that provide additional functionality. These servers include, but are not limited to: Mastodon Glitch Hometown Pleroma Akkoma Firefish Iceshrimp Sharkey Friendica GoToSocial Clients of these servers have an API discovery problem. Since different servers support different (but similar) APIs the client has to determine what API operations the server supports. Given the wide variety of servers that are available, and their many forks, it's not feasible for clients to maintain an accurate list of all the possible server software names while mapping the names to API features. Instead the server should have a mechanism for advertising the operations it supports. The client would use this when determining what features to show the user, without needing to employ complex, error-prone heuristics. This would also provide a clear mechanism for Mastodon and Mastodon-like servers to incrementally deploy new features and deprecate old ones without inconveniencing clients. It also provides a clear mechanism to advertise server functionality without continually bolting it on to the \"instance info\" mechanism in the inconsistent fashion that has been done so far. The rest of this document sets out the specific problems I'm interested in solving, with motivating examples, and then describes how the new approach would solve these problems.","title":"Overview"},{"location":"fep/fep-9fde/#problems","text":"","title":"Problems"},{"location":"fep/fep-9fde/#the-supported-api-is-not-easily-discoverable","text":"Changes are made to the Mastodon API in a manner that is not easily discoverable by clients. For example, Add POST /api/v1/conversations/:id/unread by ClearlyClaire \u00b7 Pull Request #25509 \u00b7 mastodon/mastodon \u00b7 GitHub adds a new API endpoint ( api/v1/conversations/:id/unread ). The only way a client can discover that this API exists is to maintain, per-client, a mapping between Mastodon server version and the API supported at each version. This is: A lot of work for each client Something that every client needs to do Easy to get wrong Doesn't scale across multitudes of different servers","title":"The supported API is not easily discoverable"},{"location":"fep/fep-9fde/#no-standard-way-for-mastodon-servers-to-advertise-that-some-functionality-is-disabled-or-unavailable","text":"The Instance information contains a configuration block that has some, but not all the information necessary to determine the features a server supports. Other servers have extended this information in incompatible ways (e.g., the pleroma block). Other servers may not implement the functionality at all. For example, GoToSocial did not implement support for the Mastodon client-side filter API until version 0.15.0.","title":"No standard way for Mastodon servers to advertise that some functionality is disabled or unavailable"},{"location":"fep/fep-9fde/#no-standard-way-for-mastodon-like-servers-to-advertise-their-additional-functionality-to-clients","text":"Mastodon-like servers implement some or all of the Mastodon API. In many cases they also extend the API, providing additional functionality (local-only posting, quoting, markdown formatting, bookmarks, etc.) In some cases that functionality has already been incorporated in Mastodon (e.g., bookmarks), in other cases there are plans to include that functionality in Mastodon (e.g., quoting, markdown formatting). This leads to three problems. There is no simple way for clients to know which parts of the Mastodon API the server supports There is no simple way for clients to know if the server supports additional operations If Mastodon decides to implement an API that was first introduced in a Mastodon-like server there is no way for clients to detect this, without recompiling the client with new information about what features a given Mastodon server version implements","title":"No standard way for Mastodon-like servers to advertise their additional functionality to clients"},{"location":"fep/fep-9fde/#server-developers-have-too-much-to-do","text":"Server developers already have a lot of work to do. Any proposal should therefore be straightforward to implement. Additional complexity, such as changing the contents of existing API responses, or requiring developers of different servers to tightly coordinate when new functionality is introduced is going to make it less likely that groups adopt any proposed solutions.","title":"Server developers have too much to do"},{"location":"fep/fep-9fde/#proposed-solution","text":"A given Mastodon or Mastodon-like server supports a set of operations . To expose those to the user a Mastodon client needs to know: Which operations does the server support? What's the overlap between the operations the server supports and the operations the client supports? Therefore we need: A unique identifer for each operation that a set of servers supports identically A mechanism for a server to report the operations it supports","title":"Proposed solution"},{"location":"fep/fep-9fde/#a-unique-identifier-for-each-operation","text":"Operations are identified by the reverse FQDN of the server software that first implemented that operation, then an arbitrary number of additional dot-separated labels determined by the server authors. This ensures that operation IDs are unique without needing tight coordination between different server developer groups. For example: org.joinmastodon.api.statuses.post org.joinmastodon.api.statuses.translate io.github.glitch-soc.api.statuses.bookmark dev.iceshrimp.api.notes.reactions.create [!NOTE] Precise reverse FQDN to use for each server is to be decided This example use the reverse FQDNs for the server's primary websites or documentation sites, but each server group would determine and document the reverse FQDN for their server's operations. [!NOTE] Dot-separated labels SHOULD map 1:1 to API endpoint components In these examples the dotted components after the api correspond to the path components of the API endpoint. While there is no requirement that they do so server implementors are RECOMMENDED to do so, as it makes it easier for developers to mentally map between the operation identifier and the API path when they are working with the code. Each label within the operation identifier is represented in lower-case US-ASCII (a character set containing 128 characters associated with code points in the range 0..7F) . If a server team wishes to define an operation that uses a non-US-ASCII label they MUST encode the operation label to US-ASCII using the ToASCII transformation described in RFC 3490 - Internationalizing Domain Names in Applications (IDNA) .","title":"A unique identifier for each operation"},{"location":"fep/fep-9fde/#each-operation-has-one-or-more-versions","text":"Each operation exists at one or more semver-compatible (v2.0.0) versions. Semver is used because it is a widely deployed standard, easily understandable, and client libraries that can parse this format are available across many different programming languages. For example, in the Mastodon API documentation \" Post a new status \" describes the API for posting a new status. That API has changed three times in the Mastodon server implementation. Initial implementation Support for scheduled_at Support for poll There are no backwards-incompatible breaking changes across those versions so this is the same operation at three different versions; per Semver the major version stays the same and the minor version is incremented. 1.0.0 - initial implementation 1.1.0 - support for scheduled_at 1.2.0 - support for polls [!IMPORTANT] These version numbers are unrelated to the version number of the software that introduced the operation","title":"Each operation has one or more versions"},{"location":"fep/fep-9fde/#example-bookmarks","text":"Bookmarking statuses originated in the glitch-soc fork and was incorporated in to Mastodon. Therefore, the ID for the bookmark operations -- if they are compatible with the glitch-soc implementation -- use the io.github.glitch-soc.api prefix. io.github.glitch-soc.api.statuses.bookmark @ 1.0.0 - bookmark a status io.github.glitch-soc.api.statuses.unbookmark @ 1.0.0 - remove a status from bookmarks io.github.glitch-soc.api.timeline.bookmarks @ 1.0.0 - fetch a timeline of the user's bookmarks io.github.glitch-soc.api.timeline.bookmarks @ 1.1.0 - fetch a timeline of the user's bookmarks, supporting min_id and max_id simultaneously","title":"Example: Bookmarks"},{"location":"fep/fep-9fde/#client-discovery-of-supported-operations-and-endpoints","text":"Clients must be able to discover which operations the server supports and the endpoints to use for those operations. To do this the nodeinfo (determined via /.well-known/nodeinfo ) schema should be extended to support a new operations property. The property's value is a map from a string key -- the operation ID -- to a set of one or more Semver versions of the operation that the server supports. For example: \"operations\": { ... \"org.joinmastodon.api.some.operation\": [\"1.0.0\", \"1.1.0\", \"1.2.0\", \"2.0.0\"] ... } [!NOTE] Unordered versions The supported version operations is not ordered; client code MUST treat this as a set, not a list. [!NOTE] Not limited to Mastodon / Mastodon-like servers This operations map is not limited to operations supported by Mastodon/Mastodon-like servers. This is a general mechanism that can be used by servers to expose information about their supported operations and could be used by other Fediverse software like Lemmy, KBin, etc. Because of the Semver rules for breaking changes servers MAY omit earlier versions from the list if they are included in a later version. In the previous example the 1.0.0 and 1.1.0 versions can be omitted as a server supporting v1.2.0 of an operation implicitly supports all preceding versions with the same major number. \"operations\": { ... \"org.joinmastodon.api.some.operation\": [\"1.2.0\", \"2.0.0\"] ... } [!NOTE] There is no need to specify the operation semantics The semantics of each {operation, version} pair are already known by the client (for each operation it supports). Semantics like whether these endpoints are GET , POST , DELETE , or PATCH , the exact names of the URL query parameters, the API endpoint, etc. In other words, servers MUST NOT advertise support for an existing operation ID and change anything about how that operation works. The server developers should either define and document a new operation ID, or implement the operation as a new version (bumping the major version if it is a breaking change).","title":"Client discovery of supported operations and endpoints"},{"location":"fep/fep-9fde/#activitypub-extension-support","text":"Most of this document has presented examples using the Mastodon client API (and related APIs) but, as noted, this proposal also provides a clean mechanism to allow servers to report other extensions they support. Here is an example from FEP 6481 - # Specifying ActivityPub extension support with NodeInfo which is presented as: Manyfold intends to define a new Activity Vocabulary Object type for its own rich content, 3dModel . The specification will define an extension IRI, for instance https://w3id.org/manyfold/3dModel#v1 . Applications that wish to receive Activities with this type can state their support for the extension in their NodeInfo file as follows; Manyfold instances will then know that they can send that object type and it will be understood. { ..., \"metadata\": { \"activitypub\": { \"extensions\": [ \"https://w3id.org/manyfold/3dModel#v1\" ] } } } In this proposal that could represented like this: \"operations\": { \"app.manyfold.activitypub.accept.3dmodel\": [\"1.0.0\"], ... } (the precise name of the operation would need to be determined) Any other server that can accept a 3dModel would expose the same operation.","title":"ActivityPub extension support"},{"location":"fep/fep-9fde/#to-deploy-this","text":"","title":"To deploy this..."},{"location":"fep/fep-9fde/#server-developers","text":"Servers where the set of supported operations is not user configurable would need to maintain a static map of operations to versions, and return that map as part of the nodeinfo response. If the set of operations is user configurable (e.g., perhaps the server software supports a translation API but the server operator has not enabled translation support) the nodeinfo response would need to be dynamically generated from the current software configuration. In both cases developing a new operation or changing an existing operation would require the developers to: Determine the operation's version number, following semver backwards-compatible rules Document the behaviour of the new operation / version Include the new operation / version in the server's response","title":"Server developers"},{"location":"fep/fep-9fde/#client-developers","text":"To provide the best user experience client developers SHOULD fetch the operations map when the user logs in. If the client supports a particular operation at a particular version the client can query the map and determine whether the concrete version they need is in the map, or met by a higher version. Semver client libraries are available for Kotlin and Java (Android) and Swift (iOS), as well as many other languages. If the server does not support the operation the client MAY fall back to a different operation, or disable the particular operation in the UI. To use the example from earlier, Add POST /api/v1/conversations/:id/unread by ClearlyClaire \u00b7 Pull Request #25509 \u00b7 mastodon/mastodon \u00b7 GitHub which adds a new API endpoint ( api/v1/conversations/:id/unread ). The server would report this as: \"operations\": { ... \"org.joinmastodon.api.conversations.id.unread\": [\"1.0.0\"] ... } and a client that wanted to conditionally support this would query the operations map for org.joinmastodon.api.conversations.id.unread with any version entry with a major version of 1 , and if the operation/version pair is not found then disable the \"Mark a conversation unread\" UI affordances where they occur.","title":"Client developers"},{"location":"fep/fep-9fde/#is-there-a-proof-of-concept","text":"Yes. I have started implementing the client side of this in Pachli . At the moment this uses server version parsing heuristics to maintain a Pachli-specific map of operations and supported versions ( Server.kt ) and then query the server's reported capabilities and adjust the UI accordingly. For example, this snippet conditionally enables the \"edit filters\" UI only if the user's server supports filtering. Maintaining the server-specific operations map in Pachli is error prone, slow to update, and does not benefit the wider ecosystem of Mastodon clients and servers, hence this proposal.","title":"Is there a proof of concept?"},{"location":"fep/fep-9fde/#this-solves","text":"This solves the problems described earlier: \"[[#The supported API is not easily discoverable]]\" The client can easily discover the specific operations the server supports, and adjust UX accordingly \"[[#No standard way for Mastodon servers to advertise that some functionality is disabled]]\" The operations property must reflect the active configuration of the server. \"[[#No standard way for Mastodon-like servers to advertise their functionality to clients]] If a Mastodon-like server implements a Mastodon-compatible API endpoint it lists that endpoint using the relevant org.mastodon... operation identifier. [[#Server developers have too much to do]] This proposal doesn't modify any existing API responses For a given server the list of supported operations can be statically configured, and does not change after the server has launched The work of developing a dictionary of supported operations can be sharded amongst different groups Server developers have a vested interest in contributing details of operations specific to their server, so more third party clients support them Client developers have a vested interest in reviewing and contributing details of operations specific to servers their users use, to make their clients more attractive to potential users No coordination is required between different groups of server developers to develop operation IDs Developers are incentivised to re-use existing operations instead of inventing new ones Implementing an existing operation in a compatible manner with another server increases the speed with which your users will be able to use the feature in their preferred clients.","title":"This solves..."},{"location":"fep/fep-9fde/#not-in-scope","text":"This proposal doesn't address how clients can discover any limits associated with the operations. For example, how many characters are allowed per post, or the number of options that can be included in a poll. That information is already included in the server's /api/v2/instance call (in the language of this proposal, the org.mastodon.api.instance operation). I did consider extending the operations definition so that each operation mapped to an object that contained multiple keys, like this: \"operations\": { \"org.joinmastodon.api.statuses.post\": { \"1.0.0\": { \"endpoint\": \"/api/v1/statuses\", \"limits\": { \"max_characters\": 500, // ... }, \"mimeTypes\": [\"text/plain\"], // ... }, \"1.1.0\": { /* ... */ } } } That would significantly complicate this proposal, increasing the risk that it's not adopted. There's also no clear value in doing this.","title":"Not in scope"},{"location":"fep/fep-9fde/#alternatives-considered","text":"","title":"Alternatives considered"},{"location":"fep/fep-9fde/#reporting-capabilities-alongside-operations","text":"It's tempting to think that operations could be broken down in to smaller parts. For example, instead of different versions for the \"post a status\" operation you could include more specific capabilities in the operation description: \"operations\": { ... \"org.joinmastodon.api.statuses.post\": { \"contentWarning\": true, \"polls\": true, \"media\": true, ... } ... } This indicates this server supports the \"post a new status\" operation with statuses that include content warnings, polls, and media. You don't do that because it results in a combinatorial explosion of the different sub-types of operations that clients need to support, without any significant benefit. Even the example above is incomplete; for example, some servers support including images in content warnings, so a simple boolean for the contentWarning property is insufficient. So treating the thing-that-has-to-be-versioned as the operation (post a status, translate, reblog, etc) seems to be the better level of granularity.","title":"Reporting capabilities alongside operations"},{"location":"fep/fep-9fde/#reporting-capabilities-in-api-responses","text":"A server could include metadata in each response that contains an object that describes the operations that can be performed on that object. For example, the Status object could be modified to include an operations property that looks like this: { \"id\": \"103270115826048975\", \"created_at\": \"2019-12-08T03:48:33.901Z\", ... \"operations\": { \"org.joinmastodon.api.statuses.reply\": [\"POST\", \"https://example.com/api/v1/statuses\"], \"org.joinmastodon.api.statuses.view\": [\"GET\", \"https://example.com/api/v1/statuses/103270115826048975\"], \"org.joinmastodon.api.statuses.favourite\": [\"POST\", \"http/api/v1/statuses/103270115826048975/favourite\"], ... etc } } } This is the Hypermedia as the engine of application state (HATEOAS) model. It's an interesting approach, and a possible future direction. But it would require significant work on the part of server developers to implement as it would affect every response returned by the server. On the other hand the approach in this proposal is static content in the nodeinfo response. It's significantly easier to implement and iterate on.","title":"Reporting capabilities in API responses"},{"location":"fep/fep-9fde/#clients-keep-a-hardcoded-server-version-capabilities-map","text":"This could go the other way, and instead require servers to have a consistent name and parseable version number, and expect clients to keep a map of \"server A at version V can perform operations X, Y, and Z\". I think this is the wrong approach for two reasons: First : It requires every client development team to independently maintain a mapping between server versions and capabilities It requires client updates whenever a server is released that supports a capability the client already supports on another server Re that last point a worked example might make it clearer. Suppose there are two server types, A and B. A supports operations X and Y, B supports X, Y, and Z. A client is released which supports operations X, Y, and Z, and is hardcoded with knowledge about which server type supports a given operation. A new version of server type A is released which now supports operation Z as well. But users of the client who connect to server type A cannot benefit from this until a new version of the client is released with updated information about the capabilities of server type A. With the proposal in this document this problem does not occur; if a client supports operation Z (at a given version) and a server advertises that it supports that operation then the client can choose to use it without needing a new release. This is better for our users. Second : Server developers do not seem to be interested in reporting useful versions for their software, for example: Sharkey: feat: report server version following semver.org requirements (#371) \u00b7 Issues \u00b7 TransFem.org / Sharkey \u00b7 GitLab Iceshrimp: #502 - Please use semver compatible versions - iceshrimp/iceshrimp - Iceshrimp development Firefish: Enforce semver for reported Firefish versions (#10844) \u00b7 Issues \u00b7 firefish / firefish \u00b7 GitLab Mastodon: Server should refuse to start if configured version is not semver.org compatible \u00b7 Issue #28843 \u00b7 mastodon/mastodon \u00b7 GitHub","title":"Clients keep a hardcoded server version : capabilities map"},{"location":"fep/fep-9fde/#return-an-openapi-definition-for-the-supported-api","text":"OpenAPI is a popular schema for defining an API. The server could just return the OpenAPI schema for the API that it supports. I did consider this (an earlier version of this proposal was built around it). But it complicates the data the client needs to process, and includes data that the client will ignore. Consider the /api/v1/timelines/home endpoint, which would have an operation ID something like org.joinmastodon.api.timelines.home under this proposal. This is the OpenAPI definition for that endpoint, copied from the GoToSocial project's OpenAPI definition ( swagger.yaml , the descriptions have been deleted to keep this a reasonable length): /api/v1/timelines/home: get: description: |- The statuses [... deleted ...] operationId: homeTimeline parameters: - description: [deleted] in: query name: max_id type: string - description: [deleted] in: query name: since_id type: string - description: [deleted] in: query name: min_id type: string - default: 20 description: [deleted] in: query name: limit type: integer produces: - application/json responses: \"200\": description: Array of statuses. headers: Link: description: [deleted] type: string schema: items: $ref: '#/definitions/status' type: array \"400\": description: bad request \"401\": description: unauthorized security: - OAuth2 Bearer: - read:statuses summary: See statuses/posts by accounts you follow. tags: - timelines Most of the information in that definition is redundant for the client . It's absolutely essential information to have for the server developer, and for producing documentation. But the client should already have this compiled in. The contract between the client and the server is that if the server reports that it supports the org.joinmastodon.api.timelines.home operation at v1.0.0 : the endpoint is /api/v1/timelines/home the valid parameters are max_id , since_id , min_id , and limit . the response is JSON, encoding an array of Status there will be pagination details in the Link header authorization is required So returning an OpenAPI definition to the client significantly complicates things for no benefit. OpenAPI is also endpoint-oriented; by which I mean that the definition leads with the endpoint ( /api/v1/statuses ) and then describes the single operation that is present at that endpoint. This is backwards to what we need, where the operation comes first, and multiple operations might be supported at the same endpoint.","title":"Return an OpenAPI definition for the supported API"},{"location":"fep/fep-9fde/#use-the-api-path-as-the-key","text":"Instead of the proposed format, use the API path as the map key, like this: \"operations\": { \"/api/some/path\": [\"org.joinmastodon.x.y.z:1.0.0\", \"org.joinmastodon.x.y.z:1.1.0\", ...] } I reject this for two reasons: It suggests that servers might decide to implement the same operation under different URL paths. That is unnecessary extra complexity, and per the previous section, the contract between the client and the server is if the server advertises support for operation X the definition of that operation includes that URL path it is served under. It's unfriendly to client developers; a client using this information is trying to answer the question \"Does the server support operation X?\", not \"Does API endpoint /a/b/c exist?\". So the operation identifier should be the lookup key for the map, not the endpoint.","title":"Use the API path as the key"},{"location":"fep/fep-9fde/#open-questions","text":"These are questions this proposal does not explicitly answer. I have suggestions, but feedback is appreciated.","title":"Open questions"},{"location":"fep/fep-9fde/#can-servers-set-an-api-prefix","text":"While I do not believe servers should be able to arbitrarily change all aspects of the path an operation is served under it may be useful for servers to be able to specify a path prefix for some or all operations. E.g., a server that supports Mastodon and Friendica APIs might want to offer them at paths that starts mastodon and friendica respectively. To do this the map value would be a second object with prefix and versions keys. \"operations\": { \"org.joinmastodon.api.conversations.id.unread\": { \"prefix\": \"/mastodon\", \"versions\": [\"1.0.0\"] }, \"ca.friendi.api.conversations.id.unread\": { \"prefix\": \"/friendica\", \"versions\": [\"1.0.0\"] } } If the prefix was omitted the default would be / . Adopting this format, even if the only key is versions is probably a good idea initially to support future changes in a backwards-compatible manner.","title":"Can servers set an API prefix?"},{"location":"fep/fep-9fde/#what-happens-if-an-operations-owner-rebrands-or-disappears","text":"If a FQDN owner entity rebrands or disappears (e.g., Calckey renamed to Firefish) what happens to the operation identifiers they have defined? I don't think a rebrand should necessitate a wholesale renaming of the operation identifiers, that's unnecessary churn. They may decide to define future operations using the new name. Since the operation identifies are not actual domains / URLs there is no requirement for them to actually resolve to anything, so I don't foresee a technical problem with this approach if a project that defined some operation identifiers shuts down. As long as there is still documentation that defines the API for those operations nothing is lost.","title":"What happens if an operations \"owner\" rebrands or disappears?"},{"location":"fep/fep-9fde/#is-the-reverse-fqdn-with-suffix-approach-the-best-format-for-operations-keys","text":"I think so. I did consider using Uniform Resource Name (URN) or Internationalised Resource Identifiers (IRI) . There are advantages; for example, the operation identifier could be a URN or IRI that resolves to a document (perhaps the OpenAPI definition) for the API for that operation. However, that introduces the difficult topic of case-sensitivity when clients are comparing the list of operations the server returns with the list of operations they support. If the operation key was a URN or IRI it is, by definition, case-sensitive in parts. This provides an opportunity for server developers to incorrectly report an identifier with the wrong case, and for client developers to look for operations with the wrong case, impeding interoperability. Suggesting \"Clients should case-fold operation identifiers to lower case before comparing them\" does not solve the problem, as rules for correctly lower-casing text are not well specified, and may differ from implementation to implementation, again impeding interoperability. The approach of using a reverse FQDN with additional labels, and ensuring it is encoded with IDN sidesteps those problems.","title":"Is the reverse-FQDN-with-suffix approach the best format for operations keys?"},{"location":"fep/fep-9fde/#is-there-a-11-mapping-between-operations-and-api-calls","text":"Should every supported API call have an associated operation, or is it OK to consider multiple API calls as a single operation the server supports? I think a 1:1 mapping makes most sense, as it allows server developers to incrementally deploy new features. For example, at the time of writing Friendica only partially supports voting; posts with votes can be displayed and will be returned by the API, but the operations to create a post with a poll, or to vote on a poll are not implemented. With a 1:1 mapping beween API and operations a Friendica server can advertise \"I can return posts that can contain polls; I do not support API calls that post polls or vote on them\". If \"voting\" was treated as a single operation then Friendica would be forced to advertise \"I do not support polls\", and a client might unnecessarily not show polls attached to Friendica posts. Anything other than a 1:1 mapping could also lead to different server developer teams \"bundling\" API calls into single operations in different ways, making things more complex for client developers, not less.","title":"Is there a 1:1 mapping between operations and API calls?"},{"location":"fep/fep-9fde/#should-clients-indicate-the-operation-identifier-when-making-a-request","text":"When a server supports multiple versions of an API at a single endpoint it can be challenging to reliably determine the version of the API the client is calling. Server software often has to resort to \"sniffing\" the request and deducing the client's intentions by the presence or absence of specific properties in the request. This makes it more difficult to write the code to process the request and to determine what error details should be returned to the client. I think trying to solve this problem is outside the scope of this proposal. However, if this proposal is adopted I recommend server developers include the operation ID as a mandatory specific property in all future changes to their API, so this problem is gradually solved.","title":"Should clients indicate the operation identifier when making a request?"},{"location":"fep/fep-9fde/#does-this-need-to-be-a-new-top-level-key-in-the-nodeinfo","text":"No. This could also be in the metadata, exposed as: { \"version\": \"2.2\", ... \"metadata\": { \"operations\": { // operation data here } } }","title":"Does this need to be a new top-level key in the nodeinfo?"},{"location":"fep/fep-9fde/#related-links-prior-art","text":"Not an exhaustive list: Mastodon Issues API Documentation via Swagger / RAML / Others \u00b7 Issue #1404 \u00b7 mastodon/mastodon \u00b7 GitHub How to get OpenAPI spec (JSON or YAML) \u00b7 Issue #16328 \u00b7 mastodon/mastodon \u00b7 GitHub OpenAPI documentation generation with rswag specs \u00b7 Issue #20572 \u00b7 mastodon/mastodon \u00b7 GitHub Mastodon PRs (these all attempted to add OpenAPI definitions) docs(open-api): Add OpenAPI Specification by oneslash \u00b7 Pull Request #20000 \u00b7 mastodon/mastodon \u00b7 GitHub Feat/add rswag in order to generate verified openapi docs by casaper \u00b7 Pull Request #20607 \u00b7 mastodon/mastodon \u00b7 GitHub [proposal] Machine readable API specification via OpenAPI by takayamaki \u00b7 Pull Request #25043 \u00b7 mastodon/mastodon \u00b7 GitHub Blog posts Automatically Generating OpenAPI Docs for Mastodon - DEV Community Mastodon-like servers GotoSocial OpenAPI definition of the Mastodon API [feature] Mastodon-compatible API extensions discovery mechanism \u00b7 Issue #1985 \u00b7 superseriousbusiness/gotosocial \u00b7 GitHub FEPs FEP 6481 - # Specifying ActivityPub extension support with NodeInfo","title":"Related links / prior art"},{"location":"fep/fep-9fde/#_1","text":"NodeInfo RFC-2119 - Key words for use in RFCs to Indicate Requirement Levels RFC 3490 - Internationalizing Domain Names in Applications (IDNA) Semantic Versioning OpenAPI Specification","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-9fde/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-a070/","text":"FEP-a070: Ordered properties for plain JSON consumers Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary In a [Github-issue] filed against the normative AS2 context, it was pointed out that attachment and tag are unordered by default, although some implementations of \"fediverse\" software blindly assume them to always be ordered. This can be made unambiguous by using @list in JSON-LD, but for plain JSON consumers, a separate shorthand term must be defined. This FEP attempts to disambiguate between unordered and ordered arrays for those plain JSON consumers. Prior art in items vs orderedItems (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) In the [AS2-vocab], there is items , which is used to express the items included in a Collection or OrderedCollection. However, in [ActivityPub], the OrderedCollection type is mandated to be reverse chronological order. Tangentially, it is valid to have a Collection with items that are either ordered or unordered. The normative [AS2-context] deals with issue by defining two different terms: items and orderedItems . Both of these terms have the same @id of https://www.w3.org/ns/activitystreams#items and the same @type of @id to indicate that they contain nodes on the graph, but orderedItems is additionally defined with a @container of an ordered @list , overriding the default @container of an unordered @set . The use of orderedItems is present in the examples for items within [AS2-vocab], but it is not defined separately because it is not a separate term. Following this pattern, we can define similarly \"ordered\" counterparts to \"unordered\" existing properties. An exploration of properties that producers may wish to explicitly order (This section is non-normative) attachment : There is nothing that requires attachments to an object to be ordered; however, it is a popular expectation in several cases that the attachments should be ordered. For example, someone authoring an object may wish to attach three images in order, representing a triptych. If the array order of attachment were to be changed, this would change the author's intended representation. tag : Tags are generally freeform and not meant to be parsed in any order, but some use-cases may wish to order tags as well. For example, Tumblr allows users to set the order their tags are presented in, and users sometimes use these tags to communicate a series of comments or thoughts without having them be present in the conversational context. name : A thing may have multiple names, some of which are preferred more than others. Having an array for name is likely to confuse existing implementations at the time of writing this FEP, but it is something that could conceivably be useful for several use-cases. oneOf/anyOf : When a Question represents a poll with predefined options for possible answers, the order of the options may be relevant to understanding the poll. Consider a self-referential poll that asks you to predict which option will receive the most votes: \"option 2\", \"option 3\", or \"option 1\". Terms defined by this FEP In the associated context , we define the following terms: orderedAttachment URI : https://www.w3.org/ns/activitystreams#attachment Notes : https://www.w3.org/TR/activitystreams-vocabulary/#dfn-attachment JSON-LD definition: { \"@context\": { \"orderedAttachment\": { \"@id\": \"https://www.w3.org/ns/activitystreams#attachment\", \"@type\": \"@id\", \"@container\": \"@list\" } } } orderedTag Term : orderedTag URI : https://www.w3.org/ns/activitystreams#tag Notes : https://www.w3.org/TR/activitystreams-vocabulary/#dfn-tag JSON-LD definition: { \"@context\": { \"orderedTag\": { \"@id\": \"https://www.w3.org/ns/activitystreams#tag\", \"@type\": \"@id\", \"@container\": \"@list\" } } } \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [AS2-context] W3C, activitystreams.jsonld [AS2-vocab] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [Github-issue] trwnh, orderedAttachment (and orderedTag?) , 2023 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-a070: Ordered properties for plain JSON consumers"},{"location":"fep/fep-a070/#fep-a070-ordered-properties-for-plain-json-consumers","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-a070: Ordered properties for plain JSON consumers"},{"location":"fep/fep-a070/#summary","text":"In a [Github-issue] filed against the normative AS2 context, it was pointed out that attachment and tag are unordered by default, although some implementations of \"fediverse\" software blindly assume them to always be ordered. This can be made unambiguous by using @list in JSON-LD, but for plain JSON consumers, a separate shorthand term must be defined. This FEP attempts to disambiguate between unordered and ordered arrays for those plain JSON consumers.","title":"Summary"},{"location":"fep/fep-a070/#prior-art-in-items-vs-ordereditems","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) In the [AS2-vocab], there is items , which is used to express the items included in a Collection or OrderedCollection. However, in [ActivityPub], the OrderedCollection type is mandated to be reverse chronological order. Tangentially, it is valid to have a Collection with items that are either ordered or unordered. The normative [AS2-context] deals with issue by defining two different terms: items and orderedItems . Both of these terms have the same @id of https://www.w3.org/ns/activitystreams#items and the same @type of @id to indicate that they contain nodes on the graph, but orderedItems is additionally defined with a @container of an ordered @list , overriding the default @container of an unordered @set . The use of orderedItems is present in the examples for items within [AS2-vocab], but it is not defined separately because it is not a separate term. Following this pattern, we can define similarly \"ordered\" counterparts to \"unordered\" existing properties.","title":"Prior art in items vs orderedItems"},{"location":"fep/fep-a070/#an-exploration-of-properties-that-producers-may-wish-to-explicitly-order","text":"(This section is non-normative) attachment : There is nothing that requires attachments to an object to be ordered; however, it is a popular expectation in several cases that the attachments should be ordered. For example, someone authoring an object may wish to attach three images in order, representing a triptych. If the array order of attachment were to be changed, this would change the author's intended representation. tag : Tags are generally freeform and not meant to be parsed in any order, but some use-cases may wish to order tags as well. For example, Tumblr allows users to set the order their tags are presented in, and users sometimes use these tags to communicate a series of comments or thoughts without having them be present in the conversational context. name : A thing may have multiple names, some of which are preferred more than others. Having an array for name is likely to confuse existing implementations at the time of writing this FEP, but it is something that could conceivably be useful for several use-cases. oneOf/anyOf : When a Question represents a poll with predefined options for possible answers, the order of the options may be relevant to understanding the poll. Consider a self-referential poll that asks you to predict which option will receive the most votes: \"option 2\", \"option 3\", or \"option 1\".","title":"An exploration of properties that producers may wish to explicitly order"},{"location":"fep/fep-a070/#terms-defined-by-this-fep","text":"In the associated context , we define the following terms:","title":"Terms defined by this FEP"},{"location":"fep/fep-a070/#orderedattachment","text":"URI : https://www.w3.org/ns/activitystreams#attachment Notes : https://www.w3.org/TR/activitystreams-vocabulary/#dfn-attachment JSON-LD definition: { \"@context\": { \"orderedAttachment\": { \"@id\": \"https://www.w3.org/ns/activitystreams#attachment\", \"@type\": \"@id\", \"@container\": \"@list\" } } }","title":"orderedAttachment"},{"location":"fep/fep-a070/#orderedtag","text":"Term : orderedTag URI : https://www.w3.org/ns/activitystreams#tag Notes : https://www.w3.org/TR/activitystreams-vocabulary/#dfn-tag JSON-LD definition: { \"@context\": { \"orderedTag\": { \"@id\": \"https://www.w3.org/ns/activitystreams#tag\", \"@type\": \"@id\", \"@container\": \"@list\" } } }","title":"orderedTag"},{"location":"fep/fep-a070/#_1","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [AS2-context] W3C, activitystreams.jsonld [AS2-vocab] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [Github-issue] trwnh, orderedAttachment (and orderedTag?) , 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-a070/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-a4ed/","text":"FEP-a4ed: The Fediverse Enhancement Proposal Process Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary A Fediverse Enhancement Proposal (FEP) is a document that provides information to the Fediverse community. The goal of a FEP is to improve interoperability and well-being of diverse services, applications and communities that form the Fediverse. This document describes the scope, format and process of publishing Fediverse Enhancement Proposals. Scope and Objectives A Fediverse Enhancement Proposal (FEP) should be a concise and focused documentation of a specific topic that is of interest to the Fediverse community. A proposal should always have the intention of improving the interoperability and well-being of diverse services, applications and community of the Fediverse. The Fediverse includes applications, services and communities using the ActivityPub protocol and other protocols that foster decentralized and diverse social media and culture. Proposals may include descriptions of technical protocols and mechanisms, documentation of experimental work or current best practices. Proposals are not limited to technical topics and may focus on social and cultural aspects. Proposals may be entertaining and humorous (unlike this proposal). Language, Document Structure and Format All Fediverse Enhancement Proposals must be written in English, be properly formatted as CommonMark and be reasonably grammatical. Authors should use inclusive language and examples and refrain from using oppressive terminology . Proposal Title and Identifier Every Fediverse Enhancement Proposal must have a descriptive title. An identifier is computed from the proposal title as the first 4 digits of the sha256 hash (in hex). The identifier can be computed from the title with standard Unix tools: $ echo -n \"The Fediverse Enhancement Proposal Process\" | sha256sum | cut -c-4 a4ed By using the hash of the title as identifier we reduce the burden on facilitators to assign unique ids. This requires proposal titles to be unique. Proposal Type Fediverse Enhancement Proposals are classified into following types: Informational documents Implementation proposals Metadata Proposal metadata is placed at the top of the document as key-value pairs between opening and closing ~---~. Following metadata key-value pairs may be placed at the top of a proposal: type : Indicates the type of the proposal. Can be either informational or implementation . slug : the proposal identifier. The value must be enclosed within double quote marks, e.g. \"a4ed\" . authors : A comma separated list of authors of the proposal. Each item of the list should contain an author's name followed by a contact address in angle brackets (e.g. Alyssa P. Hacker <alyssa.p.hacker@email.example> , Alyssa P. Hacker <@alyssa.p.hacker@fediverse.example> ). status : Indicates the proposal status. Can be either DRAFT , WITHDRAWN or FINAL . dateReceived : Date of when the proposal was added to the repository (when status is set to DRAFT ). dateWithdrawn : Date of when the proposal status was set to WITHDRAWN (only for proposals with status WITHDRAWN ). dateFinalized : Date of when the proposal status was set to FINAL (only for proposals with status FINAL ). trackingIssue : Link to the tracking issue for the proposal. discussionsTo : Link to the discussion. relatedFeps : A comma separated list of related FEPs (e.g. FEP-a4ed, FEP-141a, FEP-686f ). replaces : A comma separated list of FEPs that are replaced by the proposal. replacedBy : Identifier of a FEP that replaces the proposal. Required Sections Every FEP should include at least the following sections: Summary: A short (no more than 200 words) summary of the proposal. Copyright: Indicating that the proposal has been placed in the public domain. Following sections may be included in a proposal: History: An overview of previous related efforts and how they relate to the proposal. Implementations: If applicable an overview of services or applications that implement the proposal at time of submission. References: A list of documents and resources referenced by the proposal. Copyright Fediverse Enhancement Proposals must be placed in the public domain by the authors with a CC0 1.0 Universal (CC0 1.0) Public Domain Dedication. The Fediverse Enhancement Proposals Process stateDiagram-v2 accTitle: FEP process flowchart accDescr { The process begins from the \"DRAFT\" status, followed by either of the \"FINAL\" or \"WITHDRAWN\" status. The \"WITHDRAWN\" status can go back to the \"DRAFT\" status. } [*] --> DRAFT DRAFT --> FINAL DRAFT --> WITHDRAWN WITHDRAWN --> DRAFT FINAL --> [*] A Fediverse Enhancement Proposal can be submitted by individuals or groups of individuals (authors). See the SUBMISSION.md file for a list of accepted submission methods. Within seven days one of the facilitators will read and respond to the proposal. The facilitator checks if the proposal conforms to the required structure and fits the scope and objective of the FEPs. The facilitator may request the authors to clarify, justify, or withdraw the proposal. Such a request must not reflect the personal bias of a facilitator. Rather, it will be made strictly to maintain a high quality of submissions. The facilitators reserve the right to reject a submission when a proposal amounts to blatant misuse of the process. The authors may seek feedback from the wider community if the submitted proposal is rejected or clarifications are requested. If a FEP facilitator approves a submission it receives the status DRAFT and is added to the repository. The facilitator also creates a tracking issue for the proposal and adds trackingIssue attribute to the proposal metadata. Registered proposals must have the following metadata attributes: slug , authors , status , dateReceived , trackingIssue and discussionsTo . When the status is changed to FINAL or WITHDRAWN , facilitator adds dateFinalized or dateWithdrawn attributes to the proposal metadata. While a proposal has the status DRAFT : Authors are responsible for initiating community discussion and collecting feedback. Authors may submit updates to the proposal which will be checked in to the repository by a facilitator. Others may also submit updates, but in this case a change must be approved by at least one author. Authors may withdraw the submission upon which a facilitator will set the status of the submission to WITHDRAWN . After at least 60 days the authors may request the proposal to be finalized. This is done by requesting final comments on the proposal. If there are no community objections within 14 days and the authors can show that they have initiated sufficient awareness and discussion of the proposal, a facilitator will set the status of the submission to FINAL . If after 1 year the authors have not requested the proposal to be finalized, a facilitator should inquire about the status of the proposal. If authors don't respond, a facilitator will set the status of the submission to WITHDRAWN . A proposal with status FINAL can not be changed or updated in a way that would lead to adjustments to implementations. Minor corrections are allowed. Any substantial change to finalized proposal must be submitted as a separate FEP. The new FEP MUST include a replaces metadata attribute pointing to FEPs it supersedes. If the new FEP becomes FINAL , the original one MUST point to it in an added replacedBy metadata attribute. A proposal with status WITHDRAWN remains in the repository and can be resubmitted. After a proposal becomes FINAL a facilitator will archive all discussions linked in the tracking issue and add the resulting archive links to the tracking issue. Facilitators A list of facilitators is maintained in the FACILITATORS.md file at the root of the FEP repository. Submission Methods A list of methods in which a proposal may be submitted is maintained in the SUBMISSION.md file at the root of the FEP repository. FEP Process Governance FEP-a4ed (The Fediverse Enhancement Proposal Process) is a living document and can be updated despite having the FINAL status. Anyone can propose a change to FEP-a4ed (or other documents related to the FEP process) using any method listed in SUBMISSION.md file. The change must be approved by at least two facilitators (one of them could be the submitter). For any part of the FEP process, there must be a sufficient number of facilitators who agreed to do the maintenance work. Changes should not be accepted before at least 1 month passes after the last update, to give facilitators and the community time to review them and provide feedback. Minor changes (i.e. a correction of a typo or of a broken link) can be accepted immediately after getting two approvals from facilitators. History The process and format described in this proposal is influenced by other community driven documentation efforts such as the BitTorrent Enhancement Proposal Process , Scheme Request for Implementation and the IETF RFC Series . \u53c2\u8003\u6587\u732e Dave Mason, Scheme Request For Implementation - Process David Harrison, The BitTorrent Enhancement Proposal Process , 2008 Housley, R., Ed., and L. Daigle, Ed., The RFC Series and RFC Editor , 2020 John MacFarlane, CommonMark Spec Version 0.29 , 2019 Mallory Knodel, Terminology, Power and Oppressive Language \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-a4ed: The Fediverse Enhancement Proposal Process"},{"location":"fep/fep-a4ed/#fep-a4ed-the-fediverse-enhancement-proposal-process","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-a4ed: The Fediverse Enhancement Proposal Process"},{"location":"fep/fep-a4ed/#summary","text":"A Fediverse Enhancement Proposal (FEP) is a document that provides information to the Fediverse community. The goal of a FEP is to improve interoperability and well-being of diverse services, applications and communities that form the Fediverse. This document describes the scope, format and process of publishing Fediverse Enhancement Proposals.","title":"Summary"},{"location":"fep/fep-a4ed/#scope-and-objectives","text":"A Fediverse Enhancement Proposal (FEP) should be a concise and focused documentation of a specific topic that is of interest to the Fediverse community. A proposal should always have the intention of improving the interoperability and well-being of diverse services, applications and community of the Fediverse. The Fediverse includes applications, services and communities using the ActivityPub protocol and other protocols that foster decentralized and diverse social media and culture. Proposals may include descriptions of technical protocols and mechanisms, documentation of experimental work or current best practices. Proposals are not limited to technical topics and may focus on social and cultural aspects. Proposals may be entertaining and humorous (unlike this proposal).","title":"Scope and Objectives"},{"location":"fep/fep-a4ed/#language-document-structure-and-format","text":"All Fediverse Enhancement Proposals must be written in English, be properly formatted as CommonMark and be reasonably grammatical. Authors should use inclusive language and examples and refrain from using oppressive terminology .","title":"Language, Document Structure and Format"},{"location":"fep/fep-a4ed/#proposal-title-and-identifier","text":"Every Fediverse Enhancement Proposal must have a descriptive title. An identifier is computed from the proposal title as the first 4 digits of the sha256 hash (in hex). The identifier can be computed from the title with standard Unix tools: $ echo -n \"The Fediverse Enhancement Proposal Process\" | sha256sum | cut -c-4 a4ed By using the hash of the title as identifier we reduce the burden on facilitators to assign unique ids. This requires proposal titles to be unique.","title":"Proposal Title and Identifier"},{"location":"fep/fep-a4ed/#proposal-type","text":"Fediverse Enhancement Proposals are classified into following types: Informational documents Implementation proposals","title":"Proposal Type"},{"location":"fep/fep-a4ed/#metadata","text":"Proposal metadata is placed at the top of the document as key-value pairs between opening and closing ~---~. Following metadata key-value pairs may be placed at the top of a proposal: type : Indicates the type of the proposal. Can be either informational or implementation . slug : the proposal identifier. The value must be enclosed within double quote marks, e.g. \"a4ed\" . authors : A comma separated list of authors of the proposal. Each item of the list should contain an author's name followed by a contact address in angle brackets (e.g. Alyssa P. Hacker <alyssa.p.hacker@email.example> , Alyssa P. Hacker <@alyssa.p.hacker@fediverse.example> ). status : Indicates the proposal status. Can be either DRAFT , WITHDRAWN or FINAL . dateReceived : Date of when the proposal was added to the repository (when status is set to DRAFT ). dateWithdrawn : Date of when the proposal status was set to WITHDRAWN (only for proposals with status WITHDRAWN ). dateFinalized : Date of when the proposal status was set to FINAL (only for proposals with status FINAL ). trackingIssue : Link to the tracking issue for the proposal. discussionsTo : Link to the discussion. relatedFeps : A comma separated list of related FEPs (e.g. FEP-a4ed, FEP-141a, FEP-686f ). replaces : A comma separated list of FEPs that are replaced by the proposal. replacedBy : Identifier of a FEP that replaces the proposal.","title":"Metadata"},{"location":"fep/fep-a4ed/#required-sections","text":"Every FEP should include at least the following sections: Summary: A short (no more than 200 words) summary of the proposal. Copyright: Indicating that the proposal has been placed in the public domain. Following sections may be included in a proposal: History: An overview of previous related efforts and how they relate to the proposal. Implementations: If applicable an overview of services or applications that implement the proposal at time of submission. References: A list of documents and resources referenced by the proposal.","title":"Required Sections"},{"location":"fep/fep-a4ed/#copyright","text":"Fediverse Enhancement Proposals must be placed in the public domain by the authors with a CC0 1.0 Universal (CC0 1.0) Public Domain Dedication.","title":"Copyright"},{"location":"fep/fep-a4ed/#the-fediverse-enhancement-proposals-process","text":"stateDiagram-v2 accTitle: FEP process flowchart accDescr { The process begins from the \"DRAFT\" status, followed by either of the \"FINAL\" or \"WITHDRAWN\" status. The \"WITHDRAWN\" status can go back to the \"DRAFT\" status. } [*] --> DRAFT DRAFT --> FINAL DRAFT --> WITHDRAWN WITHDRAWN --> DRAFT FINAL --> [*] A Fediverse Enhancement Proposal can be submitted by individuals or groups of individuals (authors). See the SUBMISSION.md file for a list of accepted submission methods. Within seven days one of the facilitators will read and respond to the proposal. The facilitator checks if the proposal conforms to the required structure and fits the scope and objective of the FEPs. The facilitator may request the authors to clarify, justify, or withdraw the proposal. Such a request must not reflect the personal bias of a facilitator. Rather, it will be made strictly to maintain a high quality of submissions. The facilitators reserve the right to reject a submission when a proposal amounts to blatant misuse of the process. The authors may seek feedback from the wider community if the submitted proposal is rejected or clarifications are requested. If a FEP facilitator approves a submission it receives the status DRAFT and is added to the repository. The facilitator also creates a tracking issue for the proposal and adds trackingIssue attribute to the proposal metadata. Registered proposals must have the following metadata attributes: slug , authors , status , dateReceived , trackingIssue and discussionsTo . When the status is changed to FINAL or WITHDRAWN , facilitator adds dateFinalized or dateWithdrawn attributes to the proposal metadata. While a proposal has the status DRAFT : Authors are responsible for initiating community discussion and collecting feedback. Authors may submit updates to the proposal which will be checked in to the repository by a facilitator. Others may also submit updates, but in this case a change must be approved by at least one author. Authors may withdraw the submission upon which a facilitator will set the status of the submission to WITHDRAWN . After at least 60 days the authors may request the proposal to be finalized. This is done by requesting final comments on the proposal. If there are no community objections within 14 days and the authors can show that they have initiated sufficient awareness and discussion of the proposal, a facilitator will set the status of the submission to FINAL . If after 1 year the authors have not requested the proposal to be finalized, a facilitator should inquire about the status of the proposal. If authors don't respond, a facilitator will set the status of the submission to WITHDRAWN . A proposal with status FINAL can not be changed or updated in a way that would lead to adjustments to implementations. Minor corrections are allowed. Any substantial change to finalized proposal must be submitted as a separate FEP. The new FEP MUST include a replaces metadata attribute pointing to FEPs it supersedes. If the new FEP becomes FINAL , the original one MUST point to it in an added replacedBy metadata attribute. A proposal with status WITHDRAWN remains in the repository and can be resubmitted. After a proposal becomes FINAL a facilitator will archive all discussions linked in the tracking issue and add the resulting archive links to the tracking issue.","title":"The Fediverse Enhancement Proposals Process"},{"location":"fep/fep-a4ed/#facilitators","text":"A list of facilitators is maintained in the FACILITATORS.md file at the root of the FEP repository.","title":"Facilitators"},{"location":"fep/fep-a4ed/#submission-methods","text":"A list of methods in which a proposal may be submitted is maintained in the SUBMISSION.md file at the root of the FEP repository.","title":"Submission Methods"},{"location":"fep/fep-a4ed/#fep-process-governance","text":"FEP-a4ed (The Fediverse Enhancement Proposal Process) is a living document and can be updated despite having the FINAL status. Anyone can propose a change to FEP-a4ed (or other documents related to the FEP process) using any method listed in SUBMISSION.md file. The change must be approved by at least two facilitators (one of them could be the submitter). For any part of the FEP process, there must be a sufficient number of facilitators who agreed to do the maintenance work. Changes should not be accepted before at least 1 month passes after the last update, to give facilitators and the community time to review them and provide feedback. Minor changes (i.e. a correction of a typo or of a broken link) can be accepted immediately after getting two approvals from facilitators.","title":"FEP Process Governance"},{"location":"fep/fep-a4ed/#history","text":"The process and format described in this proposal is influenced by other community driven documentation efforts such as the BitTorrent Enhancement Proposal Process , Scheme Request for Implementation and the IETF RFC Series .","title":"History"},{"location":"fep/fep-a4ed/#_1","text":"Dave Mason, Scheme Request For Implementation - Process David Harrison, The BitTorrent Enhancement Proposal Process , 2008 Housley, R., Ed., and L. Daigle, Ed., The RFC Series and RFC Editor , 2020 John MacFarlane, CommonMark Spec Version 0.29 , 2019 Mallory Knodel, Terminology, Power and Oppressive Language","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-a4ed/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-a5c5/","text":"FEP-a5c5: Web Syndication Methods Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This document proposes a standard for web syndication methods across the Fediverse by appending .rss or .atom to object URLs. This will allow users to easily subscribe to feeds of timelines, posts, and other objects. Additionally, this proposal addresses whether syndication methods should be applicable to mirrored profiles across the Fediverse, recommending optional but preferred implementation. Syndication Methods Creating Feeds To create a syndication feed, servers must append .rss or .atom to the URL of an object. For example: For a user timeline: https://example.org/@user.rss or https://example.org/@user.atom For a post: https://example.org/posts/12345.rss or https://example.org/posts/12345.atom Mirrored Profiles For mirrored profiles, such as https://example-mirror.org/@user@example.org , appending .rss or .atom should be supported, but it is optional. The recommendation is to implement this feature to maintain consistency and user convenience across different instances. Example URLs: For a mirrored user timeline: https://example-mirror.org/@user@example.org.rss or https://example-mirror.org/@user@example.org.atom Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Web Syndication Methods"},{"location":"fep/fep-a5c5/#fep-a5c5-web-syndication-methods","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-a5c5: Web Syndication Methods"},{"location":"fep/fep-a5c5/#summary","text":"This document proposes a standard for web syndication methods across the Fediverse by appending .rss or .atom to object URLs. This will allow users to easily subscribe to feeds of timelines, posts, and other objects. Additionally, this proposal addresses whether syndication methods should be applicable to mirrored profiles across the Fediverse, recommending optional but preferred implementation.","title":"Summary"},{"location":"fep/fep-a5c5/#syndication-methods","text":"","title":"Syndication Methods"},{"location":"fep/fep-a5c5/#creating-feeds","text":"To create a syndication feed, servers must append .rss or .atom to the URL of an object. For example: For a user timeline: https://example.org/@user.rss or https://example.org/@user.atom For a post: https://example.org/posts/12345.rss or https://example.org/posts/12345.atom","title":"Creating Feeds"},{"location":"fep/fep-a5c5/#mirrored-profiles","text":"For mirrored profiles, such as https://example-mirror.org/@user@example.org , appending .rss or .atom should be supported, but it is optional. The recommendation is to implement this feature to maintain consistency and user convenience across different instances. Example URLs: For a mirrored user timeline: https://example-mirror.org/@user@example.org.rss or https://example-mirror.org/@user@example.org.atom","title":"Mirrored Profiles"},{"location":"fep/fep-a5c5/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-a974/","text":"FEP-a974: All Actor types should be followable Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary In order to foster interoperability and good semantics, any valid unblocked Actor should be visible and followable on any platform when searched for. The type of the Actor should not matter for initial following, though can be used later as appropriate. Motivation In order to federate, an ActivityPub service will expose a set of Actors; these are ActivityPub objects that (a) can perform activities and (b) can be followed (see the ActivityPub Specification ). Each Actor has a type . The Activity Vocabulary defines five \"core\" types: Person , Group , Service , Organization , and Application . These five types work well for many applications, but not all, and ActivityPub explicitly allows Actors to have any type . In many services, it is desirable to use other object types for actors; either defined Object types or even custom types. For instance: on a reading-oriented platform, a user may want to follow a specific series of books to see when new items are added. The book series would be semantically represented as an OrderedCollection , rather than a Group . on a music platform, a user may want to follow a playlist; this would also be an OrderedCollection , or could even a custom Playlist type if the platform wanted to communicate specific semantics. However, some ActivityPub platforms may choose to only show actors of the five core types in search; if a platform wanted to use more semantically-meaningful types for its actors, those actors would be unavailable on such sites, which will inevitably lead to bug reports to the services using the non-core types. While filtering at the Activity/Object type is sensible and inevitable for any ActivityPub platform, filtering at the Actor type level limits the ability of new services to use semantically-correct types as appropriate, and will over time make the type effectively useless, as new services will choose one of the five core types even if inappropriate, in order for their actors to be visible. This issue has been discussed in the community before (see Mastodon issue #22322 ); this FEP attempts to move that discussion into a single simple statement of compatibility. Decision Compliant ActivityPub services should not filter on Actor type in searches or actor-level activities (Follow, Accept, Undo, Block, etc). Any unblocked Actor should be followable on any service. Impact Services are of course free to filter activities that are delivered later on; this FEP puts no limit on that. The feed for an Actor that posts only Document object activities may appear completely empty to a user of a microblogging platform; it remains the right and privilege of any ActivityPub service to only process the activities it wants to. However, by making all Actor types followable, new services can choose what activities to send where, safe in the knowledge that their actors will at least be visible and that the activities will be received. A practical example: Manyfold allows Fediverse users to follow individual 3D Models (which could have a Document or even 3DModel actor type), and when they change, it posts Update activities where those models are the object . However, Manyfold knows that microblog applications don't understand those activities (and nor should they). Therefore, for compatibility, it sends what it terms a \"compabitility note\", a human-readable Create Note activity with the same information as the Update 3DModel , thus allowing microblog users to follow models and get updates wherever convenient. A decision on what to send where could use the compatibility detection proposed in FEP-9fde in future. Potential negative impacts may happen if a service makes extra assumptions about an Actor based on its use of the core types (e.g. the background to Mastodon issue #22322 which talks about different semantics being used for Group actors), and discussion is invited on those impacts. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 James Smith, Manyfold ActivityPub Documentation , 2025 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-a974: All Actor types should be followable"},{"location":"fep/fep-a974/#fep-a974-all-actor-types-should-be-followable","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-a974: All Actor types should be followable"},{"location":"fep/fep-a974/#summary","text":"In order to foster interoperability and good semantics, any valid unblocked Actor should be visible and followable on any platform when searched for. The type of the Actor should not matter for initial following, though can be used later as appropriate.","title":"Summary"},{"location":"fep/fep-a974/#motivation","text":"In order to federate, an ActivityPub service will expose a set of Actors; these are ActivityPub objects that (a) can perform activities and (b) can be followed (see the ActivityPub Specification ). Each Actor has a type . The Activity Vocabulary defines five \"core\" types: Person , Group , Service , Organization , and Application . These five types work well for many applications, but not all, and ActivityPub explicitly allows Actors to have any type . In many services, it is desirable to use other object types for actors; either defined Object types or even custom types. For instance: on a reading-oriented platform, a user may want to follow a specific series of books to see when new items are added. The book series would be semantically represented as an OrderedCollection , rather than a Group . on a music platform, a user may want to follow a playlist; this would also be an OrderedCollection , or could even a custom Playlist type if the platform wanted to communicate specific semantics. However, some ActivityPub platforms may choose to only show actors of the five core types in search; if a platform wanted to use more semantically-meaningful types for its actors, those actors would be unavailable on such sites, which will inevitably lead to bug reports to the services using the non-core types. While filtering at the Activity/Object type is sensible and inevitable for any ActivityPub platform, filtering at the Actor type level limits the ability of new services to use semantically-correct types as appropriate, and will over time make the type effectively useless, as new services will choose one of the five core types even if inappropriate, in order for their actors to be visible. This issue has been discussed in the community before (see Mastodon issue #22322 ); this FEP attempts to move that discussion into a single simple statement of compatibility.","title":"Motivation"},{"location":"fep/fep-a974/#decision","text":"Compliant ActivityPub services should not filter on Actor type in searches or actor-level activities (Follow, Accept, Undo, Block, etc). Any unblocked Actor should be followable on any service.","title":"Decision"},{"location":"fep/fep-a974/#impact","text":"Services are of course free to filter activities that are delivered later on; this FEP puts no limit on that. The feed for an Actor that posts only Document object activities may appear completely empty to a user of a microblogging platform; it remains the right and privilege of any ActivityPub service to only process the activities it wants to. However, by making all Actor types followable, new services can choose what activities to send where, safe in the knowledge that their actors will at least be visible and that the activities will be received. A practical example: Manyfold allows Fediverse users to follow individual 3D Models (which could have a Document or even 3DModel actor type), and when they change, it posts Update activities where those models are the object . However, Manyfold knows that microblog applications don't understand those activities (and nor should they). Therefore, for compatibility, it sends what it terms a \"compabitility note\", a human-readable Create Note activity with the same information as the Update 3DModel , thus allowing microblog users to follow models and get updates wherever convenient. A decision on what to send where could use the compatibility detection proposed in FEP-9fde in future. Potential negative impacts may happen if a service makes extra assumptions about an Actor based on its use of the core types (e.g. the background to Mastodon issue #22322 which talks about different semantics being used for Group actors), and discussion is invited on those impacts.","title":"Impact"},{"location":"fep/fep-a974/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 James Smith, Manyfold ActivityPub Documentation , 2025","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-a974/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-ae0c/","text":"FEP-ae0c: Fediverse Relay Protocols: Mastodon and LitePub Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Relays are important components within the decentralized Fediverse architecture. They act as intermediary servers that facilitate communication between different instances, enabling users on Fediverse platforms to share public content without requiring actor following relationships. These relays benefit small instances by enabling them to effectively participate in the federated social network, both as consumers and producers of Fediverse content. Several styles of relays existing in the Activity Fediverse. This FEP describe two popular styles of relays: Mastodon-style relays LitePub-style relays NOTE: This is an informational FEP documenting the current status quo. It uses RFC-2119 requirements keywords only as a convenience. Also, these are not standardized protocols. They will generally not be conformant with the ActivityPub standard although they use some concepts from it. Terminology For the purposes of this document, the following terminology will be used: Term Description relay client actor An actor in a server that is a Relay Server subscriber. May also be referred to as a client actor . relay client server A server hosting one or more Relay Client Actors. May also be referred to as a client server . relay subscription A relationship established between a Relay Client Actor and a Relay Server using an ActivityPub Follow activity. relay server actor An actor in a server that provides relaying of messages between Relay Client Actors. May also be referred to as a relay actor . relay server A server hosting one or more Relay Server Actors. May also be referred to as a relay server or a relay . HTTP Signature HTTP-based signature (Cavage) used to verify message sender and contents. LD Signature JSON-LD signature used to verify messages regardless of transport. Mastodon Relay Protocol The Mastodon relay protocol relies on LD Signatures to verify relayed messages. This allows Mastodon to verify the relayed message although it is being sent by a different actor (the relay server actor). Relay Client Actor A Relay Client Actor establishes following relationship with a relay server actor and then processes relayed messages sent to the actor's ActivityPub inbox. The relay client server will add the relay inboxes to the delivery target for content with public visibility. Relay Subscription Mastodon will POST an ActivityPub Follow request to the relay ActivityPub inbox URI. The object of the Follow request MUST be the fully expanded URI of the Public pseudo-collection ( https://www.w3.org/ns/activitystreams#Public ). The relay then responds to the Follow request with an Accept or Reject activity. The response time for the acknowledgement can be arbitrarily long since the subscription MAY require manual approval. The request MUST be signed using the same HTTP Signature (Cavage) algorithms that Mastodon uses for ActivityPub federation. The relay will fetch the relay client actor document to obtain the actor's public key. For best interoperability, the actor ActivityPub document SHOULD be Mastodon-compatible. For example, preferredUsername SHOULD be provided in addition to all actor fields required by ActivityPub and the actor SHOULD provide a sharedInbox endpoint URL. The relay client actor type SHOULD accurately reflect the actor type. However, note that some relay server implementations constrain the ActivityPub type of a client actor. For example, the relay server implementation might require the client actor to be an Application type and reject other types. Example Follow Request { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://client.example/6ae15297\", \"type\": \"Follow\", \"actor\": \"https://client.example/actor\", \"object\": \"https://www.w3.org/ns/activitystreams#Public\" } Example Follow Accept Response The Accept activity MAY respond with the accepted Follow activity URI as the object or it may embed a copy of the original Follow activity. A Reject activity will have a similar structure. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://relay.example/15c0b99f-23d4-4488-ba9d-d0c7bc2876a5\", \"type\": \"Accept\", \"actor\": \"https://relay.example/actor\", \"object\": { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://client.example/6ae15297\", \"type\": \"Follow\", \"actor\": \"https://client.example/actor\", \"object\": \"https://www.w3.org/ns/activitystreams#Public\" } } Relay Unsubscription To unsubscribe from a relay send an Undo with the original Follow activity (embedded, or the URI) as the object . There is typically no response to the Undo . Example Undo/Follow Request { \"@context\": \"https: //www.w3.org/ns/activitystreams\", \"id\": \"https://client.example/3f5ebd6d\", \"type\": \"Undo\", \"actor\": \"https://client.example/actor\", \"published\": \"2024-10-14T14:42:17.650139+00:00\", \"object\": \"https://client.example/6ae15297\" } Publishing Messages to a Relay To publish an activity to a Mastodon-style relay, the publisher MUST sign the message using the Mastodon-specific LD Signature algorithm. The benefit of using LD Signatures is that the receiving servers can verify the message content without refetching from the client server. This lowers the server load on the client server. The disadvantage is that the LD Signatures are not easy to implement and Mastodon uses an outdated nonstandard form of the algorithm. The Mastodon documentation recommends not supporting LD Signatures for these reasons. Furthermore, the Mastodon documentation does not accurately describe the LD Signature algorithm it implements. For more details, see the additional information about Mastodon LD Signatures in this document. The posted activity MUST be signed with a Mastodon-compatible HTTP Signature . Mastodon will relay the following activity types: Create , Update , Delete , Move . A relay actor MAY only forward those types although Mastodon will accept other relayed activities, such as Announce , without an LD Signature. In the Announce case, it will fetch the announced object . Receiving Messages from Relays Relayed messages are posted to the relay client actor's inbox . Relayed messages MUST have an HTTP Signature signed by the Relay Actor. Messages received from Relay Server Actors MAY have an LD Signature. If the HTTP Signature and the LD Signature are both present, the activity actor becomes the effective sender after LD Signature verification. If no LD Signature is present and the received message is an Announce activity, then a relay client MUST ensure the content is legitimate (not spoofed). This may be done by fetching the announced activity from the originating server or using remote content from a local cache. However, if the announced activity is already locally cached, then there would typically be no processing to be done with it since it is already known to the client server. A client server receiving a relayed message MAY also deliver the messages to local recipients based on the ActivityPub audience targeting properties. Relay Server Actor The following behaviors describe the typical implementation of a Mastodon-style relay server actor. Follow Ensure that https://www.w3.org/ns/activitystreams#Public is in the object property. Use the actor as the relay client actor URI and save the information about the subscriber. The relay server MAY decide to deny access based on factors like the signer's domain. Undo/Follow Verify that the actor is a known relay client and, if so, remove the client actor from the set of relay actor followers. Activity Relaying When a message is received from a client actor, the relay MUST verify the HTTP Signature of the activity and identify the originating actor. If the message is valid, it is then posted (with the relay actor's HTTP Signature) to the inboxes of the relay's followers. No delivery is performed based on the ActivityPub audience targeting properties. The relay MUST not send the relayed message to the originating relay client actor. Typically a message is forwarded unchanged. However, a relay MAY do other processing on the message, such as wrapping a message without an LD Signature using an ActivityPub Announce activity before forwarding it (See pub-relay ). Extended behaviors like this are not described in this FEP. A relay actor SHOULD only relay messages from followers. A relay actor SHOULD only relay activities that it hasn't already relayed. Addressing properties, like to , MUST be in a list even for a single URI. Mastodon LD Signatures Note that the Mastodon documentation for their LD Signatures is incomplete and inaccurate. This section provides more details, but it may be necessary to review the Mastodon source code for additional clarification. An activity signed with a Mastodon LD Signature will have a signature document in the activity (using the signature property). Example Signature Document { \"@context\": [ \"https: //www.w3.org/ns/activitystreams\", \"https://w3id.org/security/v1\" ], \"id\": \"https://client.example/3f5ebd6d\", # ... \"signature\": { \"type\": \"RsaSignature2017\", \"creator\": \"https://client.example/actor#main-key\", \"created\": \"2024-12-08T03:48:33.901Z\", \"signatureValue\": \"s69F3mfddd99dGjmvjdjjs81e12jn121Gkm1\" } } The https://w3id.org/security/v1 JSON-LD context defines the signature and related properties, but is not used by Mastodon for LD Signature processing. When performing signature operations the signature document and the activity (without the signature document) are initially processed (hashed) separately. The SHA256 hash digests are concatenated that string is then signed. Signing a JSON-LD Activity Create a signature document with only the creator and created properties. Set the @context to https://w3id.org/identity/v1 . (Note that this context doesn't appear to be accessible on the web any more. You may need a local copy with a custom JSON-LD context loader.) Create a canonical RDF representation of the signature document. This requires JSON-LD expansion using standard algorithms ( JSON-LD-ALGO ) and conversion to RDF using the Universal RDF Dataset Canonicalization Algorithm 2015 ( RDF-CANON ). The serialized RDF is then hashed using SHA256 and a hexdigest is created. Create a SHA256 hex digest for the activity document (without the signature document) using a similar procedure. Concatenate the SHA256 hex digests for the signature and activity documents and sign the result using SHA256 and the client actor's private key. Encode the signature using Base64 and set the signatureValue of the signature document to the result. Set the signature document type to \"RsaSignature2017\". Set the signature property of the activity to the signature document. Verifying a JSON-LD Signature The signature document is retrieved from the activity and the type is checked to be the nonstandard \"RsaSignature2017\". If not, verification fails. Save the signatureValue from the signature document. Remove the type and id and signatureValue properties from the signature document and generate a SHA256 hex digest for the modified signature document using the procedure described for signing documents. Remove the signature from the activity and generate a SHA256 hex digest for it. Concatenate the hex digests for the modified signature and activity documents. Use the client's public key to verify the signature using SHA256. LitePub Relay Protocol The LitePub protocol is based on ActivityPub and is used in Pleroma-compatible servers. The reference implementation is the Pleroma Relay . Relay Client A LitePub relay client actor must have a type of Application and an actor ID ending with /relay . For best interoperability, it should be compatible with Mastodon actor documents and have WebFinger support. Other implementations may use different actor ID structures (e.g., AodeRelay apparently uses /actor and works with Pleroma). General relay interoperability of these LitePub variants is not known. Relay Subscription The client relay actor will send a Follow to the relay server. The Follow object is the relay server actor URI. The relay server MUST respond to the Follow request with an Accept or Reject . If accepted, the relay server sends a reciprocal Follow request for the LitePub client actor. The client server SHOULD respond with Accept or Reject activity. A relay server MAY decide to ignore the subscription if no acknowledgement is received within a reasonable time interval. Example Relay Follow Request { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://pleroma.example/schemas/litepub-0.1.jsonld\", { \"@language\": \"und\" } ], \"actor\": \"https://pleroma.example/relay\", \"bcc\": [], \"bto\": [], \"cc\": [], \"id\": \"https://pleroma.example/activities/3fe13910-73f4-4cdc-9c84-ec7013a3e764\", \"object\": \"https://relay.example/actor\", \"state\": \"pending\", \"to\": [ \"https://relay.example/actor\" ], \"type\": \"Follow\" } Notes: 1. The JSON-LD context is not valid for JSON-LD processing. The litepub-0.1.jsonld document contains an invalid WebFinger-related context URL. 2. The state property is not defined in the JSON-LD context. Relay Unsubscription To unsubscribe from a relay send an Undo with the original Follow activity as the object . There is typically no response to the Undo . Example Undo/Follow Request { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://pleroma.example/schemas/litepub-0.1.jsonld\", { \"@language\": \"und\" } ], \"id\": \"https://pleroma.example/activities/cf9c85e9-f83f-4a02-b598-880f15423f68\", \"object\": { \"actor\": \"https://pleroma.example/relay\", \"bcc\": [], \"bto\": [], \"cc\": [], \"context\": \"https://pleroma.example/contexts/d493d02b-7cc9-49dc-995c-d949af0b5417\", \"id\": \"https://pleroma.example/activities/3fe13910-73f4-4cdc-9c84-ec7013a3e764\", \"object\": \"https://relay.example/actor\", \"published\": \"2024-10-18T14:04:11.029802Z\", \"state\": \"cancelled\", \"to\": [ \"https://relay.example/actor\" ], \"type\": \"Follow\" }, \"published\": \"2024-10-18T14:04:11.029791Z\", \"to\": [ \"https://relay.example/actor\" ], \"cc\": [], \"type\": \"Undo\", \"actor\": \"https://pleroma.example/relay\", \"context\": \"https://pleroma.example/contexts/d493d02b-7cc9-49dc-995c-d949af0b5417\" } Publishing Messages to a Relay A LitePub relay client actor will send an Announce for a relayed object (like a Note ). For best interoperability Announce should refer to the announced object using an URI (instead of embedding the object). The Announce activity MUST be address to the relay server actor's followers collection. (TODO it's not known if the admin addressing is also required). The published property should be included since some relay server will reject activities without it. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://pleroma.example/schemas/litepub-0.1.jsonld\", { \"@language\": \"und\" } ], \"actor\": \"https://pleroma.example/relay\", \"to\": [ \"https://pleroma.example/relay/followers\", \"https://pleroma.example/users/admin\" ], \"bto\": [], \"cc\": [], \"context\": \"https://pleroma.example/contexts/a59117d9-7f7c-48ec-83b4-5e183e7179b5\", \"id\": \"https://pleroma.example/activities/e24e46a2-8926-4a20-9f5f-638e06102159\", \"object\": \"https://pleroma.example/objects/c13bba3c-e7c1-45ac-939f-aa292d23ee8c\", \"published\": \"2024-10-18T14:06:37.736295Z\", \"type\": \"Announce\" } Receiving Messages from a Relay Messages received from a relay are typically wrapped in an Announce activity. AFter the object of the announce is fetched and validated, it is displayed on the federated timeline. It appears that Pleroma will accept a relayed Create activity (for Mastodon compatibility), but will refetch the Create object since the LD Signature isn't processed. (TODO verify this behavior.) Other Relay Server Considerations The relay server hosting relay actors will have other functionality other than activity relaying. WebFinger A relay server MUST implement WebFinger support for relay actors. This is necessary because of Mastodon's actor fetching implementation. It's possible that it's not required for LitePub-only relay servers. NodeInfo A relay server MAY implement NodeInfo to advertise server activity and metadata. Optional Relay Server Behaviors A relay server MAY support multiple relay protocols. However, there is no standard way to advertise those capabilities. A relay server often hosts a single actor, but any number of relay actors may be hosted. For example, a relay server may have a relay actor for specific topics, hashtags, or moderation categories. A relay client can subscribe to any number of relay actors in a given server. Some servers implement dynamic relay actor creation. A relay actor's inbox URI might be based on a hashtag or a topic name. When a client actor subscribes to this kind of inbox URI, the relay actor is created automatically. Obviously, there are risks to this approach when used by misbehaved clients. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 Mastodon Documentation, LD Signatures , HTTP Signatures S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, RFC-2119 , 1997 Matthew Sporny, Dave Longley, JSON-LD 1.1, JSON-LD , 2020 Dave Longley, Gregg Kellogg, JSON-LD 1.1 Processing Algorithms and API, JSON-LD-ALGO , 2018 Graham Klyne, Jeremy J. Carroll, RDF 1.1 Concepts and Abstract Syntax, RDF , 2014 Dave Longley, RDF Dataset Canonicalization, (URDNA2015) RDF-CANON , 2022 NIST, Secure Hash Standard (SHS), SHA256 , 2015 Wikipedia, Base64 P. Jones, WebFinger, RFC-7033 WebFinger , 2013 Jonne Ha\u00df, NodeInfo , GitHub Pleroma Relay, pleroma-relay LitePub Protocol Suite, litepub Takeshi Umeda, pub-relay pub-relay \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-ae0c: Fediverse Relay Protocols: Mastodon and LitePub"},{"location":"fep/fep-ae0c/#fep-ae0c-fediverse-relay-protocols-mastodon-and-litepub","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-ae0c: Fediverse Relay Protocols: Mastodon and LitePub"},{"location":"fep/fep-ae0c/#summary","text":"Relays are important components within the decentralized Fediverse architecture. They act as intermediary servers that facilitate communication between different instances, enabling users on Fediverse platforms to share public content without requiring actor following relationships. These relays benefit small instances by enabling them to effectively participate in the federated social network, both as consumers and producers of Fediverse content. Several styles of relays existing in the Activity Fediverse. This FEP describe two popular styles of relays: Mastodon-style relays LitePub-style relays NOTE: This is an informational FEP documenting the current status quo. It uses RFC-2119 requirements keywords only as a convenience. Also, these are not standardized protocols. They will generally not be conformant with the ActivityPub standard although they use some concepts from it.","title":"Summary"},{"location":"fep/fep-ae0c/#terminology","text":"For the purposes of this document, the following terminology will be used: Term Description relay client actor An actor in a server that is a Relay Server subscriber. May also be referred to as a client actor . relay client server A server hosting one or more Relay Client Actors. May also be referred to as a client server . relay subscription A relationship established between a Relay Client Actor and a Relay Server using an ActivityPub Follow activity. relay server actor An actor in a server that provides relaying of messages between Relay Client Actors. May also be referred to as a relay actor . relay server A server hosting one or more Relay Server Actors. May also be referred to as a relay server or a relay . HTTP Signature HTTP-based signature (Cavage) used to verify message sender and contents. LD Signature JSON-LD signature used to verify messages regardless of transport.","title":"Terminology"},{"location":"fep/fep-ae0c/#mastodon-relay-protocol","text":"The Mastodon relay protocol relies on LD Signatures to verify relayed messages. This allows Mastodon to verify the relayed message although it is being sent by a different actor (the relay server actor).","title":"Mastodon Relay Protocol"},{"location":"fep/fep-ae0c/#relay-client-actor","text":"A Relay Client Actor establishes following relationship with a relay server actor and then processes relayed messages sent to the actor's ActivityPub inbox. The relay client server will add the relay inboxes to the delivery target for content with public visibility.","title":"Relay Client Actor"},{"location":"fep/fep-ae0c/#relay-subscription","text":"Mastodon will POST an ActivityPub Follow request to the relay ActivityPub inbox URI. The object of the Follow request MUST be the fully expanded URI of the Public pseudo-collection ( https://www.w3.org/ns/activitystreams#Public ). The relay then responds to the Follow request with an Accept or Reject activity. The response time for the acknowledgement can be arbitrarily long since the subscription MAY require manual approval. The request MUST be signed using the same HTTP Signature (Cavage) algorithms that Mastodon uses for ActivityPub federation. The relay will fetch the relay client actor document to obtain the actor's public key. For best interoperability, the actor ActivityPub document SHOULD be Mastodon-compatible. For example, preferredUsername SHOULD be provided in addition to all actor fields required by ActivityPub and the actor SHOULD provide a sharedInbox endpoint URL. The relay client actor type SHOULD accurately reflect the actor type. However, note that some relay server implementations constrain the ActivityPub type of a client actor. For example, the relay server implementation might require the client actor to be an Application type and reject other types. Example Follow Request { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://client.example/6ae15297\", \"type\": \"Follow\", \"actor\": \"https://client.example/actor\", \"object\": \"https://www.w3.org/ns/activitystreams#Public\" } Example Follow Accept Response The Accept activity MAY respond with the accepted Follow activity URI as the object or it may embed a copy of the original Follow activity. A Reject activity will have a similar structure. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://relay.example/15c0b99f-23d4-4488-ba9d-d0c7bc2876a5\", \"type\": \"Accept\", \"actor\": \"https://relay.example/actor\", \"object\": { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://client.example/6ae15297\", \"type\": \"Follow\", \"actor\": \"https://client.example/actor\", \"object\": \"https://www.w3.org/ns/activitystreams#Public\" } }","title":"Relay Subscription"},{"location":"fep/fep-ae0c/#relay-unsubscription","text":"To unsubscribe from a relay send an Undo with the original Follow activity (embedded, or the URI) as the object . There is typically no response to the Undo . Example Undo/Follow Request { \"@context\": \"https: //www.w3.org/ns/activitystreams\", \"id\": \"https://client.example/3f5ebd6d\", \"type\": \"Undo\", \"actor\": \"https://client.example/actor\", \"published\": \"2024-10-14T14:42:17.650139+00:00\", \"object\": \"https://client.example/6ae15297\" }","title":"Relay Unsubscription"},{"location":"fep/fep-ae0c/#publishing-messages-to-a-relay","text":"To publish an activity to a Mastodon-style relay, the publisher MUST sign the message using the Mastodon-specific LD Signature algorithm. The benefit of using LD Signatures is that the receiving servers can verify the message content without refetching from the client server. This lowers the server load on the client server. The disadvantage is that the LD Signatures are not easy to implement and Mastodon uses an outdated nonstandard form of the algorithm. The Mastodon documentation recommends not supporting LD Signatures for these reasons. Furthermore, the Mastodon documentation does not accurately describe the LD Signature algorithm it implements. For more details, see the additional information about Mastodon LD Signatures in this document. The posted activity MUST be signed with a Mastodon-compatible HTTP Signature . Mastodon will relay the following activity types: Create , Update , Delete , Move . A relay actor MAY only forward those types although Mastodon will accept other relayed activities, such as Announce , without an LD Signature. In the Announce case, it will fetch the announced object .","title":"Publishing Messages to a Relay"},{"location":"fep/fep-ae0c/#receiving-messages-from-relays","text":"Relayed messages are posted to the relay client actor's inbox . Relayed messages MUST have an HTTP Signature signed by the Relay Actor. Messages received from Relay Server Actors MAY have an LD Signature. If the HTTP Signature and the LD Signature are both present, the activity actor becomes the effective sender after LD Signature verification. If no LD Signature is present and the received message is an Announce activity, then a relay client MUST ensure the content is legitimate (not spoofed). This may be done by fetching the announced activity from the originating server or using remote content from a local cache. However, if the announced activity is already locally cached, then there would typically be no processing to be done with it since it is already known to the client server. A client server receiving a relayed message MAY also deliver the messages to local recipients based on the ActivityPub audience targeting properties.","title":"Receiving Messages from Relays"},{"location":"fep/fep-ae0c/#relay-server-actor","text":"The following behaviors describe the typical implementation of a Mastodon-style relay server actor.","title":"Relay Server Actor"},{"location":"fep/fep-ae0c/#follow","text":"Ensure that https://www.w3.org/ns/activitystreams#Public is in the object property. Use the actor as the relay client actor URI and save the information about the subscriber. The relay server MAY decide to deny access based on factors like the signer's domain.","title":"Follow"},{"location":"fep/fep-ae0c/#undofollow","text":"Verify that the actor is a known relay client and, if so, remove the client actor from the set of relay actor followers.","title":"Undo/Follow"},{"location":"fep/fep-ae0c/#activity-relaying","text":"When a message is received from a client actor, the relay MUST verify the HTTP Signature of the activity and identify the originating actor. If the message is valid, it is then posted (with the relay actor's HTTP Signature) to the inboxes of the relay's followers. No delivery is performed based on the ActivityPub audience targeting properties. The relay MUST not send the relayed message to the originating relay client actor. Typically a message is forwarded unchanged. However, a relay MAY do other processing on the message, such as wrapping a message without an LD Signature using an ActivityPub Announce activity before forwarding it (See pub-relay ). Extended behaviors like this are not described in this FEP. A relay actor SHOULD only relay messages from followers. A relay actor SHOULD only relay activities that it hasn't already relayed. Addressing properties, like to , MUST be in a list even for a single URI.","title":"Activity Relaying"},{"location":"fep/fep-ae0c/#mastodon-ld-signatures","text":"Note that the Mastodon documentation for their LD Signatures is incomplete and inaccurate. This section provides more details, but it may be necessary to review the Mastodon source code for additional clarification. An activity signed with a Mastodon LD Signature will have a signature document in the activity (using the signature property). Example Signature Document { \"@context\": [ \"https: //www.w3.org/ns/activitystreams\", \"https://w3id.org/security/v1\" ], \"id\": \"https://client.example/3f5ebd6d\", # ... \"signature\": { \"type\": \"RsaSignature2017\", \"creator\": \"https://client.example/actor#main-key\", \"created\": \"2024-12-08T03:48:33.901Z\", \"signatureValue\": \"s69F3mfddd99dGjmvjdjjs81e12jn121Gkm1\" } } The https://w3id.org/security/v1 JSON-LD context defines the signature and related properties, but is not used by Mastodon for LD Signature processing. When performing signature operations the signature document and the activity (without the signature document) are initially processed (hashed) separately. The SHA256 hash digests are concatenated that string is then signed.","title":"Mastodon LD Signatures"},{"location":"fep/fep-ae0c/#signing-a-json-ld-activity","text":"Create a signature document with only the creator and created properties. Set the @context to https://w3id.org/identity/v1 . (Note that this context doesn't appear to be accessible on the web any more. You may need a local copy with a custom JSON-LD context loader.) Create a canonical RDF representation of the signature document. This requires JSON-LD expansion using standard algorithms ( JSON-LD-ALGO ) and conversion to RDF using the Universal RDF Dataset Canonicalization Algorithm 2015 ( RDF-CANON ). The serialized RDF is then hashed using SHA256 and a hexdigest is created. Create a SHA256 hex digest for the activity document (without the signature document) using a similar procedure. Concatenate the SHA256 hex digests for the signature and activity documents and sign the result using SHA256 and the client actor's private key. Encode the signature using Base64 and set the signatureValue of the signature document to the result. Set the signature document type to \"RsaSignature2017\". Set the signature property of the activity to the signature document.","title":"Signing a JSON-LD Activity"},{"location":"fep/fep-ae0c/#verifying-a-json-ld-signature","text":"The signature document is retrieved from the activity and the type is checked to be the nonstandard \"RsaSignature2017\". If not, verification fails. Save the signatureValue from the signature document. Remove the type and id and signatureValue properties from the signature document and generate a SHA256 hex digest for the modified signature document using the procedure described for signing documents. Remove the signature from the activity and generate a SHA256 hex digest for it. Concatenate the hex digests for the modified signature and activity documents. Use the client's public key to verify the signature using SHA256.","title":"Verifying a JSON-LD Signature"},{"location":"fep/fep-ae0c/#litepub-relay-protocol","text":"The LitePub protocol is based on ActivityPub and is used in Pleroma-compatible servers. The reference implementation is the Pleroma Relay .","title":"LitePub Relay Protocol"},{"location":"fep/fep-ae0c/#relay-client","text":"A LitePub relay client actor must have a type of Application and an actor ID ending with /relay . For best interoperability, it should be compatible with Mastodon actor documents and have WebFinger support. Other implementations may use different actor ID structures (e.g., AodeRelay apparently uses /actor and works with Pleroma). General relay interoperability of these LitePub variants is not known.","title":"Relay Client"},{"location":"fep/fep-ae0c/#relay-subscription_1","text":"The client relay actor will send a Follow to the relay server. The Follow object is the relay server actor URI. The relay server MUST respond to the Follow request with an Accept or Reject . If accepted, the relay server sends a reciprocal Follow request for the LitePub client actor. The client server SHOULD respond with Accept or Reject activity. A relay server MAY decide to ignore the subscription if no acknowledgement is received within a reasonable time interval. Example Relay Follow Request { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://pleroma.example/schemas/litepub-0.1.jsonld\", { \"@language\": \"und\" } ], \"actor\": \"https://pleroma.example/relay\", \"bcc\": [], \"bto\": [], \"cc\": [], \"id\": \"https://pleroma.example/activities/3fe13910-73f4-4cdc-9c84-ec7013a3e764\", \"object\": \"https://relay.example/actor\", \"state\": \"pending\", \"to\": [ \"https://relay.example/actor\" ], \"type\": \"Follow\" } Notes: 1. The JSON-LD context is not valid for JSON-LD processing. The litepub-0.1.jsonld document contains an invalid WebFinger-related context URL. 2. The state property is not defined in the JSON-LD context.","title":"Relay Subscription"},{"location":"fep/fep-ae0c/#relay-unsubscription_1","text":"To unsubscribe from a relay send an Undo with the original Follow activity as the object . There is typically no response to the Undo . Example Undo/Follow Request { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://pleroma.example/schemas/litepub-0.1.jsonld\", { \"@language\": \"und\" } ], \"id\": \"https://pleroma.example/activities/cf9c85e9-f83f-4a02-b598-880f15423f68\", \"object\": { \"actor\": \"https://pleroma.example/relay\", \"bcc\": [], \"bto\": [], \"cc\": [], \"context\": \"https://pleroma.example/contexts/d493d02b-7cc9-49dc-995c-d949af0b5417\", \"id\": \"https://pleroma.example/activities/3fe13910-73f4-4cdc-9c84-ec7013a3e764\", \"object\": \"https://relay.example/actor\", \"published\": \"2024-10-18T14:04:11.029802Z\", \"state\": \"cancelled\", \"to\": [ \"https://relay.example/actor\" ], \"type\": \"Follow\" }, \"published\": \"2024-10-18T14:04:11.029791Z\", \"to\": [ \"https://relay.example/actor\" ], \"cc\": [], \"type\": \"Undo\", \"actor\": \"https://pleroma.example/relay\", \"context\": \"https://pleroma.example/contexts/d493d02b-7cc9-49dc-995c-d949af0b5417\" }","title":"Relay Unsubscription"},{"location":"fep/fep-ae0c/#publishing-messages-to-a-relay_1","text":"A LitePub relay client actor will send an Announce for a relayed object (like a Note ). For best interoperability Announce should refer to the announced object using an URI (instead of embedding the object). The Announce activity MUST be address to the relay server actor's followers collection. (TODO it's not known if the admin addressing is also required). The published property should be included since some relay server will reject activities without it. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://pleroma.example/schemas/litepub-0.1.jsonld\", { \"@language\": \"und\" } ], \"actor\": \"https://pleroma.example/relay\", \"to\": [ \"https://pleroma.example/relay/followers\", \"https://pleroma.example/users/admin\" ], \"bto\": [], \"cc\": [], \"context\": \"https://pleroma.example/contexts/a59117d9-7f7c-48ec-83b4-5e183e7179b5\", \"id\": \"https://pleroma.example/activities/e24e46a2-8926-4a20-9f5f-638e06102159\", \"object\": \"https://pleroma.example/objects/c13bba3c-e7c1-45ac-939f-aa292d23ee8c\", \"published\": \"2024-10-18T14:06:37.736295Z\", \"type\": \"Announce\" }","title":"Publishing Messages to a Relay"},{"location":"fep/fep-ae0c/#receiving-messages-from-a-relay","text":"Messages received from a relay are typically wrapped in an Announce activity. AFter the object of the announce is fetched and validated, it is displayed on the federated timeline. It appears that Pleroma will accept a relayed Create activity (for Mastodon compatibility), but will refetch the Create object since the LD Signature isn't processed. (TODO verify this behavior.)","title":"Receiving Messages from a Relay"},{"location":"fep/fep-ae0c/#other-relay-server-considerations","text":"The relay server hosting relay actors will have other functionality other than activity relaying.","title":"Other Relay Server Considerations"},{"location":"fep/fep-ae0c/#webfinger","text":"A relay server MUST implement WebFinger support for relay actors. This is necessary because of Mastodon's actor fetching implementation. It's possible that it's not required for LitePub-only relay servers.","title":"WebFinger"},{"location":"fep/fep-ae0c/#nodeinfo","text":"A relay server MAY implement NodeInfo to advertise server activity and metadata.","title":"NodeInfo"},{"location":"fep/fep-ae0c/#optional-relay-server-behaviors","text":"A relay server MAY support multiple relay protocols. However, there is no standard way to advertise those capabilities. A relay server often hosts a single actor, but any number of relay actors may be hosted. For example, a relay server may have a relay actor for specific topics, hashtags, or moderation categories. A relay client can subscribe to any number of relay actors in a given server. Some servers implement dynamic relay actor creation. A relay actor's inbox URI might be based on a hashtag or a topic name. When a client actor subscribes to this kind of inbox URI, the relay actor is created automatically. Obviously, there are risks to this approach when used by misbehaved clients.","title":"Optional Relay Server Behaviors"},{"location":"fep/fep-ae0c/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 Mastodon Documentation, LD Signatures , HTTP Signatures S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, RFC-2119 , 1997 Matthew Sporny, Dave Longley, JSON-LD 1.1, JSON-LD , 2020 Dave Longley, Gregg Kellogg, JSON-LD 1.1 Processing Algorithms and API, JSON-LD-ALGO , 2018 Graham Klyne, Jeremy J. Carroll, RDF 1.1 Concepts and Abstract Syntax, RDF , 2014 Dave Longley, RDF Dataset Canonicalization, (URDNA2015) RDF-CANON , 2022 NIST, Secure Hash Standard (SHS), SHA256 , 2015 Wikipedia, Base64 P. Jones, WebFinger, RFC-7033 WebFinger , 2013 Jonne Ha\u00df, NodeInfo , GitHub Pleroma Relay, pleroma-relay LitePub Protocol Suite, litepub Takeshi Umeda, pub-relay pub-relay","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-ae0c/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-ae97/","text":"FEP-ae97: Client-side activity signing Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Existing Fediverse servers manage signing keys on behalf of their users. This proposal describes a new kind of ActivityPub client that lets users sign activities with their own keys, and a server that can distribute client-signed activities to other servers. History Initial version of this proposal relied on linking of cryptographic identities to actor objects via FEP-c390 identity proofs. That mechanism was superseded by FEP-ef61 which achieves full data portability. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Registering an actor Client creates portable actor objects according to FEP-ef61 and stores them. Before registering a portable actor on the server, the client MUST generate an RSA key and attach it to actor object via publicKey property, and also add it to the assertionMethod array as described in FEP-521a . Then it MUST add the server URL to the gateways array of the actor object. To register the actor, the client MUST send an HTTP POST request to the gateway endpoint at /.well-known/apgateway path. The body of the request MUST be an actor object. The request MUST have an X-Rsa-Secret-Key header containing the previously generated RSA secret key in secretKeyMultibase format described in section 2.3.1.2 Multikey of Data Integrity specification. If the server accepts registration request, its response MUST have 201 Created status code. Sending activities Client submits signed FEP-ef61 activities to actor's outbox. Contrary to what ActivityPub specification prescribes in section 6. Client to Server Interactions , the server MUST NOT overwrite the ID of activity. Instead of assigning a new ID, the server MUST verify that provided ID has not been used before. If activity ID is in compatible format (HTTP(S) URI), the server MUST check that its origin is the same as the server's origin. If the server accepts activity, its response MUST have 202 Accepted status code. If activity contains a wrapped object (as in Create and Update activities), it MUST be a portable object created according to FEP-ef61 . The server MUST validate object IDs in the same way it validates activity IDs. The server MUST deliver activities to their indended audiences without altering them. Receiving activities Client receives activities by polling the actor's inbox. Requests to inbox endpoint MUST have an HTTP signature created using the RSA secret key generated during registration. \u5b9f\u88c5 fep-ae97-client (client) Mitra (server) \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 silverpill, FEP-c390: Identity Proofs , 2022 silverpill, FEP-ef61: Portable Objects , 2023 silverpill, FEP-521a: Representing actor's public keys , 2023 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2023 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-ae97: Client-side activity signing"},{"location":"fep/fep-ae97/#fep-ae97-client-side-activity-signing","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-ae97: Client-side activity signing"},{"location":"fep/fep-ae97/#summary","text":"Existing Fediverse servers manage signing keys on behalf of their users. This proposal describes a new kind of ActivityPub client that lets users sign activities with their own keys, and a server that can distribute client-signed activities to other servers.","title":"Summary"},{"location":"fep/fep-ae97/#history","text":"Initial version of this proposal relied on linking of cryptographic identities to actor objects via FEP-c390 identity proofs. That mechanism was superseded by FEP-ef61 which achieves full data portability.","title":"History"},{"location":"fep/fep-ae97/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-ae97/#registering-an-actor","text":"Client creates portable actor objects according to FEP-ef61 and stores them. Before registering a portable actor on the server, the client MUST generate an RSA key and attach it to actor object via publicKey property, and also add it to the assertionMethod array as described in FEP-521a . Then it MUST add the server URL to the gateways array of the actor object. To register the actor, the client MUST send an HTTP POST request to the gateway endpoint at /.well-known/apgateway path. The body of the request MUST be an actor object. The request MUST have an X-Rsa-Secret-Key header containing the previously generated RSA secret key in secretKeyMultibase format described in section 2.3.1.2 Multikey of Data Integrity specification. If the server accepts registration request, its response MUST have 201 Created status code.","title":"Registering an actor"},{"location":"fep/fep-ae97/#sending-activities","text":"Client submits signed FEP-ef61 activities to actor's outbox. Contrary to what ActivityPub specification prescribes in section 6. Client to Server Interactions , the server MUST NOT overwrite the ID of activity. Instead of assigning a new ID, the server MUST verify that provided ID has not been used before. If activity ID is in compatible format (HTTP(S) URI), the server MUST check that its origin is the same as the server's origin. If the server accepts activity, its response MUST have 202 Accepted status code. If activity contains a wrapped object (as in Create and Update activities), it MUST be a portable object created according to FEP-ef61 . The server MUST validate object IDs in the same way it validates activity IDs. The server MUST deliver activities to their indended audiences without altering them.","title":"Sending activities"},{"location":"fep/fep-ae97/#receiving-activities","text":"Client receives activities by polling the actor's inbox. Requests to inbox endpoint MUST have an HTTP signature created using the RSA secret key generated during registration.","title":"Receiving activities"},{"location":"fep/fep-ae97/#_1","text":"fep-ae97-client (client) Mitra (server)","title":"\u5b9f\u88c5"},{"location":"fep/fep-ae97/#_2","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 silverpill, FEP-c390: Identity Proofs , 2022 silverpill, FEP-ef61: Portable Objects , 2023 silverpill, FEP-521a: Representing actor's public keys , 2023 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-ae97/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-b2b8/","text":"FEP-b2b8: Long-form Text Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Multi-paragraph text is an important content type on the Social Web. This FEP defines best practices for representing and using properties of a long-form text object in Activity Streams 2.0 . Motivation Blog posts, magazine articles, and forum posts are often made up of multiple paragraphs of text, sometimes with embedded images, video, audio or other media. This important content type is documented in the Activity Vocabulary , but this FEP provides additional guidance for publishers and consumers and collects the relevant properties in one place. Well-defined behaviour for supporting long-form text provides multiple benefits. Not only does it allow publishers to integrate content in a dependable way across different platforms, but it also gives users of Activity Streams 2.0 consumer applications more control over their reading experience -- including filtering or sorting long-form text objects in their stream. This FEP does not provide guidance for book-length or longer text. This document provides information for multiple protocols that use Activity Streams 2.0 as a representation format. Where ActivityPub use is different than AS2, it is noted. Because long-form text is often syndicated using RSS 2.0 , the properties in this FEP are compared to the properties in that format where appropriate. Type The Article type is used to represent multi-paragraph text. The Activity Streams 2.0 primer provides guidance on when to use the Article type and when to use the Note type. Some consumers do not display Article objects with their full content. Some publishers work around this by using a Note -type object with much more content than expected for a note. Publishers should avoid this workaround, and instead give consumers the full information they need to display the content correctly in their own interfaces. The preview property can be used to provide a simpler version of the content for consumers that don't support Article directly. Forcing long-form text into a Note object can cause problems for consumers that expect Note objects to be short and well-formatted for stream display. Maintaining a clear distinction between Note and Article objects is important for interoperability. Consumers that only display short text should show the name , summary and a link to the url property so that users can view the full content in a web browser. As a fallback, they can use the preview property if it is present. Properties id A unique identifier for the text. For ActivityPub, this should be an HTTPS URL that resolves to the object. It should be a single string, unique for all objects. This property provides the same functionality as the guid property in RSS 2.0. name The title of the text should be in the name property. The property should be short enough to be displayed in a line or two on a browser interface; 75-150 characters is a good rule of thumb. Longer descriptions should be in the summary property. The name property should be plain text, not HTML or other markup. In particular, no HTML entities like &amp; or &lt; should be used. This property provides the same functionality as the title property in RSS 2.0. url The location of the full text should be in the url property. This can be a single string, in which case it is the URL of the HTML representation of the text. It can also be a Link object, which can include additional metadata about the link. If it is a Link object, the mediaType should be 'text/html' and href property should be the URL of the HTML representation of the text. The url property can also be an array of strings or Link objects or both. Multiple Link objects can be used to represent different media types or provide different URL protocols. At least one of the Link objects should have a mediaType of 'text/html' and a href property with the protocol 'https'. This property provides the same functionality as the link property in RSS 2.0. summary This property provides a brief description, teaser, abstract or \"lede\" for the text. It should be a maximum of about 500 characters; a few sentences; or a short paragraph. This property can include HTML markup. It should not include embedded media like images, video or audio. This property provides the same functionality as the description property in RSS 2.0. attributedTo This property provides the authors of the text, either as a string, an object, or an array. As a string, it is a single id for the author. For ActivityPub, the id should be a URL that resolves to an ActivityPub actor . As an object, it can be an AS2 object with a type like Person , Application or Organization . It should have an id and a name property and can also include an icon property for the author's avatar. A summary property can be used to provide a brief description of the author, including HTML. An url property can be used to provide a link to the author's profile page. If the author does not have an AS2 representation, the attributedTo property can be an object with a type of Link and an href property with the URL of the author's profile page. The name property can be used to provide the author's name. As an array, the attributedTo property can include multiple authors, either as strings or objects. The attributedTo property provides the same functionality as the author property of an item in RSS 2.0, with additional features. published The publication date of the text should be in the published property. This should be a dateTime string in the format YYYY-MM-DDTHH:MM:SSZ . This property provides the same functionality as the pubDate property in RSS 2.0. updated If the object has been updated, the date of the last update should be in the updated property. This should be a dateTime string in the format YYYY-MM-DDTHH:MM:SSZ . If the property is not present, consumers can assume that the object has not been modified since the published date. image The image property provides a notable or representative image for the text. It can be included by reference as an id or with an Image type object. There can be multiple values for the image property, either as an array of id strings or Image objects. Publishers should provide these in order of importance, with the most important image first. Consumers can use as many or as few as needed. content The full text of the article or blog post should be in the content property. This should be HTML. Using mediaType to set a different media type presumes that consumers will be able to display that type. The HTML elements in the content property should include a sanitized subset of the full HTML element set. It should not include any CSS or JavaScript. This subset should include: <p> <span> (class) <h2> , <h3> , <h4> , <h5> , <h6> <br> <a> (href, rel, class) <del> <pre> <code> <em> <strong> <b> <i> <u> <ul> <ol> (start, reversed) <li> (value) <blockquote> <img> (src, alt, title, width, height, class) <video> (src, controls, loop, poster, width, height, class) <audio> (src, controls, loop, class) <source> (src, type) <ruby> <rt> <rp> The HTML should only include the content of the text. Additional navigation to other pages on the originating site, like category links or home page links, should not be included. Other affordances like \"favourite\", \"like\", \"bookmark\" or other buttons should not be included. Any embedded media like images, video or audio in the content property should also be listed in the attachment property so that consumers can pre-fetch the media. source If the text was originally created in a different format, the original source should be in the source property to allow editing the content. It should include the mediaType of the source format and the content property with the original content. replies Comments on the text should be linked in the replies property. This should be a URL that resolves to a collection of objects for the replies. Comments are usually Note objects, but can be other types of objects like Article or Question . This property provides the same functionality as the comments property in RSS 2.0. attachment The attachment property provides additional media that is part of the text. This can include images, video, audio, or other media. Consumers can use this property to pre-fetch media for display without needing to load and parse the full content property. If the text is a commentary on or review of a particular link on the Web, the attachment property can include a Link object with a href property that is the URL of the linked resource. tag The tag property provides additional metadata about the text. There are two important types of tags: Hashtag objects, which represent a topic or category that the text is about. These should have a name property with the tag text. Mention objects, which represent a mention of an actor, such as an ActivityPub actor. These should have an href property with the URL of the actor's profile page. context If the text is part of a larger collection, the context property can provide a link to the collection. An example might be an article in a series, a newspaper column, a blog category (although tag may be better here) or a section of a magazine. There can be multiple context properties, either as an array of strings or objects or both. generator The generator property provides information about the software that generated the text. This is usually an Application or Service object with an id and a name property. preview In AS2, the preview property provides an abbreviated version of the content of the object. Especially for microblogging applications, the preview property is a useful fallback for supporting unrecognized object types like Article . For an article, the preview can be a Note that gives a well-formatted preview of the article content in its content property. For example, the name , summary , and a link to the url would be an appropriate representation. The content property of the preview should include a minimal set of HTML elements, as described in ActivityPub Primer HTML . Metadata on the Article that applies equally to the preview, such as attributedTo , published , updated , and tag should be repeated in the preview property. The image property of the Article may be included in the preview property as attachment items. The preview property may have an id property. to , cc , bcc , bto , audience As with other AS2 object types, the to , cc , bcc , bto , and audience properties identify the addressees of the text. For ActivityPub, they also determine the delivery targets of the text. The addressing properties provide an access control mechanism for AS2. Publishers and consumers should not disclose the properties of any AS2 object type, including the Article type, with anyone except the addressees, listed in these addressing properties, or the creator(s), listed in the attributedTo property. \u4f8b This section includes examples of long-form text objects. Note that for brevity, the content is not actually multi-paragraph text. Long-form text with included content { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text.jsonld\", \"name\": \"Long-form text with included content\", \"url\": \"https://example.com/2024/11/07/long-form-text.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is a long-form text object with included content. It has a title, a summary, and a full text.</p>\", \"content\": \"<p>This is a long-form text object with included content. It has a title, a summary, and a full text.</p>\", \"published\": \"2024-11-07T12:00:00Z\" } Long-form text with external content { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text-no-content.jsonld\", \"name\": \"Long-form text with included content\", \"url\": \"https://example.com/2024/11/07/long-form-text-no-content.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is a long-form text object with external content. It has a title, a summary, and a link to the full text.</p>\" \"published\": \"2024-11-07T12:00:00Z\" } Long-form text with full author information { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text-author.jsonld\", \"name\": \"Long-form text with full author information\", \"url\": \"https://example.com/2024/11/07/long-form-text-author.html\", \"attributedTo\": { \"type\": \"Person\", \"id\": \"https://example.com/evan\", \"name\": \"Evan Prodromou\", \"summary\": \"<p>Founder of Social Web Foundation</p>\", \"url\": \"https://example.com/evan\", \"icon\": { \"type\": \"Image\", \"mediaType\": \"image/png\", \"url\": \"https://example.com/evan.png\" } }, \"summary\": \"<p>This is a long-form text object with full author information. It has a title, a summary, and an URL to the full text.</p>\" \"published\": \"2024-11-07T12:00:00Z\" } Long-form text with embedded images { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text-images.jsonld\", \"name\": \"Long-form text with embedded images\", \"url\": \"https://example.com/2024/11/07/long-form-text-images.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is a long-form text object with embedded images.</p>\", \"content\": \"<p>This is a long-form text object with embedded images.</p><img src=\\\"https://example.com/image1.jpg\\\" alt=\\\"Image 1\\\"><img src=\\\"https://example.com/image2.jpg\\\" alt=\\\"Image 2\\\">\", \"attachment\": [ { \"type\": \"Image\", \"id\": \"https://example.com/image1.jpg\", \"mediaType\": \"image/jpeg\" }, { \"type\": \"Image\", \"id\": \"https://example.com/image2.jpg\", \"mediaType\": \"image/jpeg\" } ], \"published\": \"2024-11-07T12:00:00Z\" } Long-form text with tags { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text-tags.jsonld\", \"name\": \"Long-form text with tags\", \"url\": \"https://example.com/2024/11/07/long-form-text-tags.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is a long-form text object with tags.</p>\", \"content\": \"<p>@<a href='https://example.com/evan'>evan</a> made this #<a href='https://example.com/tag/example'>example</a>.</p>\", \"tag\": [ { \"type\": \"Hashtag\", \"name\": \"example\", \"href\": \"https://example.com/tag/example\" }, { \"type\": \"Mention\", \"href\": \"https://example.com/evan\" } ], \"published\": \"2024-11-07T12:00:00Z\" } Long-form text with context { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text-context.jsonld\", \"name\": \"Long-form text with context\", \"url\": \"https://example.com/2024/11/07/long-form-text-context.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is a long-form text object with context.</p>\", \"content\": \"<p>This is a long-form text object with context.</p>\", \"context\": [ \"https://example.com/2024/11/07/series\", \"https://example.com/2024/11/07/category\" ], \"published\": \"2024-11-07T12:00:00Z\" } Long-form text with preview { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2025/02/17/long-form-text-preview.jsonld\", \"name\": \"Long-form text with preview\", \"url\": \"https://example.com/2025/02/17/long-form-text-preview.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is the summary for a long-form text with a preview.</p>\", \"content\": \"<p>This is the content for a long-form text with a preview.</p>\", \"published\": \"2024-11-07T12:00:00Z\", \"image\": { \"type\": \"Link\", \"href\": \"https://example.com/image.jpg\", \"mediaType\": \"image/jpeg\" }, \"preview\": { \"type\": \"Note\", \"attributedTo\": \"https://example.com/evan\", \"content\": \"<p><strong>Long-form text with preview</strong></p><p>This is the summary for a long-form text with a preview.</p><p><a href='https://example.com/2025/02/17/long-form-text-preview.html'>Read more</a></p>\", \"published\": \"2024-11-07T12:00:00Z\", \"attachment\": { \"type\": \"Link\", \"href\": \"https://example.com/image.jpg\", \"mediaType\": \"image/jpeg\" } } } User interface guidance Consumers should use their native interfaces to handle Article objects in an intuitive way that integrates well with other object types. The following illustrations provide examples of how Article objects might be displayed in a stream-oriented social web interface, such as a microblogging application. The UI elements are labelled with the properties of the Article object that most likely correspond to them. In stream, with image An example of a long-form text object with an image property displayed in a social stream. In stream, without image An example of a long-form text object without an image property displayed in a social stream. In stream, no title An example of a long-form text object without a name property displayed in a social stream. \u53c2\u8003\u6587\u732e James Snell, Evan Prodromou, Activity Streams 2.0 , 2017 James Snell, Evan Prodromou, Activity Vocabulary , 2017 Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Dave Winer, RSS 2.0 Specification , 2003 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-b2b8: Long-form Text"},{"location":"fep/fep-b2b8/#fep-b2b8-long-form-text","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-b2b8: Long-form Text"},{"location":"fep/fep-b2b8/#summary","text":"Multi-paragraph text is an important content type on the Social Web. This FEP defines best practices for representing and using properties of a long-form text object in Activity Streams 2.0 .","title":"Summary"},{"location":"fep/fep-b2b8/#motivation","text":"Blog posts, magazine articles, and forum posts are often made up of multiple paragraphs of text, sometimes with embedded images, video, audio or other media. This important content type is documented in the Activity Vocabulary , but this FEP provides additional guidance for publishers and consumers and collects the relevant properties in one place. Well-defined behaviour for supporting long-form text provides multiple benefits. Not only does it allow publishers to integrate content in a dependable way across different platforms, but it also gives users of Activity Streams 2.0 consumer applications more control over their reading experience -- including filtering or sorting long-form text objects in their stream. This FEP does not provide guidance for book-length or longer text. This document provides information for multiple protocols that use Activity Streams 2.0 as a representation format. Where ActivityPub use is different than AS2, it is noted. Because long-form text is often syndicated using RSS 2.0 , the properties in this FEP are compared to the properties in that format where appropriate.","title":"Motivation"},{"location":"fep/fep-b2b8/#type","text":"The Article type is used to represent multi-paragraph text. The Activity Streams 2.0 primer provides guidance on when to use the Article type and when to use the Note type. Some consumers do not display Article objects with their full content. Some publishers work around this by using a Note -type object with much more content than expected for a note. Publishers should avoid this workaround, and instead give consumers the full information they need to display the content correctly in their own interfaces. The preview property can be used to provide a simpler version of the content for consumers that don't support Article directly. Forcing long-form text into a Note object can cause problems for consumers that expect Note objects to be short and well-formatted for stream display. Maintaining a clear distinction between Note and Article objects is important for interoperability. Consumers that only display short text should show the name , summary and a link to the url property so that users can view the full content in a web browser. As a fallback, they can use the preview property if it is present.","title":"Type"},{"location":"fep/fep-b2b8/#properties","text":"","title":"Properties"},{"location":"fep/fep-b2b8/#id","text":"A unique identifier for the text. For ActivityPub, this should be an HTTPS URL that resolves to the object. It should be a single string, unique for all objects. This property provides the same functionality as the guid property in RSS 2.0.","title":"id"},{"location":"fep/fep-b2b8/#name","text":"The title of the text should be in the name property. The property should be short enough to be displayed in a line or two on a browser interface; 75-150 characters is a good rule of thumb. Longer descriptions should be in the summary property. The name property should be plain text, not HTML or other markup. In particular, no HTML entities like &amp; or &lt; should be used. This property provides the same functionality as the title property in RSS 2.0.","title":"name"},{"location":"fep/fep-b2b8/#url","text":"The location of the full text should be in the url property. This can be a single string, in which case it is the URL of the HTML representation of the text. It can also be a Link object, which can include additional metadata about the link. If it is a Link object, the mediaType should be 'text/html' and href property should be the URL of the HTML representation of the text. The url property can also be an array of strings or Link objects or both. Multiple Link objects can be used to represent different media types or provide different URL protocols. At least one of the Link objects should have a mediaType of 'text/html' and a href property with the protocol 'https'. This property provides the same functionality as the link property in RSS 2.0.","title":"url"},{"location":"fep/fep-b2b8/#summary_1","text":"This property provides a brief description, teaser, abstract or \"lede\" for the text. It should be a maximum of about 500 characters; a few sentences; or a short paragraph. This property can include HTML markup. It should not include embedded media like images, video or audio. This property provides the same functionality as the description property in RSS 2.0.","title":"summary"},{"location":"fep/fep-b2b8/#attributedto","text":"This property provides the authors of the text, either as a string, an object, or an array. As a string, it is a single id for the author. For ActivityPub, the id should be a URL that resolves to an ActivityPub actor . As an object, it can be an AS2 object with a type like Person , Application or Organization . It should have an id and a name property and can also include an icon property for the author's avatar. A summary property can be used to provide a brief description of the author, including HTML. An url property can be used to provide a link to the author's profile page. If the author does not have an AS2 representation, the attributedTo property can be an object with a type of Link and an href property with the URL of the author's profile page. The name property can be used to provide the author's name. As an array, the attributedTo property can include multiple authors, either as strings or objects. The attributedTo property provides the same functionality as the author property of an item in RSS 2.0, with additional features.","title":"attributedTo"},{"location":"fep/fep-b2b8/#published","text":"The publication date of the text should be in the published property. This should be a dateTime string in the format YYYY-MM-DDTHH:MM:SSZ . This property provides the same functionality as the pubDate property in RSS 2.0.","title":"published"},{"location":"fep/fep-b2b8/#updated","text":"If the object has been updated, the date of the last update should be in the updated property. This should be a dateTime string in the format YYYY-MM-DDTHH:MM:SSZ . If the property is not present, consumers can assume that the object has not been modified since the published date.","title":"updated"},{"location":"fep/fep-b2b8/#image","text":"The image property provides a notable or representative image for the text. It can be included by reference as an id or with an Image type object. There can be multiple values for the image property, either as an array of id strings or Image objects. Publishers should provide these in order of importance, with the most important image first. Consumers can use as many or as few as needed.","title":"image"},{"location":"fep/fep-b2b8/#content","text":"The full text of the article or blog post should be in the content property. This should be HTML. Using mediaType to set a different media type presumes that consumers will be able to display that type. The HTML elements in the content property should include a sanitized subset of the full HTML element set. It should not include any CSS or JavaScript. This subset should include: <p> <span> (class) <h2> , <h3> , <h4> , <h5> , <h6> <br> <a> (href, rel, class) <del> <pre> <code> <em> <strong> <b> <i> <u> <ul> <ol> (start, reversed) <li> (value) <blockquote> <img> (src, alt, title, width, height, class) <video> (src, controls, loop, poster, width, height, class) <audio> (src, controls, loop, class) <source> (src, type) <ruby> <rt> <rp> The HTML should only include the content of the text. Additional navigation to other pages on the originating site, like category links or home page links, should not be included. Other affordances like \"favourite\", \"like\", \"bookmark\" or other buttons should not be included. Any embedded media like images, video or audio in the content property should also be listed in the attachment property so that consumers can pre-fetch the media.","title":"content"},{"location":"fep/fep-b2b8/#source","text":"If the text was originally created in a different format, the original source should be in the source property to allow editing the content. It should include the mediaType of the source format and the content property with the original content.","title":"source"},{"location":"fep/fep-b2b8/#replies","text":"Comments on the text should be linked in the replies property. This should be a URL that resolves to a collection of objects for the replies. Comments are usually Note objects, but can be other types of objects like Article or Question . This property provides the same functionality as the comments property in RSS 2.0.","title":"replies"},{"location":"fep/fep-b2b8/#attachment","text":"The attachment property provides additional media that is part of the text. This can include images, video, audio, or other media. Consumers can use this property to pre-fetch media for display without needing to load and parse the full content property. If the text is a commentary on or review of a particular link on the Web, the attachment property can include a Link object with a href property that is the URL of the linked resource.","title":"attachment"},{"location":"fep/fep-b2b8/#tag","text":"The tag property provides additional metadata about the text. There are two important types of tags: Hashtag objects, which represent a topic or category that the text is about. These should have a name property with the tag text. Mention objects, which represent a mention of an actor, such as an ActivityPub actor. These should have an href property with the URL of the actor's profile page.","title":"tag"},{"location":"fep/fep-b2b8/#context","text":"If the text is part of a larger collection, the context property can provide a link to the collection. An example might be an article in a series, a newspaper column, a blog category (although tag may be better here) or a section of a magazine. There can be multiple context properties, either as an array of strings or objects or both.","title":"context"},{"location":"fep/fep-b2b8/#generator","text":"The generator property provides information about the software that generated the text. This is usually an Application or Service object with an id and a name property.","title":"generator"},{"location":"fep/fep-b2b8/#preview","text":"In AS2, the preview property provides an abbreviated version of the content of the object. Especially for microblogging applications, the preview property is a useful fallback for supporting unrecognized object types like Article . For an article, the preview can be a Note that gives a well-formatted preview of the article content in its content property. For example, the name , summary , and a link to the url would be an appropriate representation. The content property of the preview should include a minimal set of HTML elements, as described in ActivityPub Primer HTML . Metadata on the Article that applies equally to the preview, such as attributedTo , published , updated , and tag should be repeated in the preview property. The image property of the Article may be included in the preview property as attachment items. The preview property may have an id property.","title":"preview"},{"location":"fep/fep-b2b8/#to-cc-bcc-bto-audience","text":"As with other AS2 object types, the to , cc , bcc , bto , and audience properties identify the addressees of the text. For ActivityPub, they also determine the delivery targets of the text. The addressing properties provide an access control mechanism for AS2. Publishers and consumers should not disclose the properties of any AS2 object type, including the Article type, with anyone except the addressees, listed in these addressing properties, or the creator(s), listed in the attributedTo property.","title":"to, cc, bcc, bto, audience"},{"location":"fep/fep-b2b8/#_1","text":"This section includes examples of long-form text objects. Note that for brevity, the content is not actually multi-paragraph text.","title":"\u4f8b"},{"location":"fep/fep-b2b8/#long-form-text-with-included-content","text":"{ \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text.jsonld\", \"name\": \"Long-form text with included content\", \"url\": \"https://example.com/2024/11/07/long-form-text.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is a long-form text object with included content. It has a title, a summary, and a full text.</p>\", \"content\": \"<p>This is a long-form text object with included content. It has a title, a summary, and a full text.</p>\", \"published\": \"2024-11-07T12:00:00Z\" }","title":"Long-form text with included content"},{"location":"fep/fep-b2b8/#long-form-text-with-external-content","text":"{ \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text-no-content.jsonld\", \"name\": \"Long-form text with included content\", \"url\": \"https://example.com/2024/11/07/long-form-text-no-content.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is a long-form text object with external content. It has a title, a summary, and a link to the full text.</p>\" \"published\": \"2024-11-07T12:00:00Z\" }","title":"Long-form text with external content"},{"location":"fep/fep-b2b8/#long-form-text-with-full-author-information","text":"{ \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text-author.jsonld\", \"name\": \"Long-form text with full author information\", \"url\": \"https://example.com/2024/11/07/long-form-text-author.html\", \"attributedTo\": { \"type\": \"Person\", \"id\": \"https://example.com/evan\", \"name\": \"Evan Prodromou\", \"summary\": \"<p>Founder of Social Web Foundation</p>\", \"url\": \"https://example.com/evan\", \"icon\": { \"type\": \"Image\", \"mediaType\": \"image/png\", \"url\": \"https://example.com/evan.png\" } }, \"summary\": \"<p>This is a long-form text object with full author information. It has a title, a summary, and an URL to the full text.</p>\" \"published\": \"2024-11-07T12:00:00Z\" }","title":"Long-form text with full author information"},{"location":"fep/fep-b2b8/#long-form-text-with-embedded-images","text":"{ \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text-images.jsonld\", \"name\": \"Long-form text with embedded images\", \"url\": \"https://example.com/2024/11/07/long-form-text-images.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is a long-form text object with embedded images.</p>\", \"content\": \"<p>This is a long-form text object with embedded images.</p><img src=\\\"https://example.com/image1.jpg\\\" alt=\\\"Image 1\\\"><img src=\\\"https://example.com/image2.jpg\\\" alt=\\\"Image 2\\\">\", \"attachment\": [ { \"type\": \"Image\", \"id\": \"https://example.com/image1.jpg\", \"mediaType\": \"image/jpeg\" }, { \"type\": \"Image\", \"id\": \"https://example.com/image2.jpg\", \"mediaType\": \"image/jpeg\" } ], \"published\": \"2024-11-07T12:00:00Z\" }","title":"Long-form text with embedded images"},{"location":"fep/fep-b2b8/#long-form-text-with-tags","text":"{ \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text-tags.jsonld\", \"name\": \"Long-form text with tags\", \"url\": \"https://example.com/2024/11/07/long-form-text-tags.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is a long-form text object with tags.</p>\", \"content\": \"<p>@<a href='https://example.com/evan'>evan</a> made this #<a href='https://example.com/tag/example'>example</a>.</p>\", \"tag\": [ { \"type\": \"Hashtag\", \"name\": \"example\", \"href\": \"https://example.com/tag/example\" }, { \"type\": \"Mention\", \"href\": \"https://example.com/evan\" } ], \"published\": \"2024-11-07T12:00:00Z\" }","title":"Long-form text with tags"},{"location":"fep/fep-b2b8/#long-form-text-with-context","text":"{ \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2024/11/07/long-form-text-context.jsonld\", \"name\": \"Long-form text with context\", \"url\": \"https://example.com/2024/11/07/long-form-text-context.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is a long-form text object with context.</p>\", \"content\": \"<p>This is a long-form text object with context.</p>\", \"context\": [ \"https://example.com/2024/11/07/series\", \"https://example.com/2024/11/07/category\" ], \"published\": \"2024-11-07T12:00:00Z\" }","title":"Long-form text with context"},{"location":"fep/fep-b2b8/#long-form-text-with-preview","text":"{ \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Article\", \"id\": \"https://example.com/2025/02/17/long-form-text-preview.jsonld\", \"name\": \"Long-form text with preview\", \"url\": \"https://example.com/2025/02/17/long-form-text-preview.html\", \"attributedTo\": \"https://example.com/evan\", \"summary\": \"<p>This is the summary for a long-form text with a preview.</p>\", \"content\": \"<p>This is the content for a long-form text with a preview.</p>\", \"published\": \"2024-11-07T12:00:00Z\", \"image\": { \"type\": \"Link\", \"href\": \"https://example.com/image.jpg\", \"mediaType\": \"image/jpeg\" }, \"preview\": { \"type\": \"Note\", \"attributedTo\": \"https://example.com/evan\", \"content\": \"<p><strong>Long-form text with preview</strong></p><p>This is the summary for a long-form text with a preview.</p><p><a href='https://example.com/2025/02/17/long-form-text-preview.html'>Read more</a></p>\", \"published\": \"2024-11-07T12:00:00Z\", \"attachment\": { \"type\": \"Link\", \"href\": \"https://example.com/image.jpg\", \"mediaType\": \"image/jpeg\" } } }","title":"Long-form text with preview"},{"location":"fep/fep-b2b8/#user-interface-guidance","text":"Consumers should use their native interfaces to handle Article objects in an intuitive way that integrates well with other object types. The following illustrations provide examples of how Article objects might be displayed in a stream-oriented social web interface, such as a microblogging application. The UI elements are labelled with the properties of the Article object that most likely correspond to them.","title":"User interface guidance"},{"location":"fep/fep-b2b8/#in-stream-with-image","text":"An example of a long-form text object with an image property displayed in a social stream.","title":"In stream, with image"},{"location":"fep/fep-b2b8/#in-stream-without-image","text":"An example of a long-form text object without an image property displayed in a social stream.","title":"In stream, without image"},{"location":"fep/fep-b2b8/#in-stream-no-title","text":"An example of a long-form text object without a name property displayed in a social stream.","title":"In stream, no title"},{"location":"fep/fep-b2b8/#_2","text":"James Snell, Evan Prodromou, Activity Streams 2.0 , 2017 James Snell, Evan Prodromou, Activity Vocabulary , 2017 Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Dave Winer, RSS 2.0 Specification , 2003","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-b2b8/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-bad1/","text":"FEP-bad1: Object history collection Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary [AS2-Core] provides examples 18, 19, 32 which represent the \"history\" of an object. Particularly in example 32, we see an object being Created, Updated, and Deleted. However, there is no property dedicated to advertising a collection fit for this purpose. This FEP attempts to define one. \u4f8b taken from ActivityStreams 2.0 (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) For convenience, the following examples are reproduced from the ActivityStreams 2.0 [AS2-Core] specification. Examples 18 and 19 are found in normative sections; example 32 is found in a non-normative section. Example 18: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"summary\": \"Object history\", \"type\": \"Collection\", \"totalItems\": 2, \"items\": [ { \"type\": \"Create\", \"actor\": \"http://www.test.example/sally\", \"object\": \"http://example.org/foo\" }, { \"type\": \"Like\", \"actor\": \"http://www.test.example/joe\", \"object\": \"http://example.org/foo\" } ] } Example 19: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"summary\": \"Object history\", \"type\": \"OrderedCollection\", \"totalItems\": 2, \"orderedItems\": [ { \"type\": \"Create\", \"actor\": \"http://www.test.example/sally\", \"object\": \"http://example.org/foo\" }, { \"type\": \"Like\", \"actor\": \"http://www.test.example/joe\", \"object\": \"http://example.org/foo\" } ] } Example 32: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"oa\": \"http://www.w3.org/ns/oa#\", \"prov\": \"http://www.w3.org/ns/prov#\", \"dcterms\": \"http://purl.org/dc/terms/\", \"dcterms:created\": { \"@id\": \"dcterms:created\", \"@type\": \"xsd:dateTime\" } } ], \"summary\": \"Editing history of a note\", \"type\": \"Collection\", \"items\": [ { \"id\": \"http://example.org/activity/20150101000000\", \"type\": [ \"Create\", \"prov:Activity\" ], \"actor\": { \"id\": \"http://example.org/#eric\", \"name\": \"Eric\" }, \"summary\": \"Eric wrote a note.\", \"object\": { \"id\": \"http://example.org/entry/20150101000000\", \"type\": [ \"Note\", \"prov:Entity\" ], \"attributedTo\": \"http://example.org/#eric\", \"content\": \"Remember... all I'm offering is the trooth. Nothing more.\" }, \"published\": \"2015-01-01T00:00:00Z\" }, { \"id\": \"http://example.org/activity/20150101000059\", \"type\": [ \"Update\", \"prov:Activity\", \"oa:Annotation\" ], \"summary\": \"Eric edited a note.\", \"dcterms:created\": \"2015-01-01T00:00:59Z\", \"dcterms:creator\": { \"@id\": \"http://example.org/#eric\" }, \"oa:hasBody\": { \"id\": \"http://example.org/entry/20150101000059\", \"type\": [ \"Note\", \"prov:Entity\" ], \"content\": \"Remember... all I'm offering is the truth. Nothing more.\", \"prov:wasAttributedTo\": { \"@id\": \"http://example.org/#eric\" }, \"prov:wasRevisionOf\": { \"@id\": \"http://example.org/entry/20150101000000\" } }, \"oa:hasTarget\": { \"@id\": \"http://example.org/entry/20150101000000\" }, \"oa:motivatedBy\": { \"@id\": \"oa:editing\" }, \"prov:generated\": { \"@id\": \"http://example.org/entry/20150101000059\" }, \"prov:wasInformedBy\": { \"@id\": \"http://example.org/activity/20150101000000\" } }, { \"id\": \"http://example.org/activity/20150101010101\", \"type\": [ \"Delete\", \"prov:Activity\" ], \"actor\": \"http://example.org/#eric\", \"summary\": \"Eric deleted a note.\", \"object\": \"http://example.org/entry/20150101000059\", \"published\": \"2015-01-01T01:01:01Z\" } ] } From these examples, Example 18 is nearly identical to Example 19, except for the type being Collection in Example 18, and OrderedCollection in Example 19. An object's history collection will necessarily be ordered chronologically, although whether the ordering should be forward chronological or reverse chronological is an open question; at the time of writing this FEP, [ActivityPub] Section 5 currently contains the following language: An OrderedCollection MUST be presented consistently in reverse chronological order. This language indicates that if OrderedCollection is used, the ordering MUST be reverse chronological. Defining the history special collection An object's history is discovered through the history property of an object. The history MUST be an OrderedCollection . The history stream contains all activities which target the object as object , where the actor matches the attributedTo actor. This might include Create, Update, and/or Delete activities. This is differentiated from context , which per FEP-7888 may be a collection containing related objects and activities. It is possible in certain cases to obtain an object's history by filtering such a collection for all items that contain an object referencing a given object, but this is not a consistent or straightforward way of doing so. Terms defined by this FEP In the associated context , we define the following terms: history URI : https://w3id.org/fep/bad1/history Notes : A collection containing all activities performed by the author related to this object's representation. JSON-LD definition ( @id pending adoption of FEP-9606): { \"@context\": { \"history\": { \"@id\": \"https://w3id.org/fep/bad1/history\", \"@type\": \"@id\" } } } Example: { \"@context\": [ \"https://w3id.org/fep/bad1/history\", \"https://www.w3.org/ns/activitystreams\" ], \"id\": \"https://example.com/some-file\", \"type\": \"Tombstone\", \"formerType\": \"Document\", \"url\": \"https://example.com/404\", \"history\": { \"id\": \"https://example.com/some-object/log\", \"type\": \"OrderedCollection\", \"orderedItems\": [ { \"id\": \"https://example.com/some-file/log/3\", \"type\": \"Delete\", \"object\": \"https://example.com/some-file\" }, { \"id\": \"https://example.com/some-file/log/2\", \"type\": \"Update\", \"object\": { \"id\": \"https://example.com/some-file\", \"url\": \"https://example.com/storage/hash2\" } }, { \"id\": \"https://example.com/some-file/log/1\", \"type\": \"Create\", \"object\": { \"type\": \"Document\", \"url\": \"https://example.com/storage/hash1\" } } ] } } \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [AS2-Core] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-bad1: Object history collection"},{"location":"fep/fep-bad1/#fep-bad1-object-history-collection","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-bad1: Object history collection"},{"location":"fep/fep-bad1/#summary","text":"[AS2-Core] provides examples 18, 19, 32 which represent the \"history\" of an object. Particularly in example 32, we see an object being Created, Updated, and Deleted. However, there is no property dedicated to advertising a collection fit for this purpose. This FEP attempts to define one.","title":"Summary"},{"location":"fep/fep-bad1/#taken-from-activitystreams-20","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) For convenience, the following examples are reproduced from the ActivityStreams 2.0 [AS2-Core] specification. Examples 18 and 19 are found in normative sections; example 32 is found in a non-normative section. Example 18: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"summary\": \"Object history\", \"type\": \"Collection\", \"totalItems\": 2, \"items\": [ { \"type\": \"Create\", \"actor\": \"http://www.test.example/sally\", \"object\": \"http://example.org/foo\" }, { \"type\": \"Like\", \"actor\": \"http://www.test.example/joe\", \"object\": \"http://example.org/foo\" } ] } Example 19: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"summary\": \"Object history\", \"type\": \"OrderedCollection\", \"totalItems\": 2, \"orderedItems\": [ { \"type\": \"Create\", \"actor\": \"http://www.test.example/sally\", \"object\": \"http://example.org/foo\" }, { \"type\": \"Like\", \"actor\": \"http://www.test.example/joe\", \"object\": \"http://example.org/foo\" } ] } Example 32: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"oa\": \"http://www.w3.org/ns/oa#\", \"prov\": \"http://www.w3.org/ns/prov#\", \"dcterms\": \"http://purl.org/dc/terms/\", \"dcterms:created\": { \"@id\": \"dcterms:created\", \"@type\": \"xsd:dateTime\" } } ], \"summary\": \"Editing history of a note\", \"type\": \"Collection\", \"items\": [ { \"id\": \"http://example.org/activity/20150101000000\", \"type\": [ \"Create\", \"prov:Activity\" ], \"actor\": { \"id\": \"http://example.org/#eric\", \"name\": \"Eric\" }, \"summary\": \"Eric wrote a note.\", \"object\": { \"id\": \"http://example.org/entry/20150101000000\", \"type\": [ \"Note\", \"prov:Entity\" ], \"attributedTo\": \"http://example.org/#eric\", \"content\": \"Remember... all I'm offering is the trooth. Nothing more.\" }, \"published\": \"2015-01-01T00:00:00Z\" }, { \"id\": \"http://example.org/activity/20150101000059\", \"type\": [ \"Update\", \"prov:Activity\", \"oa:Annotation\" ], \"summary\": \"Eric edited a note.\", \"dcterms:created\": \"2015-01-01T00:00:59Z\", \"dcterms:creator\": { \"@id\": \"http://example.org/#eric\" }, \"oa:hasBody\": { \"id\": \"http://example.org/entry/20150101000059\", \"type\": [ \"Note\", \"prov:Entity\" ], \"content\": \"Remember... all I'm offering is the truth. Nothing more.\", \"prov:wasAttributedTo\": { \"@id\": \"http://example.org/#eric\" }, \"prov:wasRevisionOf\": { \"@id\": \"http://example.org/entry/20150101000000\" } }, \"oa:hasTarget\": { \"@id\": \"http://example.org/entry/20150101000000\" }, \"oa:motivatedBy\": { \"@id\": \"oa:editing\" }, \"prov:generated\": { \"@id\": \"http://example.org/entry/20150101000059\" }, \"prov:wasInformedBy\": { \"@id\": \"http://example.org/activity/20150101000000\" } }, { \"id\": \"http://example.org/activity/20150101010101\", \"type\": [ \"Delete\", \"prov:Activity\" ], \"actor\": \"http://example.org/#eric\", \"summary\": \"Eric deleted a note.\", \"object\": \"http://example.org/entry/20150101000059\", \"published\": \"2015-01-01T01:01:01Z\" } ] } From these examples, Example 18 is nearly identical to Example 19, except for the type being Collection in Example 18, and OrderedCollection in Example 19. An object's history collection will necessarily be ordered chronologically, although whether the ordering should be forward chronological or reverse chronological is an open question; at the time of writing this FEP, [ActivityPub] Section 5 currently contains the following language: An OrderedCollection MUST be presented consistently in reverse chronological order. This language indicates that if OrderedCollection is used, the ordering MUST be reverse chronological.","title":"\u4f8b taken from ActivityStreams 2.0"},{"location":"fep/fep-bad1/#defining-the-history-special-collection","text":"An object's history is discovered through the history property of an object. The history MUST be an OrderedCollection . The history stream contains all activities which target the object as object , where the actor matches the attributedTo actor. This might include Create, Update, and/or Delete activities. This is differentiated from context , which per FEP-7888 may be a collection containing related objects and activities. It is possible in certain cases to obtain an object's history by filtering such a collection for all items that contain an object referencing a given object, but this is not a consistent or straightforward way of doing so.","title":"Defining the history special collection"},{"location":"fep/fep-bad1/#terms-defined-by-this-fep","text":"In the associated context , we define the following terms:","title":"Terms defined by this FEP"},{"location":"fep/fep-bad1/#history","text":"URI : https://w3id.org/fep/bad1/history Notes : A collection containing all activities performed by the author related to this object's representation. JSON-LD definition ( @id pending adoption of FEP-9606): { \"@context\": { \"history\": { \"@id\": \"https://w3id.org/fep/bad1/history\", \"@type\": \"@id\" } } } Example: { \"@context\": [ \"https://w3id.org/fep/bad1/history\", \"https://www.w3.org/ns/activitystreams\" ], \"id\": \"https://example.com/some-file\", \"type\": \"Tombstone\", \"formerType\": \"Document\", \"url\": \"https://example.com/404\", \"history\": { \"id\": \"https://example.com/some-object/log\", \"type\": \"OrderedCollection\", \"orderedItems\": [ { \"id\": \"https://example.com/some-file/log/3\", \"type\": \"Delete\", \"object\": \"https://example.com/some-file\" }, { \"id\": \"https://example.com/some-file/log/2\", \"type\": \"Update\", \"object\": { \"id\": \"https://example.com/some-file\", \"url\": \"https://example.com/storage/hash2\" } }, { \"id\": \"https://example.com/some-file/log/1\", \"type\": \"Create\", \"object\": { \"type\": \"Document\", \"url\": \"https://example.com/storage/hash1\" } } ] } }","title":"history"},{"location":"fep/fep-bad1/#_1","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [AS2-Core] James M Snell, Evan Prodromou, Activity Vocabulary , 2017","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-bad1/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-c0e0/","text":"FEP-c0e0: Emoji reactions Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This document describes how emoji reactions are implemented in ActivityPub network. History Misskey supports emoji reactions since version 10.97.0 (2019). Pleroma supports emoji reactions since version 2.0.0 (2020). Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . EmojiReact activity EmojiReact activity type is considered to be a part of LitePub vocabulary. Its full IRI is http://litepub.social/ns#EmojiReact . This activity is similar to Like activity. In addition to standard properties of Like activity, EmojiReact activity MUST have a content property. Reaction content MUST be either a single unicode grapheme, or a shortcode of a custom emoji. The shortcode MUST be enclosed in colons. If custom emoji is used, EmojiReact activity MUST have a tag property containing a single Emoji object (which is specified in Mastodon ActivityPub extension documentation ). The value of its name property MUST be a shortcode that matches the shortcode in reaction content, and it SHOULD be enclosed in colons. The embedded Emoji can originate from a server that is different from the actor's server. An actor can generate multiple EmojiReact activities for a single object . However, implementers MAY choose to not allow more than one reaction with the same emoji, or more than one reaction per object. Example with unicode emoji: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"litepub\": \"http://litepub.social/ns#\", \"EmojiReact\": \"litepub:EmojiReact\" } ], \"actor\": \"https://alice.social/users/alice\", \"content\": \"\ud83d\udd25\", \"id\": \"https://alice.social/activities/65379d47-b7aa-4ef6-8e4f-41149dda1d2c\", \"object\": \"https://bob.social/objects/57caeb99-424c-4692-b74f-0a6682050932\", \"to\": [ \"https://alice.social/users/alice/followers\", \"https://bob.social/users/bob\" ], \"type\": \"EmojiReact\" } Example with custom emoji: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\": \"http://joinmastodon.org/ns#\", \"Emoji\": \"toot:Emoji\", \"litepub\": \"http://litepub.social/ns#\", \"EmojiReact\": \"litepub:EmojiReact\" } ], \"actor\": \"https://alice.social/users/alice\", \"content\": \":blobwtfnotlikethis:\", \"id\": \"https://alice.social/activities/65379d47-b7aa-4ef6-8e4f-41149dda1d2c\", \"object\": \"https://bob.social/objects/57caeb99-424c-4692-b74f-0a6682050932\", \"tag\": [ { \"icon\": { \"mediaType\": \"image/png\", \"type\": \"Image\", \"url\": \"https://alice.social/files/1b0510f2-1fb4-43f5-a399-10053bbd8f0f\" }, \"id\": \"https://alice.social/emojis/blobwtfnotlikethis\", \"name\": \":blobwtfnotlikethis:\", \"type\": \"Emoji\", \"updated\": \"2024-02-07T02:21:46.497Z\" } ], \"to\": [ \"https://alice.social/users/alice/followers\", \"https://bob.social/users/bob\" ], \"type\": \"EmojiReact\" } Like with content Emoji reaction can also be represented as a Like activity. This variant of emoji reaction will processed by non-supporting implementations as a regular \"like\", and when that is preferable, implementers MAY use Like type instead of EmojiReact type. Implementations MUST process Like with content in the same way as EmojiReact activities. Undo reaction Emoji reactions can be retracted using a standard Undo activity: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\" ], \"actor\": \"https://alice.social/users/alice\", \"id\": \"https://alice.social/activities/99b8f47b-f3a9-4cf5-94a2-95352e7462d6\", \"object\": \"https://alice.social/activities/65379d47-b7aa-4ef6-8e4f-41149dda1d2c\", \"to\": [ \"https://alice.social/users/alice/followers\", \"https://bob.social/users/bob\" ], \"type\": \"Undo\" } emojiReactions collection The list of emoji reactions to an object can be exposed using the emojiReactions property. Its full IRI is http://fedibird.com/ns#emojiReactions . The URL specified by this property MUST resolve to a Collection object containing Like (with content ) and EmojiReact activities. \u5b9f\u88c5 This document is based on implementations of emoji reactions in Misskey, Pleroma and Fedibird. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 LitePub contributors, LitePub protocol suite , 2019 Mastodon contributors, Mastodon / ActivityPub , 2024 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-c0e0: Emoji reactions"},{"location":"fep/fep-c0e0/#fep-c0e0-emoji-reactions","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-c0e0: Emoji reactions"},{"location":"fep/fep-c0e0/#summary","text":"This document describes how emoji reactions are implemented in ActivityPub network.","title":"Summary"},{"location":"fep/fep-c0e0/#history","text":"Misskey supports emoji reactions since version 10.97.0 (2019). Pleroma supports emoji reactions since version 2.0.0 (2020).","title":"History"},{"location":"fep/fep-c0e0/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-c0e0/#emojireact-activity","text":"EmojiReact activity type is considered to be a part of LitePub vocabulary. Its full IRI is http://litepub.social/ns#EmojiReact . This activity is similar to Like activity. In addition to standard properties of Like activity, EmojiReact activity MUST have a content property. Reaction content MUST be either a single unicode grapheme, or a shortcode of a custom emoji. The shortcode MUST be enclosed in colons. If custom emoji is used, EmojiReact activity MUST have a tag property containing a single Emoji object (which is specified in Mastodon ActivityPub extension documentation ). The value of its name property MUST be a shortcode that matches the shortcode in reaction content, and it SHOULD be enclosed in colons. The embedded Emoji can originate from a server that is different from the actor's server. An actor can generate multiple EmojiReact activities for a single object . However, implementers MAY choose to not allow more than one reaction with the same emoji, or more than one reaction per object. Example with unicode emoji: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"litepub\": \"http://litepub.social/ns#\", \"EmojiReact\": \"litepub:EmojiReact\" } ], \"actor\": \"https://alice.social/users/alice\", \"content\": \"\ud83d\udd25\", \"id\": \"https://alice.social/activities/65379d47-b7aa-4ef6-8e4f-41149dda1d2c\", \"object\": \"https://bob.social/objects/57caeb99-424c-4692-b74f-0a6682050932\", \"to\": [ \"https://alice.social/users/alice/followers\", \"https://bob.social/users/bob\" ], \"type\": \"EmojiReact\" } Example with custom emoji: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"toot\": \"http://joinmastodon.org/ns#\", \"Emoji\": \"toot:Emoji\", \"litepub\": \"http://litepub.social/ns#\", \"EmojiReact\": \"litepub:EmojiReact\" } ], \"actor\": \"https://alice.social/users/alice\", \"content\": \":blobwtfnotlikethis:\", \"id\": \"https://alice.social/activities/65379d47-b7aa-4ef6-8e4f-41149dda1d2c\", \"object\": \"https://bob.social/objects/57caeb99-424c-4692-b74f-0a6682050932\", \"tag\": [ { \"icon\": { \"mediaType\": \"image/png\", \"type\": \"Image\", \"url\": \"https://alice.social/files/1b0510f2-1fb4-43f5-a399-10053bbd8f0f\" }, \"id\": \"https://alice.social/emojis/blobwtfnotlikethis\", \"name\": \":blobwtfnotlikethis:\", \"type\": \"Emoji\", \"updated\": \"2024-02-07T02:21:46.497Z\" } ], \"to\": [ \"https://alice.social/users/alice/followers\", \"https://bob.social/users/bob\" ], \"type\": \"EmojiReact\" }","title":"EmojiReact activity"},{"location":"fep/fep-c0e0/#like-with-content","text":"Emoji reaction can also be represented as a Like activity. This variant of emoji reaction will processed by non-supporting implementations as a regular \"like\", and when that is preferable, implementers MAY use Like type instead of EmojiReact type. Implementations MUST process Like with content in the same way as EmojiReact activities.","title":"Like with content"},{"location":"fep/fep-c0e0/#undo-reaction","text":"Emoji reactions can be retracted using a standard Undo activity: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\" ], \"actor\": \"https://alice.social/users/alice\", \"id\": \"https://alice.social/activities/99b8f47b-f3a9-4cf5-94a2-95352e7462d6\", \"object\": \"https://alice.social/activities/65379d47-b7aa-4ef6-8e4f-41149dda1d2c\", \"to\": [ \"https://alice.social/users/alice/followers\", \"https://bob.social/users/bob\" ], \"type\": \"Undo\" }","title":"Undo reaction"},{"location":"fep/fep-c0e0/#emojireactions-collection","text":"The list of emoji reactions to an object can be exposed using the emojiReactions property. Its full IRI is http://fedibird.com/ns#emojiReactions . The URL specified by this property MUST resolve to a Collection object containing Like (with content ) and EmojiReact activities.","title":"emojiReactions collection"},{"location":"fep/fep-c0e0/#_1","text":"This document is based on implementations of emoji reactions in Misskey, Pleroma and Fedibird.","title":"\u5b9f\u88c5"},{"location":"fep/fep-c0e0/#_2","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 LitePub contributors, LitePub protocol suite , 2019 Mastodon contributors, Mastodon / ActivityPub , 2024","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-c0e0/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-c118/","text":"FEP-c118: Content licensing support Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Currently, popular Fediverse software does very little to establish the legal status of posts. Controversy over indexing and scraping the Fediverse is common. The hope is that providing a legal framework to express the desires of users as to how their content may be re-used might bring order to this debate. Scenario Dramatis Personae: * A somewhat-technical new Fediverse arrival, hereinafter Noob * Existing Fediverse Voices, hereinafer EFV1 , EFV2 , etc Noob : Hey, I want to crawl the Fediverse and build an index so we can\u2026 EFV1 : Stop! Go back! Don't! EFV2 : We prefer not to do that here because we want to avoid into big-tech surveillance capitalism. Noob : But I mean they're all just URLs, right? EFV3 : Burn the witch! EFV4 : Unclean! Noob : Oh, I guess you don't want me to do this? EFV5 : Never! Noob : Shouldn't you post the rules somewhere? I mean, lots of people are already doing this. EFV6 : Defederate his instance! Discussion This scenario is happening really a lot, multiple times per week in December/January 2022-3. At the moment, the Fediverse privacy story is unsatisfactory. Unless a user really understands the visibility levels, every post they make instantly becomes part of the permanent indelible Internet memory. There are no technical and very few legal barriers to prevent anyone from doing anything with retrieved post content. In developed societies, when there are behaviors that are logistically possible but society would like to regulate, legal tools are frequently applied. Examples would be dangerous driving and public smoking. A content-licensing framework for the Fediverse could include some or all of the following: Prevent access to posts without the accessor having somehow acknowledged the content license that applies. Build a menu of content-license choices, probably starting from a Creative Commons basis. One parameter of the content licenses should be temporal; i.e., license access to posts but only for two weeks (or some other interval). Make it easy and straightforward for individuals posting to the Fediverse to pick a default content license for their posts, and also to apply other licensing choices to individual posts. Arrange that when one user follows another, the following user must acknowledge the default content licensing options of the followed user. Since most users will just take the defaults, each instance should carefully choose and prominently display its content-licensing defaults. I note that this document template comes with a carefully-considered Creative Commons license. Do not the contributions of the humans who are enriching the Fediverse deserve a comparable level of protection? Caveat Note that establishing a legal content-licensing framework will not prevent certain bad actors from scraping the Fediverse and mis-using the harvested data. That's OK because it will establish a legal framework that will present a significant barrier to commercial data harvesters, and provide a tool to combat certain classes of mis-use. See also: Eugen Rochko, Cage the Mastodon in particular \"Design Decisions\" @pamela@bsd.network, Hacky folks, please resist finding ways to scrape the fediverse\u2026. GitHub discussion, Controlling availability to search Tim Bray Private and Public Mastodon \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-c118: Content licensing support"},{"location":"fep/fep-c118/#fep-c118-content-licensing-support","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-c118: Content licensing support"},{"location":"fep/fep-c118/#summary","text":"Currently, popular Fediverse software does very little to establish the legal status of posts. Controversy over indexing and scraping the Fediverse is common. The hope is that providing a legal framework to express the desires of users as to how their content may be re-used might bring order to this debate.","title":"Summary"},{"location":"fep/fep-c118/#scenario","text":"Dramatis Personae: * A somewhat-technical new Fediverse arrival, hereinafter Noob * Existing Fediverse Voices, hereinafer EFV1 , EFV2 , etc Noob : Hey, I want to crawl the Fediverse and build an index so we can\u2026 EFV1 : Stop! Go back! Don't! EFV2 : We prefer not to do that here because we want to avoid into big-tech surveillance capitalism. Noob : But I mean they're all just URLs, right? EFV3 : Burn the witch! EFV4 : Unclean! Noob : Oh, I guess you don't want me to do this? EFV5 : Never! Noob : Shouldn't you post the rules somewhere? I mean, lots of people are already doing this. EFV6 : Defederate his instance!","title":"Scenario"},{"location":"fep/fep-c118/#discussion","text":"This scenario is happening really a lot, multiple times per week in December/January 2022-3. At the moment, the Fediverse privacy story is unsatisfactory. Unless a user really understands the visibility levels, every post they make instantly becomes part of the permanent indelible Internet memory. There are no technical and very few legal barriers to prevent anyone from doing anything with retrieved post content. In developed societies, when there are behaviors that are logistically possible but society would like to regulate, legal tools are frequently applied. Examples would be dangerous driving and public smoking. A content-licensing framework for the Fediverse could include some or all of the following: Prevent access to posts without the accessor having somehow acknowledged the content license that applies. Build a menu of content-license choices, probably starting from a Creative Commons basis. One parameter of the content licenses should be temporal; i.e., license access to posts but only for two weeks (or some other interval). Make it easy and straightforward for individuals posting to the Fediverse to pick a default content license for their posts, and also to apply other licensing choices to individual posts. Arrange that when one user follows another, the following user must acknowledge the default content licensing options of the followed user. Since most users will just take the defaults, each instance should carefully choose and prominently display its content-licensing defaults. I note that this document template comes with a carefully-considered Creative Commons license. Do not the contributions of the humans who are enriching the Fediverse deserve a comparable level of protection?","title":"Discussion"},{"location":"fep/fep-c118/#caveat","text":"Note that establishing a legal content-licensing framework will not prevent certain bad actors from scraping the Fediverse and mis-using the harvested data. That's OK because it will establish a legal framework that will present a significant barrier to commercial data harvesters, and provide a tool to combat certain classes of mis-use.","title":"Caveat"},{"location":"fep/fep-c118/#see-also","text":"Eugen Rochko, Cage the Mastodon in particular \"Design Decisions\" @pamela@bsd.network, Hacky folks, please resist finding ways to scrape the fediverse\u2026. GitHub discussion, Controlling availability to search Tim Bray Private and Public Mastodon","title":"See also:"},{"location":"fep/fep-c118/#_1","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-c16b/","text":"FEP-c16b: MFM\u6a5f\u80fd\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u6982\u8981 \u3053\u306e FEP \u3067\u306f\u3001\u30ab\u30b9\u30bf\u30e0\u30af\u30e9\u30b9\u3068 [data-* \u5c5e\u6027] \u3092\u4f7f\u7528\u3057\u305f HTML \u3092\u4f7f\u7528\u3057\u3066 ActivityPub \u6295\u7a3f\u30b3\u30f3\u30c6\u30f3\u30c4\u3067 MFM \u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3059\u308b\u65b9\u6cd5\u3092\u63a8\u5968\u3057\u3066\u3044\u307e\u3059\u3002\u3055\u3089\u306b\u3001\u3053\u306e FEP \u3067\u306f\u3001\u3053\u306e HTML \u8868\u73fe\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059\u65b0\u3057\u3044\u62e1\u5f35\u7528\u8a9e\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002 \u6839\u62e0 \u3053\u306e\u6587\u66f8\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u300cMUST\u300d\u3001\u300cMUST NOT\u300d\u3001\u300cREQUIRED\u300d\u3001\u300cSHALL\u300d\u3001\u300cSHALL NOT\u300d\u3001\u300cSHOULD\u300d\u3001\u300cSHOULD NOT\u300d\u3001\u300cRECOMMENDED\u300d\u3001\u300cMAY\u300d\u3001\u304a\u3088\u3073\u300cOPTIONAL\u300d\u306f\u3001 RFC-2119 \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002\u300cFediverse \u5b9f\u88c5\u300d\u307e\u305f\u306f\u300c\u5b9f\u88c5\u300d\u306f\u3001 ActivityPub \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001ActivityPub \u6e96\u62e0\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3001ActivityPub \u6e96\u62e0\u306e\u30b5\u30fc\u30d0\u30fc\u3001\u307e\u305f\u306f ActivityPub \u6e96\u62e0\u306e\u9023\u5408\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 \u8b1d\u8f9e (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) \u3053\u306eFEP\u306e\u6838\u3068\u306a\u308b\u30a2\u30a4\u30c7\u30a2\u306f\u3001Foundkey issue tracker [1]\u306eJohan150\u306b\u3088\u308b\u3082\u306e\u3067\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u30ab\u30b9\u30bf\u30e0\u30af\u30e9\u30b9\u3068 data-* \u5c5e\u6027\u3092\u6301\u3064 span \u8981\u7d20\u3092\u4f7f\u3063\u3066HTML\u3067MFM\u95a2\u6570\u3092\u8868\u73fe\u3059\u308b\u63d0\u6848\u3067\u3059\u3002 \u6b74\u53f2 (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Fediverse \u5b9f\u88c5\u3067\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b\u3068\u3057\u3066\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u8a00\u8a9e\u3092\u8a31\u53ef\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u3002\u3053\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u7d71\u5408\u306f\u3001\u901a\u5e38\u3001\u3053\u306e\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u3092\u5225\u306e\u5b9f\u88c5\u304c\u7c21\u5358\u306b\u7406\u89e3\u3067\u304d\u308b\u9069\u5207\u306a HTML \u8868\u73fe\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u307e\u3059\u3002\u3053\u306e HTML \u8868\u73fe\u306f\u3001 ActivityStreams \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e content \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f7f\u7528\u3057\u3066 ActivityPub \u4e0a\u3067\u7d71\u5408\u3055\u308c\u307e\u3059\u3002\u4e00\u65b9\u3001ActivityPub \u306b\u3088\u3063\u3066\u8ffd\u52a0\u3055\u308c\u305f source \u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u5143\u306e\u5165\u529b\u3068\u5165\u529b\u5f62\u5f0f\u3092\u63d0\u4f9b\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 Misskey \u306f\u72ec\u81ea\u306e Markup language For Misskey (MFM \u3068\u3082\u547c\u3070\u308c\u308b) \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002MFM \u306f\u4e3b\u306b HTML\u3001Markdown\u3001Katex\u3001\u304a\u3088\u3073 $[name content] \u5f62\u5f0f\u306e\u30ab\u30b9\u30bf\u30e0 MFM \u95a2\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e MFM \u95a2\u6570\u306e\u610f\u56f3\u3092\u9069\u5207\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u901a\u5e38\u3001\u8907\u96d1\u306aCSS\u3084Javascript\u304c\u5fc5\u8981\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001 content \u3067\u306f\u7c21\u7565\u5316\u3055\u308c\u305f HTML\u8868\u73fe\u306e\u307f\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u8868\u73fe\u3067\u306f\u591a\u304f\u306e\u60c5\u5831\u304c\u524a\u9664\u3055\u308c\u308b\u305f\u3081\u3001\u53d7\u4fe1\u5074\u306e\u5b9f\u88c5\u3067\u306f\u4f5c\u6210\u8005\u304c\u4f1d\u3048\u3088\u3046\u3068\u3057\u305f\u5185\u5bb9\u3092\u5e38\u306b\u9069\u5207\u306b\u8868\u793a\u3067\u304d\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002MFM\u3092\u6b63\u3057\u304f\u8868\u793a\u3057\u305f\u3044\u53d7\u4fe1\u5074\u306e\u5b9f\u88c5\u306e\u552f\u4e00\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001 mediaType \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u304c text/x.misskeymarkdown \u306e\u5834\u5408\u306b source \u30d7\u30ed\u30d1\u30c6\u30a3\u306e content \u3092\u518d\u89e3\u6790\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4e0d\u8981\u306a\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u767a\u751f\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u7279\u306b 2 \u3064\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u30d1\u30fc\u30b5\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u4e92\u63db\u6027\u306e\u554f\u984c\u3082\u767a\u751f\u3057\u307e\u3059\u3002 MFM\u6a5f\u80fd (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) MFM\u6a5f\u80fd\u306f\u3001\u540d\u524d\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u5024\u3092\u6301\u3064\u5834\u5408\u3068\u6301\u305f\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u4e00\u3064\u4ee5\u4e0a\u306e\u5c5e\u6027\u3001\u53ca\u3073\u30b3\u30f3\u30c6\u30f3\u30c4\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\u5f62\u5f0f\u306f $[name.attribute1,attribute2=value content] \u3067\u3059\u3002 \u4f8b (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) $[x2 Misskey expands the world of the Fediverse] $[jelly.speed=2s Misskey expands the world of the Fediverse] $[spin.x,speed=0.5s Misskey expands the world of the Fediverse] MFM \u6a5f\u80fd\u306e HTML \u8868\u73fe HTML \u3067 MFM \u95a2\u6570\u3092\u8868\u3059\u5834\u5408\u3001 span \u8981\u7d20\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 span \u8981\u7d20\u306b\u306f\u3001 MFM \u95a2\u6570\u306e\u540d\u524d\u3067\u3042\u308b\u30af\u30e9\u30b9\u304c\u5fc5\u8981\u3067\u3059\u3002MFM \u95a2\u6570\u306b\u5c5e\u6027\u304c\u3042\u308b\u5834\u5408\u3001\u8981\u7d20\u306b\u306f\u5404\u5c5e\u6027\u306e\u5c5e\u6027\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u8a72\u5f53\u3059\u308b\u5c5e\u6027\u306e\u540d\u524d\u3067\u3059\u3002MFM \u95a2\u6570\u306e\u5c5e\u6027\u306b\u5024\u304c\u3042\u308b\u5834\u5408\u3001\u5c5e\u6027\u306b\u306f\u540c\u3058\u5024\u304c\u5fc5\u8981\u3067\u3059\u3002 mfm-name``name``span``data-*``data-mfm-attributename``attributename``data-* \u4f8b (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) \u3053\u308c\u306b\u3088\u308a\u3001\u524d\u306e\u4f8b\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 <span class=\"mfm-x2\">Misskey expands the world of the Fediverse</span> <span class=\"mfm-jelly\" data-mfm-speed=\"2s\">Misskey expands the world of the Fediverse</span> <span class=\"mfm-flip\" data-mfm-x data-mfm-speed=\"0.5s\">Misskey expands the world of the Fediverse</span> \u305d\u306e\u4ed6\u306eMFM\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u3053\u306e FEP \u306f MFM \u6a5f\u80fd\u306e\u8868\u73fe\u306b\u91cd\u70b9\u3092\u7f6e\u3044\u3066\u3044\u307e\u3059\u304c\u3001MFM \u306f\u3053\u308c\u3089\u306e MFM \u6a5f\u80fd\u3060\u3051\u3067\u69cb\u6210\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 content \u30d7\u30ed\u30d1\u30c6\u30a3\u5185\u306e HTML \u8868\u73fe\u306f\u3001\u53d7\u4fe1\u5074\u306e\u5b9f\u88c5\u304c MFM \u304c\u4f1d\u3048\u308b\u5185\u5bb9\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u6b63\u78ba\u304b\u3064\u5b8c\u5168\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 HTML \u3068 Markdown \u306f\u3001 content \u30d7\u30ed\u30d1\u30c6\u30a3\u5185\u3067\u4e00\u822c\u7684\u306b\u6b63\u3057\u304f\u8868\u73fe\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3061\u3089\u3082 Fediverse \u3067\u5e83\u304f\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001MFM \u95a2\u6570\u3068\u540c\u3058\u610f\u5473\u3067\u306f\u554f\u984c\u3068\u306f\u898b\u306a\u3055\u308c\u307e\u305b\u3093\u3002 Katex \u306f\u3001\u4e00\u822c\u7684\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u9069\u5207\u306b\u8868\u73fe\u3055\u308c\u306a\u3044\u3068\u3044\u3046\u540c\u3058\u554f\u984c\u3092\u62b1\u3048\u3066\u3044\u307e\u3059content\u3002 Katex \u5165\u529b\u3092 HTML \u3068\u3057\u3066\u9069\u5207\u306b\u8868\u73fe\u3059\u308b\u306b\u306f\u3001 FEP-dc88 \u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u767a\u898b (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) MFM \u5bfe\u5fdc\u3060\u304c FEP-c16b \u975e\u6e96\u62e0\u306e\u5b9f\u88c5\u3068\u306e\u4e92\u63db\u6027\u304c\u5fc5\u8981\u306a\u5834\u5408\u3001 \"mediaType\": \"text/x.misskeymarkdown\" \u3092\u4f7f\u7528\u3057\u3066 source \u3092\u9023\u5408\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u65b9\u3001\u3053\u306e\u5b9f\u88c5\u304b\u3089\u306e\u53d7\u4fe1\u30bd\u30fc\u30b9\u306f\u518d\u89e3\u6790\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001 content \u3092\u76f4\u63a5\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u3092 FEP-c16b \u6e96\u62e0\u306e\u5b9f\u88c5\u306b\u901a\u77e5\u3059\u308b\u305f\u3081\u306e\u691c\u51fa\u30e1\u30ab\u30cb\u30ba\u30e0\u304c\u5fc5\u8981\u3067\u3059\u3002 \u3053\u306e\u76ee\u7684\u306e\u305f\u3081\u306b\u3001 FEP-888d \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u65b0\u3057\u3044\u62e1\u5f35\u7528\u8a9e\u304c\u63d0\u6848\u3055\u308c\u3066\u3044\u307e\u3059\u3002 htmlMfm content \u304cFEP-c16b\u306b\u6e96\u62e0\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059\u305f\u3081\u306b\u3001\u5b9f\u88c5\u3067\u306f htmlMfm \u304c true \u306a\u5024\u3092\u6301\u3064\u62e1\u5f35\u9805\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 content \u304cFEP-c16b\u306b\u6e96\u62e0\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5b9f\u88c5\u3067\u306f htmlMfm \u5024\u3092\u6301\u3064\u62e1\u5f35\u9805\u3092\u4f7f\u7528\u3057\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u304c\u3001 htmlMfm \u5024\u3092\u6301\u3064\u62e1\u5f35\u9805\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u8aac\u660e: content \u304cFEP-c16b\u306b\u6e96\u62e0\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059\u30d5\u30e9\u30b0 URI: https://w3id.org/fep/c16b#htmlMfm \u30c9\u30e1\u30a4\u30f3: as:Object \u7bc4\u56f2: \u30d6\u30fc\u30eb\u5024 \u4f8b (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"htmlMfm\": \"https://w3id.org/fep/c16b#htmlMfm\" } ], \"content\": \"<span class=\\\"mfm-spin\\\" data-mfm-x data-mfm-speed=\\\"0.5s\\\">Misskey expands the world of the Fediverse</span>\", \"source\": { \"content\": \"$[spin.x,speed=0.5s Misskey expands the world of the Fediverse]\", \"mediaType\": \"text/x.misskeymarkdown\" }, \"htmlMfm\": true } \u53c2\u8003\u6587\u732e [data-* attributes]: Part of the HTML Living Standard [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [1] Johan150, Federate MFM in content field using HTML , 2023 [ActivityStreams] James M Snell, Evan Prodromou, ActivityStreams 2.0 , 2017 [Markup language For Misskey], MFM [FEP-dc88] Calvin Lee, FEP-dc88: Formatting Mathematics , 2023 [FEP-888d] a, FEP-888d: Using https://w3id.org/fep as a base for FEP-specific namespaces , 2023 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-c16b: MFM\u6a5f\u80fd\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"fep/fep-c16b/#fep-c16b-mfm","text":"","title":"FEP-c16b: MFM\u6a5f\u80fd\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8"},{"location":"fep/fep-c16b/#_1","text":"\u3053\u306e FEP \u3067\u306f\u3001\u30ab\u30b9\u30bf\u30e0\u30af\u30e9\u30b9\u3068 [data-* \u5c5e\u6027] \u3092\u4f7f\u7528\u3057\u305f HTML \u3092\u4f7f\u7528\u3057\u3066 ActivityPub \u6295\u7a3f\u30b3\u30f3\u30c6\u30f3\u30c4\u3067 MFM \u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3059\u308b\u65b9\u6cd5\u3092\u63a8\u5968\u3057\u3066\u3044\u307e\u3059\u3002\u3055\u3089\u306b\u3001\u3053\u306e FEP \u3067\u306f\u3001\u3053\u306e HTML \u8868\u73fe\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059\u65b0\u3057\u3044\u62e1\u5f35\u7528\u8a9e\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002","title":"\u6982\u8981"},{"location":"fep/fep-c16b/#_2","text":"\u3053\u306e\u6587\u66f8\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u300cMUST\u300d\u3001\u300cMUST NOT\u300d\u3001\u300cREQUIRED\u300d\u3001\u300cSHALL\u300d\u3001\u300cSHALL NOT\u300d\u3001\u300cSHOULD\u300d\u3001\u300cSHOULD NOT\u300d\u3001\u300cRECOMMENDED\u300d\u3001\u300cMAY\u300d\u3001\u304a\u3088\u3073\u300cOPTIONAL\u300d\u306f\u3001 RFC-2119 \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002\u300cFediverse \u5b9f\u88c5\u300d\u307e\u305f\u306f\u300c\u5b9f\u88c5\u300d\u306f\u3001 ActivityPub \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001ActivityPub \u6e96\u62e0\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3001ActivityPub \u6e96\u62e0\u306e\u30b5\u30fc\u30d0\u30fc\u3001\u307e\u305f\u306f ActivityPub \u6e96\u62e0\u306e\u9023\u5408\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002","title":"\u6839\u62e0"},{"location":"fep/fep-c16b/#_3","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) \u3053\u306eFEP\u306e\u6838\u3068\u306a\u308b\u30a2\u30a4\u30c7\u30a2\u306f\u3001Foundkey issue tracker [1]\u306eJohan150\u306b\u3088\u308b\u3082\u306e\u3067\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u30ab\u30b9\u30bf\u30e0\u30af\u30e9\u30b9\u3068 data-* \u5c5e\u6027\u3092\u6301\u3064 span \u8981\u7d20\u3092\u4f7f\u3063\u3066HTML\u3067MFM\u95a2\u6570\u3092\u8868\u73fe\u3059\u308b\u63d0\u6848\u3067\u3059\u3002","title":"\u8b1d\u8f9e"},{"location":"fep/fep-c16b/#_4","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Fediverse \u5b9f\u88c5\u3067\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b\u3068\u3057\u3066\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u8a00\u8a9e\u3092\u8a31\u53ef\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u3002\u3053\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u7d71\u5408\u306f\u3001\u901a\u5e38\u3001\u3053\u306e\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u3092\u5225\u306e\u5b9f\u88c5\u304c\u7c21\u5358\u306b\u7406\u89e3\u3067\u304d\u308b\u9069\u5207\u306a HTML \u8868\u73fe\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u307e\u3059\u3002\u3053\u306e HTML \u8868\u73fe\u306f\u3001 ActivityStreams \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e content \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f7f\u7528\u3057\u3066 ActivityPub \u4e0a\u3067\u7d71\u5408\u3055\u308c\u307e\u3059\u3002\u4e00\u65b9\u3001ActivityPub \u306b\u3088\u3063\u3066\u8ffd\u52a0\u3055\u308c\u305f source \u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u5143\u306e\u5165\u529b\u3068\u5165\u529b\u5f62\u5f0f\u3092\u63d0\u4f9b\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 Misskey \u306f\u72ec\u81ea\u306e Markup language For Misskey (MFM \u3068\u3082\u547c\u3070\u308c\u308b) \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002MFM \u306f\u4e3b\u306b HTML\u3001Markdown\u3001Katex\u3001\u304a\u3088\u3073 $[name content] \u5f62\u5f0f\u306e\u30ab\u30b9\u30bf\u30e0 MFM \u95a2\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e MFM \u95a2\u6570\u306e\u610f\u56f3\u3092\u9069\u5207\u306b\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u901a\u5e38\u3001\u8907\u96d1\u306aCSS\u3084Javascript\u304c\u5fc5\u8981\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001 content \u3067\u306f\u7c21\u7565\u5316\u3055\u308c\u305f HTML\u8868\u73fe\u306e\u307f\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u8868\u73fe\u3067\u306f\u591a\u304f\u306e\u60c5\u5831\u304c\u524a\u9664\u3055\u308c\u308b\u305f\u3081\u3001\u53d7\u4fe1\u5074\u306e\u5b9f\u88c5\u3067\u306f\u4f5c\u6210\u8005\u304c\u4f1d\u3048\u3088\u3046\u3068\u3057\u305f\u5185\u5bb9\u3092\u5e38\u306b\u9069\u5207\u306b\u8868\u793a\u3067\u304d\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002MFM\u3092\u6b63\u3057\u304f\u8868\u793a\u3057\u305f\u3044\u53d7\u4fe1\u5074\u306e\u5b9f\u88c5\u306e\u552f\u4e00\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001 mediaType \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u304c text/x.misskeymarkdown \u306e\u5834\u5408\u306b source \u30d7\u30ed\u30d1\u30c6\u30a3\u306e content \u3092\u518d\u89e3\u6790\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4e0d\u8981\u306a\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u767a\u751f\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u7279\u306b 2 \u3064\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u30d1\u30fc\u30b5\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u4e92\u63db\u6027\u306e\u554f\u984c\u3082\u767a\u751f\u3057\u307e\u3059\u3002","title":"\u6b74\u53f2"},{"location":"fep/fep-c16b/#mfm","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) MFM\u6a5f\u80fd\u306f\u3001\u540d\u524d\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u5024\u3092\u6301\u3064\u5834\u5408\u3068\u6301\u305f\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u4e00\u3064\u4ee5\u4e0a\u306e\u5c5e\u6027\u3001\u53ca\u3073\u30b3\u30f3\u30c6\u30f3\u30c4\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\u5f62\u5f0f\u306f $[name.attribute1,attribute2=value content] \u3067\u3059\u3002","title":"MFM\u6a5f\u80fd"},{"location":"fep/fep-c16b/#_5","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) $[x2 Misskey expands the world of the Fediverse] $[jelly.speed=2s Misskey expands the world of the Fediverse] $[spin.x,speed=0.5s Misskey expands the world of the Fediverse]","title":"\u4f8b"},{"location":"fep/fep-c16b/#mfm-html","text":"HTML \u3067 MFM \u95a2\u6570\u3092\u8868\u3059\u5834\u5408\u3001 span \u8981\u7d20\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 span \u8981\u7d20\u306b\u306f\u3001 MFM \u95a2\u6570\u306e\u540d\u524d\u3067\u3042\u308b\u30af\u30e9\u30b9\u304c\u5fc5\u8981\u3067\u3059\u3002MFM \u95a2\u6570\u306b\u5c5e\u6027\u304c\u3042\u308b\u5834\u5408\u3001\u8981\u7d20\u306b\u306f\u5404\u5c5e\u6027\u306e\u5c5e\u6027\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u8a72\u5f53\u3059\u308b\u5c5e\u6027\u306e\u540d\u524d\u3067\u3059\u3002MFM \u95a2\u6570\u306e\u5c5e\u6027\u306b\u5024\u304c\u3042\u308b\u5834\u5408\u3001\u5c5e\u6027\u306b\u306f\u540c\u3058\u5024\u304c\u5fc5\u8981\u3067\u3059\u3002 mfm-name``name``span``data-*``data-mfm-attributename``attributename``data-*","title":"MFM \u6a5f\u80fd\u306e HTML \u8868\u73fe"},{"location":"fep/fep-c16b/#_6","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) \u3053\u308c\u306b\u3088\u308a\u3001\u524d\u306e\u4f8b\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 <span class=\"mfm-x2\">Misskey expands the world of the Fediverse</span> <span class=\"mfm-jelly\" data-mfm-speed=\"2s\">Misskey expands the world of the Fediverse</span> <span class=\"mfm-flip\" data-mfm-x data-mfm-speed=\"0.5s\">Misskey expands the world of the Fediverse</span>","title":"\u4f8b"},{"location":"fep/fep-c16b/#mfm_1","text":"\u3053\u306e FEP \u306f MFM \u6a5f\u80fd\u306e\u8868\u73fe\u306b\u91cd\u70b9\u3092\u7f6e\u3044\u3066\u3044\u307e\u3059\u304c\u3001MFM \u306f\u3053\u308c\u3089\u306e MFM \u6a5f\u80fd\u3060\u3051\u3067\u69cb\u6210\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 content \u30d7\u30ed\u30d1\u30c6\u30a3\u5185\u306e HTML \u8868\u73fe\u306f\u3001\u53d7\u4fe1\u5074\u306e\u5b9f\u88c5\u304c MFM \u304c\u4f1d\u3048\u308b\u5185\u5bb9\u3092\u6b63\u3057\u304f\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u6b63\u78ba\u304b\u3064\u5b8c\u5168\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 HTML \u3068 Markdown \u306f\u3001 content \u30d7\u30ed\u30d1\u30c6\u30a3\u5185\u3067\u4e00\u822c\u7684\u306b\u6b63\u3057\u304f\u8868\u73fe\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3061\u3089\u3082 Fediverse \u3067\u5e83\u304f\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001MFM \u95a2\u6570\u3068\u540c\u3058\u610f\u5473\u3067\u306f\u554f\u984c\u3068\u306f\u898b\u306a\u3055\u308c\u307e\u305b\u3093\u3002 Katex \u306f\u3001\u4e00\u822c\u7684\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u9069\u5207\u306b\u8868\u73fe\u3055\u308c\u306a\u3044\u3068\u3044\u3046\u540c\u3058\u554f\u984c\u3092\u62b1\u3048\u3066\u3044\u307e\u3059content\u3002 Katex \u5165\u529b\u3092 HTML \u3068\u3057\u3066\u9069\u5207\u306b\u8868\u73fe\u3059\u308b\u306b\u306f\u3001 FEP-dc88 \u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u305d\u306e\u4ed6\u306eMFM\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"},{"location":"fep/fep-c16b/#_7","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) MFM \u5bfe\u5fdc\u3060\u304c FEP-c16b \u975e\u6e96\u62e0\u306e\u5b9f\u88c5\u3068\u306e\u4e92\u63db\u6027\u304c\u5fc5\u8981\u306a\u5834\u5408\u3001 \"mediaType\": \"text/x.misskeymarkdown\" \u3092\u4f7f\u7528\u3057\u3066 source \u3092\u9023\u5408\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u65b9\u3001\u3053\u306e\u5b9f\u88c5\u304b\u3089\u306e\u53d7\u4fe1\u30bd\u30fc\u30b9\u306f\u518d\u89e3\u6790\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001 content \u3092\u76f4\u63a5\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u3092 FEP-c16b \u6e96\u62e0\u306e\u5b9f\u88c5\u306b\u901a\u77e5\u3059\u308b\u305f\u3081\u306e\u691c\u51fa\u30e1\u30ab\u30cb\u30ba\u30e0\u304c\u5fc5\u8981\u3067\u3059\u3002 \u3053\u306e\u76ee\u7684\u306e\u305f\u3081\u306b\u3001 FEP-888d \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u65b0\u3057\u3044\u62e1\u5f35\u7528\u8a9e\u304c\u63d0\u6848\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u767a\u898b"},{"location":"fep/fep-c16b/#htmlmfm","text":"content \u304cFEP-c16b\u306b\u6e96\u62e0\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059\u305f\u3081\u306b\u3001\u5b9f\u88c5\u3067\u306f htmlMfm \u304c true \u306a\u5024\u3092\u6301\u3064\u62e1\u5f35\u9805\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 content \u304cFEP-c16b\u306b\u6e96\u62e0\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5b9f\u88c5\u3067\u306f htmlMfm \u5024\u3092\u6301\u3064\u62e1\u5f35\u9805\u3092\u4f7f\u7528\u3057\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u304c\u3001 htmlMfm \u5024\u3092\u6301\u3064\u62e1\u5f35\u9805\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u8aac\u660e: content \u304cFEP-c16b\u306b\u6e96\u62e0\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059\u30d5\u30e9\u30b0 URI: https://w3id.org/fep/c16b#htmlMfm \u30c9\u30e1\u30a4\u30f3: as:Object \u7bc4\u56f2: \u30d6\u30fc\u30eb\u5024","title":"htmlMfm"},{"location":"fep/fep-c16b/#_8","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"htmlMfm\": \"https://w3id.org/fep/c16b#htmlMfm\" } ], \"content\": \"<span class=\\\"mfm-spin\\\" data-mfm-x data-mfm-speed=\\\"0.5s\\\">Misskey expands the world of the Fediverse</span>\", \"source\": { \"content\": \"$[spin.x,speed=0.5s Misskey expands the world of the Fediverse]\", \"mediaType\": \"text/x.misskeymarkdown\" }, \"htmlMfm\": true }","title":"\u4f8b"},{"location":"fep/fep-c16b/#_9","text":"[data-* attributes]: Part of the HTML Living Standard [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [1] Johan150, Federate MFM in content field using HTML , 2023 [ActivityStreams] James M Snell, Evan Prodromou, ActivityStreams 2.0 , 2017 [Markup language For Misskey], MFM [FEP-dc88] Calvin Lee, FEP-dc88: Formatting Mathematics , 2023 [FEP-888d] a, FEP-888d: Using https://w3id.org/fep as a base for FEP-specific namespaces , 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-c16b/#_10","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-c390/","text":"FEP-c390: Identity Proofs Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This proposal describes a mechanism of creating verifiable links between Decentralized Identifiers and ActivityPub actor profiles. Potential applications include: identity verification, end-to-end encryption and account migrations. History Mastodon implemented identity proofs in 2019. Keybase platform was used as an identity provider, but the integration was later removed . Keyoxide can create off-protocol identity proofs for Fediverse profiles using OpenPGP . Identity proofs Identity proof is a JSON document that represents a verifiable bi-directional link between a Decentralized Identifier and an ActivityPub actor. It MUST contain the following properties: type (REQUIRED): the type property MUST contain the string VerifiableIdentityStatement . subject (REQUIRED): the decentralized identifier (DID) that represents a cryptographic key belonging to an actor. alsoKnownAs (REQUIRED): the value of this property MUST match the actor ID. proof (REQUIRED): the data integrity proof, as defined by Data Integrity specification. The document MAY contain additional properties. Identity proofs SHOULD be attached to an actor object, under the attachment property. Proof generation The identity proof document MUST contain a data integrity proof, which includes a cryptographic proof and parameters required to verify it. It MUST be created according to the Data Integrity specification, section 4.3 Add Proof . The value of verificationMethod property of the data integrity proof MUST match the value of subject property of the identity proof document. The resulting data integrity proof MUST be added to identity proof document under the proof key. Example of an actor object linked to a did:key identifier: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\", \"https://w3id.org/security/data-integrity/v1\", \"https://w3id.org/fep/c390\" ], \"type\": \"Person\", \"id\": \"https://server.example/users/alice\", \"inbox\": \"https://server.example/users/alice/inbox\", \"outbox\": \"https://server.example/users/alice/outbox\", \"attachment\": [ { \"type\": \"VerifiableIdentityStatement\", \"subject\": \"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\", \"alsoKnownAs\": \"https://server.example/users/alice\", \"proof\": { \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"created\": \"2023-02-24T23:36:38Z\", \"verificationMethod\": \"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\" } } ] } WARNING: The example above uses eddsa-jcs-2022 cryptosuite, which doesn't have stable specification. Proof verification The consuming implementations MUST check the authenticity of identity proof document by verifying its data integrity proof. If the proof can not be verified, or if the value of verificationMethod property of the data integrity proof doesn't match the value of subject property of the identity proof, or if the value of alsoKnownAs property of the identity proof doesn't match the actor ID, the identity proof MUST be discarded. Verification process MUST follow the Data Integrity specification, section 4.5 Verify Proof . Linking identities The consuming implementations SHOULD treat identities denoted by subject and alsoKnownAs properties of identity proof as belonging to the same entity. If two actors have identity proofs with the same subject property, they SHOULD be treated as different identities of the same entity. Implementation notes Servers MUST present identity proofs to clients in their original form. Clients MAY perform independent verification of identity proofs if needed. Test vectors TBD \u5b9f\u88c5 Mitra \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Manu Sporny, Dave Longley, Markus Sabadell, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0 , 2022 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2022 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-c390: Identity Proofs"},{"location":"fep/fep-c390/#fep-c390-identity-proofs","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-c390: Identity Proofs"},{"location":"fep/fep-c390/#summary","text":"This proposal describes a mechanism of creating verifiable links between Decentralized Identifiers and ActivityPub actor profiles. Potential applications include: identity verification, end-to-end encryption and account migrations.","title":"Summary"},{"location":"fep/fep-c390/#history","text":"Mastodon implemented identity proofs in 2019. Keybase platform was used as an identity provider, but the integration was later removed . Keyoxide can create off-protocol identity proofs for Fediverse profiles using OpenPGP .","title":"History"},{"location":"fep/fep-c390/#identity-proofs","text":"Identity proof is a JSON document that represents a verifiable bi-directional link between a Decentralized Identifier and an ActivityPub actor. It MUST contain the following properties: type (REQUIRED): the type property MUST contain the string VerifiableIdentityStatement . subject (REQUIRED): the decentralized identifier (DID) that represents a cryptographic key belonging to an actor. alsoKnownAs (REQUIRED): the value of this property MUST match the actor ID. proof (REQUIRED): the data integrity proof, as defined by Data Integrity specification. The document MAY contain additional properties. Identity proofs SHOULD be attached to an actor object, under the attachment property.","title":"Identity proofs"},{"location":"fep/fep-c390/#proof-generation","text":"The identity proof document MUST contain a data integrity proof, which includes a cryptographic proof and parameters required to verify it. It MUST be created according to the Data Integrity specification, section 4.3 Add Proof . The value of verificationMethod property of the data integrity proof MUST match the value of subject property of the identity proof document. The resulting data integrity proof MUST be added to identity proof document under the proof key. Example of an actor object linked to a did:key identifier: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\", \"https://w3id.org/security/data-integrity/v1\", \"https://w3id.org/fep/c390\" ], \"type\": \"Person\", \"id\": \"https://server.example/users/alice\", \"inbox\": \"https://server.example/users/alice/inbox\", \"outbox\": \"https://server.example/users/alice/outbox\", \"attachment\": [ { \"type\": \"VerifiableIdentityStatement\", \"subject\": \"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\", \"alsoKnownAs\": \"https://server.example/users/alice\", \"proof\": { \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"created\": \"2023-02-24T23:36:38Z\", \"verificationMethod\": \"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\" } } ] } WARNING: The example above uses eddsa-jcs-2022 cryptosuite, which doesn't have stable specification.","title":"Proof generation"},{"location":"fep/fep-c390/#proof-verification","text":"The consuming implementations MUST check the authenticity of identity proof document by verifying its data integrity proof. If the proof can not be verified, or if the value of verificationMethod property of the data integrity proof doesn't match the value of subject property of the identity proof, or if the value of alsoKnownAs property of the identity proof doesn't match the actor ID, the identity proof MUST be discarded. Verification process MUST follow the Data Integrity specification, section 4.5 Verify Proof .","title":"Proof verification"},{"location":"fep/fep-c390/#linking-identities","text":"The consuming implementations SHOULD treat identities denoted by subject and alsoKnownAs properties of identity proof as belonging to the same entity. If two actors have identity proofs with the same subject property, they SHOULD be treated as different identities of the same entity.","title":"Linking identities"},{"location":"fep/fep-c390/#implementation-notes","text":"Servers MUST present identity proofs to clients in their original form. Clients MAY perform independent verification of identity proofs if needed.","title":"Implementation notes"},{"location":"fep/fep-c390/#test-vectors","text":"TBD","title":"Test vectors"},{"location":"fep/fep-c390/#_1","text":"Mitra","title":"\u5b9f\u88c5"},{"location":"fep/fep-c390/#_2","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Manu Sporny, Dave Longley, Markus Sabadell, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0 , 2022 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2022","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-c390/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-c4ad/","text":"FEP-c4ad: Viewership History Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This document proposes a standard for managing viewership history across the Fediverse. It addresses the common issue of posts being repeatedly shown to users on different clients. The goal is to enable servers to track which posts have been viewed by individual users and ensure that clients do not display these posts again. This proposal aims to enhance user experience by preventing the redundant display of already seen posts, commonly requested as \"Hide already seen posts\" or \"stop repeating already seen posts\". Creating a Viewership Record When a user views a post, the server should create a record of this event. This record will include the following properties: id (REQUIRED): the unique identifier of the viewership record. type (REQUIRED): the type of the object MUST be ViewershipRecord . actor (REQUIRED): the actor who viewed the post. object (REQUIRED): the unique identifier of the post that was viewed. published (RECOMMENDED): the date and time at which the post was viewed. Querying Viewership Records Clients should query the server for viewership records to determine whether a post has been viewed by the user. The server should provide an endpoint for clients to fetch viewership records for a specific user. Handling Viewed Posts When fetching posts, clients must filter out posts that have been viewed by the user based on the viewership records. This ensures that users are not shown the same posts repeatedly. Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Viewership History"},{"location":"fep/fep-c4ad/#fep-c4ad-viewership-history","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-c4ad: Viewership History"},{"location":"fep/fep-c4ad/#summary","text":"This document proposes a standard for managing viewership history across the Fediverse. It addresses the common issue of posts being repeatedly shown to users on different clients. The goal is to enable servers to track which posts have been viewed by individual users and ensure that clients do not display these posts again. This proposal aims to enhance user experience by preventing the redundant display of already seen posts, commonly requested as \"Hide already seen posts\" or \"stop repeating already seen posts\".","title":"Summary"},{"location":"fep/fep-c4ad/#creating-a-viewership-record","text":"When a user views a post, the server should create a record of this event. This record will include the following properties: id (REQUIRED): the unique identifier of the viewership record. type (REQUIRED): the type of the object MUST be ViewershipRecord . actor (REQUIRED): the actor who viewed the post. object (REQUIRED): the unique identifier of the post that was viewed. published (RECOMMENDED): the date and time at which the post was viewed.","title":"Creating a Viewership Record"},{"location":"fep/fep-c4ad/#querying-viewership-records","text":"Clients should query the server for viewership records to determine whether a post has been viewed by the user. The server should provide an endpoint for clients to fetch viewership records for a specific user.","title":"Querying Viewership Records"},{"location":"fep/fep-c4ad/#handling-viewed-posts","text":"When fetching posts, clients must filter out posts that have been viewed by the user based on the viewership records. This ensures that users are not shown the same posts repeatedly.","title":"Handling Viewed Posts"},{"location":"fep/fep-c4ad/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-c551/","text":"FEP-c551: Use ECMAScript Modules to Create Conformance Tests for Fediverse Enhancement Proposals Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This is a proposal to enhance the fediverse by creating test cases for FEPs as ECMAScript Modules. Contents Context Test Specifications Test Modules Test Objects Test Functions Test Inputs Test Results Context FEP-d9ad proposes to Create Conformance Tests for Fediverse Enhancement Proposals, and specifies components that all Conformance Tests may use and describe in their Test Specifications. It does not specify a format for implementing FEP-d9ad Conformance Tests in any programming language. This FEP-c551 proposes to supplement human-readable FEP-d9ad Conformance Tests with implementations of the test as Test Objects exported from Test Modules . Each Test Object has a run function parameterized by a [Test Input] and returning a Promise of a Test Result . Overview When a tester comes up with a new test for a FEP, they create a human-readable Test Specification describing how to test whether some subject conforms to the FEP. ECMAScript developers implement Test Specifications as automatable code by using ECMAScript to create Test Functions that execute the test logic and Test Objects that group the Test Function with more info like the test's name, required input, and possible outcomes. Test Objects are distributed in ECMAScript Modules published on the web, e.g. in .js or .mjs files. Testers invoke the Test Function once for each Test Input, await any returned Promises, and receive a Test Result describing the outcome of running the test. Test Specifications Test Specifications are human-readable documents that specify the behavior of a test. Test Specifications SHOULD include Conformance Test Component specifications from FEP-d9ad . An example of a test specification is fep-521a-test-case.md . Test Modules FEP testers MAY publish implementations of their test specifications as an ECMAScript Module following the recommendations in this proposal. Such modules may be referred to as Test Modules. Test Modules SHOULD have no imports. This is to ensure portability of the test modules. Test Modules MAY export a default export object that is a Test Object Test Modules SHOULD be resilient to being parsed and evaluated in various ECMAScript runtimes (e.g. node.js or a web browser like Firefox). An example of a test module can be found in activitypub-testing-fep-521a . Example Test Module export default { name: 'invalid script module name', run: (input) => ({ outcome: 'passed' }), type: ['https://w3id.org/fep/c551#Test'], '@context': [\"https://www.w3.org/ns/activitystreams\"], } Test Objects Test Objects are ECMAScript Objects that represent a named, runnable test, e.g. a test specified by a FEP-d9ad Conformance Test . Test Objects MUST have a property named type whose value is either the string https://w3id.org/fep/c551#Test or an Array containing that string. Test Objects MUST have a property named name whose value is a string. Test Objects SHOULD have a property named @context whose value is an Array containing https://www.w3.org/ns/activitystreams . An example of a test object is exported in activitypub-testing-fep-521a . Test Objects SHOULD have a property named run whose value is a Test Function ]. Test Functions Test Object run calls SHOULD return a Promise that resolves to a Test Result . Test Object run functions SHOULD be resilient to being run in various ECMAScript runtimes (e.g. node.js or a web browser like Firefox). Test Inputs A Test Input is the first parameter to a test's run function. Test Input MUST be an object. A test with several logically distinct inputs should give each input a name, and add each named input as a property within a top-level input object. Test Input values SHOULD conform to the specification of the called test's Input spec. Test Results Test Results MUST have a property named outcome whose value is a string. Test Results SHOULD have a property named info whose value is a string. Test Results MAY have a property named pointer that contextualizes the outcome , e.g. an object with a property for each value that led to the outcome . For example, if a test outcome is failed because some number was too low, you can set the result info to \"number too low\" and pointer to { number: 100 } . Conformance requirements are indicated by sentences containing MUST a la RFC2119 . \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-c551: Use ECMAScript Modules to Create Conformance Tests for Fediverse Enhancement Proposals"},{"location":"fep/fep-c551/#fep-c551-use-ecmascript-modules-to-create-conformance-tests-for-fediverse-enhancement-proposals","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-c551: Use ECMAScript Modules to Create Conformance Tests for Fediverse Enhancement Proposals"},{"location":"fep/fep-c551/#summary","text":"This is a proposal to enhance the fediverse by creating test cases for FEPs as ECMAScript Modules.","title":"Summary"},{"location":"fep/fep-c551/#contents","text":"Context Test Specifications Test Modules Test Objects Test Functions Test Inputs Test Results","title":"Contents"},{"location":"fep/fep-c551/#context","text":"FEP-d9ad proposes to Create Conformance Tests for Fediverse Enhancement Proposals, and specifies components that all Conformance Tests may use and describe in their Test Specifications. It does not specify a format for implementing FEP-d9ad Conformance Tests in any programming language. This FEP-c551 proposes to supplement human-readable FEP-d9ad Conformance Tests with implementations of the test as Test Objects exported from Test Modules . Each Test Object has a run function parameterized by a [Test Input] and returning a Promise of a Test Result .","title":"Context"},{"location":"fep/fep-c551/#overview","text":"When a tester comes up with a new test for a FEP, they create a human-readable Test Specification describing how to test whether some subject conforms to the FEP. ECMAScript developers implement Test Specifications as automatable code by using ECMAScript to create Test Functions that execute the test logic and Test Objects that group the Test Function with more info like the test's name, required input, and possible outcomes. Test Objects are distributed in ECMAScript Modules published on the web, e.g. in .js or .mjs files. Testers invoke the Test Function once for each Test Input, await any returned Promises, and receive a Test Result describing the outcome of running the test.","title":"Overview"},{"location":"fep/fep-c551/#test-specifications","text":"Test Specifications are human-readable documents that specify the behavior of a test. Test Specifications SHOULD include Conformance Test Component specifications from FEP-d9ad . An example of a test specification is fep-521a-test-case.md .","title":"Test Specifications"},{"location":"fep/fep-c551/#test-modules","text":"FEP testers MAY publish implementations of their test specifications as an ECMAScript Module following the recommendations in this proposal. Such modules may be referred to as Test Modules. Test Modules SHOULD have no imports. This is to ensure portability of the test modules. Test Modules MAY export a default export object that is a Test Object Test Modules SHOULD be resilient to being parsed and evaluated in various ECMAScript runtimes (e.g. node.js or a web browser like Firefox). An example of a test module can be found in activitypub-testing-fep-521a .","title":"Test Modules"},{"location":"fep/fep-c551/#example-test-module","text":"export default { name: 'invalid script module name', run: (input) => ({ outcome: 'passed' }), type: ['https://w3id.org/fep/c551#Test'], '@context': [\"https://www.w3.org/ns/activitystreams\"], }","title":"Example Test Module"},{"location":"fep/fep-c551/#test-objects","text":"Test Objects are ECMAScript Objects that represent a named, runnable test, e.g. a test specified by a FEP-d9ad Conformance Test . Test Objects MUST have a property named type whose value is either the string https://w3id.org/fep/c551#Test or an Array containing that string. Test Objects MUST have a property named name whose value is a string. Test Objects SHOULD have a property named @context whose value is an Array containing https://www.w3.org/ns/activitystreams . An example of a test object is exported in activitypub-testing-fep-521a . Test Objects SHOULD have a property named run whose value is a Test Function ].","title":"Test Objects"},{"location":"fep/fep-c551/#test-functions","text":"Test Object run calls SHOULD return a Promise that resolves to a Test Result . Test Object run functions SHOULD be resilient to being run in various ECMAScript runtimes (e.g. node.js or a web browser like Firefox).","title":"Test Functions"},{"location":"fep/fep-c551/#test-inputs","text":"A Test Input is the first parameter to a test's run function. Test Input MUST be an object. A test with several logically distinct inputs should give each input a name, and add each named input as a property within a top-level input object. Test Input values SHOULD conform to the specification of the called test's Input spec.","title":"Test Inputs"},{"location":"fep/fep-c551/#test-results","text":"Test Results MUST have a property named outcome whose value is a string. Test Results SHOULD have a property named info whose value is a string. Test Results MAY have a property named pointer that contextualizes the outcome , e.g. an object with a property for each value that led to the outcome . For example, if a test outcome is failed because some number was too low, you can set the result info to \"number too low\" and pointer to { number: 100 } . Conformance requirements are indicated by sentences containing MUST a la RFC2119 .","title":"Test Results"},{"location":"fep/fep-c551/#_1","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-c5a1/","text":"FEP-c5a1: To-do's Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This document describes an implementation of simple to-do's or tasks based on ActivityPub protocol and Valueflows vocabulary. A to-do is a simple work commitment, and can be created for oneself or another person. Optionally, when the to-do is done, that can be recorded also. History This is a parallel submission to FEP-3264 Federated Work Coordination , which supports much more complex project or production planning. Both planning submissions continue the idea of Valueflows extensions to ActivityPub/ActivityStreams based on use case, started by silverpill with FEP-0837 Federated Marketplace . Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Creating a to-do A to-do is implemented as a Valueflows Commitment . Consuming implementations which don't have planning features MAY display plan-related objects similarly to Note objects. In all cases, the objects can also be discussed using Note objects and replyTo . Valueflows defines a commitment is defined as A planned economic flow that has been promised by an agent to another agent. id (REQUIRED): the commitment's unique global identifier. type (REQUIRED): the type of the object MUST be Commitment . attributedTo (REQUIRED): the actor who published the commitment. published (RECOMMENDED): the date and time at which the commitment was published. resourceConformsTo (OPTIONAL): the skill or type of work involved. Could be any URI. effortQuantity (OPTIONAL): the estimated or expected amount and unit of the work. This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. provider (RECOMMENDED): the actor who commits to providing the resource, including doing the work. If not included, it is assumed to be the to actor. receiver (RECOMMENDED): the actor who will be receiving the resource. If not included, it is assumed to be the attributedTo actor. content (RECOMMENDED): the description of what is to be done. The type of content SHOULD be text/html . to (REQUIRED): the audience of the commitment. Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Commitment\": \"vf:Commitment\", \"receiver\": \"vf:receiver\", \"provider\": \"vf:provider\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"effortQuantity\": \"vf:effortQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Create\", \"id\": \"https://project.example/activities/ad2f7ee1-6567-413e-a10b-72650cbdc788/create\", \"actor\": \"https://project.example/actors/alice\", \"object\": { \"type\": \"Commitment\", \"id\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-4dkjh8w32e59\", \"attributedTo\": \"https://project.example/actors/alice\", \"content\": \"Please proofread the document at https://project.example/docs/45, and let me know what you think could be improved.\", \"published\": \"2024-05-18T19:22:03.918737Z\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q834191\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"2\" }, \"provider\": \"https://project.example/actors/bob\", \"receiver\": \"https://project.example/actors/alice\" }, \"to\": \"https://project.example/actors/bob\" } Accepting a To-do Accepting or rejecting a to-do is OPTIONAL for this FEP, although it may be required based on the understanding between the actors. The object of Accept activity MUST be the id of the Commitment object previously sent to the actor. Activity MAY contain content property for further coordination. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Accept\", \"id\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-9kh93jcmljei\", \"actor\": \"https://project.example/actors/bob\", \"object\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-4dkjh8w32e59\", \"content\": \"Should be done within a couple days.\", \"to\": \"https://project.example/actors/alice\" } Rejecting a To-do Accepting or rejecting a to-do is OPTIONAL for this FEP, although it may be required based on the understanding between the actors. The object of Reject activity MUST be the id of the Commitment object previously sent to the actor. Activity MAY contain content property indicating the reason for rejection. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Reject\", \"id\": \"https://project.example/todos/8c05f97f-1531-4b70-9ca8-4ee4a09f36a3\", \"actor\": \"https://project.example/actors/bob\", \"object\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-4dkjh8w32e59\", \"content\": \"Sorry, my schedule is full for a month.\", \"to\": \"https://project.example/actors/alice\" } Recording what actually was done Recording what was done is OPTIONAL for the FEP, although it may be required by the actors involved. Actual economic activity is represented with an EconomicEvent in Valueflows. In the case of to-do's, it would only occur in response to an earlier to-do commitment. More than one EconomicEvent can be recorded for one Commitment to-do. The representation of an economic event is a JSON document with the following properties: id (REQUIRED): the economic event's unique global identifier. type (REQUIRED): the type of the object SHOULD be EconomicEvent . If interoperability with other ActivityPub services is desirable, implementers MAY also use object types from Activity Vocabulary , such as Note . attributedTo (REQUIRED): the actor who published the economic event. content (OPTIONAL): the description of the economic event or communication about the economic event. The type of content SHOULD be text/html . published (RECOMMENDED): the date and time at which the economic event was published. to (REQUIRED): the audience of the economic event. fulfills (REQUIRED): the commitment the economic event is completely or partially fulfilling. resourceConformsTo (OPTIONAL): the type of an economic resource (for to-do's, can be a skill or type of work). Could be any URI. It does not have to match the commitment, but if not included, can be assumed it is the same. effortQuantity (OPTIONAL): the amount and unit of the work done (for to-do's, usually a time quantity). This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. provider (RECOMMENDED): the actor who commits to doing the work. If not included, it is assumed to be the attributedTo actor. receiver (RECOMMENDED): the actor who will be receiving the benefit. If not included, it is assumed to be the to actor. finished (OPTIONAL): set to true if this economic event completes the commitment, or the commitment is no longer open for some reason. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"EconomicEvent\": \"vf:EconomicEvent\", \"fulfills\": \"vf:fulfills\", \"receiver\": \"vf:receiver\", \"provider\": \"vf:provider\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"effortQuantity\": \"vf:effortQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\", \"finished\": \"vf:finished\" } ], \"type\": \"Create\", \"id\": \"https://project.example/activities/ad2f7ee1-6567-413e-a10b-72650cbdc932/create\", \"actor\": \"https://project.example/actors/bob\", \"object\": { \"type\": \"EconomicEvent\", \"id\": \"https://project.example/inputs/ad2f7ee1-6567-413e-a10b-72650cbdc932\", \"attributedTo\": \"https://project.example/actors/bob\", \"published\": \"2024-10-21T14:16:41.843794Z\", \"fulfills\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-4dkjh8w32e59\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q3485549\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"1.5\" }, \"provider\": \"https://project.example/actors/bob\", \"receiver\": \"https://project.example/actors/alice\", \"finished\": true }, \"to\": \"https://project.example/actors/alice\" } The Commitment can alternatively be marked as finished , without recording an EconomicEvent . This could occur in cases where no work will be done, or work was done but will not be recorded, or some work was recorded earlier without marking the to-do finished . So, finished does not imply that the to-do was done, only that it is not waiting to be done any more. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Commitment\": \"vf:Commitment\", \"finished\": \"vf:finished\" } ], \"type\": \"Update\", \"id\": \"https://project.example/activities/ad2f7ee1-6567-413e-a10b-72650cbdc932/update\", \"actor\": \"https://project.example/actors/alice\", \"object\": { \"type\": \"Commitment\", \"id\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-4dkjh8w32e59\", \"attributedTo\": \"https://project.example/actors/alice\", \"published\": \"2024-10-24T16:16:41.843794Z\", \"finished\": true }, \"to\": \"https://project.example/actors/alice\" } \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Valueflows] Lynn Foster, elf Pavlik, Bob Haugen Valueflows , 2024 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 [Activity Vocabulary] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [Ontology of units of Measure] Hajo Rijgersberg, Don Willems, Xin-Ying Ren, Mari Wigham, Jan Top, Ontology of units of Measure , 2017 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-c5a1: To-do's"},{"location":"fep/fep-c5a1/#fep-c5a1-to-dos","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-c5a1: To-do's"},{"location":"fep/fep-c5a1/#summary","text":"This document describes an implementation of simple to-do's or tasks based on ActivityPub protocol and Valueflows vocabulary. A to-do is a simple work commitment, and can be created for oneself or another person. Optionally, when the to-do is done, that can be recorded also.","title":"Summary"},{"location":"fep/fep-c5a1/#history","text":"This is a parallel submission to FEP-3264 Federated Work Coordination , which supports much more complex project or production planning. Both planning submissions continue the idea of Valueflows extensions to ActivityPub/ActivityStreams based on use case, started by silverpill with FEP-0837 Federated Marketplace .","title":"History"},{"location":"fep/fep-c5a1/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-c5a1/#creating-a-to-do","text":"A to-do is implemented as a Valueflows Commitment . Consuming implementations which don't have planning features MAY display plan-related objects similarly to Note objects. In all cases, the objects can also be discussed using Note objects and replyTo . Valueflows defines a commitment is defined as A planned economic flow that has been promised by an agent to another agent. id (REQUIRED): the commitment's unique global identifier. type (REQUIRED): the type of the object MUST be Commitment . attributedTo (REQUIRED): the actor who published the commitment. published (RECOMMENDED): the date and time at which the commitment was published. resourceConformsTo (OPTIONAL): the skill or type of work involved. Could be any URI. effortQuantity (OPTIONAL): the estimated or expected amount and unit of the work. This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. provider (RECOMMENDED): the actor who commits to providing the resource, including doing the work. If not included, it is assumed to be the to actor. receiver (RECOMMENDED): the actor who will be receiving the resource. If not included, it is assumed to be the attributedTo actor. content (RECOMMENDED): the description of what is to be done. The type of content SHOULD be text/html . to (REQUIRED): the audience of the commitment. Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Commitment\": \"vf:Commitment\", \"receiver\": \"vf:receiver\", \"provider\": \"vf:provider\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"effortQuantity\": \"vf:effortQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\" } ], \"type\": \"Create\", \"id\": \"https://project.example/activities/ad2f7ee1-6567-413e-a10b-72650cbdc788/create\", \"actor\": \"https://project.example/actors/alice\", \"object\": { \"type\": \"Commitment\", \"id\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-4dkjh8w32e59\", \"attributedTo\": \"https://project.example/actors/alice\", \"content\": \"Please proofread the document at https://project.example/docs/45, and let me know what you think could be improved.\", \"published\": \"2024-05-18T19:22:03.918737Z\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q834191\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"2\" }, \"provider\": \"https://project.example/actors/bob\", \"receiver\": \"https://project.example/actors/alice\" }, \"to\": \"https://project.example/actors/bob\" }","title":"Creating a to-do"},{"location":"fep/fep-c5a1/#accepting-a-to-do","text":"Accepting or rejecting a to-do is OPTIONAL for this FEP, although it may be required based on the understanding between the actors. The object of Accept activity MUST be the id of the Commitment object previously sent to the actor. Activity MAY contain content property for further coordination. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Accept\", \"id\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-9kh93jcmljei\", \"actor\": \"https://project.example/actors/bob\", \"object\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-4dkjh8w32e59\", \"content\": \"Should be done within a couple days.\", \"to\": \"https://project.example/actors/alice\" }","title":"Accepting a To-do"},{"location":"fep/fep-c5a1/#rejecting-a-to-do","text":"Accepting or rejecting a to-do is OPTIONAL for this FEP, although it may be required based on the understanding between the actors. The object of Reject activity MUST be the id of the Commitment object previously sent to the actor. Activity MAY contain content property indicating the reason for rejection. Example: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Reject\", \"id\": \"https://project.example/todos/8c05f97f-1531-4b70-9ca8-4ee4a09f36a3\", \"actor\": \"https://project.example/actors/bob\", \"object\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-4dkjh8w32e59\", \"content\": \"Sorry, my schedule is full for a month.\", \"to\": \"https://project.example/actors/alice\" }","title":"Rejecting a To-do"},{"location":"fep/fep-c5a1/#recording-what-actually-was-done","text":"Recording what was done is OPTIONAL for the FEP, although it may be required by the actors involved. Actual economic activity is represented with an EconomicEvent in Valueflows. In the case of to-do's, it would only occur in response to an earlier to-do commitment. More than one EconomicEvent can be recorded for one Commitment to-do. The representation of an economic event is a JSON document with the following properties: id (REQUIRED): the economic event's unique global identifier. type (REQUIRED): the type of the object SHOULD be EconomicEvent . If interoperability with other ActivityPub services is desirable, implementers MAY also use object types from Activity Vocabulary , such as Note . attributedTo (REQUIRED): the actor who published the economic event. content (OPTIONAL): the description of the economic event or communication about the economic event. The type of content SHOULD be text/html . published (RECOMMENDED): the date and time at which the economic event was published. to (REQUIRED): the audience of the economic event. fulfills (REQUIRED): the commitment the economic event is completely or partially fulfilling. resourceConformsTo (OPTIONAL): the type of an economic resource (for to-do's, can be a skill or type of work). Could be any URI. It does not have to match the commitment, but if not included, can be assumed it is the same. effortQuantity (OPTIONAL): the amount and unit of the work done (for to-do's, usually a time quantity). This is an object with two properties: hasUnit (REQUIRED): name of the unit, according to Ontology of units of Measure classification. hasNumericalValue (REQUIRED): amount of the resource. provider (RECOMMENDED): the actor who commits to doing the work. If not included, it is assumed to be the attributedTo actor. receiver (RECOMMENDED): the actor who will be receiving the benefit. If not included, it is assumed to be the to actor. finished (OPTIONAL): set to true if this economic event completes the commitment, or the commitment is no longer open for some reason. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"EconomicEvent\": \"vf:EconomicEvent\", \"fulfills\": \"vf:fulfills\", \"receiver\": \"vf:receiver\", \"provider\": \"vf:provider\", \"resourceConformsTo\": \"vf:resourceConformsTo\", \"effortQuantity\": \"vf:effortQuantity\", \"hasUnit\": \"om2:hasUnit\", \"hasNumericalValue\": \"om2:hasNumericalValue\", \"finished\": \"vf:finished\" } ], \"type\": \"Create\", \"id\": \"https://project.example/activities/ad2f7ee1-6567-413e-a10b-72650cbdc932/create\", \"actor\": \"https://project.example/actors/bob\", \"object\": { \"type\": \"EconomicEvent\", \"id\": \"https://project.example/inputs/ad2f7ee1-6567-413e-a10b-72650cbdc932\", \"attributedTo\": \"https://project.example/actors/bob\", \"published\": \"2024-10-21T14:16:41.843794Z\", \"fulfills\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-4dkjh8w32e59\", \"resourceConformsTo\": \"https://www.wikidata.org/wiki/Q3485549\", \"effortQuantity\": { \"hasUnit\": \"hour\", \"hasNumericalValue\": \"1.5\" }, \"provider\": \"https://project.example/actors/bob\", \"receiver\": \"https://project.example/actors/alice\", \"finished\": true }, \"to\": \"https://project.example/actors/alice\" } The Commitment can alternatively be marked as finished , without recording an EconomicEvent . This could occur in cases where no work will be done, or work was done but will not be recorded, or some work was recorded earlier without marking the to-do finished . So, finished does not imply that the to-do was done, only that it is not waiting to be done any more. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\", \"vf\": \"https://w3id.org/valueflows/ont/vf#\", \"Commitment\": \"vf:Commitment\", \"finished\": \"vf:finished\" } ], \"type\": \"Update\", \"id\": \"https://project.example/activities/ad2f7ee1-6567-413e-a10b-72650cbdc932/update\", \"actor\": \"https://project.example/actors/alice\", \"object\": { \"type\": \"Commitment\", \"id\": \"https://project.example/todos/ddde9d6f-6f3b-4770-a966-4dkjh8w32e59\", \"attributedTo\": \"https://project.example/actors/alice\", \"published\": \"2024-10-24T16:16:41.843794Z\", \"finished\": true }, \"to\": \"https://project.example/actors/alice\" }","title":"Recording what actually was done"},{"location":"fep/fep-c5a1/#_1","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [Valueflows] Lynn Foster, elf Pavlik, Bob Haugen Valueflows , 2024 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 [Activity Vocabulary] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [Ontology of units of Measure] Hajo Rijgersberg, Don Willems, Xin-Ying Ren, Mari Wigham, Jan Top, Ontology of units of Measure , 2017","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-c5a1/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-c648/","text":"FEP-c648: Blocked Collection Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Users need to review and revise the list of actors they have blocked. This FEP proposes a new collection property, the Blocked Collection, which contains the actors that a user has blocked and all metadata about the Block activity. History The [ActivityPub] specification defines a Block activity, which is used to block an actor. However, the specification does not define an efficient way to retrieve the list of actors that a user has blocked. The followers and following collection properties of an actor hold objects in the actor's social graph. [activitypub-express] implements a blocked property in the streams collection of an actor, including the blocked objects only. The developers' experience was that storing objects only made it hard to Undo a block, since the full Activity object's id is needed. Metadata about the block activity, such as the date, is also lost. In this proposal, the blocked collection holds Block activities. Details The blocked property of an actor is a collection of Block activities, also known as a 'blocklist'. The blocked property MUST be an OrderedCollection or a Collection . The blocked collection SHOULD include all Block activities by the actor, except for those that have been reverted by an Undo activity. Each activity in the blocked collection MUST be unique. The blocked collection MUST be sorted in reverse chronological order, with the most recent activity first. Context The context document for the blocked property is as follows: { \"@context\": { \"bl\": \"https://purl.archive.org/socialweb/blocked#\", \"blocked\": { \"@id\": \"bl:blocked\", \"@type\": \"@id\" } } } The context document is available at the URL https://purl.archive.org/socialweb/blocked . \u4f8b A publisher can include the blocked collection in the properties of an actor. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/blocked\" ], \"id\": \"https://example.com/evanp\", \"type\": \"Person\", \"name\": \"Evan Prodromou\", \"inbox\": \"https://example.com/evanp/inbox\", \"outbox\": \"https://example.com/evanp/outbox\", \"following\": \"https://example.com/evanp/following\", \"followers\": \"https://example.com/evanp/followers\", \"liked\": \"https://example.com/evanp/liked\", \"blocked\": \"https://example.com/evanp/blocked\" } Retrieving the blocked collection would provide a list of Block activities. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/blocked\", {\"custom\": \"https://example.com/ns/custom\"} ], \"id\": \"https://example.com/evanp/blocked\", \"type\": \"OrderedCollection\", \"name\": \"Evan Prodromou's Blocked Collection\", \"orderedItems\": [ { \"type\": \"Block\", \"id\": https://example.com/evanp/block/2\", \"object\": { \"type\": \"Person\", \"id\": \"https://spam.example/spammer\", \"name\": \"Irritating Spammer\" }, \"published\": \"2023-04-15T00:00:00Z\" }, { \"type\": [\"custom:Disallow\", \"Block\"], \"id\": https://example.com/evanp/block/2\", \"object\": { \"type\": \"Application\", \"id\": \"https://alarmclock.example/alarmclock\", \"name\": \"Badly-Behaved Alarm Clock App\" }, \"published\": \"2022-12-25T00:00:00Z\" } ] } Note that the second, earlier activity has two type values; one is Block and the other is a custom activity type defined in its own namespace. Security considerations The blocked collection is very sensitive. Actors on the blocked list may be harassing or abusive. If they find themselves on a user's blocklist, they may retaliate against the user. Consequently, the blocked collection SHOULD NOT be publicly readable. By default, implementations SHOULD NOT allow read access to the blocked collection to any actor other than the user that owns the collection. Some users may want to share their blocklist with other actors. Shared blocklists are an important tool for user safety on monolithic social networks and on the social web. Implementations MAY allow a user to share their blocked collection with other actors. Implementations SHOULD inform the user of the risks of sharing their blocklist with the wrong actors. \u5b9f\u88c5 The [onepage.pub] server implements the blocked collection. \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [onepage.pub] Evan Prodromou, onepage.pub , 2023 activitypub-express \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-c648: Blocked Collection"},{"location":"fep/fep-c648/#fep-c648-blocked-collection","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-c648: Blocked Collection"},{"location":"fep/fep-c648/#summary","text":"Users need to review and revise the list of actors they have blocked. This FEP proposes a new collection property, the Blocked Collection, which contains the actors that a user has blocked and all metadata about the Block activity.","title":"Summary"},{"location":"fep/fep-c648/#history","text":"The [ActivityPub] specification defines a Block activity, which is used to block an actor. However, the specification does not define an efficient way to retrieve the list of actors that a user has blocked. The followers and following collection properties of an actor hold objects in the actor's social graph. [activitypub-express] implements a blocked property in the streams collection of an actor, including the blocked objects only. The developers' experience was that storing objects only made it hard to Undo a block, since the full Activity object's id is needed. Metadata about the block activity, such as the date, is also lost. In this proposal, the blocked collection holds Block activities.","title":"History"},{"location":"fep/fep-c648/#details","text":"The blocked property of an actor is a collection of Block activities, also known as a 'blocklist'. The blocked property MUST be an OrderedCollection or a Collection . The blocked collection SHOULD include all Block activities by the actor, except for those that have been reverted by an Undo activity. Each activity in the blocked collection MUST be unique. The blocked collection MUST be sorted in reverse chronological order, with the most recent activity first.","title":"Details"},{"location":"fep/fep-c648/#context","text":"The context document for the blocked property is as follows: { \"@context\": { \"bl\": \"https://purl.archive.org/socialweb/blocked#\", \"blocked\": { \"@id\": \"bl:blocked\", \"@type\": \"@id\" } } } The context document is available at the URL https://purl.archive.org/socialweb/blocked .","title":"Context"},{"location":"fep/fep-c648/#_1","text":"A publisher can include the blocked collection in the properties of an actor. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/blocked\" ], \"id\": \"https://example.com/evanp\", \"type\": \"Person\", \"name\": \"Evan Prodromou\", \"inbox\": \"https://example.com/evanp/inbox\", \"outbox\": \"https://example.com/evanp/outbox\", \"following\": \"https://example.com/evanp/following\", \"followers\": \"https://example.com/evanp/followers\", \"liked\": \"https://example.com/evanp/liked\", \"blocked\": \"https://example.com/evanp/blocked\" } Retrieving the blocked collection would provide a list of Block activities. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/blocked\", {\"custom\": \"https://example.com/ns/custom\"} ], \"id\": \"https://example.com/evanp/blocked\", \"type\": \"OrderedCollection\", \"name\": \"Evan Prodromou's Blocked Collection\", \"orderedItems\": [ { \"type\": \"Block\", \"id\": https://example.com/evanp/block/2\", \"object\": { \"type\": \"Person\", \"id\": \"https://spam.example/spammer\", \"name\": \"Irritating Spammer\" }, \"published\": \"2023-04-15T00:00:00Z\" }, { \"type\": [\"custom:Disallow\", \"Block\"], \"id\": https://example.com/evanp/block/2\", \"object\": { \"type\": \"Application\", \"id\": \"https://alarmclock.example/alarmclock\", \"name\": \"Badly-Behaved Alarm Clock App\" }, \"published\": \"2022-12-25T00:00:00Z\" } ] } Note that the second, earlier activity has two type values; one is Block and the other is a custom activity type defined in its own namespace.","title":"\u4f8b"},{"location":"fep/fep-c648/#security-considerations","text":"The blocked collection is very sensitive. Actors on the blocked list may be harassing or abusive. If they find themselves on a user's blocklist, they may retaliate against the user. Consequently, the blocked collection SHOULD NOT be publicly readable. By default, implementations SHOULD NOT allow read access to the blocked collection to any actor other than the user that owns the collection. Some users may want to share their blocklist with other actors. Shared blocklists are an important tool for user safety on monolithic social networks and on the social web. Implementations MAY allow a user to share their blocked collection with other actors. Implementations SHOULD inform the user of the risks of sharing their blocklist with the wrong actors.","title":"Security considerations"},{"location":"fep/fep-c648/#_2","text":"The [onepage.pub] server implements the blocked collection.","title":"\u5b9f\u88c5"},{"location":"fep/fep-c648/#_3","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [onepage.pub] Evan Prodromou, onepage.pub , 2023 activitypub-express","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-c648/#_4","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-c7d3/","text":"FEP-c7d3: Ownership Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary In this document we discuss the concept of ownership, as applied to ActivityPub objects. [!WARNING] This FEP has been superseded by FEP-fe34 . Rationale ActivityPub standard does not specify authentication and authorization mechanisms. Many implementations use actor and attributedTo properties (defined in Activity Vocabulary ) to determine the validity of activities and objects. This proposal attempts to formalize the current practices and provide guidance for implementers. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Ownership Ownership is indicated by a property of an ActivityPub object. The name of this property differs depending on the object type: Owner of an actor is indicated by its id property. Activities have an actor property, which describes the actor that performed the activity. This actor is considered to be the owner of the activity. An object (that is, not an actor and not an activity) can have an attributedTo property, which describes the actor to which the object is attributed. This actor is considered to be the owner of the object. Public keys and verification methods have owner and controller properties. The owner of an object MUST be an actor. [!WARNING] According to Activity Vocabulary , actor and attributedTo properties can contain references to multiple actors. These scenarios are not covered by this document and implementers are expected to determine the appropriate authentication and authorization procedures on a case-by-case basis. [!NOTE] In subsequent sections, \"objects\" and \"activities\" will be referred to as simply \"objects\". Origin Object identifiers are grouped together into protection domains called \"origins\". This concept is similar to the \"web origin\" concept described in RFC-6454 , and origins of object IDs are computed by the same algorithm. The same-origin policy determines when a relationship between objects can be trusted. [!NOTE] There might be other ways to establish trust, but they are not covered by this document. Identifiers and ownership Identifier of an object and identifier of its owner MUST have the same origin. Authentication The object is considered authentic if any of the following conditions are met: It was fetched from the location that has the same origin as its owner's ID. It was delivered to inbox and the POST request contained a valid HTTP signature created using a key whose owner has the same origin as the object owner. It contains a valid FEP-8b32 integrity proof created using a key whose owner has the same origin as the object owner. If it is embedded within another object, and its owner has the same origin as the owner of the containing object. If none of these conditions are met, the object MUST be discarded. If signature verification is performed, the key owner SHOULD match the object owner. [!NOTE] In some cases, consumers can process unauthenticated objects if the risk is deemed acceptable. Delivered to inbox If the object was delivered to inbox and its authentication fails, the recipient SHOULD fetch it and repeat the authentication procedure. Emdedded objects If the embedded and the containing objects have owners with different origins, the authenticity of the embedded object MUST be verified independently either by fetching it from the server of origin, or by verifying its FEP-8b32 integrity proof. Anonymous objects An object without an ID can only exist when embedded within another object. It has the same owner as the parent object and it is considered authentic when the parent object is authentic. Unattributed objects An object without an explicit owner is owned by the server. Such object MUST be considered authentic only if fetched from the location that has the same origin as its ID. Authorization The actor that creates the object MUST be its owner. If activity modifies or deletes an object, its owner SHOULD match the object's owner. If owners are different, their IDs MUST have the same origin. Examples: Create , Update and Delete activities, and objects indicated by their object property SHOULD have the same owner. Undo activity and object indicated by its object property SHOULD have the same owner. Add and Remove activities, and objects indicated by their target property SHOULD have the same owner. Announce and Like activities don't modify objects indicated by their object property, therefore their owners can be different. Ownership transfer When ownership changes, the new owner ID MUST have the same origin as the old owner ID. Access control When a protected object is fetched, the GET request MUST contain a HTTP signature created using a key whose owner SHOULD belong to object's intended audience. If key owner doesn't belong to intended audience, its ID MUST have the same origin as one of the actors in object's intended audience. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 A. Barth, The Web Origin Concept , 2011 silverpill, FEP-8b32: Object Integrity Proofs , 2022 Ryan Barrett, nightpool, ActivityPub and HTTP Signatures , 2024 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-c7d3: Ownership"},{"location":"fep/fep-c7d3/#fep-c7d3-ownership","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-c7d3: Ownership"},{"location":"fep/fep-c7d3/#summary","text":"In this document we discuss the concept of ownership, as applied to ActivityPub objects. [!WARNING] This FEP has been superseded by FEP-fe34 .","title":"Summary"},{"location":"fep/fep-c7d3/#rationale","text":"ActivityPub standard does not specify authentication and authorization mechanisms. Many implementations use actor and attributedTo properties (defined in Activity Vocabulary ) to determine the validity of activities and objects. This proposal attempts to formalize the current practices and provide guidance for implementers.","title":"Rationale"},{"location":"fep/fep-c7d3/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-c7d3/#ownership","text":"Ownership is indicated by a property of an ActivityPub object. The name of this property differs depending on the object type: Owner of an actor is indicated by its id property. Activities have an actor property, which describes the actor that performed the activity. This actor is considered to be the owner of the activity. An object (that is, not an actor and not an activity) can have an attributedTo property, which describes the actor to which the object is attributed. This actor is considered to be the owner of the object. Public keys and verification methods have owner and controller properties. The owner of an object MUST be an actor. [!WARNING] According to Activity Vocabulary , actor and attributedTo properties can contain references to multiple actors. These scenarios are not covered by this document and implementers are expected to determine the appropriate authentication and authorization procedures on a case-by-case basis. [!NOTE] In subsequent sections, \"objects\" and \"activities\" will be referred to as simply \"objects\".","title":"Ownership"},{"location":"fep/fep-c7d3/#origin","text":"Object identifiers are grouped together into protection domains called \"origins\". This concept is similar to the \"web origin\" concept described in RFC-6454 , and origins of object IDs are computed by the same algorithm. The same-origin policy determines when a relationship between objects can be trusted. [!NOTE] There might be other ways to establish trust, but they are not covered by this document.","title":"Origin"},{"location":"fep/fep-c7d3/#identifiers-and-ownership","text":"Identifier of an object and identifier of its owner MUST have the same origin.","title":"Identifiers and ownership"},{"location":"fep/fep-c7d3/#authentication","text":"The object is considered authentic if any of the following conditions are met: It was fetched from the location that has the same origin as its owner's ID. It was delivered to inbox and the POST request contained a valid HTTP signature created using a key whose owner has the same origin as the object owner. It contains a valid FEP-8b32 integrity proof created using a key whose owner has the same origin as the object owner. If it is embedded within another object, and its owner has the same origin as the owner of the containing object. If none of these conditions are met, the object MUST be discarded. If signature verification is performed, the key owner SHOULD match the object owner. [!NOTE] In some cases, consumers can process unauthenticated objects if the risk is deemed acceptable.","title":"Authentication"},{"location":"fep/fep-c7d3/#delivered-to-inbox","text":"If the object was delivered to inbox and its authentication fails, the recipient SHOULD fetch it and repeat the authentication procedure.","title":"Delivered to inbox"},{"location":"fep/fep-c7d3/#emdedded-objects","text":"If the embedded and the containing objects have owners with different origins, the authenticity of the embedded object MUST be verified independently either by fetching it from the server of origin, or by verifying its FEP-8b32 integrity proof.","title":"Emdedded objects"},{"location":"fep/fep-c7d3/#anonymous-objects","text":"An object without an ID can only exist when embedded within another object. It has the same owner as the parent object and it is considered authentic when the parent object is authentic.","title":"Anonymous objects"},{"location":"fep/fep-c7d3/#unattributed-objects","text":"An object without an explicit owner is owned by the server. Such object MUST be considered authentic only if fetched from the location that has the same origin as its ID.","title":"Unattributed objects"},{"location":"fep/fep-c7d3/#authorization","text":"The actor that creates the object MUST be its owner. If activity modifies or deletes an object, its owner SHOULD match the object's owner. If owners are different, their IDs MUST have the same origin. Examples: Create , Update and Delete activities, and objects indicated by their object property SHOULD have the same owner. Undo activity and object indicated by its object property SHOULD have the same owner. Add and Remove activities, and objects indicated by their target property SHOULD have the same owner. Announce and Like activities don't modify objects indicated by their object property, therefore their owners can be different.","title":"Authorization"},{"location":"fep/fep-c7d3/#ownership-transfer","text":"When ownership changes, the new owner ID MUST have the same origin as the old owner ID.","title":"Ownership transfer"},{"location":"fep/fep-c7d3/#access-control","text":"When a protected object is fetched, the GET request MUST contain a HTTP signature created using a key whose owner SHOULD belong to object's intended audience. If key owner doesn't belong to intended audience, its ID MUST have the same origin as one of the actors in object's intended audience.","title":"Access control"},{"location":"fep/fep-c7d3/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 A. Barth, The Web Origin Concept , 2011 silverpill, FEP-8b32: Object Integrity Proofs , 2022 Ryan Barrett, nightpool, ActivityPub and HTTP Signatures , 2024","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-c7d3/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-c893/","text":"FEP-c893: DOAP Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This proposal introduces a standardized method for describing Fediverse projects using the Description of a Project (DOAP) format. The proposal outlines the creation of doap.jsonld file that includes details about implemented federation protocols and supported Fediverse Enhancement Proposals (FEPs). This makes it easier for developers and users to understand the capabilities and compatibility of various Fediverse projects. Example doap.jsonld File Here is an example structure for the doap.jsonld file: { \"@context\": { \"doap\": \"http://usefulinc.com/ns/doap#\", \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\", \"doap:description\": { \"@id\": \"doap:description\", \"@container\": \"@language\" }, \"doap:shortdesc\": { \"@id\": \"doap:shortdesc\", \"@container\": \"@language\" } }, \"@type\": \"doap:Project\", \"doap:name\": \"ExampleProject\", \"doap:homepage\": \"https://example.org\", \"doap:description\": { \"en\": \"ExampleProject is a Fediverse client/server that supports multiple protocols and enhancements.\", \"es\": \"ExampleProject es un cliente/servidor de Fediverse que admite m\u00faltiples protocolos y mejoras.\" }, \"doap:shortdesc\": { \"en\": \"Tools and vocabulary for describing community-based software projects.\", \"es\": \"Vocabulario y herramientas para describir proyectos de software comunitarios.\" }, \"doap:created\": \"2022-01-01\", \"doap:logo\": \"https://example.org/logo.png\", \"doap:screenshots\": [ \"https://example.org/screenshot1.png\", \"https://example.org/screenshot2.png\" ], \"doap:category\": [ \"http://software.freshmeat.net/browse/1020/\", \"http://osdir.com/Downloads+index-req-viewsdownload-sid-201.phtml\" ], \"doap:repository\": { \"@type\": \"doap:GitRepository\", \"doap:browse\": \"https://github.com/example/exampleproject/\", \"doap:location\": \"https://github.com/example/exampleproject.git\" }, \"doap:release\": { \"@type\": \"doap:Version\", \"doap:created\": \"2024-07-15\", \"doap:name\": \"v1.0.0\", \"doap:revision\": \"1.0.0\" }, \"doap:maintainer\": [ { \"@type\": \"foaf:Person\", \"foaf:name\": \"John Doe\", \"foaf:homepage\": \"https://github.com/johndoe\" }, { \"@type\": \"foaf:Person\", \"foaf:name\": \"Jane Smith\", \"foaf:homepage\": \"https://github.com/janesmith\" } ], \"doap:implements\": [ \"https://activitypub.rocks/specification\", \"https://diasporafoundation.org\" ], \"doap:supportedFEPs\": [ \"https://fediverse.org/fep-0001\", \"https://fediverse.org/fep-0002\" ] } \u53c2\u8003\u6587\u732e Description of a Project (DOAP) Specification XEP-0453: DOAP Usage in XMPP Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"DOAP"},{"location":"fep/fep-c893/#fep-c893-doap","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-c893: DOAP"},{"location":"fep/fep-c893/#summary","text":"This proposal introduces a standardized method for describing Fediverse projects using the Description of a Project (DOAP) format. The proposal outlines the creation of doap.jsonld file that includes details about implemented federation protocols and supported Fediverse Enhancement Proposals (FEPs). This makes it easier for developers and users to understand the capabilities and compatibility of various Fediverse projects.","title":"Summary"},{"location":"fep/fep-c893/#example-doapjsonld-file","text":"Here is an example structure for the doap.jsonld file: { \"@context\": { \"doap\": \"http://usefulinc.com/ns/doap#\", \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\", \"doap:description\": { \"@id\": \"doap:description\", \"@container\": \"@language\" }, \"doap:shortdesc\": { \"@id\": \"doap:shortdesc\", \"@container\": \"@language\" } }, \"@type\": \"doap:Project\", \"doap:name\": \"ExampleProject\", \"doap:homepage\": \"https://example.org\", \"doap:description\": { \"en\": \"ExampleProject is a Fediverse client/server that supports multiple protocols and enhancements.\", \"es\": \"ExampleProject es un cliente/servidor de Fediverse que admite m\u00faltiples protocolos y mejoras.\" }, \"doap:shortdesc\": { \"en\": \"Tools and vocabulary for describing community-based software projects.\", \"es\": \"Vocabulario y herramientas para describir proyectos de software comunitarios.\" }, \"doap:created\": \"2022-01-01\", \"doap:logo\": \"https://example.org/logo.png\", \"doap:screenshots\": [ \"https://example.org/screenshot1.png\", \"https://example.org/screenshot2.png\" ], \"doap:category\": [ \"http://software.freshmeat.net/browse/1020/\", \"http://osdir.com/Downloads+index-req-viewsdownload-sid-201.phtml\" ], \"doap:repository\": { \"@type\": \"doap:GitRepository\", \"doap:browse\": \"https://github.com/example/exampleproject/\", \"doap:location\": \"https://github.com/example/exampleproject.git\" }, \"doap:release\": { \"@type\": \"doap:Version\", \"doap:created\": \"2024-07-15\", \"doap:name\": \"v1.0.0\", \"doap:revision\": \"1.0.0\" }, \"doap:maintainer\": [ { \"@type\": \"foaf:Person\", \"foaf:name\": \"John Doe\", \"foaf:homepage\": \"https://github.com/johndoe\" }, { \"@type\": \"foaf:Person\", \"foaf:name\": \"Jane Smith\", \"foaf:homepage\": \"https://github.com/janesmith\" } ], \"doap:implements\": [ \"https://activitypub.rocks/specification\", \"https://diasporafoundation.org\" ], \"doap:supportedFEPs\": [ \"https://fediverse.org/fep-0001\", \"https://fediverse.org/fep-0002\" ] }","title":"Example doap.jsonld File"},{"location":"fep/fep-c893/#_1","text":"Description of a Project (DOAP) Specification XEP-0453: DOAP Usage in XMPP","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-c893/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-cb76/","text":"FEP-cb76: Content Addressed Vocabulary Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary JSON-LD context definitions typically live at some URI which gets used as a namespace. It is generally expected that the URI is long-lived, and often the context document is retrievable from that URI, but sometimes these links break due to technical errors, expired domains, and other such issues. This FEP proposes adopting a solution proposed by [CAV] for any extension terms defined within other FEPs, as well as optionally for standard vocabulary. 1. Defining FEP extension terms Each extension term MUST have a specification text. This specification is then used to calculate a SHA256 hash, which can be used as a URN within @context in lieu of a namespaced property. Example 1: Specifying a new extension term Say we want to define a new ActivityStreams Vocabulary [AS2V] term, which will be a sub-type of Activity called Message , with the following specification text: Indicates that the actor is sending a direct message. We obtain the SHA256 hash of this specification text: $ echo -n \"Indicates that the actor is sending a direct message.\" | sha256sum bab53e61faa0ddecce6991df4c26259b6c2e1b880cef12225033590fcaad1aaa - We can now use this hash to extend ActivityPub [AP] with a Message activity: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"Message\": \"urn:sha256:bab53e61faa0ddecce6991df4c26259b6c2e1b880cef12225033590fcaad1aaa\" } ], \"actor\": \"https://social.example/~alice\", \"type\": \"Message\", \"to\": \"https://bob.example.com\", \"content\": \"hi friend\" } 2. Storing FEP extension terms within the FEP Git repository (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) A directory named context/ should be created to store content addressed vocabulary extensions associated with FEPs. FEPs that propose vocabulary extensions MUST create a text file called fep-abcd_property.txt within this directory, where abcd is the identifier of the associated FEP, property is the recommended shorthand name of the property, and the contents of the text file are the specification text. FEP authors SHOULD try to use unique property names within the existing FEP vocabulary, unless an FEP is intended to supersede or replace an older FEP. A context.jsonld file SHOULD be generated any time a new vocabulary term is finalized, with its contents being a definition of every finalized vocabulary term. Example 2: Standardizing an FEP with a new extension term In Example 1, we defined a Message activity type to be used for ActivityPub [AP] direct messaging. Say we now want to draft an FEP for this definition. We follow the FEP process as defined in FEP-a4ed to title and identify our FEP proposal. Applying this process to our proposal of A Message activity for direct messaging yields the identifier FEP-0ac6 . Combined with our specification text of Indicates that the actor is sending a direct message , this yields the following text file fep-0ac6_Message.txt : Indicates that the actor is sending a direct message The text file is then stored at context/fep-0ac6_Message.txt , and when it is finalized, its SHA256 hash is added to context/context.jsonld : { \"@context\": { \"Message\": \"urn:sha256:bab53e61faa0ddecce6991df4c26259b6c2e1b880cef12225033590fcaad1aaa\" } } \u53c2\u8003\u6587\u732e [AS2V] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [AP] Christine Lemmer-Webber, Jessica Tallon, ActivityPub , 2018 [CAV] Christine Lemmer-Webber, Content Addressed Vocabulary , 2020 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-cb76: Content Addressed Vocabulary"},{"location":"fep/fep-cb76/#fep-cb76-content-addressed-vocabulary","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-cb76: Content Addressed Vocabulary"},{"location":"fep/fep-cb76/#summary","text":"JSON-LD context definitions typically live at some URI which gets used as a namespace. It is generally expected that the URI is long-lived, and often the context document is retrievable from that URI, but sometimes these links break due to technical errors, expired domains, and other such issues. This FEP proposes adopting a solution proposed by [CAV] for any extension terms defined within other FEPs, as well as optionally for standard vocabulary.","title":"Summary"},{"location":"fep/fep-cb76/#1-defining-fep-extension-terms","text":"Each extension term MUST have a specification text. This specification is then used to calculate a SHA256 hash, which can be used as a URN within @context in lieu of a namespaced property.","title":"1. Defining FEP extension terms"},{"location":"fep/fep-cb76/#example-1-specifying-a-new-extension-term","text":"Say we want to define a new ActivityStreams Vocabulary [AS2V] term, which will be a sub-type of Activity called Message , with the following specification text: Indicates that the actor is sending a direct message. We obtain the SHA256 hash of this specification text: $ echo -n \"Indicates that the actor is sending a direct message.\" | sha256sum bab53e61faa0ddecce6991df4c26259b6c2e1b880cef12225033590fcaad1aaa - We can now use this hash to extend ActivityPub [AP] with a Message activity: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"Message\": \"urn:sha256:bab53e61faa0ddecce6991df4c26259b6c2e1b880cef12225033590fcaad1aaa\" } ], \"actor\": \"https://social.example/~alice\", \"type\": \"Message\", \"to\": \"https://bob.example.com\", \"content\": \"hi friend\" }","title":"Example 1: Specifying a new extension term"},{"location":"fep/fep-cb76/#2-storing-fep-extension-terms-within-the-fep-git-repository","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) A directory named context/ should be created to store content addressed vocabulary extensions associated with FEPs. FEPs that propose vocabulary extensions MUST create a text file called fep-abcd_property.txt within this directory, where abcd is the identifier of the associated FEP, property is the recommended shorthand name of the property, and the contents of the text file are the specification text. FEP authors SHOULD try to use unique property names within the existing FEP vocabulary, unless an FEP is intended to supersede or replace an older FEP. A context.jsonld file SHOULD be generated any time a new vocabulary term is finalized, with its contents being a definition of every finalized vocabulary term.","title":"2. Storing FEP extension terms within the FEP Git repository"},{"location":"fep/fep-cb76/#example-2-standardizing-an-fep-with-a-new-extension-term","text":"In Example 1, we defined a Message activity type to be used for ActivityPub [AP] direct messaging. Say we now want to draft an FEP for this definition. We follow the FEP process as defined in FEP-a4ed to title and identify our FEP proposal. Applying this process to our proposal of A Message activity for direct messaging yields the identifier FEP-0ac6 . Combined with our specification text of Indicates that the actor is sending a direct message , this yields the following text file fep-0ac6_Message.txt : Indicates that the actor is sending a direct message The text file is then stored at context/fep-0ac6_Message.txt , and when it is finalized, its SHA256 hash is added to context/context.jsonld : { \"@context\": { \"Message\": \"urn:sha256:bab53e61faa0ddecce6991df4c26259b6c2e1b880cef12225033590fcaad1aaa\" } }","title":"Example 2: Standardizing an FEP with a new extension term"},{"location":"fep/fep-cb76/#_1","text":"[AS2V] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [AP] Christine Lemmer-Webber, Jessica Tallon, ActivityPub , 2018 [CAV] Christine Lemmer-Webber, Content Addressed Vocabulary , 2020","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-cb76/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-cd47/","text":"FEP-cd47: Federation-friendly Addressing and Deduplication Use-Cases Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary A proposed taxonomy of ways to make various kinds of ActivityPub data identifiable across locations to simplify higher-order functions like moderation receipts, tracking for trust and safety purposes, data migration, compliance, etc. This is intended as a light-weight and informational/meta-technical design document, not a specification or an extension. Rationale While Camille Fran\u00e7oise's originial \" ABCs \" paper was focused on disinformation specifically, it lays out the basic taxonomy I will be using here between Actors, Behavior, and Content, as three different vectors for disinformation, but also for abuse, trust and safety issues, inauthentic activity, copyright compliance, hate speech compliance, etc. The goal of this document is to collect the addressable and deduplication requirements for all of these related \"content-specific\" liabilities and use-cases, and inform the design of addressing and deduplication primitives in future FEPs. Terminology If we scope this exercise to data conformant to the ActivityStreams data model as extended and federated by ActivityPub, we could scope these categories as: Actors are what ActivityPub calls Actors : fediverse \"accounts\", bots, etc. Behavior can here be limited to \"the Greater Activity Streams,\" meaning protocol-native activities wrapped in AS objects defined in AS, AP, or in a FEP with a @Context so as to be fully compatible with the protocol in a ffpr, still canonicalizable as RDF. Content can here be a catch-all for three different sub-types of data: the \"contents\" of an Activity with arbitrary/open-ended fields (like the user-generated content of a Note object, for example), media \"attachments\" (which we could further constrain to defined media-types in the HTML sense, for simplicity), and links out to other data (URLs, but also other URIs TBD?) What we mean by \"addressing\" given the scope defined above is tricky, because there is a URI-based system of id s inherent to the JSON-LD data model that the AS and AP specifications build on, and most references to addressing or identification in the core specifications refer only to this graph-friendly but static scheme of resources and links. In practice to date, this has been coextensive with HTTPS URLs and DNS-resolveable domains. Whether non-HTTPS URLs could or should be used as id s or @id s is out-of-scope of this use-case document, and should be considered a design/implementation decision treated elsewhere. Regardless, today's Fediverse data is overwhelmingly (perhaps exclusively?) addressed by domain-based (and domain-dependent) id s that any new system should be able to handle and deduplicate in its current form, at least as \"legacy\" data if any breaking changes were proposed to these practices or to the core specifications. Today, most actors and behaviors are addressed by their id s that are also their current HTTPS \"location\"; content is similarly location-addressed most of the time, except insofar as some attachments are sometimes renamed in bucket storage configurations. All of these addresses are brittle vis-a-vis duplication, migration, and \"server death\"-- moving them to a new location creates a new address for identical content/referent, often without a \"forwarding\" redirection (HTTP-code-based or otherwise), or a backlink to its previous address, while a server going down suddenly just breaks all those links with no verifiable remedy. One form of location-independent addressing is \"content-addressing\", the most common form of which is addressing canonicalizable contents by hashing them in canonicalized form, often used in key/value stores, package managers, etc. It can sometimes be trickier than expected, however, to excise the location (or all properties that break if location changes) from the canonical form hashed to identify a piece of content, or an actor or a specific behavior. High-level Use-Cases Abusive activity often evades or actor-based attribution and moderation; one common form of this on social media is copy-pasted allegations or rumors which bad actors deploy across throwaway accounts, bots, parrot-accounts, friends/accomplices, etc. For this reason, circulating content of an activity like a Note might need to be tracked independent of URI/location, server, and actor in a uniform way, rather than per-activity or per-property (the prevalence of copy-pasta might even be used as a health or authenticity metric for networks, although of course this should not be overapplied as it might return false positives for some of the funniest copypasta meta-memes of the Terminally Online) Hate-Speech and interpersonal Trust and safety issues - Relying on the moderation of a given server or service-provider benefits greatly from interoperable logs of moderation decisions; per-decision receipts or events might benefit from indirection or multi-addressing actors, behaviors, and/or content that moves or is deleted, as well as potentially cacheing it privately for later replay/re-assesment/etc. Being able to sort moderation by categories or topics enables selective reliance or inheritance of moderation (and re-moderation in categories where servers differ on policy or obligations) Some regulations require reporting and/or storing for a period of time toxic or offending content, even if the Actor is removed from the service or deletes their offending Behavior or Content-- a location-independent key/value store by content-address can sever the \"server's copy\" from the \"user's/published copy\" for these purposes. Inauthentic activity , whether it be \"synthetic users\" (AI impersonating users for whatever commercial or analytics-inflating purposes) or AI flotsam or deliberate and targetted impersonation, deliberately exploits weaknesses or good-faith in the actor system. Being able to attribute many actors or \"sybils\" to a common \"shadow actor\" (a sybil factory, a script, a coordination point of a bot army, etc.) often requires identifying the behavioral pattern or network traffic properties, even probabilistically and then mapping that back to actors that do not otherwise share location-addressing or domain provenance. \"Chain-Letter\" Behaviors and Content is a common pattern in end-to-end encrypted systems like WhatsApp, which has been grappling with the ethical, legal, and political/disinformation consecuences of \"chain-letter\" style viral communications for decades. To mitigate such messaging patterns without violating the privacy assumptions of users of E2EE systems, traffic is analyzed to mark outbox content identical to content in the same user's inbox so that future recipients see it marked as a \"forward\", and \"replication speed limits\" are imposed to prevent sensational disinformation or deliberately inauthentic replication moving faster than good information. Deduplication for thorough Copyright Takedowns : Some copyright regulations (if not in the letter of the regulation, at least in the best-practice or spirit of the law) put the burden of deduplication on a service provider, hoster, and/or aggregator of user-generated content, i.e., a copyright takedown does not apply to a specific URL or a specific file but to the copyrighted material (film, book, etc) that you are hosting and aggregating, across multiple users or new accounts a user might create, and even if others users download and re-uploads it in a slightly altered form . For this reason, many copyright-enforcement regimes today are highly centralized because they require both a mammoth data lake of all reported violations, and some kind of matching algorithm that deduplicates in media-specific and encoding-specific ways across slight edits, crops, tints, tinges, etc. Note: One way of doing this is a \"distance hash\" or \"locality-sensitive hashing\" to create hashes that index commonalities between inputs (patterns, segments in common, structures) or, in audio-visual media, \"perceptual hashing\" that tries to canonicalize the final visual output of a visual encoding rather than its underlying data structure, compression, codecs, etc. One open-source example of this is ISCC User Stories As a server offering data migration to users bringing over old data, I can ingest content-addressed versions of each all actor collections, behavior and content without having to know server-specific paths, id patterns, annotations, bucket-storage URL schemes, etc. I can also check imported datasets of behavior and/or content against content-addressed moderation records from the server that originally hosted them, assuming that server is still live and federated with me. I can also access a mirror or snapshot of that data, if the server is no longer online or disfederated from me. As a server (A) auditing another server (B)'s moderation track record, I can parse receipts or logs of moderation actions that refer to behaviors and content by addresses internal to Server B (not necessarily content-addressed!) and use those address to retrieve the behavior and/or content moderated, even if the actors, behaviors, and/or content in question have been deleted. (Note: this use case assumes Server B is authorized appropriately by Server A and assumes significant trust between servers.) As a server promising its users the \"right to be forgotten\" (or just honoring UX expectations of deletion), I can request receipts of deletion from the servers of followers and followers' followers' by content-address of the behavior or content being deleted. (See fediverse-ideas#55 on fediverse-ideas reference; may be more pertinent for attachments than activities per se) Open Questions Ephemeral, \"in-memory\" and/or service-internal objects (which the AP spec recommends to be excluded from the axiom that all Activity objects should have a unique and dereferenceable id !) are perhaps the simplest to content-address. These do not need to be addressed by unknown, external, or future parties, but MAY benefit from addressing the same way other content is addressed, e.g. when string-comparing uploads or pre-published content to a content-addressed blocklist before publishing. Should the Sub-Resource Integrity hashes of @Context files or javascript files, Emoji sets , or other shared resources that might mutate at a static address be brought into scope? Is it redundant or dangerous to have similar-but-different content addressing mechanisms for those kinds of resource verifiability running parallel to Actor, Behavior, and Content verifiability? Do Actors, Behaviors, and/or Contents need to be RDF-canonicalized, or is JCS more appropriate for portability between JSON-LD native and JSON-only implementations? What translation corner-cases arise from assuming one or the other canonicalization? Thanks to @pukkamustard for sharing their IETF RFC draft for RDF/CBOR , explainer , and relevant prior art -- seems a well-designed and standardizable way forward, at least for Behaviors, particularly for implementations that already have RDF-canonicalization in the dependency graph and featureset. Similarly, how are attachments, links, images, videos, etc canonicalized for hashing in content-type-aware ways? How to deal with filesystems, bucket storage, etc? How are arbitrary files (uploads?) canonicalized? Is there a property for Actor objects to backlink to previous id s? How to deduplicate across migrations that change id property? \u53c2\u8003\u6587\u732e Normative Christine Lemmer Webber, Jessica Tallon, et al. ActivityPub , 2018 James Snell, Evan Promodorou, ActivityStreams , 2017 Actors, Behaviors, Content: A Disinformation ABC: Highlighting Three Vectors of Viral Deception to Guide Industry & Regulatory Responses, C. Fran\u00e7ois, September 20, 2019 (from the Annals of the Transatlantic Working Group Sessions ) ISCC - International Standard Content Codes, specified at ISO Informational SocialHub: We need to build \u201ctrust\u201d in this space and the fediverse (2023) Fediverse-ideas: Delete Receipts for responsive and responsible federation? Fediverse-ideas: Emoji Sets \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-cd47: Federation-friendly Addressing and Deduplication Use-Cases"},{"location":"fep/fep-cd47/#fep-cd47-federation-friendly-addressing-and-deduplication-use-cases","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-cd47: Federation-friendly Addressing and Deduplication Use-Cases"},{"location":"fep/fep-cd47/#summary","text":"A proposed taxonomy of ways to make various kinds of ActivityPub data identifiable across locations to simplify higher-order functions like moderation receipts, tracking for trust and safety purposes, data migration, compliance, etc. This is intended as a light-weight and informational/meta-technical design document, not a specification or an extension.","title":"Summary"},{"location":"fep/fep-cd47/#rationale","text":"While Camille Fran\u00e7oise's originial \" ABCs \" paper was focused on disinformation specifically, it lays out the basic taxonomy I will be using here between Actors, Behavior, and Content, as three different vectors for disinformation, but also for abuse, trust and safety issues, inauthentic activity, copyright compliance, hate speech compliance, etc. The goal of this document is to collect the addressable and deduplication requirements for all of these related \"content-specific\" liabilities and use-cases, and inform the design of addressing and deduplication primitives in future FEPs.","title":"Rationale"},{"location":"fep/fep-cd47/#terminology","text":"If we scope this exercise to data conformant to the ActivityStreams data model as extended and federated by ActivityPub, we could scope these categories as: Actors are what ActivityPub calls Actors : fediverse \"accounts\", bots, etc. Behavior can here be limited to \"the Greater Activity Streams,\" meaning protocol-native activities wrapped in AS objects defined in AS, AP, or in a FEP with a @Context so as to be fully compatible with the protocol in a ffpr, still canonicalizable as RDF. Content can here be a catch-all for three different sub-types of data: the \"contents\" of an Activity with arbitrary/open-ended fields (like the user-generated content of a Note object, for example), media \"attachments\" (which we could further constrain to defined media-types in the HTML sense, for simplicity), and links out to other data (URLs, but also other URIs TBD?) What we mean by \"addressing\" given the scope defined above is tricky, because there is a URI-based system of id s inherent to the JSON-LD data model that the AS and AP specifications build on, and most references to addressing or identification in the core specifications refer only to this graph-friendly but static scheme of resources and links. In practice to date, this has been coextensive with HTTPS URLs and DNS-resolveable domains. Whether non-HTTPS URLs could or should be used as id s or @id s is out-of-scope of this use-case document, and should be considered a design/implementation decision treated elsewhere. Regardless, today's Fediverse data is overwhelmingly (perhaps exclusively?) addressed by domain-based (and domain-dependent) id s that any new system should be able to handle and deduplicate in its current form, at least as \"legacy\" data if any breaking changes were proposed to these practices or to the core specifications. Today, most actors and behaviors are addressed by their id s that are also their current HTTPS \"location\"; content is similarly location-addressed most of the time, except insofar as some attachments are sometimes renamed in bucket storage configurations. All of these addresses are brittle vis-a-vis duplication, migration, and \"server death\"-- moving them to a new location creates a new address for identical content/referent, often without a \"forwarding\" redirection (HTTP-code-based or otherwise), or a backlink to its previous address, while a server going down suddenly just breaks all those links with no verifiable remedy. One form of location-independent addressing is \"content-addressing\", the most common form of which is addressing canonicalizable contents by hashing them in canonicalized form, often used in key/value stores, package managers, etc. It can sometimes be trickier than expected, however, to excise the location (or all properties that break if location changes) from the canonical form hashed to identify a piece of content, or an actor or a specific behavior.","title":"Terminology"},{"location":"fep/fep-cd47/#high-level-use-cases","text":"Abusive activity often evades or actor-based attribution and moderation; one common form of this on social media is copy-pasted allegations or rumors which bad actors deploy across throwaway accounts, bots, parrot-accounts, friends/accomplices, etc. For this reason, circulating content of an activity like a Note might need to be tracked independent of URI/location, server, and actor in a uniform way, rather than per-activity or per-property (the prevalence of copy-pasta might even be used as a health or authenticity metric for networks, although of course this should not be overapplied as it might return false positives for some of the funniest copypasta meta-memes of the Terminally Online) Hate-Speech and interpersonal Trust and safety issues - Relying on the moderation of a given server or service-provider benefits greatly from interoperable logs of moderation decisions; per-decision receipts or events might benefit from indirection or multi-addressing actors, behaviors, and/or content that moves or is deleted, as well as potentially cacheing it privately for later replay/re-assesment/etc. Being able to sort moderation by categories or topics enables selective reliance or inheritance of moderation (and re-moderation in categories where servers differ on policy or obligations) Some regulations require reporting and/or storing for a period of time toxic or offending content, even if the Actor is removed from the service or deletes their offending Behavior or Content-- a location-independent key/value store by content-address can sever the \"server's copy\" from the \"user's/published copy\" for these purposes. Inauthentic activity , whether it be \"synthetic users\" (AI impersonating users for whatever commercial or analytics-inflating purposes) or AI flotsam or deliberate and targetted impersonation, deliberately exploits weaknesses or good-faith in the actor system. Being able to attribute many actors or \"sybils\" to a common \"shadow actor\" (a sybil factory, a script, a coordination point of a bot army, etc.) often requires identifying the behavioral pattern or network traffic properties, even probabilistically and then mapping that back to actors that do not otherwise share location-addressing or domain provenance. \"Chain-Letter\" Behaviors and Content is a common pattern in end-to-end encrypted systems like WhatsApp, which has been grappling with the ethical, legal, and political/disinformation consecuences of \"chain-letter\" style viral communications for decades. To mitigate such messaging patterns without violating the privacy assumptions of users of E2EE systems, traffic is analyzed to mark outbox content identical to content in the same user's inbox so that future recipients see it marked as a \"forward\", and \"replication speed limits\" are imposed to prevent sensational disinformation or deliberately inauthentic replication moving faster than good information. Deduplication for thorough Copyright Takedowns : Some copyright regulations (if not in the letter of the regulation, at least in the best-practice or spirit of the law) put the burden of deduplication on a service provider, hoster, and/or aggregator of user-generated content, i.e., a copyright takedown does not apply to a specific URL or a specific file but to the copyrighted material (film, book, etc) that you are hosting and aggregating, across multiple users or new accounts a user might create, and even if others users download and re-uploads it in a slightly altered form . For this reason, many copyright-enforcement regimes today are highly centralized because they require both a mammoth data lake of all reported violations, and some kind of matching algorithm that deduplicates in media-specific and encoding-specific ways across slight edits, crops, tints, tinges, etc. Note: One way of doing this is a \"distance hash\" or \"locality-sensitive hashing\" to create hashes that index commonalities between inputs (patterns, segments in common, structures) or, in audio-visual media, \"perceptual hashing\" that tries to canonicalize the final visual output of a visual encoding rather than its underlying data structure, compression, codecs, etc. One open-source example of this is ISCC","title":"High-level Use-Cases"},{"location":"fep/fep-cd47/#user-stories","text":"As a server offering data migration to users bringing over old data, I can ingest content-addressed versions of each all actor collections, behavior and content without having to know server-specific paths, id patterns, annotations, bucket-storage URL schemes, etc. I can also check imported datasets of behavior and/or content against content-addressed moderation records from the server that originally hosted them, assuming that server is still live and federated with me. I can also access a mirror or snapshot of that data, if the server is no longer online or disfederated from me. As a server (A) auditing another server (B)'s moderation track record, I can parse receipts or logs of moderation actions that refer to behaviors and content by addresses internal to Server B (not necessarily content-addressed!) and use those address to retrieve the behavior and/or content moderated, even if the actors, behaviors, and/or content in question have been deleted. (Note: this use case assumes Server B is authorized appropriately by Server A and assumes significant trust between servers.) As a server promising its users the \"right to be forgotten\" (or just honoring UX expectations of deletion), I can request receipts of deletion from the servers of followers and followers' followers' by content-address of the behavior or content being deleted. (See fediverse-ideas#55 on fediverse-ideas reference; may be more pertinent for attachments than activities per se)","title":"User Stories"},{"location":"fep/fep-cd47/#open-questions","text":"Ephemeral, \"in-memory\" and/or service-internal objects (which the AP spec recommends to be excluded from the axiom that all Activity objects should have a unique and dereferenceable id !) are perhaps the simplest to content-address. These do not need to be addressed by unknown, external, or future parties, but MAY benefit from addressing the same way other content is addressed, e.g. when string-comparing uploads or pre-published content to a content-addressed blocklist before publishing. Should the Sub-Resource Integrity hashes of @Context files or javascript files, Emoji sets , or other shared resources that might mutate at a static address be brought into scope? Is it redundant or dangerous to have similar-but-different content addressing mechanisms for those kinds of resource verifiability running parallel to Actor, Behavior, and Content verifiability? Do Actors, Behaviors, and/or Contents need to be RDF-canonicalized, or is JCS more appropriate for portability between JSON-LD native and JSON-only implementations? What translation corner-cases arise from assuming one or the other canonicalization? Thanks to @pukkamustard for sharing their IETF RFC draft for RDF/CBOR , explainer , and relevant prior art -- seems a well-designed and standardizable way forward, at least for Behaviors, particularly for implementations that already have RDF-canonicalization in the dependency graph and featureset. Similarly, how are attachments, links, images, videos, etc canonicalized for hashing in content-type-aware ways? How to deal with filesystems, bucket storage, etc? How are arbitrary files (uploads?) canonicalized? Is there a property for Actor objects to backlink to previous id s? How to deduplicate across migrations that change id property?","title":"Open Questions"},{"location":"fep/fep-cd47/#_1","text":"Normative Christine Lemmer Webber, Jessica Tallon, et al. ActivityPub , 2018 James Snell, Evan Promodorou, ActivityStreams , 2017 Actors, Behaviors, Content: A Disinformation ABC: Highlighting Three Vectors of Viral Deception to Guide Industry & Regulatory Responses, C. Fran\u00e7ois, September 20, 2019 (from the Annals of the Transatlantic Working Group Sessions ) ISCC - International Standard Content Codes, specified at ISO Informational SocialHub: We need to build \u201ctrust\u201d in this space and the fediverse (2023) Fediverse-ideas: Delete Receipts for responsive and responsible federation? Fediverse-ideas: Emoji Sets","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-cd47/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-d36d/","text":"FEP-d36d: Sharing Content Across Federated Forums Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary New instances on the threadiverse (servers that implement ActivityPub with FEP-1b12) are often seeded with forums for common interests, leading to multiple servers having similar forums. Users may dislike having to follow what they perceive to be \"duplicate\" forums or keep up with multiple discussions on the same topic across multiple servers. This document describes a method for allowing Group actors to share content to reduce posting of a single link multiple times, which reduces what users see as \"duplicate\" posts and fragmented conversations across multiple forums. History FEP-1b12 introduces federated forums and is implemented by Lemmy , /kbin , and Friendica . The site reddit has a feature for grouping its forums, called subreddits, into a new forum, called a multireddit. A multireddit is a feed made up of the combination of each of its constituent subreddits and allows a user an easy way to keep up with multiple related forums. Because subreddits can be in multiple multireddits, multireddits don't affect moderation of links posted to individual subreddits and a link can be posted to more than one constituent subreddit within a multireddit. Group to Group Follows When a moderator of a federated forum determines that their forum overlaps in topic with another forum, they can direct the Group actor to send a Follow activity to the other forum's Group actor. FEP-1b12 specifices that a group should automatically respond with an Accept/Follow , but this document overrides that for Follow activities with an actor of type Group . After receiving a Follow activity from another Group , the group MAY automatically respond with an Accept/Follow or a moderator may instruct the group to reply with a Reject/Follow . After replying with a Accept/Follow activity, the group that received the Follow activity MAY automatically add the first group to its following collection, creating a symmetric relationship. This document makes no change to the handling of an Undo/Follow activity. If a group receives an Undo/Follow from a Group actor, it MAY automatically remove the other group from its following collection. Activity Handling When a group receives an activity in its inbox , it SHOULD perform automatic validation as described in FEP-1b12. If that validation includes deduplication (via the url property of the activity's object , the url of any attachements, or any other method), that deduplication validation MUST include objects received from followed groups. If an activity fails this deduplication validation, the group MUST respond with a Reject activity where the object property is the object from the inbox activity and the target object is the object that the new object duplicates. This ensures that content is posted only once across related forums and a forum can provide navigation to an original post when a user tries to post a duplicate. If the incoming activity is deemed valid, the group MUST handle it according to FEP-1b12 handling of valid activities. \u53c2\u8003\u6587\u732e [FEP-1b12] Felix Ableitner, FEP-1b12: Group federation Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"FEP-d36d: Sharing Content Across Federated Forums"},{"location":"fep/fep-d36d/#fep-d36d-sharing-content-across-federated-forums","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-d36d: Sharing Content Across Federated Forums"},{"location":"fep/fep-d36d/#summary","text":"New instances on the threadiverse (servers that implement ActivityPub with FEP-1b12) are often seeded with forums for common interests, leading to multiple servers having similar forums. Users may dislike having to follow what they perceive to be \"duplicate\" forums or keep up with multiple discussions on the same topic across multiple servers. This document describes a method for allowing Group actors to share content to reduce posting of a single link multiple times, which reduces what users see as \"duplicate\" posts and fragmented conversations across multiple forums.","title":"Summary"},{"location":"fep/fep-d36d/#history","text":"FEP-1b12 introduces federated forums and is implemented by Lemmy , /kbin , and Friendica . The site reddit has a feature for grouping its forums, called subreddits, into a new forum, called a multireddit. A multireddit is a feed made up of the combination of each of its constituent subreddits and allows a user an easy way to keep up with multiple related forums. Because subreddits can be in multiple multireddits, multireddits don't affect moderation of links posted to individual subreddits and a link can be posted to more than one constituent subreddit within a multireddit.","title":"History"},{"location":"fep/fep-d36d/#group-to-group-follows","text":"When a moderator of a federated forum determines that their forum overlaps in topic with another forum, they can direct the Group actor to send a Follow activity to the other forum's Group actor. FEP-1b12 specifices that a group should automatically respond with an Accept/Follow , but this document overrides that for Follow activities with an actor of type Group . After receiving a Follow activity from another Group , the group MAY automatically respond with an Accept/Follow or a moderator may instruct the group to reply with a Reject/Follow . After replying with a Accept/Follow activity, the group that received the Follow activity MAY automatically add the first group to its following collection, creating a symmetric relationship. This document makes no change to the handling of an Undo/Follow activity. If a group receives an Undo/Follow from a Group actor, it MAY automatically remove the other group from its following collection.","title":"Group to Group Follows"},{"location":"fep/fep-d36d/#activity-handling","text":"When a group receives an activity in its inbox , it SHOULD perform automatic validation as described in FEP-1b12. If that validation includes deduplication (via the url property of the activity's object , the url of any attachements, or any other method), that deduplication validation MUST include objects received from followed groups. If an activity fails this deduplication validation, the group MUST respond with a Reject activity where the object property is the object from the inbox activity and the target object is the object that the new object duplicates. This ensures that content is posted only once across related forums and a forum can provide navigation to an original post when a user tries to post a duplicate. If the incoming activity is deemed valid, the group MUST handle it according to FEP-1b12 handling of valid activities.","title":"Activity Handling"},{"location":"fep/fep-d36d/#_1","text":"[FEP-1b12] Felix Ableitner, FEP-1b12: Group federation","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-d36d/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-d556/","text":"FEP-d556: Server-Level Actor Discovery Using WebFinger Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Server-level ActivityPub actors support server-wide functionality rather than representing a user or the software equivalent (sometimes called a bot ). This proposal describes how to discover a server-level actor's URI using WebFinger . Terminology The term server is not well-defined. For the purposes of this document, an server is an origin SameOriginPolicy having the same URL prefix (scheme, host, port). The term does not imply anything about network or software architecture. An server could consist of many server processes behind a load-balancing reverse proxy. Or, inversely, a single server process could host many servers (multi-tenant architecture). Some implementations could have multiple actors to support different server-level roles (moderation, administration, etc.). In this document, the term server-level actor will be used to describe these kind of actors. The term Server Actor or Application Actor is a special, but common, case where there is a single server-level actor. The term Server is used extensively in the ActivityPub Recommendation , although it is mostly undefined beyond which activities a server may process. The term is closely related to Mastodon's use of the word instance , although this is not the only way the word is used in online discussions. NOTE: The standard role and responsibilities of server-level actors are not defined here (or elsewhere, at the time of this submission). Several implementations have something they call an Instance Actor or Application Actor, but they may or may not be interoperable since no standard behaviors have been defined at this time. Use Cases Although this FEP does not define specific uses of server-level actors, it's useful to know how they are, or could be, used in practice. The following are a some potential use cases: Signing Fetch Requests: This appears to be the most common use case. The requirement for this is a combination of: limiting access to actor profiles by requiring HTTP Signatures (i.e., \"authorized fetch\") and tightly-coupling actor profiles with their public keys. This results in profile/key fetch loops. ( InstanceActor ). To mitigate this undesirable behavior, one technique is to have a third-party actor (often called an \"instance actor\") sign every fetch request. Actor discovery is not required for this use case, but it's mentioned here because it appears to be the motiving use case for FEP-2677 , which has some similarities to this one. Relay Support: A server-level actor can be used for subscribing to a relay (often using an ActivityPub Follow request) and receiving inbox messages. Server-level Subscriptions: Some implementations, like Pleroma , provide an actor that can be followed to receive all messages from an \"instance\" . Moderation: A server-level actor may be used to federate moderation-related content (actor or domain blocks, post flags, etc.) or provide a publication proxy to shield the identity of moderators performing the actions. Announcements: An server-level actor could be used to public server news. For example, it could publish content including announcements about new features, maintenance schedules, or updates. Object Attribution: Some server implementations allow some objects to be attributed to the server rather than an individual user or account. Administration: A server-level actor could be used to share information about software issue (including reports from users), available updates, and security vulnerabilities and mitigations. Discovery To discover an server-level actor's URI, query WebFinger with the server prefix as the resource query parameter. Example Request: GET /.well-known/webfinger?resource=https://server.example/ Response: { \"subject\": \"https://server.example/\", \"links\": [ { \"rel\": \"https://www.w3.org/ns/activitystreams#Service\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/actor\" } ] } The subject would typically be the resource URI. This proposal does not depend on any specific URI for subject , although the ActivityPub actor URI is recommended. The Server-level Actor's URI will be the href property of a link with a rel (relation type) property of https://www.w3.org/ns/activitystreams#Service ( W3C AS2 Service Primer ). The type of the Server-level Actor itself is not required to be the same as the relation type. The https://www.w3.org/ns/activitystreams#Service rel value may be replaced with self if there is no ambiguity between the server-level actor and user's actor in a single actor server (see discussion of single-actor servers ). A http://webfinger.net/rel/profile-page rel ( WebFinger Relations ) can be used to link to server metadata (possibly with multiple content types). However, the structure of the target metadata has not been defined at this time. For example, the following links refer to profile data in HTML and JSON-LD formats. { \"subject\": \"https://server.example/\", \"links\": [ { \"rel\": \"https://www.w3.org/ns/activitystreams#Service\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/actor\" }, { \"rel\": \"http://webfinger.net/rel/profile-page\", \"type\": \"text/html\", \"href\": \"https://server.example/profile\" }, { \"rel\": \"http://webfinger.net/rel/profile-page\", \"type\": \"application/ld+json\", \"href\": \"https://server.example/profile\" } ] } If multiple server-level actor links are returned, the links can be disambiguated by adding metadata to the links using standard WebFinger properties. For example, an implementation could have different server-level actors that serve different purposes. It's also possible that another FEP will define standard rel URIs for common roles. In that case, those FEP role URIs SHOULD be preferred. NOTE: The definition of standard server-level actor roles is outside the scope of this FEP. { \"subject\": \"https://server.example/\", \"links\": [ { \"rel\": \"https://www.w3.org/ns/activitystreams#Service\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/actor\", \"properties\": { \"http://schema.org/roleName\": \"administration\" } }, { \"rel\": \"https://www.w3.org/ns/activitystreams#Service\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/actor\", \"properties\": { \"http://schema.org/roleName\": \"moderation\" } } ] } In this example, the same actor used used for administration and moderation. However, the example would also be valid if the actors were different. It's possible that for some use cases a role might be further refined. For example, additional properties might specify a geographical region for a role. Single Actor Servers A developer of a single-actor (user actor) server may want that user to have a URI corresponding to the server prefix although it's not intended to be an server-level actor. This scenario, which is not expected to be a common one, can be supported by returning multiple links in the WebFinger response. { \"subject\": \"https://server.example/\", \"links\": [ { \"rel\": \"https://www.w3.org/ns/activitystreams#Service\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/server-actor\" }, { \"rel\": \"self\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/user-actor\" } ] } If an application is only interested in a the Server Actor or User Actor specifically, it can use the rel query parameter to filter the links, as described in the WebFinger specification (if supported by the Webfinger service implementation). For example, to only query the User Actor URI, the query would be: GET /.well-known/webfinger?resource=https://server.example/&rel=self { \"subject\": \"https://server.example/\", \"links\": [ { \"rel\": \"self\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/user-actor\" } ] } Implementations Known implementations include: FIRM Mastodon implements something similar to this proposal. Mastodon Example GET /.well-known/webfinger?resource=https://mastodon.social/ Host: https://mastodon.social or using Mastodon account-based URI: GET /.well-known/webfinger?resource=acct:mastodon.social@mastodon.social Host: https://mastodon.social { \"subject\": \"acct:mastodon.social@mastodon.social\", \"aliases\": [ \"https://mastodon.social/actor\" ], \"links\": [ { \"rel\": \"http://webfinger.net/rel/profile-page\", \"type\": \"text/html\", \"href\": \"https://mastodon.social/about/more?instance_actor=true\" }, { \"rel\": \"self\", \"type\": \"application/activity+json\", \"href\": \"https://mastodon.social/actor\" }, { \"rel\": \"http://ostatus.org/schema/1.0/subscribe\", \"template\": \"https://mastodon.social/authorize_interaction?uri={uri}\" } ] } Some differences between the Mastodon implementation and this proposal include: It does not support standard WebFinger filtering by rel . The subject is the Mastodon-specific account URI for the server-level actor rather than the recommended ActivityPub actor URI. Since no user-related actor link is provided for the server resource, the self rel value can be used without ambiguity Related Proposals FEP-2677 suggests using NodeInfo for a similar purpose. There are several disadvantages of this compared to using WebFinger . Although WebFinger is not required by the ActivityPub Recommendation, it is required for federation with most ActivityPub-based implementations (e.g., Mastodon and compatible implementations). NodeInfo is not required for federation, so requiring it's use for this purpose increases the complexity of federation with no benefits. WebFinger has been standardized by the Internet Engineering Task Force (IETC). NodeInfo is defined informally. WebFinger is already used to resolve resource identifiers and provide links to server-level metadata (e.g., profile page URLs). NodeInfo is primarily used for gathering and aggregating server metadata. FEP-2677 adds a new non-standard rel relation to the NodeInfo index document. This may have surprising effects on some consuming implementations. This proposal is using WebFinger in standard ways. Given an ActivityVocabulary actor type is being used for the WebFinger rel value, a as:Service ( Primer ) is the type suggested by the W3C ActivityStreams Primers for this kind of resource rather than as:Application ( Primer ). (Note this is distinct from the type specified in the server-level actor resource that's linked from WebFinger.) FEP-2677 only defines a singleton server-level actor. This proposal allows that use case but has more flexibility for advanced implementations. FEP-2677 Requires actors to have an as:Application type. This proposal has no constraints on the actor type. The as:Service URI is only used for the link relation type. Although the definition isn't clear, the \"Application Actor\" in FEP-2677 appears to be a proxy for a software \"application\" (not defined, but appears to be a similar concept to \"server\" in this proposal). For example, there's a discussion about attaching application metadata to the actor. In this proposal, there is no server proxy actor (although that's not prohibited). There is a server WebFinger resource with linked server-level service actors, but the server resource is not necessarily an actor itself. FEP-2c59 discusses how to discover WebFinger resource URIs from an ActivityPub actor resource. This is not related to server-level actor discovery. FEP-4adb discusses dereferencing identifiers with WebFinger. It's similar to this proposal but not specifically related to discovering server-level actors. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, ActivityStreams Vocabulary , 2017 W3C ActivityStreams Primer - Application type W3C ActivityStreams Primer - Service type Eugen Rochko, Mastodon , 2016 Jonne Ha\u00df, NodeInfo 2.1 MDN, Same-origin Policy Brad Fitzpatrick, WebFinger , 2013 WebFinger.net Link Relations \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-d556: Server-Level Actor Discovery Using WebFinger"},{"location":"fep/fep-d556/#fep-d556-server-level-actor-discovery-using-webfinger","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-d556: Server-Level Actor Discovery Using WebFinger"},{"location":"fep/fep-d556/#summary","text":"Server-level ActivityPub actors support server-wide functionality rather than representing a user or the software equivalent (sometimes called a bot ). This proposal describes how to discover a server-level actor's URI using WebFinger .","title":"Summary"},{"location":"fep/fep-d556/#terminology","text":"The term server is not well-defined. For the purposes of this document, an server is an origin SameOriginPolicy having the same URL prefix (scheme, host, port). The term does not imply anything about network or software architecture. An server could consist of many server processes behind a load-balancing reverse proxy. Or, inversely, a single server process could host many servers (multi-tenant architecture). Some implementations could have multiple actors to support different server-level roles (moderation, administration, etc.). In this document, the term server-level actor will be used to describe these kind of actors. The term Server Actor or Application Actor is a special, but common, case where there is a single server-level actor. The term Server is used extensively in the ActivityPub Recommendation , although it is mostly undefined beyond which activities a server may process. The term is closely related to Mastodon's use of the word instance , although this is not the only way the word is used in online discussions. NOTE: The standard role and responsibilities of server-level actors are not defined here (or elsewhere, at the time of this submission). Several implementations have something they call an Instance Actor or Application Actor, but they may or may not be interoperable since no standard behaviors have been defined at this time.","title":"Terminology"},{"location":"fep/fep-d556/#use-cases","text":"Although this FEP does not define specific uses of server-level actors, it's useful to know how they are, or could be, used in practice. The following are a some potential use cases: Signing Fetch Requests: This appears to be the most common use case. The requirement for this is a combination of: limiting access to actor profiles by requiring HTTP Signatures (i.e., \"authorized fetch\") and tightly-coupling actor profiles with their public keys. This results in profile/key fetch loops. ( InstanceActor ). To mitigate this undesirable behavior, one technique is to have a third-party actor (often called an \"instance actor\") sign every fetch request. Actor discovery is not required for this use case, but it's mentioned here because it appears to be the motiving use case for FEP-2677 , which has some similarities to this one. Relay Support: A server-level actor can be used for subscribing to a relay (often using an ActivityPub Follow request) and receiving inbox messages. Server-level Subscriptions: Some implementations, like Pleroma , provide an actor that can be followed to receive all messages from an \"instance\" . Moderation: A server-level actor may be used to federate moderation-related content (actor or domain blocks, post flags, etc.) or provide a publication proxy to shield the identity of moderators performing the actions. Announcements: An server-level actor could be used to public server news. For example, it could publish content including announcements about new features, maintenance schedules, or updates. Object Attribution: Some server implementations allow some objects to be attributed to the server rather than an individual user or account. Administration: A server-level actor could be used to share information about software issue (including reports from users), available updates, and security vulnerabilities and mitigations.","title":"Use Cases"},{"location":"fep/fep-d556/#discovery","text":"To discover an server-level actor's URI, query WebFinger with the server prefix as the resource query parameter. Example Request: GET /.well-known/webfinger?resource=https://server.example/ Response: { \"subject\": \"https://server.example/\", \"links\": [ { \"rel\": \"https://www.w3.org/ns/activitystreams#Service\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/actor\" } ] } The subject would typically be the resource URI. This proposal does not depend on any specific URI for subject , although the ActivityPub actor URI is recommended. The Server-level Actor's URI will be the href property of a link with a rel (relation type) property of https://www.w3.org/ns/activitystreams#Service ( W3C AS2 Service Primer ). The type of the Server-level Actor itself is not required to be the same as the relation type. The https://www.w3.org/ns/activitystreams#Service rel value may be replaced with self if there is no ambiguity between the server-level actor and user's actor in a single actor server (see discussion of single-actor servers ). A http://webfinger.net/rel/profile-page rel ( WebFinger Relations ) can be used to link to server metadata (possibly with multiple content types). However, the structure of the target metadata has not been defined at this time. For example, the following links refer to profile data in HTML and JSON-LD formats. { \"subject\": \"https://server.example/\", \"links\": [ { \"rel\": \"https://www.w3.org/ns/activitystreams#Service\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/actor\" }, { \"rel\": \"http://webfinger.net/rel/profile-page\", \"type\": \"text/html\", \"href\": \"https://server.example/profile\" }, { \"rel\": \"http://webfinger.net/rel/profile-page\", \"type\": \"application/ld+json\", \"href\": \"https://server.example/profile\" } ] } If multiple server-level actor links are returned, the links can be disambiguated by adding metadata to the links using standard WebFinger properties. For example, an implementation could have different server-level actors that serve different purposes. It's also possible that another FEP will define standard rel URIs for common roles. In that case, those FEP role URIs SHOULD be preferred. NOTE: The definition of standard server-level actor roles is outside the scope of this FEP. { \"subject\": \"https://server.example/\", \"links\": [ { \"rel\": \"https://www.w3.org/ns/activitystreams#Service\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/actor\", \"properties\": { \"http://schema.org/roleName\": \"administration\" } }, { \"rel\": \"https://www.w3.org/ns/activitystreams#Service\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/actor\", \"properties\": { \"http://schema.org/roleName\": \"moderation\" } } ] } In this example, the same actor used used for administration and moderation. However, the example would also be valid if the actors were different. It's possible that for some use cases a role might be further refined. For example, additional properties might specify a geographical region for a role.","title":"Discovery"},{"location":"fep/fep-d556/#single-actor-servers","text":"A developer of a single-actor (user actor) server may want that user to have a URI corresponding to the server prefix although it's not intended to be an server-level actor. This scenario, which is not expected to be a common one, can be supported by returning multiple links in the WebFinger response. { \"subject\": \"https://server.example/\", \"links\": [ { \"rel\": \"https://www.w3.org/ns/activitystreams#Service\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/server-actor\" }, { \"rel\": \"self\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/user-actor\" } ] } If an application is only interested in a the Server Actor or User Actor specifically, it can use the rel query parameter to filter the links, as described in the WebFinger specification (if supported by the Webfinger service implementation). For example, to only query the User Actor URI, the query would be: GET /.well-known/webfinger?resource=https://server.example/&rel=self { \"subject\": \"https://server.example/\", \"links\": [ { \"rel\": \"self\", \"type\": \"application/activity+json\", \"href\": \"https://server.example/user-actor\" } ] }","title":"Single Actor Servers"},{"location":"fep/fep-d556/#implementations","text":"Known implementations include: FIRM Mastodon implements something similar to this proposal.","title":"Implementations"},{"location":"fep/fep-d556/#mastodon-example","text":"GET /.well-known/webfinger?resource=https://mastodon.social/ Host: https://mastodon.social or using Mastodon account-based URI: GET /.well-known/webfinger?resource=acct:mastodon.social@mastodon.social Host: https://mastodon.social { \"subject\": \"acct:mastodon.social@mastodon.social\", \"aliases\": [ \"https://mastodon.social/actor\" ], \"links\": [ { \"rel\": \"http://webfinger.net/rel/profile-page\", \"type\": \"text/html\", \"href\": \"https://mastodon.social/about/more?instance_actor=true\" }, { \"rel\": \"self\", \"type\": \"application/activity+json\", \"href\": \"https://mastodon.social/actor\" }, { \"rel\": \"http://ostatus.org/schema/1.0/subscribe\", \"template\": \"https://mastodon.social/authorize_interaction?uri={uri}\" } ] } Some differences between the Mastodon implementation and this proposal include: It does not support standard WebFinger filtering by rel . The subject is the Mastodon-specific account URI for the server-level actor rather than the recommended ActivityPub actor URI. Since no user-related actor link is provided for the server resource, the self rel value can be used without ambiguity","title":"Mastodon Example"},{"location":"fep/fep-d556/#related-proposals","text":"FEP-2677 suggests using NodeInfo for a similar purpose. There are several disadvantages of this compared to using WebFinger . Although WebFinger is not required by the ActivityPub Recommendation, it is required for federation with most ActivityPub-based implementations (e.g., Mastodon and compatible implementations). NodeInfo is not required for federation, so requiring it's use for this purpose increases the complexity of federation with no benefits. WebFinger has been standardized by the Internet Engineering Task Force (IETC). NodeInfo is defined informally. WebFinger is already used to resolve resource identifiers and provide links to server-level metadata (e.g., profile page URLs). NodeInfo is primarily used for gathering and aggregating server metadata. FEP-2677 adds a new non-standard rel relation to the NodeInfo index document. This may have surprising effects on some consuming implementations. This proposal is using WebFinger in standard ways. Given an ActivityVocabulary actor type is being used for the WebFinger rel value, a as:Service ( Primer ) is the type suggested by the W3C ActivityStreams Primers for this kind of resource rather than as:Application ( Primer ). (Note this is distinct from the type specified in the server-level actor resource that's linked from WebFinger.) FEP-2677 only defines a singleton server-level actor. This proposal allows that use case but has more flexibility for advanced implementations. FEP-2677 Requires actors to have an as:Application type. This proposal has no constraints on the actor type. The as:Service URI is only used for the link relation type. Although the definition isn't clear, the \"Application Actor\" in FEP-2677 appears to be a proxy for a software \"application\" (not defined, but appears to be a similar concept to \"server\" in this proposal). For example, there's a discussion about attaching application metadata to the actor. In this proposal, there is no server proxy actor (although that's not prohibited). There is a server WebFinger resource with linked server-level service actors, but the server resource is not necessarily an actor itself. FEP-2c59 discusses how to discover WebFinger resource URIs from an ActivityPub actor resource. This is not related to server-level actor discovery. FEP-4adb discusses dereferencing identifiers with WebFinger. It's similar to this proposal but not specifically related to discovering server-level actors.","title":"Related Proposals"},{"location":"fep/fep-d556/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, ActivityStreams Vocabulary , 2017 W3C ActivityStreams Primer - Application type W3C ActivityStreams Primer - Service type Eugen Rochko, Mastodon , 2016 Jonne Ha\u00df, NodeInfo 2.1 MDN, Same-origin Policy Brad Fitzpatrick, WebFinger , 2013 WebFinger.net Link Relations","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-d556/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-d767/","text":"FEP-d767: Extend ActivityPub with Valueflows Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary A standard method to extend ActivityPub/ActivityStream with Valueflows vocabulary, to enable varied economic networking activity in the fediverse. History Valueflows was started in 2015 by a group of developers who met around the concept of an \"open app ecosystem\". The goal was to define one of the vocabularies needed to enable modular apps and components to communicate in a standard way, using distributed architecture. By extension, the goal was for people and organizations to more easily work together to coordinate the creation, distribution, and exchange of economic resources. Valueflows got a first version out in 2017, and started a period of learning from implementations . Valueflows met the fediverse through Mayel de Borniol and Ivan Minutillo, and work was begun in 2017 to integrate Valueflows into the software that became Bonfire. Valueflows would like to get to a stable v1.0 this year. The core is stable, but there are several features around the edges that are either not yet implemented or not yet tested enough. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in [RFC-2119]. Fediverse software that supports economic activity MAY implement the Valueflows extension. Vocabulary Integration Note this is not at all finalized, will be seeking feedback in SocialHub. The following general patterns MUST be followed to integrate Valueflows objects into ActivityPub messages. Any Valueflows construct (a class or a more complex bundle of related classes) will be an Object in the AP message. The activities Create, Update, and Delete will be used. Other possibilities to be investigated: Add, Remove, Accept, Reject. Only stable parts of the Valueflows vocabulary will be addressed The general idea is that AP/AS will be used basically for messaging. Valueflows does have some concepts that could be considered activities, but they don't fit nicely into the current list. Note: The overlap between the Agent portion of the Valueflows model and the AP actors will not be addressed at this time, due to the complexity of mapping to the actor model, as well as the in-process suggestions for AP groups, organizations, communities, etc. Until it is explicitly addressed, when there is overlap, any Person, Group, Organization actor with agency can be used as a Valueflows Agent. In addition, Valueflows will include Agents that are not AP actors, and these can be handled with the standard Create, Update, Delete. Examples ( loosely documented atm, just for discussion ): { \"@context\": { \"https://www.w3.org/ns/activitystreams\", \"vf\": \"https://w3id.org/valueflows/\", }, \"summary\": \"Sally created a project plan.\", \"type\": \"Create\", \"actor\": { \"type\": \"Person\", \"name\": \"Sally\" }, \"object\": { \"type\": \"vf:Plan\", \"name\": \"Define AP-VF Extension\", \"content\": \"Collaborate on defining the VF extension to AP/AS. Propose as a FEP (Fediverse Enhancement Proposal).\" # or use skos:note per vf, different meanings? } } { \"@context\": { \"https://www.w3.org/ns/activitystreams\", \"vf\": \"https://w3id.org/valueflows/\", }, \"summary\": \"Sally created a process.\", \"type\": \"Create\", \"actor\": { \"type\": \"Person\", \"name\": \"Sally\" }, \"object\": { \"type\": \"vf:Process\", \"vf:name\": \"Draft AP-VF examples\", \"content\": \"Collaborate on examples to get discussion going on the VF extension to AP/AS.\", \"vf:inScopeOf\": { \"type\": \"Organization\", \"vf:name\": \"HUMANs\", # could use target for this? }, \"vf:plannedWithin\": { \"type\": \"Plan\", \"vf:name\": \"Define AP-VF Extension\", # this would be an id? }, \"vf:outputs\": { \"object\": { \"type\": \"vf:Commitment\", \"vf:action\": \"produce\", \"vf:conformsTo\": { \"type\": \"ResourceSpecification\", \"vf:name\": \"Vocabulary Spec\" }, \"vf:due\": \"2023-05-08T10:30:00-5:00\", \"vf:provider\": { \"type\": \"Organization\", # vf? as? \"vf:name\": \"HUMANs\" }, \"vf:receiver\": { \"type\": \"Organization\", \"vf:name\": \"SocialHub\" } } } } } { \"@context\": { \"https://www.w3.org/ns/activitystreams\", \"vf\": \"https://w3id.org/valueflows/\", \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\" }, \"summary\": \"Lynn created a commitment.\", \"type\": \"Create\", \"actor\": { \"type\": \"Person\", \"name\": \"Lynn\" }, \"object\": { \"type\": \"vf:Commitment\", \"vf:inputOf\": { \"type\": \"vf:Process\", \"vf:name\": \"Draft AP-VF examples\" } \"vf:action\": \"work\", \"vf:conformsTo\": { \"type\": \"ResourceSpecification\", \"vf:name\": \"Vocabulary Work\" }, \"vf:effortQuantity\": { \"type\": \"om:Measure\", \"om2:hasNumericalValue\": 10, \"om2:hasUnit\": \"hr\" } \"vf:due\": \"2023-05-01T10:30:00-5:00\", \"vf:provider\": { \"type\": \"Person\", # vf? as? \"vf:name\": \"Lynn\" }, \"vf:receiver\": { \"type\": \"Organization\", \"vf:name\": \"HUMANs\" }, \"content\": \"First draft of examples, submit for feedback.\" # skos:note? } } \u5b9f\u88c5 Bonfire Oceco - Communecter (not yet) \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ActivityStream] James M Snell, Evan Prodromou, ActivityStream , 2017 [Valueflows] Lynn Foster, elf Pavlik, Bob Haugen, Valueflows , 2023 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-d767: Extend ActivityPub with Valueflows"},{"location":"fep/fep-d767/#fep-d767-extend-activitypub-with-valueflows","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-d767: Extend ActivityPub with Valueflows"},{"location":"fep/fep-d767/#summary","text":"A standard method to extend ActivityPub/ActivityStream with Valueflows vocabulary, to enable varied economic networking activity in the fediverse.","title":"Summary"},{"location":"fep/fep-d767/#history","text":"Valueflows was started in 2015 by a group of developers who met around the concept of an \"open app ecosystem\". The goal was to define one of the vocabularies needed to enable modular apps and components to communicate in a standard way, using distributed architecture. By extension, the goal was for people and organizations to more easily work together to coordinate the creation, distribution, and exchange of economic resources. Valueflows got a first version out in 2017, and started a period of learning from implementations . Valueflows met the fediverse through Mayel de Borniol and Ivan Minutillo, and work was begun in 2017 to integrate Valueflows into the software that became Bonfire. Valueflows would like to get to a stable v1.0 this year. The core is stable, but there are several features around the edges that are either not yet implemented or not yet tested enough.","title":"History"},{"location":"fep/fep-d767/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in [RFC-2119]. Fediverse software that supports economic activity MAY implement the Valueflows extension.","title":"Requirements"},{"location":"fep/fep-d767/#vocabulary-integration","text":"Note this is not at all finalized, will be seeking feedback in SocialHub. The following general patterns MUST be followed to integrate Valueflows objects into ActivityPub messages. Any Valueflows construct (a class or a more complex bundle of related classes) will be an Object in the AP message. The activities Create, Update, and Delete will be used. Other possibilities to be investigated: Add, Remove, Accept, Reject.","title":"Vocabulary Integration"},{"location":"fep/fep-d767/#only-stable-parts-of-the-valueflows-vocabulary-will-be-addressed","text":"The general idea is that AP/AS will be used basically for messaging. Valueflows does have some concepts that could be considered activities, but they don't fit nicely into the current list. Note: The overlap between the Agent portion of the Valueflows model and the AP actors will not be addressed at this time, due to the complexity of mapping to the actor model, as well as the in-process suggestions for AP groups, organizations, communities, etc. Until it is explicitly addressed, when there is overlap, any Person, Group, Organization actor with agency can be used as a Valueflows Agent. In addition, Valueflows will include Agents that are not AP actors, and these can be handled with the standard Create, Update, Delete. Examples ( loosely documented atm, just for discussion ): { \"@context\": { \"https://www.w3.org/ns/activitystreams\", \"vf\": \"https://w3id.org/valueflows/\", }, \"summary\": \"Sally created a project plan.\", \"type\": \"Create\", \"actor\": { \"type\": \"Person\", \"name\": \"Sally\" }, \"object\": { \"type\": \"vf:Plan\", \"name\": \"Define AP-VF Extension\", \"content\": \"Collaborate on defining the VF extension to AP/AS. Propose as a FEP (Fediverse Enhancement Proposal).\" # or use skos:note per vf, different meanings? } } { \"@context\": { \"https://www.w3.org/ns/activitystreams\", \"vf\": \"https://w3id.org/valueflows/\", }, \"summary\": \"Sally created a process.\", \"type\": \"Create\", \"actor\": { \"type\": \"Person\", \"name\": \"Sally\" }, \"object\": { \"type\": \"vf:Process\", \"vf:name\": \"Draft AP-VF examples\", \"content\": \"Collaborate on examples to get discussion going on the VF extension to AP/AS.\", \"vf:inScopeOf\": { \"type\": \"Organization\", \"vf:name\": \"HUMANs\", # could use target for this? }, \"vf:plannedWithin\": { \"type\": \"Plan\", \"vf:name\": \"Define AP-VF Extension\", # this would be an id? }, \"vf:outputs\": { \"object\": { \"type\": \"vf:Commitment\", \"vf:action\": \"produce\", \"vf:conformsTo\": { \"type\": \"ResourceSpecification\", \"vf:name\": \"Vocabulary Spec\" }, \"vf:due\": \"2023-05-08T10:30:00-5:00\", \"vf:provider\": { \"type\": \"Organization\", # vf? as? \"vf:name\": \"HUMANs\" }, \"vf:receiver\": { \"type\": \"Organization\", \"vf:name\": \"SocialHub\" } } } } } { \"@context\": { \"https://www.w3.org/ns/activitystreams\", \"vf\": \"https://w3id.org/valueflows/\", \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\" }, \"summary\": \"Lynn created a commitment.\", \"type\": \"Create\", \"actor\": { \"type\": \"Person\", \"name\": \"Lynn\" }, \"object\": { \"type\": \"vf:Commitment\", \"vf:inputOf\": { \"type\": \"vf:Process\", \"vf:name\": \"Draft AP-VF examples\" } \"vf:action\": \"work\", \"vf:conformsTo\": { \"type\": \"ResourceSpecification\", \"vf:name\": \"Vocabulary Work\" }, \"vf:effortQuantity\": { \"type\": \"om:Measure\", \"om2:hasNumericalValue\": 10, \"om2:hasUnit\": \"hr\" } \"vf:due\": \"2023-05-01T10:30:00-5:00\", \"vf:provider\": { \"type\": \"Person\", # vf? as? \"vf:name\": \"Lynn\" }, \"vf:receiver\": { \"type\": \"Organization\", \"vf:name\": \"HUMANs\" }, \"content\": \"First draft of examples, submit for feedback.\" # skos:note? } }","title":"Only stable parts of the Valueflows vocabulary will be addressed"},{"location":"fep/fep-d767/#_1","text":"Bonfire Oceco - Communecter (not yet)","title":"\u5b9f\u88c5"},{"location":"fep/fep-d767/#_2","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ActivityStream] James M Snell, Evan Prodromou, ActivityStream , 2017 [Valueflows] Lynn Foster, elf Pavlik, Bob Haugen, Valueflows , 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-d767/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-d8c2/","text":"FEP-d8c2: OAuth 2.0 Profile for the ActivityPub API Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP defines a profile of OAuth 2.0 for use with the ActivityPub API. Motivation [ActivityPub] defines the ActivityPub API, a RESTful HTTP API for stream-oriented social software. Also called \"client to server\" or \"c2s\", this API allows clients to create new Activity objects by posting to an actor's outbox collection. The ActivityPub specification does not define an authorization mechanism for the API, although the [ActivityPubAuth] recommendations include some suggestions. Although there are many ways to implement client authorization for an API, OAuth 2.0 is a popular and well-understood framework. OAuth 2.0 is very broad and encompasses a number of different techniques and use cases. [OAuth20Simplified] documents the most common profile of OAuth 2.0: authorization code flow and bearer tokens. Many OAuth 2.0 client libraries implement this profile. The most common case for OAuth 2.0 is an API supplied by a single provider. There are three main issues with using OAuth 2.0 for a standard API implemented by many providers. Client identifiers . The OAuth 2.0 flow uses the client identifier to show important information about the client software to the user, and to avoid certain classes of spoofing attacks. With a single provider, the client developer can register a client ID out of band using the provider's developer Web site or other tools. Client developers cannot manually register client IDs with each provider of the ActivityPub API. Client metadata . To make authorization decisions, the user needs to having information about the client software such as its name, description, icon, and publisher. With a single provider, the API service can require client metadata through its registration interface and store it in a database. A client developer cannot manually register client metadata with each provider of the ActivityPub API. Scopes . The OAuth 2.0 flow uses scopes to indicate the permissions that the client is requesting. With a single provider, the provider can define and document a set of scopes that are appropriate for the API. It would be difficult for client developers had to use different scopes for each different ActivityPub API implementer. This profile addresses these issues by using the ActivityPub API itself to identify and describe the client software. It also provides a simple set of scopes appropriate for social software using ActivityPub. Specification Servers MUST provide the oauthAuthorizationEndpoint and oauthTokenEndpoint properties in the actor's endpoints collection. Clients MUST use the oauthAuthorizationEndpoint and oauthTokenEndpoint properties of the actor's endpoints collection. Clients MUST use the Authorization Code flow. Clients MUST use [PKCE] with the S256 method. Clients MUST provide a client_id as the ActivityPub ID of the Application , Service , or other ActivityPub object representing the client (see Client identifier below). The Activity Object resource at the client_id URI MUST have a redirectURI property with the redirect URI for the client (see Redirect URI below). Clients SHOULD NOT provide a client_secret . Servers MUST ignore the client_secret parameter, if provided. The scope parameter SHOULD be a space-separated list of scope values (see Scopes below) as defined by this specification. The scope parameter MAY include extended scopes defined by the server or client. Servers MUST support Bearer tokens . Servers MAY add an instrument property for Activity objects created by the client, with the value of the client_id parameter. Client identifier ActivityPub provides a rich vocabulary for describing objects in the social space. Each object in the ActivityPub world has a unique https: URI, which must be dereferenceable to a JSON-LD document describing the object. This allows a distributed description of ActivityPub API clients that doesn't require out-of-band registration. Objects dereferenced at the SHOULD be of type Application or Service . They MUST have an id property with the same value as the client_id parameter. They MUST have a redirectURI property with the redirect URI for the client (see Context document below). Clients SHOULD provide metadata to help users make authorization decisions, including: nameMap or name : The name of the client software. icon : An Image object with the icon for the client software. summaryMap or summary : A description of the application or service. attributedTo : The name , id , icon and summary properties of the actor responsible for the client software. Scopes The scope parameter is a space-separated list of scope values. The following scope values are defined: read : The client is requesting permission to read the actor's ActivityPub data, including the inbox , outbox , liked , followers , and following collections, and any other ActivityPub resources on the server, with the actor's authorization. The client is also requesting to use the proxyURL property of the actor, if it exists, to request resources from other servers with the actor's authorization. write : The client is requesting permission to create Activity objects by posting to the actor's outbox collection. This includes Create , Update , Delete , Follow , Undo , and other Activity types. write:sameorigin : The client is requesting permission to create Activity objects by posting to the actor's outbox collection, but only if the Activity 's object , target and/or origin properties have IDs with the same origin as the client ID. This allows the user to grant a limited scope to an application or service to interact with other resources controlled by the client, but not to interact with resources from other sources. \"Same origin\" is defined as a URI with the same scheme, host, and port as the client ID. Extended scopes MAY be defined by the server or client. Servers SHOULD ignore scopes that they do not recognize. Extended scopes SHOULD use the \"primary:restriction\" pattern for naming the scope. Context document The context document for this specification is at https://purl.archive.org/socialweb/oauth . Its contents are as follows: { \"@context\": { \"oauth\": \"https://purl.archive.org/socialweb/oauth#\", \"redirectURI\": { \"@id\": \"oauth:redirectURI\", \"@type\": \"@id\" } } } \u4f8b Follower recommender A Web service that wants to use the ActivityPub API would define an ActivityPub object at https://followrec.example/client . This object has a redirectURI property with the URI of the Web application's authorization endpoint. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/oauth\" ], \"id\": \"https:/followrec.example/apps/myapp\", \"name\": \"Follow Recommender\", \"type\": \"Service\", \"icon\": { \"type\": \"Image\", \"url\": \"http://followrec.example/followrec.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"Follow Recommender is a service that recommends people to follow based on your existing community.\" }, \"attributedTo\": { \"name\": \"Alyssa P. Hacker\", \"id\": \"https://hackers.example/alyssa\", \"type\": \"Person\", \"icon\": { \"type\": \"Image\", \"url\": \"https://hackers.example/alyssa/icon.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"Alyssa P. Hacker builds cool stuff on the Internet.\" } }, \"redirectURI\": \"https://followrec.example/oauth/callback\" } A person who wants to use this application can provide their ActivityPub actor ID either directly ( https://home.example/evanp ) or via a Webfinger lookup ( evanp@home.example ). The Web application discovers the oauthAuthorizationEndpoint to be https://home.example/oauth/authorize , and uses it to construct an URI for the authorization request, including scopes and PKCE parameters. https://home.example/oauth/authorize?response_type=code&client_id=https%3A%2F%2Ffollowrec.example%2Fclient&redirect_uri=https%3A%2F%2Ffollowrec.example%2Foauth%2Fcallback&scope=read+write&state=1234zyx&code_challenge=1234&code_challenge_method=S256 The user is redirected to the authorization endpoint, where they are prompted to authorize the application. The server at home.example retrieves the Service object at https://followrec.example/client and, at a minimum, verifies that the redirectURI property matches the redirect_uri parameter. The home.example server then prompts the user to authorize the application. If the user authorizes the application, the server redirects the user to the redirect_uri parameter with a code parameter. The Web application then uses the oauthTokenEndpoint to exchange the authorization code for an access token and optional refresh token. POST /oauth/token HTTP/1.1 Host: home.example Content-Type: application/x-www-form-urlencoded grant_type=authorization_code&code=1234zyx&client_id=https%3A%2F%2Ffollowrec.example%2Fclient&redirect_uri=https%3A%2F%2Ffollowrec.example%2Foauth%2Fcallback&code_verifier=1234 It can use these access tokens to read the user's following collections and use triadic closure to recommend new people to follow. It can also use the access token to post Follow activities to the user's outbox collection. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Follow\", \"object\": \"https://otherserver.example/otheruser\" } The server at home.example may add the instrument property to the resulting Activity to identify the responsible service. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://home.example/activities/1234\", \"actor\": \"https://home.example/evanp\", \"type\": \"Follow\", \"object\": \"https://otherserver.example/otheruser\", \"instrument\": \"https://followrec.example/client\", \"published\": \"2021-09-01T12:34:56Z\", \"updated\": \"2021-09-01T12:34:56Z\" } Mobile checkin app An iOS app uses the ActivityPub API to post location updates for a user. Because the app is a native program, it uses a static site provided by its version control system to host the client object at https://developer.git.example/kfc/client.json . { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/oauth\" ], \"id\": \"https:/mobile.example/app\", \"name\": \"Kentucky Fried Checkin\", \"type\": \"Application\", \"icon\": { \"type\": \"Image\", \"url\": \"https://developer.git.example/kfc/icon.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"Kentucky Fried Checkin is a mobile app that allows you to post checkins to your ActivityPub timeline.\" }, \"attributedTo\": { \"name\": \"MobileCorp\", \"id\": \"https://mobilecorp.example/organization\", \"type\": \"Organization\", \"icon\": { \"type\": \"Image\", \"url\": \"https://mobilecorp.example/organization/logo.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"MobileCorp provides cool apps supporting the social web.\" } }, \"redirectURI\": \"checkin:oauth/callback\" } Note that the redirectURI property is a custom URI scheme for the mobile app. A person who wants to use this application can provide their ActivityPub actor ID either directly ( https://home.example/evanp ) or via a Webfinger lookup ( evanp@home.example ). The checkin discovers the oauthAuthorizationEndpoint to be https://home.example/oauth/authorize , and uses it to construct an URI for the authorization request, including scopes and PKCE parameters. https://home.example/oauth/authorize?response_type=code&client_id=https%3A%2F%2Ffollowrec.example%2Fclient&redirect_uri=https%3A%2F%2Ffollowrec.example%2Foauth%2Fcallback&scope=write&state=1234zyx&code_challenge=1234&code_challenge_method=S256 Note that the scope parameter only includes the write scope, because the app only needs to post to the user's outbox collection. The authorization flow continues as with the Follower recommender example, until the mobile app has a valid access token. The mobile app can then post Arrive activities to the user's outbox collection. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Arrive\", \"summaryMap\": { \"en\": \"evanp arrived at the Empire State Building.\" }, \"location\": { \"id\": \"https://places.example/empire-state-building\", \"type\": \"Place\", \"name\": \"Empire State Building\", \"latitude\": 40.7484, \"longitude\": -73.9857 } } Open Farm Game A Web game at openfarmgame.example lets its users construct imaginary farms with crops, livestock, and buildings. It uses the ActivityPub API to post game events to a user's outbox collection. It defines its client object at https://openfarmgame.example/client . { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/oauth\" ], \"id\": \"https://openfarmgame.example/client\", \"name\": \"Open Farm Game\", \"type\": \"Service\", \"icon\": { \"type\": \"Image\", \"url\": \"https://openfarmgame.example/client/icon.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"Raise crops, grow livestock, and build your farming empire! Open Farm Game is the social farming application you can play with friends and family.\" }, \"attributedTo\": { \"name\": \"FarmGamer Inc.\", \"id\": \"https://openfarmgame.example/organization\", \"type\": \"Organization\", \"icon\": { \"type\": \"Image\", \"url\": \"https://openfarmgame.example/organization/logo.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"We help players become farmers.\" } }, \"redirectURI\": \"https://openfarmgame.example/oauth/callback\" } The authorization flow works as with the follow recommender above. Because the actor primarily interacts with objects on the game server, the game only needs to request write:sameorigin scope. When the user plants a new crop in their imaginary farm, the game posts a Create activity to the user's outbox collection. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", {\"farm\": \"https://openfarmgame.example/ns#\"} ], \"type\": [\"farm:Plant\", \"Create\"], \"summaryMap\": { \"en\": \"evanp planted corn.\" }, \"object\": { \"id\": \"https://openfarmgame.example/crops/1234\", \"type\": [\"farm:Crop\", \"Object\"], \"nameMap\": { \"en\": \"Corn\" }, \"image\": { \"type\": \"Image\", \"url\": \"https://openfarmgame.example/crops/corn.png\", \"width\": 256, \"height\": 256 } } } Note that the object property of the Create activity has an id property with the same origin as the client ID. This allows the actor's home server to verify that the client is only creating objects on the game server. Security considerations OAuth 2.0 Security Best Current Practice provides a number of best practices for implementing OAuth 2.0. One risk of implementing OAuth 2.0 is that the user is redirected to the redirect_uri parameter after authorization is complete. This can be used as an attack to treat the authorization server as an open redirector. The API server should check that the redirect_uri parameter matches the redirectURI property of the client object. A valid redirectURI property should not change often. As with any protocol that requires fetching a client-provided URI, the server should take care in dereferencing the client_id parameter to avoid attacks such as very large responses, responses that take a long time to generate, or responses with poorly-formatted content. The ActivityPub object used to define the client includes metadata that can be spoofed, like the name or icon . An attacker could use the name, icon, or publisher of a popular application to trick users into authorizing the attacker's application. Tools such as shared blocklists, reputation systems, and user education can help mitigate this risk. \u53c2\u8003\u6587\u732e [OAuth2] Dick Hardt, The OAuth 2.0 Authorization Framework , 2012 [OAuth20Simplified], Aaron Parecki, OAuth 2.0 Simplified , 2016 [PKCE], N. Sakimura, J. Bradley, N. Agarwal, Proof Key for Code Exchange by OAuth Public Clients , 2015. [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ActivityPubAuth] Various authors. SocialCG/ActivityPub/Authentication Authorization , 2017 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-d8c2: OAuth 2.0 Profile for the ActivityPub API"},{"location":"fep/fep-d8c2/#fep-d8c2-oauth-20-profile-for-the-activitypub-api","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-d8c2: OAuth 2.0 Profile for the ActivityPub API"},{"location":"fep/fep-d8c2/#summary","text":"This FEP defines a profile of OAuth 2.0 for use with the ActivityPub API.","title":"Summary"},{"location":"fep/fep-d8c2/#motivation","text":"[ActivityPub] defines the ActivityPub API, a RESTful HTTP API for stream-oriented social software. Also called \"client to server\" or \"c2s\", this API allows clients to create new Activity objects by posting to an actor's outbox collection. The ActivityPub specification does not define an authorization mechanism for the API, although the [ActivityPubAuth] recommendations include some suggestions. Although there are many ways to implement client authorization for an API, OAuth 2.0 is a popular and well-understood framework. OAuth 2.0 is very broad and encompasses a number of different techniques and use cases. [OAuth20Simplified] documents the most common profile of OAuth 2.0: authorization code flow and bearer tokens. Many OAuth 2.0 client libraries implement this profile. The most common case for OAuth 2.0 is an API supplied by a single provider. There are three main issues with using OAuth 2.0 for a standard API implemented by many providers. Client identifiers . The OAuth 2.0 flow uses the client identifier to show important information about the client software to the user, and to avoid certain classes of spoofing attacks. With a single provider, the client developer can register a client ID out of band using the provider's developer Web site or other tools. Client developers cannot manually register client IDs with each provider of the ActivityPub API. Client metadata . To make authorization decisions, the user needs to having information about the client software such as its name, description, icon, and publisher. With a single provider, the API service can require client metadata through its registration interface and store it in a database. A client developer cannot manually register client metadata with each provider of the ActivityPub API. Scopes . The OAuth 2.0 flow uses scopes to indicate the permissions that the client is requesting. With a single provider, the provider can define and document a set of scopes that are appropriate for the API. It would be difficult for client developers had to use different scopes for each different ActivityPub API implementer. This profile addresses these issues by using the ActivityPub API itself to identify and describe the client software. It also provides a simple set of scopes appropriate for social software using ActivityPub.","title":"Motivation"},{"location":"fep/fep-d8c2/#specification","text":"Servers MUST provide the oauthAuthorizationEndpoint and oauthTokenEndpoint properties in the actor's endpoints collection. Clients MUST use the oauthAuthorizationEndpoint and oauthTokenEndpoint properties of the actor's endpoints collection. Clients MUST use the Authorization Code flow. Clients MUST use [PKCE] with the S256 method. Clients MUST provide a client_id as the ActivityPub ID of the Application , Service , or other ActivityPub object representing the client (see Client identifier below). The Activity Object resource at the client_id URI MUST have a redirectURI property with the redirect URI for the client (see Redirect URI below). Clients SHOULD NOT provide a client_secret . Servers MUST ignore the client_secret parameter, if provided. The scope parameter SHOULD be a space-separated list of scope values (see Scopes below) as defined by this specification. The scope parameter MAY include extended scopes defined by the server or client. Servers MUST support Bearer tokens . Servers MAY add an instrument property for Activity objects created by the client, with the value of the client_id parameter.","title":"Specification"},{"location":"fep/fep-d8c2/#client-identifier","text":"ActivityPub provides a rich vocabulary for describing objects in the social space. Each object in the ActivityPub world has a unique https: URI, which must be dereferenceable to a JSON-LD document describing the object. This allows a distributed description of ActivityPub API clients that doesn't require out-of-band registration. Objects dereferenced at the SHOULD be of type Application or Service . They MUST have an id property with the same value as the client_id parameter. They MUST have a redirectURI property with the redirect URI for the client (see Context document below). Clients SHOULD provide metadata to help users make authorization decisions, including: nameMap or name : The name of the client software. icon : An Image object with the icon for the client software. summaryMap or summary : A description of the application or service. attributedTo : The name , id , icon and summary properties of the actor responsible for the client software.","title":"Client identifier"},{"location":"fep/fep-d8c2/#scopes","text":"The scope parameter is a space-separated list of scope values. The following scope values are defined: read : The client is requesting permission to read the actor's ActivityPub data, including the inbox , outbox , liked , followers , and following collections, and any other ActivityPub resources on the server, with the actor's authorization. The client is also requesting to use the proxyURL property of the actor, if it exists, to request resources from other servers with the actor's authorization. write : The client is requesting permission to create Activity objects by posting to the actor's outbox collection. This includes Create , Update , Delete , Follow , Undo , and other Activity types. write:sameorigin : The client is requesting permission to create Activity objects by posting to the actor's outbox collection, but only if the Activity 's object , target and/or origin properties have IDs with the same origin as the client ID. This allows the user to grant a limited scope to an application or service to interact with other resources controlled by the client, but not to interact with resources from other sources. \"Same origin\" is defined as a URI with the same scheme, host, and port as the client ID. Extended scopes MAY be defined by the server or client. Servers SHOULD ignore scopes that they do not recognize. Extended scopes SHOULD use the \"primary:restriction\" pattern for naming the scope.","title":"Scopes"},{"location":"fep/fep-d8c2/#context-document","text":"The context document for this specification is at https://purl.archive.org/socialweb/oauth . Its contents are as follows: { \"@context\": { \"oauth\": \"https://purl.archive.org/socialweb/oauth#\", \"redirectURI\": { \"@id\": \"oauth:redirectURI\", \"@type\": \"@id\" } } }","title":"Context document"},{"location":"fep/fep-d8c2/#_1","text":"","title":"\u4f8b"},{"location":"fep/fep-d8c2/#follower-recommender","text":"A Web service that wants to use the ActivityPub API would define an ActivityPub object at https://followrec.example/client . This object has a redirectURI property with the URI of the Web application's authorization endpoint. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/oauth\" ], \"id\": \"https:/followrec.example/apps/myapp\", \"name\": \"Follow Recommender\", \"type\": \"Service\", \"icon\": { \"type\": \"Image\", \"url\": \"http://followrec.example/followrec.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"Follow Recommender is a service that recommends people to follow based on your existing community.\" }, \"attributedTo\": { \"name\": \"Alyssa P. Hacker\", \"id\": \"https://hackers.example/alyssa\", \"type\": \"Person\", \"icon\": { \"type\": \"Image\", \"url\": \"https://hackers.example/alyssa/icon.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"Alyssa P. Hacker builds cool stuff on the Internet.\" } }, \"redirectURI\": \"https://followrec.example/oauth/callback\" } A person who wants to use this application can provide their ActivityPub actor ID either directly ( https://home.example/evanp ) or via a Webfinger lookup ( evanp@home.example ). The Web application discovers the oauthAuthorizationEndpoint to be https://home.example/oauth/authorize , and uses it to construct an URI for the authorization request, including scopes and PKCE parameters. https://home.example/oauth/authorize?response_type=code&client_id=https%3A%2F%2Ffollowrec.example%2Fclient&redirect_uri=https%3A%2F%2Ffollowrec.example%2Foauth%2Fcallback&scope=read+write&state=1234zyx&code_challenge=1234&code_challenge_method=S256 The user is redirected to the authorization endpoint, where they are prompted to authorize the application. The server at home.example retrieves the Service object at https://followrec.example/client and, at a minimum, verifies that the redirectURI property matches the redirect_uri parameter. The home.example server then prompts the user to authorize the application. If the user authorizes the application, the server redirects the user to the redirect_uri parameter with a code parameter. The Web application then uses the oauthTokenEndpoint to exchange the authorization code for an access token and optional refresh token. POST /oauth/token HTTP/1.1 Host: home.example Content-Type: application/x-www-form-urlencoded grant_type=authorization_code&code=1234zyx&client_id=https%3A%2F%2Ffollowrec.example%2Fclient&redirect_uri=https%3A%2F%2Ffollowrec.example%2Foauth%2Fcallback&code_verifier=1234 It can use these access tokens to read the user's following collections and use triadic closure to recommend new people to follow. It can also use the access token to post Follow activities to the user's outbox collection. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Follow\", \"object\": \"https://otherserver.example/otheruser\" } The server at home.example may add the instrument property to the resulting Activity to identify the responsible service. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://home.example/activities/1234\", \"actor\": \"https://home.example/evanp\", \"type\": \"Follow\", \"object\": \"https://otherserver.example/otheruser\", \"instrument\": \"https://followrec.example/client\", \"published\": \"2021-09-01T12:34:56Z\", \"updated\": \"2021-09-01T12:34:56Z\" }","title":"Follower recommender"},{"location":"fep/fep-d8c2/#mobile-checkin-app","text":"An iOS app uses the ActivityPub API to post location updates for a user. Because the app is a native program, it uses a static site provided by its version control system to host the client object at https://developer.git.example/kfc/client.json . { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/oauth\" ], \"id\": \"https:/mobile.example/app\", \"name\": \"Kentucky Fried Checkin\", \"type\": \"Application\", \"icon\": { \"type\": \"Image\", \"url\": \"https://developer.git.example/kfc/icon.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"Kentucky Fried Checkin is a mobile app that allows you to post checkins to your ActivityPub timeline.\" }, \"attributedTo\": { \"name\": \"MobileCorp\", \"id\": \"https://mobilecorp.example/organization\", \"type\": \"Organization\", \"icon\": { \"type\": \"Image\", \"url\": \"https://mobilecorp.example/organization/logo.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"MobileCorp provides cool apps supporting the social web.\" } }, \"redirectURI\": \"checkin:oauth/callback\" } Note that the redirectURI property is a custom URI scheme for the mobile app. A person who wants to use this application can provide their ActivityPub actor ID either directly ( https://home.example/evanp ) or via a Webfinger lookup ( evanp@home.example ). The checkin discovers the oauthAuthorizationEndpoint to be https://home.example/oauth/authorize , and uses it to construct an URI for the authorization request, including scopes and PKCE parameters. https://home.example/oauth/authorize?response_type=code&client_id=https%3A%2F%2Ffollowrec.example%2Fclient&redirect_uri=https%3A%2F%2Ffollowrec.example%2Foauth%2Fcallback&scope=write&state=1234zyx&code_challenge=1234&code_challenge_method=S256 Note that the scope parameter only includes the write scope, because the app only needs to post to the user's outbox collection. The authorization flow continues as with the Follower recommender example, until the mobile app has a valid access token. The mobile app can then post Arrive activities to the user's outbox collection. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Arrive\", \"summaryMap\": { \"en\": \"evanp arrived at the Empire State Building.\" }, \"location\": { \"id\": \"https://places.example/empire-state-building\", \"type\": \"Place\", \"name\": \"Empire State Building\", \"latitude\": 40.7484, \"longitude\": -73.9857 } }","title":"Mobile checkin app"},{"location":"fep/fep-d8c2/#open-farm-game","text":"A Web game at openfarmgame.example lets its users construct imaginary farms with crops, livestock, and buildings. It uses the ActivityPub API to post game events to a user's outbox collection. It defines its client object at https://openfarmgame.example/client . { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://purl.archive.org/socialweb/oauth\" ], \"id\": \"https://openfarmgame.example/client\", \"name\": \"Open Farm Game\", \"type\": \"Service\", \"icon\": { \"type\": \"Image\", \"url\": \"https://openfarmgame.example/client/icon.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"Raise crops, grow livestock, and build your farming empire! Open Farm Game is the social farming application you can play with friends and family.\" }, \"attributedTo\": { \"name\": \"FarmGamer Inc.\", \"id\": \"https://openfarmgame.example/organization\", \"type\": \"Organization\", \"icon\": { \"type\": \"Image\", \"url\": \"https://openfarmgame.example/organization/logo.png\", \"width\": 256, \"height\": 256 }, \"summaryMap\": { \"en\": \"We help players become farmers.\" } }, \"redirectURI\": \"https://openfarmgame.example/oauth/callback\" } The authorization flow works as with the follow recommender above. Because the actor primarily interacts with objects on the game server, the game only needs to request write:sameorigin scope. When the user plants a new crop in their imaginary farm, the game posts a Create activity to the user's outbox collection. { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", {\"farm\": \"https://openfarmgame.example/ns#\"} ], \"type\": [\"farm:Plant\", \"Create\"], \"summaryMap\": { \"en\": \"evanp planted corn.\" }, \"object\": { \"id\": \"https://openfarmgame.example/crops/1234\", \"type\": [\"farm:Crop\", \"Object\"], \"nameMap\": { \"en\": \"Corn\" }, \"image\": { \"type\": \"Image\", \"url\": \"https://openfarmgame.example/crops/corn.png\", \"width\": 256, \"height\": 256 } } } Note that the object property of the Create activity has an id property with the same origin as the client ID. This allows the actor's home server to verify that the client is only creating objects on the game server.","title":"Open Farm Game"},{"location":"fep/fep-d8c2/#security-considerations","text":"OAuth 2.0 Security Best Current Practice provides a number of best practices for implementing OAuth 2.0. One risk of implementing OAuth 2.0 is that the user is redirected to the redirect_uri parameter after authorization is complete. This can be used as an attack to treat the authorization server as an open redirector. The API server should check that the redirect_uri parameter matches the redirectURI property of the client object. A valid redirectURI property should not change often. As with any protocol that requires fetching a client-provided URI, the server should take care in dereferencing the client_id parameter to avoid attacks such as very large responses, responses that take a long time to generate, or responses with poorly-formatted content. The ActivityPub object used to define the client includes metadata that can be spoofed, like the name or icon . An attacker could use the name, icon, or publisher of a popular application to trick users into authorizing the attacker's application. Tools such as shared blocklists, reputation systems, and user education can help mitigate this risk.","title":"Security considerations"},{"location":"fep/fep-d8c2/#_2","text":"[OAuth2] Dick Hardt, The OAuth 2.0 Authorization Framework , 2012 [OAuth20Simplified], Aaron Parecki, OAuth 2.0 Simplified , 2016 [PKCE], N. Sakimura, J. Bradley, N. Agarwal, Proof Key for Code Exchange by OAuth Public Clients , 2015. [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ActivityPubAuth] Various authors. SocialCG/ActivityPub/Authentication Authorization , 2017","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-d8c2/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-d9ad/","text":"FEP-d9ad: Create Conformance Tests for Fediverse Enhancement Proposals Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This is a proposal to enhance the fediverse by creating test cases for FEPs. The proposal describes a Conformance Test Rule format that FEP authors and testers may find useful when creating tests cases as proposed. Contents Context Proposal Conformance Tests W3C Accessibility Conformance Testing (ACT) Rules Format FEP-d9ad Conformance Test Format Conformance Test Components Applicability Change Log Description Expectations Glossary Identifier Input Issues List Name Outcomes Requirements Mapping Target Test Cases Test Subject Test Suite Memberships Appendix: Conformance Context FEP-a4ed: The Fediverse Enhancement Proposal Process describes a process for proposing enhancements to the fediverse (i.e. 'FEPs'). However, this process says nothing about testing implementations claiming to conform to those proposals nor ways of making FEPs that are more conducive to consistent conformance testing. However, consistent testing is an important part of an interoperability and accessibility on the web: In order for web specifications to permit full interoperability and access to all, it is important that the quality of implementation be given as much attention as their development. Moreover, as the complexity of W3C specifications and their interdependencies increases, quality assurance becomes even more important to ensuring their acceptance and deployment in the market \u2015 NIST.gov - W3C Quality Assurance Activity Initiated The goal of this FEP is to propose a way of proposing FEPs that may lead to more consistent testing of candidate implementations claiming to conform to a FEP. For more context on conformance, see the appendix on conformance for: What is Conformance? What is a Conformance Model? Why does Conformance Matter? Proposal FEPs authors MAY include a conformance clause . FEPs authors MAY Indicate which conformance requirements are mandatory, which are recommended, and which are optional . FEP authors MAY write test assertions . FEP authors and testers MAY write tests . FEP testers MAY publish a FEP test as a new FEP. FEP implementors MAY test their implementations. FEP implementors MAY publish an Implementation Conformance Statement explaining how the implementation conforms to a FEP Project and services claiming to implement a FEP SHOULD publish an Implementation Conformance Statement FEP testers MAY write tests using W3C Accessibility Conformance Testing (ACT) Rules Format 1.0 Conformance Tests Conformance Tests provide guidance for developers of automated testing tools and manual testing methodologies, to help ensure consistent interpretation of the FEP. W3C Accessibility Conformance Testing (ACT) Rules Format W3C ACT ( spec ) is a conformance test format that can be used to provide guidance for testing conformance to W3C's Web Content Accessibility Guidelines that are normatively referenced in other standards and laws like section508.gov , gov.co.uk , and Europe's EN 301 549 . While there may be other formats for Conformance Tests, the ACT Format is sufficient for expressing Conformance Tests not only for accessibility, but for FEPs as well. This author was unable to find any other commonly used conformance test formats. At the same time, because the ACT format was designed specifically for accessibility guidelines, the ACT format may be imperfect for FEP Conformance Tests. So this FEP does not specify a strict conformance test format. Instead, it specifies useful components of a Conformance Test , most of which are inspired by similar subcomponents of ACT Rules. FEP-d9ad Conformance Test Format This FEP defines a kind of Conformance Test that may be used. It reuses many good decisions from the ACT Rule Format, while generalizing the format to be useful for expressing tests for things other than accessibility (e.g. FEPs). At a high level, a Conformance Test specifies input required to run the test applicability , or whether the rest of the test even applies to the input targets , derived from input, that should be tested expectations whose assertions about the targets are tested outcomes the result of testing expectations for each test target requirements mapping how the outcomes affect claims about a test subject's conformance to any specific requirements Conformance Test Components Each of these components may be a part of a conformance test. Applicability Change Log Description Expectations Glossary Identifier Input Issues List Name Outcomes Requirements Mapping Target Test Cases Test Subject Test Suite Memberships Applicability Applicability describes how to determine whether a test is even able to be applied to a particular Input and produce a meaningful outcome other than inapplicable . A test may have all kinds of outcomes, e.g. inapplicable . If there is a test specified to apply to an ActivityPub Actor Object and check that it is valid JSON, and the test is run with input of a fish, it's not even possible to check the fish for JSON Syntax conformance to derive any targets or apply expectations. It's a fish. The test doesn't apply at all , and in situations like this, the test run MAY have outcome inapplicable . The Applicability section in a Conformance Test specifies how to determine whether the test applies to the test input and, if so, how to derive the test targets . Inspired by ACT Rule Applicability for Atomic Rules Example An example of an Applicability clause for a hypothetical conformance test is: This test applies to an ActivityPub Actor Object. If the value of the actor input's \"type\" property is an array, there should be a test target for each entry in the array. If it is not an array, there should be one test target whose value is the value of the actor input's \"type\" property. URI https://w3id.org/fep/d9ad/ns/test/applicability Change Log A log with entry for each change to the test over time. For example, if a test if maintained over many years, it is likely that the editors will learn from experience with implementations and usage of the test implementations that there were unexpected inputs the test might be presented with, and then update the test inputs, target, or expectations to better handle the situation. This kind of update is encouraged, but it should be logged in the Conformance Test's Change Log. URI https://w3id.org/fep/d9ad/ns/test/changeLog Description A plain language overview of what the test does and why. Inspired by ACT Rule Description Example This is a conformance test that checks whether an ActivityPub Actor satisfies syntax requirements for the \"type\" property URI https://w3id.org/fep/d9ad/ns/test/description Expectations Assertions about test targets. An Conformance Test MUST contain one or more expectations. The expectations describe what the requirements are for the test targets. An expectation is an assertion about a test target. Expectations determine test target outcomes When a test target meets all expectations, the test target passed the rule. If the test target does not meet all expectations, the test target failed the rule. If there are no test targets, the outcome for the rule is inapplicable. Each expectation must be distinct, unambiguous, and be written in plain language. Inspired by ACT Rule Expectations ACT Rule Expectations for Atomic Rules URI https://w3id.org/fep/d9ad/ns/test/expectations Glossary Definitions for common terms. The Glossary for a test MUST define each of the test's possible Outcomes. Inspired by ACT Rule Glossary Identifier a globally unique identifier that identifies the Conformance Test The Identifier MUST be a URI . Inspired by ACT Rule Identifier ActivityStreams 2.0 id \u4f8b urn:uuid:93bafe14-b13f-4a9a-9d47-0a9316d50c97 https://bengo.is/fep/d9ad URI https://w3id.org/fep/d9ad/ns/test/id Input This is what goes in to each run of the conformance test. The test input is the entirety of how each run of the test can be configured. An Input may itself have several components. Example Input Specification Consider a hypothetical Conformance Test that tests conformance with ActivityPub . An Input to the test may have several components, for example: id - URI - An ActivityPub Object ID authorization - optional string - A value to pass with each request to fetch id The Input and its components MAY be represented as a JSON Object with a property for each named component: Example Input as JSON { \"object\": \"https://bengo.is/fep/d9ad\", \"authorization\": \"mellon\" } URI https://w3id.org/fep/d9ad/ns/test/input Issues List A list of unresolved issues with the test. Tests should be published early and often, even and especially before there are no known issues with it. The issues may be considered over time, perhaps waiting for enough information to determine a resolution, and then the test may be updated accordingly. The Issues List makes test readers aware of unresolved issues that may lead to test changes later. Inspired by ACT Rule Issues List URI https://w3id.org/fep/d9ad/ns/test/issuesList Name A short label for the test that can distinguish it in a list of tests. The name MUST NOT include HTML markup. The name MAY have distinct values for distinct languages. The name may be a value that is not unique amongst all other test cases. However, test names should be sufficiently descriptive to distinguish them from other tests in the same test suite. Inspired by ACT Descriptive Title ActivityStreams 2.0 name > A simple, human-readable, plain-text name for the object. HTML markup MUST NOT be included. The name MAY be expressed using multiple language-tagged values. Example Name An example name for a hypothetical test: ActivityPub Actors MUST have a valid \"type\" property value according to FEP-003c URI https://w3id.org/fep/d9ad/ns/test/name Outcomes A test's glossary SHOULD define every possible outcome that the test may assign to test targets as a result of the test expectations. URI https://w3id.org/fep/d9ad/ns/test/glossary Requirements Mapping When a Conformance Test is designed to test conformance to one or more requirements documents, the test must list all requirements from those documents that are not satisfied when one or more of the outcomes of the test is failed. Each requirement in the mapping must include the following: the requirement name or summary uri identifier url to documentation Inspired by ACT Requirements Mapping URI https://w3id.org/fep/d9ad/ns/test/requirementsMapping Target All parts of the test subject that will be checked by the test. Each target MUST have a test outcome . Each possible outcome SHOULD be defined in the glossary. From a given input , the test may derive many targets. For example, from an input that is a JSON Object, a test could derive a test target for each JSON Object nested within the input Object. Then the test, for each target, could check for conformance to a hypothetical requirement that all objects within the input MUST have a certain property. Inspired by ACT Rule Input ACT Rule Input Aspects URI https://w3id.org/fep/d9ad/ns/test/input Test Cases Test Cases (i.e. test cases for the test itself) are a set of example inputs and corresponding results that implementors of the test can check to be confident they have implemented the test has specified in prose. The Test Cases may also be helpful to test readers seeking to understand the intention of the test expectations . Every Conformance Test Case SHOULD include input targets derived from input outcome for each target how outcomes map to requirements Inspired by ACT Rule Test Cases URI https://w3id.org/fep/d9ad/ns/test/testCases Test Subject An overview of what kind of thing the Conformance Test tests. For example, a FEP Conformance Test may apply to an ActivityPub Actor, or another ActivityPub Object, or some part of a server that hosts many ActivityPub Objects, or it could test something else entirely. The Test Subject is helpful for contextualizing the test Input Inspired By https://en.wikipedia.org/wiki/System_under_test Test Suite Memberships The test suites that the test is a part of, if any. For each test suite membership, the test should specify: name: Plain language name of the Test Suite url: URL to the Test Suite URI https://w3id.org/fep/d9ad/ns/test/testSuiteMemberships Conformance with this Specification Conformance requirements are indicated by sentences containing MUST a la RFC2119 . A FEP-d9ad Conformant Conformance Test is a document satisfying all conformance requirements in this document. Related Links These links were helpful when researching conformance testing w3.org - QA Framework: Specification Guidelines ACT Rules Test Cases ISO 17000 - Conformity Assessment Appendix: Conformance What is Conformance? Conformance is the fulfillment of specified requirements by a product, process, or service. These requirements are detailed in a specification as part of a conformance clause and in the body of the specification. A conformance clause is the section of a specification that identifies all the criteria that must be satisfied in order to claim conformance to the specification. \u2015 w3.org - QA Framework: Specification Guidelines What is a Conformance Model? What does it mean? The conformance model is the conceptual framework in which conformance is defined. It consists of and is defined by addressing at least these three topics: What needs to conform and how \u2014 hereafter designated as class of products. Any special designations or concepts used to distinguish conformance categories, types, etc. (e.g., profile/module/level, well-formed/valid, A/AA/AAA). Ways that conforming implementations can vary from each other (e.g., optionality and extensions). Why care? The key is to communicate to the reader what conformance to the specification is all about. The model provides a framework for implementers, describes what they need to build in order to conform, and explains the different ways that they could claim conformance. It provides users and customers with a basis on which to express their requirements. \u2015 w3.org - QA Framework: Specification Guidelines Why does Conformance Matter? It is inevitable that people (e.g., vendors, purchasers) will either claim conformance or demand conformance to a technology. In fact, claiming conformance to a technology may be required in certain situations. Thus, it is important to provide a consistent and unambiguous way to make these claims. Identification of the specification version, class of products, and conformance label are some of the items that could be part of such wording. Why care? Having a framework, by which to make conformance claims for a particular usage of the technology, minimizes confusion by people who are interested in such claims. Many contexts use conformance claims, including legal as part of regulations, laws, or policies and commercial when selling or buying a product. \u2015 w3.org - QA Framework: Specification Guidelines \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-d9ad: Create Conformance Tests for Fediverse Enhancement Proposals"},{"location":"fep/fep-d9ad/#fep-d9ad-create-conformance-tests-for-fediverse-enhancement-proposals","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-d9ad: Create Conformance Tests for Fediverse Enhancement Proposals"},{"location":"fep/fep-d9ad/#summary","text":"This is a proposal to enhance the fediverse by creating test cases for FEPs. The proposal describes a Conformance Test Rule format that FEP authors and testers may find useful when creating tests cases as proposed.","title":"Summary"},{"location":"fep/fep-d9ad/#contents","text":"Context Proposal Conformance Tests W3C Accessibility Conformance Testing (ACT) Rules Format FEP-d9ad Conformance Test Format Conformance Test Components Applicability Change Log Description Expectations Glossary Identifier Input Issues List Name Outcomes Requirements Mapping Target Test Cases Test Subject Test Suite Memberships Appendix: Conformance","title":"Contents"},{"location":"fep/fep-d9ad/#context","text":"FEP-a4ed: The Fediverse Enhancement Proposal Process describes a process for proposing enhancements to the fediverse (i.e. 'FEPs'). However, this process says nothing about testing implementations claiming to conform to those proposals nor ways of making FEPs that are more conducive to consistent conformance testing. However, consistent testing is an important part of an interoperability and accessibility on the web: In order for web specifications to permit full interoperability and access to all, it is important that the quality of implementation be given as much attention as their development. Moreover, as the complexity of W3C specifications and their interdependencies increases, quality assurance becomes even more important to ensuring their acceptance and deployment in the market \u2015 NIST.gov - W3C Quality Assurance Activity Initiated The goal of this FEP is to propose a way of proposing FEPs that may lead to more consistent testing of candidate implementations claiming to conform to a FEP. For more context on conformance, see the appendix on conformance for: What is Conformance? What is a Conformance Model? Why does Conformance Matter?","title":"Context"},{"location":"fep/fep-d9ad/#proposal","text":"FEPs authors MAY include a conformance clause . FEPs authors MAY Indicate which conformance requirements are mandatory, which are recommended, and which are optional . FEP authors MAY write test assertions . FEP authors and testers MAY write tests . FEP testers MAY publish a FEP test as a new FEP. FEP implementors MAY test their implementations. FEP implementors MAY publish an Implementation Conformance Statement explaining how the implementation conforms to a FEP Project and services claiming to implement a FEP SHOULD publish an Implementation Conformance Statement FEP testers MAY write tests using W3C Accessibility Conformance Testing (ACT) Rules Format 1.0","title":"Proposal"},{"location":"fep/fep-d9ad/#conformance-tests","text":"Conformance Tests provide guidance for developers of automated testing tools and manual testing methodologies, to help ensure consistent interpretation of the FEP.","title":"Conformance Tests"},{"location":"fep/fep-d9ad/#w3c-accessibility-conformance-testing-act-rules-format","text":"W3C ACT ( spec ) is a conformance test format that can be used to provide guidance for testing conformance to W3C's Web Content Accessibility Guidelines that are normatively referenced in other standards and laws like section508.gov , gov.co.uk , and Europe's EN 301 549 . While there may be other formats for Conformance Tests, the ACT Format is sufficient for expressing Conformance Tests not only for accessibility, but for FEPs as well. This author was unable to find any other commonly used conformance test formats. At the same time, because the ACT format was designed specifically for accessibility guidelines, the ACT format may be imperfect for FEP Conformance Tests. So this FEP does not specify a strict conformance test format. Instead, it specifies useful components of a Conformance Test , most of which are inspired by similar subcomponents of ACT Rules.","title":"W3C Accessibility Conformance Testing (ACT) Rules Format"},{"location":"fep/fep-d9ad/#fep-d9ad-conformance-test-format","text":"This FEP defines a kind of Conformance Test that may be used. It reuses many good decisions from the ACT Rule Format, while generalizing the format to be useful for expressing tests for things other than accessibility (e.g. FEPs). At a high level, a Conformance Test specifies input required to run the test applicability , or whether the rest of the test even applies to the input targets , derived from input, that should be tested expectations whose assertions about the targets are tested outcomes the result of testing expectations for each test target requirements mapping how the outcomes affect claims about a test subject's conformance to any specific requirements","title":"FEP-d9ad Conformance Test Format"},{"location":"fep/fep-d9ad/#conformance-test-components","text":"Each of these components may be a part of a conformance test. Applicability Change Log Description Expectations Glossary Identifier Input Issues List Name Outcomes Requirements Mapping Target Test Cases Test Subject Test Suite Memberships","title":"Conformance Test Components"},{"location":"fep/fep-d9ad/#applicability","text":"Applicability describes how to determine whether a test is even able to be applied to a particular Input and produce a meaningful outcome other than inapplicable . A test may have all kinds of outcomes, e.g. inapplicable . If there is a test specified to apply to an ActivityPub Actor Object and check that it is valid JSON, and the test is run with input of a fish, it's not even possible to check the fish for JSON Syntax conformance to derive any targets or apply expectations. It's a fish. The test doesn't apply at all , and in situations like this, the test run MAY have outcome inapplicable . The Applicability section in a Conformance Test specifies how to determine whether the test applies to the test input and, if so, how to derive the test targets . Inspired by ACT Rule Applicability for Atomic Rules","title":"Applicability"},{"location":"fep/fep-d9ad/#example","text":"An example of an Applicability clause for a hypothetical conformance test is: This test applies to an ActivityPub Actor Object. If the value of the actor input's \"type\" property is an array, there should be a test target for each entry in the array. If it is not an array, there should be one test target whose value is the value of the actor input's \"type\" property.","title":"Example"},{"location":"fep/fep-d9ad/#uri","text":"https://w3id.org/fep/d9ad/ns/test/applicability","title":"URI"},{"location":"fep/fep-d9ad/#change-log","text":"A log with entry for each change to the test over time. For example, if a test if maintained over many years, it is likely that the editors will learn from experience with implementations and usage of the test implementations that there were unexpected inputs the test might be presented with, and then update the test inputs, target, or expectations to better handle the situation. This kind of update is encouraged, but it should be logged in the Conformance Test's Change Log.","title":"Change Log"},{"location":"fep/fep-d9ad/#uri_1","text":"https://w3id.org/fep/d9ad/ns/test/changeLog","title":"URI"},{"location":"fep/fep-d9ad/#description","text":"A plain language overview of what the test does and why. Inspired by ACT Rule Description","title":"Description"},{"location":"fep/fep-d9ad/#example_1","text":"This is a conformance test that checks whether an ActivityPub Actor satisfies syntax requirements for the \"type\" property","title":"Example"},{"location":"fep/fep-d9ad/#uri_2","text":"https://w3id.org/fep/d9ad/ns/test/description","title":"URI"},{"location":"fep/fep-d9ad/#expectations","text":"Assertions about test targets. An Conformance Test MUST contain one or more expectations. The expectations describe what the requirements are for the test targets. An expectation is an assertion about a test target. Expectations determine test target outcomes When a test target meets all expectations, the test target passed the rule. If the test target does not meet all expectations, the test target failed the rule. If there are no test targets, the outcome for the rule is inapplicable. Each expectation must be distinct, unambiguous, and be written in plain language. Inspired by ACT Rule Expectations ACT Rule Expectations for Atomic Rules","title":"Expectations"},{"location":"fep/fep-d9ad/#uri_3","text":"https://w3id.org/fep/d9ad/ns/test/expectations","title":"URI"},{"location":"fep/fep-d9ad/#glossary","text":"Definitions for common terms. The Glossary for a test MUST define each of the test's possible Outcomes. Inspired by ACT Rule Glossary","title":"Glossary"},{"location":"fep/fep-d9ad/#identifier","text":"a globally unique identifier that identifies the Conformance Test The Identifier MUST be a URI . Inspired by ACT Rule Identifier ActivityStreams 2.0 id","title":"Identifier"},{"location":"fep/fep-d9ad/#_1","text":"urn:uuid:93bafe14-b13f-4a9a-9d47-0a9316d50c97 https://bengo.is/fep/d9ad","title":"\u4f8b"},{"location":"fep/fep-d9ad/#uri_4","text":"https://w3id.org/fep/d9ad/ns/test/id","title":"URI"},{"location":"fep/fep-d9ad/#input","text":"This is what goes in to each run of the conformance test. The test input is the entirety of how each run of the test can be configured. An Input may itself have several components.","title":"Input"},{"location":"fep/fep-d9ad/#example-input-specification","text":"Consider a hypothetical Conformance Test that tests conformance with ActivityPub . An Input to the test may have several components, for example: id - URI - An ActivityPub Object ID authorization - optional string - A value to pass with each request to fetch id The Input and its components MAY be represented as a JSON Object with a property for each named component:","title":"Example Input Specification"},{"location":"fep/fep-d9ad/#example-input-as-json","text":"{ \"object\": \"https://bengo.is/fep/d9ad\", \"authorization\": \"mellon\" }","title":"Example Input as JSON"},{"location":"fep/fep-d9ad/#uri_5","text":"https://w3id.org/fep/d9ad/ns/test/input","title":"URI"},{"location":"fep/fep-d9ad/#issues-list","text":"A list of unresolved issues with the test. Tests should be published early and often, even and especially before there are no known issues with it. The issues may be considered over time, perhaps waiting for enough information to determine a resolution, and then the test may be updated accordingly. The Issues List makes test readers aware of unresolved issues that may lead to test changes later. Inspired by ACT Rule Issues List","title":"Issues List"},{"location":"fep/fep-d9ad/#uri_6","text":"https://w3id.org/fep/d9ad/ns/test/issuesList","title":"URI"},{"location":"fep/fep-d9ad/#name","text":"A short label for the test that can distinguish it in a list of tests. The name MUST NOT include HTML markup. The name MAY have distinct values for distinct languages. The name may be a value that is not unique amongst all other test cases. However, test names should be sufficiently descriptive to distinguish them from other tests in the same test suite. Inspired by ACT Descriptive Title ActivityStreams 2.0 name > A simple, human-readable, plain-text name for the object. HTML markup MUST NOT be included. The name MAY be expressed using multiple language-tagged values.","title":"Name"},{"location":"fep/fep-d9ad/#example-name","text":"An example name for a hypothetical test: ActivityPub Actors MUST have a valid \"type\" property value according to FEP-003c","title":"Example Name"},{"location":"fep/fep-d9ad/#uri_7","text":"https://w3id.org/fep/d9ad/ns/test/name","title":"URI"},{"location":"fep/fep-d9ad/#outcomes","text":"A test's glossary SHOULD define every possible outcome that the test may assign to test targets as a result of the test expectations.","title":"Outcomes"},{"location":"fep/fep-d9ad/#uri_8","text":"https://w3id.org/fep/d9ad/ns/test/glossary","title":"URI"},{"location":"fep/fep-d9ad/#requirements-mapping","text":"When a Conformance Test is designed to test conformance to one or more requirements documents, the test must list all requirements from those documents that are not satisfied when one or more of the outcomes of the test is failed. Each requirement in the mapping must include the following: the requirement name or summary uri identifier url to documentation Inspired by ACT Requirements Mapping","title":"Requirements Mapping"},{"location":"fep/fep-d9ad/#uri_9","text":"https://w3id.org/fep/d9ad/ns/test/requirementsMapping","title":"URI"},{"location":"fep/fep-d9ad/#target","text":"All parts of the test subject that will be checked by the test. Each target MUST have a test outcome . Each possible outcome SHOULD be defined in the glossary. From a given input , the test may derive many targets. For example, from an input that is a JSON Object, a test could derive a test target for each JSON Object nested within the input Object. Then the test, for each target, could check for conformance to a hypothetical requirement that all objects within the input MUST have a certain property. Inspired by ACT Rule Input ACT Rule Input Aspects","title":"Target"},{"location":"fep/fep-d9ad/#uri_10","text":"https://w3id.org/fep/d9ad/ns/test/input","title":"URI"},{"location":"fep/fep-d9ad/#test-cases","text":"Test Cases (i.e. test cases for the test itself) are a set of example inputs and corresponding results that implementors of the test can check to be confident they have implemented the test has specified in prose. The Test Cases may also be helpful to test readers seeking to understand the intention of the test expectations . Every Conformance Test Case SHOULD include input targets derived from input outcome for each target how outcomes map to requirements Inspired by ACT Rule Test Cases","title":"Test Cases"},{"location":"fep/fep-d9ad/#uri_11","text":"https://w3id.org/fep/d9ad/ns/test/testCases","title":"URI"},{"location":"fep/fep-d9ad/#test-subject","text":"An overview of what kind of thing the Conformance Test tests. For example, a FEP Conformance Test may apply to an ActivityPub Actor, or another ActivityPub Object, or some part of a server that hosts many ActivityPub Objects, or it could test something else entirely. The Test Subject is helpful for contextualizing the test Input Inspired By https://en.wikipedia.org/wiki/System_under_test","title":"Test Subject"},{"location":"fep/fep-d9ad/#test-suite-memberships","text":"The test suites that the test is a part of, if any. For each test suite membership, the test should specify: name: Plain language name of the Test Suite url: URL to the Test Suite","title":"Test Suite Memberships"},{"location":"fep/fep-d9ad/#uri_12","text":"https://w3id.org/fep/d9ad/ns/test/testSuiteMemberships","title":"URI"},{"location":"fep/fep-d9ad/#conformance-with-this-specification","text":"Conformance requirements are indicated by sentences containing MUST a la RFC2119 . A FEP-d9ad Conformant Conformance Test is a document satisfying all conformance requirements in this document.","title":"Conformance with this Specification"},{"location":"fep/fep-d9ad/#related-links","text":"These links were helpful when researching conformance testing w3.org - QA Framework: Specification Guidelines ACT Rules Test Cases ISO 17000 - Conformity Assessment","title":"Related Links"},{"location":"fep/fep-d9ad/#appendix-conformance","text":"","title":"Appendix: Conformance"},{"location":"fep/fep-d9ad/#what-is-conformance","text":"Conformance is the fulfillment of specified requirements by a product, process, or service. These requirements are detailed in a specification as part of a conformance clause and in the body of the specification. A conformance clause is the section of a specification that identifies all the criteria that must be satisfied in order to claim conformance to the specification. \u2015 w3.org - QA Framework: Specification Guidelines","title":"What is Conformance?"},{"location":"fep/fep-d9ad/#what-is-a-conformance-model","text":"What does it mean? The conformance model is the conceptual framework in which conformance is defined. It consists of and is defined by addressing at least these three topics: What needs to conform and how \u2014 hereafter designated as class of products. Any special designations or concepts used to distinguish conformance categories, types, etc. (e.g., profile/module/level, well-formed/valid, A/AA/AAA). Ways that conforming implementations can vary from each other (e.g., optionality and extensions). Why care? The key is to communicate to the reader what conformance to the specification is all about. The model provides a framework for implementers, describes what they need to build in order to conform, and explains the different ways that they could claim conformance. It provides users and customers with a basis on which to express their requirements. \u2015 w3.org - QA Framework: Specification Guidelines","title":"What is a Conformance Model?"},{"location":"fep/fep-d9ad/#why-does-conformance-matter","text":"It is inevitable that people (e.g., vendors, purchasers) will either claim conformance or demand conformance to a technology. In fact, claiming conformance to a technology may be required in certain situations. Thus, it is important to provide a consistent and unambiguous way to make these claims. Identification of the specification version, class of products, and conformance label are some of the items that could be part of such wording. Why care? Having a framework, by which to make conformance claims for a particular usage of the technology, minimizes confusion by people who are interested in such claims. Many contexts use conformance claims, including legal as part of regulations, laws, or policies and commercial when selling or buying a product. \u2015 w3.org - QA Framework: Specification Guidelines","title":"Why does Conformance Matter?"},{"location":"fep/fep-d9ad/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-db0e/","text":"FEP-db0e: Authentication mechanism for non-public groups Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This proposal addresses the problem of authenticating access to the content of non-public groups. It is mostly intended to supplement FEP-400e . Only the server that hosts the Group actor knows for sure who can and can not access the content in the group. However, due to each object being hosted on the server of the actor that created it, it is not ordinarily possible for those other servers to restrict access to that object only to those actors who have the permission to see it. This FEP defines an authentication mechanism, \"actor tokens\", that allows an actor to issue tokens that serve as a temporary proof of group membership for other servers. Requirements The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119]. Fetching content from the server that hosts the group To fetch an object from the server that hosts the group (including the Group actor itself for private groups), the requesting server MUST sign the GET request with an HTTP signature using the key of any of its actors. It is RECOMMENDED to use a server-wide service actor for this purpose, e.g. /activitypub/serviceActor in Smithereen. The rationale for this is that most ActivityPub servers only fetch and store a single copy of each remote object for all users to whom it may concern, and are responsible themselves for enforcing the visibility rules, if any, either way. Using actor tokens The process of fetching an object from other server involves an actor token . An actor token is a cryptographically signed temporary proof of membership in a group. Since it would be impractical to provide a revocation mechanism, an actor token has a limited validity time in order to account for cases when someone has left a group or was removed from it. Structure of the actor token An actor token is a JSON object with the following REQUIRED fields: issuer : ID of the actor that generated this token actor : ID of the actor that the token is issued to (and must be presented with a valid HTTP signature of) issuedAt : timestamp when the token was generated, ISO-8601 instant (same format as ActivityPub timestamps) validUntil : timestamp when the token expires, ISO-8601 instant signatures : array of signature objects, currently with only one possible, and REQUIRED, element defined: algorithm : must be the string rsa-sha256 keyId : key ID, same as in HTTP signatures (e.g. https://example.com/groups/1#main-key ) signature : the RSA-SHA256 signature itself encoded as base64, see below for details The sm:actorToken endpoint Actors that are capable of issuing actor tokens have a sm:actorToken endpoint (where sm is an alias to JSON-LD namespace http://smithereen.software/ns# ) in their endpoints object. This endpoint accepts signed GET requests and returns actor tokens. Making use of the actor token To use an actor token when fetching an object, pass it as Authorization: ActivityPubActorToken {...} HTTP header. Generation of the source string for signature Iterate over the keys in the actor token JSON object, skipping signature , and transform them into the format key: value . Add these strings to an array. Sort the resulting array lexicographically. Join the strings with newline character ( \\n , U+000A). Convert the resulting string to a UTF-8 byte array. Generation of the actor token Verify that the requesting actor, as per HTTP signature, has access to the group (there are members with the same domain). If it does not, you MUST return a 403 error and stop. Create a JSON object with the fields above (except signature ). It is RECOMMENDED that the validity period is 30 minutes, and it MUST NOT exceed 2 hours. Generate a signature source string as above, sign it, and wrap the signature into an object with signature , algorithm , and keyId fields. Add the object as a single element in the signatures array. Return the resulting JSON object to the client. Verification of the actor token Check that the HTTP signature is valid, and that actor in the token object matches the actor ID from keyId in the HTTP signature. Otherwise, you MUST return a 403 and stop. In the signatures array, find an object that has algorithm set to rsa-sha256 to get the signature value. If there isn't any, you MUST return a 403 and stop. Check the validity time: issuedAt MUST be in the past, validUntil MUST be in the future, and the difference between them MUST NOT exceed 2 hours. It is RECOMMENDED to apply some margin to these checks to account for imprecisely set clocks. Smithereen uses 5 minutes. Generate the signature source string as above and verify the signature. Check that the object the requester is accessing is, in fact, part of a collection owned by issuer . If all of the above checks pass, return the requested object. Otherwise, return a 403. Example of an actor token object { \"issuer\":\"https://friends.grishka.me/groups/75\", \"actor\":\"https://activitypub.academy/actor\", \"issuedAt\":\"2024-05-03T14:02:18.680404311Z\", \"validUntil\":\"2024-05-03T14:32:18.680404311Z\", \"signatures\":[ { \"algorithm\":\"rsa-sha256\", \"keyId\":\"https://friends.grishka.me/groups/75#main-key\", \"signature\":\"w+W1nNV+XBvXi8sDEUZB7muWSSnv1mEE4tNZJqF5LeoxAstBMiBZi8dtHF+v+vXKVPWBAdZUKLS5CttmgZ4tvnvZAfsBztCjYLyiolVQ71IO2Jxlu00Xo9FDoSTRZ61tXdfWufuzs5lRjG3t+S1t1lLllBFmvPLg6BwmdEPvlZvPYnTJzwNY0ljOjickPqfyvdzIslmdYX6dPC0Ayyi028ZmR2SN1Vooc9vnUQ7GMPrlAZtmXgjCVGw5X/cKlAVvGECxRjJnkKEKiLp3lv/SM1UUhP3VRpBSFhXnRX/1QhTUaFV1MhrfDFgWGPg8ypIf6O/M52+iSpJyIOGepmjmow==\" } ] } \u5b9f\u88c5 Smithereen \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Gregory Klyushnikov, Publicly-appendable ActivityPub collections , 2021 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-db0e: Authentication mechanism for non-public groups"},{"location":"fep/fep-db0e/#fep-db0e-authentication-mechanism-for-non-public-groups","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-db0e: Authentication mechanism for non-public groups"},{"location":"fep/fep-db0e/#summary","text":"This proposal addresses the problem of authenticating access to the content of non-public groups. It is mostly intended to supplement FEP-400e . Only the server that hosts the Group actor knows for sure who can and can not access the content in the group. However, due to each object being hosted on the server of the actor that created it, it is not ordinarily possible for those other servers to restrict access to that object only to those actors who have the permission to see it. This FEP defines an authentication mechanism, \"actor tokens\", that allows an actor to issue tokens that serve as a temporary proof of group membership for other servers.","title":"Summary"},{"location":"fep/fep-db0e/#requirements","text":"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119].","title":"Requirements"},{"location":"fep/fep-db0e/#fetching-content-from-the-server-that-hosts-the-group","text":"To fetch an object from the server that hosts the group (including the Group actor itself for private groups), the requesting server MUST sign the GET request with an HTTP signature using the key of any of its actors. It is RECOMMENDED to use a server-wide service actor for this purpose, e.g. /activitypub/serviceActor in Smithereen. The rationale for this is that most ActivityPub servers only fetch and store a single copy of each remote object for all users to whom it may concern, and are responsible themselves for enforcing the visibility rules, if any, either way.","title":"Fetching content from the server that hosts the group"},{"location":"fep/fep-db0e/#using-actor-tokens","text":"The process of fetching an object from other server involves an actor token . An actor token is a cryptographically signed temporary proof of membership in a group. Since it would be impractical to provide a revocation mechanism, an actor token has a limited validity time in order to account for cases when someone has left a group or was removed from it.","title":"Using actor tokens"},{"location":"fep/fep-db0e/#structure-of-the-actor-token","text":"An actor token is a JSON object with the following REQUIRED fields: issuer : ID of the actor that generated this token actor : ID of the actor that the token is issued to (and must be presented with a valid HTTP signature of) issuedAt : timestamp when the token was generated, ISO-8601 instant (same format as ActivityPub timestamps) validUntil : timestamp when the token expires, ISO-8601 instant signatures : array of signature objects, currently with only one possible, and REQUIRED, element defined: algorithm : must be the string rsa-sha256 keyId : key ID, same as in HTTP signatures (e.g. https://example.com/groups/1#main-key ) signature : the RSA-SHA256 signature itself encoded as base64, see below for details","title":"Structure of the actor token"},{"location":"fep/fep-db0e/#the-smactortoken-endpoint","text":"Actors that are capable of issuing actor tokens have a sm:actorToken endpoint (where sm is an alias to JSON-LD namespace http://smithereen.software/ns# ) in their endpoints object. This endpoint accepts signed GET requests and returns actor tokens.","title":"The sm:actorToken endpoint"},{"location":"fep/fep-db0e/#making-use-of-the-actor-token","text":"To use an actor token when fetching an object, pass it as Authorization: ActivityPubActorToken {...} HTTP header.","title":"Making use of the actor token"},{"location":"fep/fep-db0e/#generation-of-the-source-string-for-signature","text":"Iterate over the keys in the actor token JSON object, skipping signature , and transform them into the format key: value . Add these strings to an array. Sort the resulting array lexicographically. Join the strings with newline character ( \\n , U+000A). Convert the resulting string to a UTF-8 byte array.","title":"Generation of the source string for signature"},{"location":"fep/fep-db0e/#generation-of-the-actor-token","text":"Verify that the requesting actor, as per HTTP signature, has access to the group (there are members with the same domain). If it does not, you MUST return a 403 error and stop. Create a JSON object with the fields above (except signature ). It is RECOMMENDED that the validity period is 30 minutes, and it MUST NOT exceed 2 hours. Generate a signature source string as above, sign it, and wrap the signature into an object with signature , algorithm , and keyId fields. Add the object as a single element in the signatures array. Return the resulting JSON object to the client.","title":"Generation of the actor token"},{"location":"fep/fep-db0e/#verification-of-the-actor-token","text":"Check that the HTTP signature is valid, and that actor in the token object matches the actor ID from keyId in the HTTP signature. Otherwise, you MUST return a 403 and stop. In the signatures array, find an object that has algorithm set to rsa-sha256 to get the signature value. If there isn't any, you MUST return a 403 and stop. Check the validity time: issuedAt MUST be in the past, validUntil MUST be in the future, and the difference between them MUST NOT exceed 2 hours. It is RECOMMENDED to apply some margin to these checks to account for imprecisely set clocks. Smithereen uses 5 minutes. Generate the signature source string as above and verify the signature. Check that the object the requester is accessing is, in fact, part of a collection owned by issuer . If all of the above checks pass, return the requested object. Otherwise, return a 403.","title":"Verification of the actor token"},{"location":"fep/fep-db0e/#example-of-an-actor-token-object","text":"{ \"issuer\":\"https://friends.grishka.me/groups/75\", \"actor\":\"https://activitypub.academy/actor\", \"issuedAt\":\"2024-05-03T14:02:18.680404311Z\", \"validUntil\":\"2024-05-03T14:32:18.680404311Z\", \"signatures\":[ { \"algorithm\":\"rsa-sha256\", \"keyId\":\"https://friends.grishka.me/groups/75#main-key\", \"signature\":\"w+W1nNV+XBvXi8sDEUZB7muWSSnv1mEE4tNZJqF5LeoxAstBMiBZi8dtHF+v+vXKVPWBAdZUKLS5CttmgZ4tvnvZAfsBztCjYLyiolVQ71IO2Jxlu00Xo9FDoSTRZ61tXdfWufuzs5lRjG3t+S1t1lLllBFmvPLg6BwmdEPvlZvPYnTJzwNY0ljOjickPqfyvdzIslmdYX6dPC0Ayyi028ZmR2SN1Vooc9vnUQ7GMPrlAZtmXgjCVGw5X/cKlAVvGECxRjJnkKEKiLp3lv/SM1UUhP3VRpBSFhXnRX/1QhTUaFV1MhrfDFgWGPg8ypIf6O/M52+iSpJyIOGepmjmow==\" } ] }","title":"Example of an actor token object"},{"location":"fep/fep-db0e/#_1","text":"Smithereen","title":"\u5b9f\u88c5"},{"location":"fep/fep-db0e/#_2","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Gregory Klyushnikov, Publicly-appendable ActivityPub collections , 2021 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-db0e/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-dc88/","text":"FEP-dc88: Formatting Mathematics Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP recommends a method for formatting mathematics in ActivityPub post content in [MathML Core]. Furthermore, this FEP describes how to sanitize and convert such mathematics to plain text, if an implementation does not wish to support mathematical formatting. Requirements The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119]. \u201cThe implementation\u201d is to be interpreted as an ActivityPub conformant Client, ActivityPub conformant Server or ActivityPub conformant Federated Server as described in [ActivityPub] which wishes to produce or consume mathematically formatted content. History Written mathematics depends very heavily on a system of notation which has been continuously evolving over thousands of years. Despite its ubiquity, mathematical notation is anything but constant. Mathematicians rely heavily on complicated typesetting systems such as [LaTeX] to layout text in their desired fashion. Several fediverse instances, such as [Mathstodon] have emerged to host discussion related to mathematics. This is to no small part due to the difficulty of conveying and formatting mathematical text, and many provide their own typesetting implementation based on [LaTeX]. However, rendering TeX-like formats is expensive and fraught with issues due to security and implementation-specific quirks. This has resulted in multiple instances with incompatible TeX-like implementations. In recent years, [MathML Core] has become standardized by all major web browsers, and offers an alternative method to communicate mathematics between differing fediverse implementations that is compatible with the ActivityPub standard. Formatting Mathematics The implementation MAY produce mathematical formatting in the summary or content properties of [ActivityStreams] objects, as defined in [Activity Vocabulary] if the mediaType is text/HTML (the default). This formatting MUST be placed within one or more top-level <math> elements, hereon referred to as 'a math element'. A math element MUST contain one <semantics> child element, and no other children. The <semantics> element MUST contain a [MathML Core] expression as its first child, and at least one <annotation> element. The encoding property of this <annotation> element SHOULD be \"application/x-tex\" , but MAY be \"text/plain\" , and MUST contain a plain-text description of the mathematics\u2014preferably in the authored format. The implementation MAY include additional <annotation> or <annotation-xml> elements with other semantic information. All elements contained within a math element MUST be MathML Core Elements as defined in [MathML Core], excluding those contained within <annotation> elements. Sanitizing Mathematically Formatted Text The implementation SHOULD sanitize incoming mathematical formatting before displaying it to a user. There are two methods by which an implementation may sanitize incoming mathematical formatting. Sanitizing a math element The implementation MAY sanitize a math element before displaying it to a user. The implementation SHOULD remove all non MathML Core Elements as defined in [MathML Core]. The implementation MAY remove any attribute which does not contain semantic information (see [Semantic Attributes]). The implementation SHALL NOT remove any [Semantic Attributes] or MathML core Elements and instead should replace a math element with text. Replacing a math element with text The implementation MAY remove a math element completely, and replace it with text within the <annotation> element with encoding \"application/x-tex\" as described in [Formatting Mathematics] and SHOULD fall back to a \"text/plain\" annotation. If a math element is not formatted as described in [Formatting Mathematics], then the implementation MUST remove it completely. The implementation MAY surround the text from the <annotation> element with a pair of delimiters. For example, if a math element has the attribute display=\"block\" , it may choose the delimiters $$ and $$ , and if displaystyle=\"inline\" it may choose $ and $ to match the TeX typesetting system. \u4f8b {\"@context\": [\"https://www.w3.org/ns/activitystreams\", {\"@language\": \"en\"}], \"type\": \"Note\", \"id\": \"http://postparty.example/p/2415\", \"content\": \"I have a truly marvelous proof that <math> <semantics> <mrow> <msup><mi>x</mi><mi>n</mi></msup> <mo>+</mo> <msup><mi>y</mi><mi>n</mi></msup> <mo>\u2260</mo> <msup><mi>z</mi><mi>n</mi></msup> </mrow> <annotation encoding=\\\"application/x-tex\\\">x^n+y^n\\\\ne z^n</annotation> </semantics> </math> which this note is too small to contain!\", \"source\": { \"content\": \"I have a truly marvelous proof that \\\\(x^n+y^n\\\\ne z^n\\\\) which this note is too small to contain!\", \"mediaType\": \"text/markdown+math\"}} This object's source content represents a valid sanitization of its content field. Semantic Attributes Element Attributes Values all mathvariant normal all displaystyle , scriptlevel all <math> display all <mfrac> linethickness 0 , 1 <mspace> width , height , depth all <mo> form stretchy , symmetric , largeop , movablelimits , lspace , rspace , minsize , all \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ActivityStreams] James M Snell, Evan Prodromou, ActivityStreams 2.0 , 2017 [Activity Vocabulary] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [LaTeX] LaTeX authors, The LaTeX Project [MathML Core] David Carlisle, Fr\u00e9d\u00e9ric Wang, MathML Core W3C Candidate Reccomendation Snapshot , 2023 [Mathstodon] Mathstodon Admins, About Mathstodon , retrieved 2023 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-dc88: Formatting Mathematics"},{"location":"fep/fep-dc88/#fep-dc88-formatting-mathematics","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-dc88: Formatting Mathematics"},{"location":"fep/fep-dc88/#summary","text":"This FEP recommends a method for formatting mathematics in ActivityPub post content in [MathML Core]. Furthermore, this FEP describes how to sanitize and convert such mathematics to plain text, if an implementation does not wish to support mathematical formatting.","title":"Summary"},{"location":"fep/fep-dc88/#requirements","text":"The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d, \u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this specification are to be interpreted as described in [RFC-2119]. \u201cThe implementation\u201d is to be interpreted as an ActivityPub conformant Client, ActivityPub conformant Server or ActivityPub conformant Federated Server as described in [ActivityPub] which wishes to produce or consume mathematically formatted content.","title":"Requirements"},{"location":"fep/fep-dc88/#history","text":"Written mathematics depends very heavily on a system of notation which has been continuously evolving over thousands of years. Despite its ubiquity, mathematical notation is anything but constant. Mathematicians rely heavily on complicated typesetting systems such as [LaTeX] to layout text in their desired fashion. Several fediverse instances, such as [Mathstodon] have emerged to host discussion related to mathematics. This is to no small part due to the difficulty of conveying and formatting mathematical text, and many provide their own typesetting implementation based on [LaTeX]. However, rendering TeX-like formats is expensive and fraught with issues due to security and implementation-specific quirks. This has resulted in multiple instances with incompatible TeX-like implementations. In recent years, [MathML Core] has become standardized by all major web browsers, and offers an alternative method to communicate mathematics between differing fediverse implementations that is compatible with the ActivityPub standard.","title":"History"},{"location":"fep/fep-dc88/#formatting-mathematics","text":"The implementation MAY produce mathematical formatting in the summary or content properties of [ActivityStreams] objects, as defined in [Activity Vocabulary] if the mediaType is text/HTML (the default). This formatting MUST be placed within one or more top-level <math> elements, hereon referred to as 'a math element'. A math element MUST contain one <semantics> child element, and no other children. The <semantics> element MUST contain a [MathML Core] expression as its first child, and at least one <annotation> element. The encoding property of this <annotation> element SHOULD be \"application/x-tex\" , but MAY be \"text/plain\" , and MUST contain a plain-text description of the mathematics\u2014preferably in the authored format. The implementation MAY include additional <annotation> or <annotation-xml> elements with other semantic information. All elements contained within a math element MUST be MathML Core Elements as defined in [MathML Core], excluding those contained within <annotation> elements.","title":"Formatting Mathematics"},{"location":"fep/fep-dc88/#sanitizing-mathematically-formatted-text","text":"The implementation SHOULD sanitize incoming mathematical formatting before displaying it to a user. There are two methods by which an implementation may sanitize incoming mathematical formatting.","title":"Sanitizing Mathematically Formatted Text"},{"location":"fep/fep-dc88/#sanitizing-a-math-element","text":"The implementation MAY sanitize a math element before displaying it to a user. The implementation SHOULD remove all non MathML Core Elements as defined in [MathML Core]. The implementation MAY remove any attribute which does not contain semantic information (see [Semantic Attributes]). The implementation SHALL NOT remove any [Semantic Attributes] or MathML core Elements and instead should replace a math element with text.","title":"Sanitizing a math element"},{"location":"fep/fep-dc88/#replacing-a-math-element-with-text","text":"The implementation MAY remove a math element completely, and replace it with text within the <annotation> element with encoding \"application/x-tex\" as described in [Formatting Mathematics] and SHOULD fall back to a \"text/plain\" annotation. If a math element is not formatted as described in [Formatting Mathematics], then the implementation MUST remove it completely. The implementation MAY surround the text from the <annotation> element with a pair of delimiters. For example, if a math element has the attribute display=\"block\" , it may choose the delimiters $$ and $$ , and if displaystyle=\"inline\" it may choose $ and $ to match the TeX typesetting system.","title":"Replacing a math element with text"},{"location":"fep/fep-dc88/#_1","text":"{\"@context\": [\"https://www.w3.org/ns/activitystreams\", {\"@language\": \"en\"}], \"type\": \"Note\", \"id\": \"http://postparty.example/p/2415\", \"content\": \"I have a truly marvelous proof that <math> <semantics> <mrow> <msup><mi>x</mi><mi>n</mi></msup> <mo>+</mo> <msup><mi>y</mi><mi>n</mi></msup> <mo>\u2260</mo> <msup><mi>z</mi><mi>n</mi></msup> </mrow> <annotation encoding=\\\"application/x-tex\\\">x^n+y^n\\\\ne z^n</annotation> </semantics> </math> which this note is too small to contain!\", \"source\": { \"content\": \"I have a truly marvelous proof that \\\\(x^n+y^n\\\\ne z^n\\\\) which this note is too small to contain!\", \"mediaType\": \"text/markdown+math\"}} This object's source content represents a valid sanitization of its content field.","title":"\u4f8b"},{"location":"fep/fep-dc88/#semantic-attributes","text":"Element Attributes Values all mathvariant normal all displaystyle , scriptlevel all <math> display all <mfrac> linethickness 0 , 1 <mspace> width , height , depth all <mo> form stretchy , symmetric , largeop , movablelimits , lspace , rspace , minsize , all","title":"Semantic Attributes"},{"location":"fep/fep-dc88/#_2","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [ActivityStreams] James M Snell, Evan Prodromou, ActivityStreams 2.0 , 2017 [Activity Vocabulary] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [LaTeX] LaTeX authors, The LaTeX Project [MathML Core] David Carlisle, Fr\u00e9d\u00e9ric Wang, MathML Core W3C Candidate Reccomendation Snapshot , 2023 [Mathstodon] Mathstodon Admins, About Mathstodon , retrieved 2023 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-dc88/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-dd4b/","text":"FEP-dd4b: Quote Posts Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP describes the mechanism defined in Activity Streams 2.0 and the Activity Vocabulary for making quote posts, that is, Announce activities with additional commentary. Motivation Redistributing content or activities created by other actors is a key activity on the social web. The Announce activity type is defined in Activity Streams 2.0 (\"AS2\") to represent this activity. Announce is used in ActivityPub to provide sharing functionality; see 7.11 Announce Activity (sharing) . The Activity object type in AS2 inherits all the properties of the Object type. This means that all activity types have a rich set of properties for representation as first-class content on the social web. The Announce type is no exception. However, the ActivityPub specification does not describe how to use those properties to provide additional commentary, metadata, and files for the shared content. Called \"quote Tweets\" , \"repost with comment\", or \"quote posts\" , this kind of extended sharing gives additional context to shared objects. This FEP describes how to use the content property to provide this commentary, as well as other properties that may be useful in this context. It is applicable to uses of Activity Streams 2.0 in general; where it applies to ActivityPub, it is noted. Specification The object property of an Announce activity MUST be a reference to the shared content. It MAY be an AS2 Object or a Link , either as a JSON object or as a URL. The content property of an Announce activity MAY be used to provide additional commentary on the shared content. The attachment property of an Announce activity MAY be used to provide additional media content related to the shared content or the commentary. The tag property of an Announce activity MAY be used to provide additional metadata, such as Mention objects or Hashtag objects, about the shared content or the commentary. The inReplyTo property of an Announce activity MAY be used to connect an Announce activity to another object as a reply. The replied-to object MAY be the shared content, but this is unusual; it MAY also be part of a separate conversation. An Announce activity with an inReplyTo property SHOULD be included in the replies collection of the object being replied to. Announce activities SHOULD be counted as part of the shares collection of the shared content, regardless of any additional properties, as defined in 7.11 Announce Activity (sharing) . \u4f8b Basic Quote Post This represents a simple quote post, where the actor is sharing a note from another actor with commentary. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/aaabbbccc\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"to\": \"https://example.com/users/evan/followers\", \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"I think that this is a good point and should be shared.\" } Quote Post with Attachment This represents a quote post with an attachment, where the actor is sharing a note from another actor with commentary and an image. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/dddeeefff\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"to\": \"https://example.com/users/evan/followers\", \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"The author describes the rock formations of Crete; here's an example from my recent visit.\", \"attachment\": { \"type\": \"Link\", \"mediaType\": \"image/jpeg\", \"url\": \"https://example.com/images/1234.jpg\" } } Quote Post with Hashtag This represents a quote post with a hashtag, where the actor is sharing a note from another actor with commentary and a hashtag. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/ghhiijjkk\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"to\": \"https://example.com/users/evan/followers\", \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"Great description of Cretan geology; saving it for my next trip. <a href='https://example.com/tags/evanstriptocrete'>#evanstriptocrete</a>\", \"tag\": { \"type\": \"Hashtag\", \"href\": \"https://example.com/tags/evanstriptocrete\", \"name\": \"evanstriptocrete\" } } Quote Post with Mention This represents a quote post with a mention, where the actor is sharing a note from another actor with commentary and a mention. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/lllmmnnoo\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"to\": [\"https://example.com/users/evan/followers\", \"https://example.com/users/jeff\"], \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"<a href='https://example.com/users/jeff'>@jeff</a> you might like this Cretan geology article.\", \"tag\": { \"type\": \"Mention\", \"href\": \"https://example.com/users/jeff\", \"name\": \"jeff\" } } The author of the quoted material can also be mentioned. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/pppqqqrrr\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"to\": [\"https://example.com/users/evan/followers\", \"https://example.com/users/franklin\"], \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"<a href='https://example.com/users/franklin'>@franklin</a> wrote this great Cretan geology article.\", \"tag\": { \"type\": \"Mention\", \"href\": \"https://example.com/users/franklin\", \"name\": \"franklin\" } } Quote Post as Reply A quote post can be used as a reply, often to share evidence or information from another source. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/rrrsssttt\", \"type\": \"Note\", \"actor\": \"https://example.com/users/jeff\", \"to\": \"https://example.com/users/jeff/followers\", \"content\": \"Does anyone know where I can find a good article on Cretan geology?\", \"replies\": { \"id\": \"https://example.com/activities/rrrsssttt/replies\", \"type\": \"Collection\", \"totalItems\": 1, \"items\": [ { \"id\": \"https://example.com/activities/lllmmnnoo\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"<a href='https://example.com/users/jeff'>@jeff</a> you might like this Cretan geology article.\", \"tag\": { \"type\": \"Mention\", \"href\": \"https://example.com/users/jeff\", \"name\": \"jeff\" }, \"inReplyTo\": \"https://example.com/activities/rrrsssttt\" } ] } } User interface guidance A common representation of quote posts is to include the object of the Announce as an embedded card or other representation, with the content of the Announce object as introductory text. Security considerations For all Announce activities, it's important to consider how much of the shared content to expose to the recipient of the Announce activity. Using an URL as a reference, or including a limited set of metadata as in the examples in this FEP, allows the publishing server for the shared content to control access to the content. See Inclusion of the shared object in the ActivityPub Primer for more information. \u53c2\u8003\u6587\u732e James Snell, Evan Prodromou, et al. Activity Streams 2.0 . W3C Recommendation. 8 May 2018. James Snell, Evan Prodromou, et al. Activity Streams Vocabulary . W3C Recommendation. 8 May 2018. Christine Lemmer-Webber, Jessica Tallon, et al. ActivityPub . W3C Recommendation. 23 January 2018. Evan Prodromou. ActivityPub Miscellaneous Terms . W3C Social Web Community Group Draft Report. 3 October 2024. W3C members and contributors. ActivityPub Primer . W3C Wiki. 2023 and later. \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-dd4b: Quote Posts"},{"location":"fep/fep-dd4b/#fep-dd4b-quote-posts","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-dd4b: Quote Posts"},{"location":"fep/fep-dd4b/#summary","text":"This FEP describes the mechanism defined in Activity Streams 2.0 and the Activity Vocabulary for making quote posts, that is, Announce activities with additional commentary.","title":"Summary"},{"location":"fep/fep-dd4b/#motivation","text":"Redistributing content or activities created by other actors is a key activity on the social web. The Announce activity type is defined in Activity Streams 2.0 (\"AS2\") to represent this activity. Announce is used in ActivityPub to provide sharing functionality; see 7.11 Announce Activity (sharing) . The Activity object type in AS2 inherits all the properties of the Object type. This means that all activity types have a rich set of properties for representation as first-class content on the social web. The Announce type is no exception. However, the ActivityPub specification does not describe how to use those properties to provide additional commentary, metadata, and files for the shared content. Called \"quote Tweets\" , \"repost with comment\", or \"quote posts\" , this kind of extended sharing gives additional context to shared objects. This FEP describes how to use the content property to provide this commentary, as well as other properties that may be useful in this context. It is applicable to uses of Activity Streams 2.0 in general; where it applies to ActivityPub, it is noted.","title":"Motivation"},{"location":"fep/fep-dd4b/#specification","text":"The object property of an Announce activity MUST be a reference to the shared content. It MAY be an AS2 Object or a Link , either as a JSON object or as a URL. The content property of an Announce activity MAY be used to provide additional commentary on the shared content. The attachment property of an Announce activity MAY be used to provide additional media content related to the shared content or the commentary. The tag property of an Announce activity MAY be used to provide additional metadata, such as Mention objects or Hashtag objects, about the shared content or the commentary. The inReplyTo property of an Announce activity MAY be used to connect an Announce activity to another object as a reply. The replied-to object MAY be the shared content, but this is unusual; it MAY also be part of a separate conversation. An Announce activity with an inReplyTo property SHOULD be included in the replies collection of the object being replied to. Announce activities SHOULD be counted as part of the shares collection of the shared content, regardless of any additional properties, as defined in 7.11 Announce Activity (sharing) .","title":"Specification"},{"location":"fep/fep-dd4b/#_1","text":"","title":"\u4f8b"},{"location":"fep/fep-dd4b/#basic-quote-post","text":"This represents a simple quote post, where the actor is sharing a note from another actor with commentary. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/aaabbbccc\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"to\": \"https://example.com/users/evan/followers\", \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"I think that this is a good point and should be shared.\" }","title":"Basic Quote Post"},{"location":"fep/fep-dd4b/#quote-post-with-attachment","text":"This represents a quote post with an attachment, where the actor is sharing a note from another actor with commentary and an image. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/dddeeefff\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"to\": \"https://example.com/users/evan/followers\", \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"The author describes the rock formations of Crete; here's an example from my recent visit.\", \"attachment\": { \"type\": \"Link\", \"mediaType\": \"image/jpeg\", \"url\": \"https://example.com/images/1234.jpg\" } }","title":"Quote Post with Attachment"},{"location":"fep/fep-dd4b/#quote-post-with-hashtag","text":"This represents a quote post with a hashtag, where the actor is sharing a note from another actor with commentary and a hashtag. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/ghhiijjkk\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"to\": \"https://example.com/users/evan/followers\", \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"Great description of Cretan geology; saving it for my next trip. <a href='https://example.com/tags/evanstriptocrete'>#evanstriptocrete</a>\", \"tag\": { \"type\": \"Hashtag\", \"href\": \"https://example.com/tags/evanstriptocrete\", \"name\": \"evanstriptocrete\" } }","title":"Quote Post with Hashtag"},{"location":"fep/fep-dd4b/#quote-post-with-mention","text":"This represents a quote post with a mention, where the actor is sharing a note from another actor with commentary and a mention. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/lllmmnnoo\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"to\": [\"https://example.com/users/evan/followers\", \"https://example.com/users/jeff\"], \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"<a href='https://example.com/users/jeff'>@jeff</a> you might like this Cretan geology article.\", \"tag\": { \"type\": \"Mention\", \"href\": \"https://example.com/users/jeff\", \"name\": \"jeff\" } } The author of the quoted material can also be mentioned. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/pppqqqrrr\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"to\": [\"https://example.com/users/evan/followers\", \"https://example.com/users/franklin\"], \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"<a href='https://example.com/users/franklin'>@franklin</a> wrote this great Cretan geology article.\", \"tag\": { \"type\": \"Mention\", \"href\": \"https://example.com/users/franklin\", \"name\": \"franklin\" } }","title":"Quote Post with Mention"},{"location":"fep/fep-dd4b/#quote-post-as-reply","text":"A quote post can be used as a reply, often to share evidence or information from another source. { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/activities/rrrsssttt\", \"type\": \"Note\", \"actor\": \"https://example.com/users/jeff\", \"to\": \"https://example.com/users/jeff/followers\", \"content\": \"Does anyone know where I can find a good article on Cretan geology?\", \"replies\": { \"id\": \"https://example.com/activities/rrrsssttt/replies\", \"type\": \"Collection\", \"totalItems\": 1, \"items\": [ { \"id\": \"https://example.com/activities/lllmmnnoo\", \"type\": \"Announce\", \"actor\": \"https://example.com/users/evan\", \"object\": { \"id\": \"https://example.com/notes/1234\", \"type\": \"Note\", \"attributedTo\": \"https://example.com/users/franklin\" }, \"content\": \"<a href='https://example.com/users/jeff'>@jeff</a> you might like this Cretan geology article.\", \"tag\": { \"type\": \"Mention\", \"href\": \"https://example.com/users/jeff\", \"name\": \"jeff\" }, \"inReplyTo\": \"https://example.com/activities/rrrsssttt\" } ] } }","title":"Quote Post as Reply"},{"location":"fep/fep-dd4b/#user-interface-guidance","text":"A common representation of quote posts is to include the object of the Announce as an embedded card or other representation, with the content of the Announce object as introductory text.","title":"User interface guidance"},{"location":"fep/fep-dd4b/#security-considerations","text":"For all Announce activities, it's important to consider how much of the shared content to expose to the recipient of the Announce activity. Using an URL as a reference, or including a limited set of metadata as in the examples in this FEP, allows the publishing server for the shared content to control access to the content. See Inclusion of the shared object in the ActivityPub Primer for more information.","title":"Security considerations"},{"location":"fep/fep-dd4b/#_2","text":"James Snell, Evan Prodromou, et al. Activity Streams 2.0 . W3C Recommendation. 8 May 2018. James Snell, Evan Prodromou, et al. Activity Streams Vocabulary . W3C Recommendation. 8 May 2018. Christine Lemmer-Webber, Jessica Tallon, et al. ActivityPub . W3C Recommendation. 23 January 2018. Evan Prodromou. ActivityPub Miscellaneous Terms . W3C Social Web Community Group Draft Report. 3 October 2024. W3C members and contributors. ActivityPub Primer . W3C Wiki. 2023 and later.","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-dd4b/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-e229/","text":"FEP-e229: Best practices for extensibility Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Current popular implementations of ActivityPub do not handle extensibility very well. This FEP seeks to highlight some basic requirements for extensibility, and offer suggested advice to implementers who wish to avoid compatibility issues, particularly for LD-unaware consumers. General recommendations LD-unaware consumers Normalize types into type-sets It is an unfortunate and erroneous belief that objects in [AS2-Core] or [AP] can have only one type. This assumption breaks proper extensibility. Wherever a generic ActivityStreams consumer needs to know whether it is dealing with an [AS2-Vocab] type or [AS2-Core] mechanism like Collections, it cannot do so unless that type is present in the type set. However, extension vocabularies may need to declare additional types as interfaces that have been fulfilled by the given object. For this reason, LD-unaware consumers doing type checks need to take care to normalize type into a set, and check that their desired type is contained within that set. For example, \"type\": \"Collection\" would be normalized into \"type\": [\"Collection\"] . Ignore JSON-LD context if you don't understand it LD-unaware consumers MUST NOT attempt naive string comparison against the JSON-LD context declaration. There are several possible reasons why a received document might be valid AS2 but not declare a @context . One possibility is that the declared Content-Type is application/activity+json and the producer is LD-unaware. Another possibility is that the producer is LD-aware, but using a different context IRI that defines the same terms. Yet another possibility is that the producer is embedding inline term definitions. Regardless of the reason, either the consumer understands it or does not understand it. LD-aware consumers Assume the AS2 context if none is provided Given that including the [AS2-Context] is only a SHOULD and not a MUST, it is possible for some LD-unaware producers to serialize a document without a @context declaration. If the Content-Type is application/activity+json , then you MUST assume or inject the [AS2-Context] into the document, per [AS2-Core] section 2.1. LD-unaware producers Declare IRIs for terms that are expected to be shared By default, the [AS2-Context] document declares @vocab to be _: , meaning that the default vocabulary namespace is the blank namespace. Extension types and properties can be implemented as-is by LD-unaware producers, and the JSON-LD expansion algorithm will expand term to _:term . JSON-LD compaction will not strip these properties, but without the @vocab: _: declaration, they would be stripped. This may be sufficient for experimental or implementation-specific terms that are not expected to be used by anyone else, but it is bad practice for extensibility; the use of the blank namespace for properties is obsolete and may be removed in a future version of JSON-LD. LD-aware producers Avoid unnecessary term prefixes Compact IRI prefixes can have multiple terms map to the same prefix, depending on which context the producer uses for compaction. For example, say we have a prefix for http://example.com/ . You may encounter some documents with example:term , some documents with ex:term , some documents with http://example.com/term , and so on. LD-aware consumers can \"simply\" apply JSON-LD expansion to make all terms unambiguous, and then apply JSON-LD compaction against their local preferred context. LD-unaware consumers instead have to deal with unbounded possible equivalent terms, and will either have to add support for them on a case-by-case basis, or reinvent and reimplement JSON-LD expansion. This issue can be ameliorated by taking care to reuse existing conventional prefixes. An example of this is the [RDFa-Context] \"initial context\". Consider producing documents compacted against only the AS2 context document Since JSON-LD expanded form is unambiguous, it may be a good idea to use it wherever possible. This slightly reduces human readability due to the additional verbosity, but it results in exactly one possible representation of your extension data. LD-unaware consumers will possibly have to learn the structure of JSON-LD expanded form. LD-aware consumers can \"simply\" re-compact the document against any additional contexts they understand. For example, consider the current use of \"profile fields\" prior to [FEP-fb2a] \"Actor metadata\". Ignoring that Mastodon currently uses sc as a term prefix for an incorrect definition, such a term prefix would be unnecessary if partially-uncompacted JSON-LD was used: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/~alyssa\", \"type\": \"Person\", \"name\": \"Alyssa P. Hacker\", \"attachment\": [ { \"type\": \"http://schema.org/PropertyValue\", \"http://schema.org/name\": \"Pronouns\", \"http://schema.org/value\": \"she/her\" } ] } In general, try to consider whether your target consumer is expected to understand the context you are declaring. For ActivityStreams-specific consumers, the [AS2-Context] is a requirement, and so it can be generally depended upon. Some specifications (such as [WebAnnotations]) may similarly require their own context to be declared, whereas some specifications may not require this. In general, it may be better to not require a context and to use only the partially-compacted form; this is because multiple context declarations makes it possible for some contexts to conflict, and the most recently-declared context will win out, leading to potentially undefined behavior. This behavior can be avoided by being more judicious about your context declarations and your choice of context documents to compact against. Declare the ActivityStreams context last , if compacting against additional contexts Because [AP] and [AS2-Core] mandate compaction against the [AS2-Context] while also mandating that terms cannot be overridden, it is best to have the [AS2-Context] be the most-recently-declared context. For example: { \"@context\": [, \"https://schema.org\", \"https://www.w3.org/ns/activitystreams\" ], // ... } How to define an extension LD-unaware producers need to be aware of at least some of the ways that JSON-LD works; otherwise, their extensions will go into a blank namespace and may be stripped in future versions of JSON-LD. See the recommendations for LD-unaware producers above. Extension property Extension properties will primarily be one of two kinds: Those whose value is a literal value. In uncompacted form, these would use @value . Those whose value is a node on the graph. In uncompacted form, these would use @id . For LD-unaware producers, it is enough to produce JSON of the following form: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"http://example.com/valueProperty\": \"some string or number or boolean\", \"http://example.com/idProperty\": { \"@id\": \"https://example.com/some-resource\" } } For LD-aware producers, first note that compacting against any additional context will make parsing harder for LD-unaware consumers, as described in above guidance for LD-aware producers -- any additional context you declare must be shared by the consumer, and the only guaranteed context is the ActivityStreams context. Still, for the benefit of LD-aware consumers, you SHOULD at least make a context document available for download out-of-band. One mechanism for doing so is described in [FEP-888d]. The previous example can be expressed as follows when you compact against additional context: { \"@context\": [ { \"valueProperty\": \"http://example.com/valueProperty\", \"idProperty\": { \"@id\": \"http://example.com/idProperty\", \"@type\": \"@id\" } }, \"https://www.w3.org/ns/activitystreams\" ] } More complete guidance on term definitions is available within [JSONLD11-TERMS]. Extension type Extension types follow similar logic to extension properties with literal values. For LD-unaware producers, it is enough to use a full IRI as an extension type, although note that some vocabularies have been declared as term prefixes as part of the [AS2-Context], and thus MUST be serialized as compact IRIs using the given prefix. For example, vcard is declared by the [AS2-Context], but schema is not. Thus: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": [\"Person\", \"http://schema.org/Person\", \"vcard:Individual\"] } LD-aware producers may wish to declare additional context, keeping in mind above guidance for LD-aware producers : { \"@context\": [, \"https://schema.org\", \"https://www.w3.org/ns/activitystreams\" ], \"type\": [\"Person\", \"schema:Person\", \"vcard:Individual\"] } Alternatively, to avoid importing the entire Schema.org context: { \"@context\": [ { \"schema\": \"http://schema.org/\" }, \"https://www.w3.org/ns/activitystreams\" ], \"type\": [\"Person\", \"schema:Person\", \"vcard:Individual\"] } \u53c2\u8003\u6587\u732e [AP] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [AS2-Context] ActivityStreams 2.0 Terms , 2017 [AS2-Core] James M Snell, Evan Prodromou, Activity Streams 2.0 , 2017 [AS2-Vocab] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [FEP-888d] a, FEP-888d: Using https://w3id.org/fep as a base for FEP-specific namespaces , 2023 [FEP-fb2a] a, FEP-fb2a: Actor metadata , 2022 [JSONLD11-TERMS] Gregg Kellogg, Pierre-Antoine Champin, Dave Longley, JSON-LD 1.1 Section 9.15.1 Expanded Term Definition , 2020 [RDFa-Context] Ivan Herman, RDFa Core Initial Context , 2011 [WebAnnotations] Robert Sanderson, Paolo Ciccarese, Benjamin Young, Web Annotations Data Model , 2017 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-e229: Best practices for extensibility"},{"location":"fep/fep-e229/#fep-e229-best-practices-for-extensibility","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-e229: Best practices for extensibility"},{"location":"fep/fep-e229/#summary","text":"Current popular implementations of ActivityPub do not handle extensibility very well. This FEP seeks to highlight some basic requirements for extensibility, and offer suggested advice to implementers who wish to avoid compatibility issues, particularly for LD-unaware consumers.","title":"Summary"},{"location":"fep/fep-e229/#general-recommendations","text":"","title":"General recommendations"},{"location":"fep/fep-e229/#ld-unaware-consumers","text":"","title":"LD-unaware consumers"},{"location":"fep/fep-e229/#normalize-types-into-type-sets","text":"It is an unfortunate and erroneous belief that objects in [AS2-Core] or [AP] can have only one type. This assumption breaks proper extensibility. Wherever a generic ActivityStreams consumer needs to know whether it is dealing with an [AS2-Vocab] type or [AS2-Core] mechanism like Collections, it cannot do so unless that type is present in the type set. However, extension vocabularies may need to declare additional types as interfaces that have been fulfilled by the given object. For this reason, LD-unaware consumers doing type checks need to take care to normalize type into a set, and check that their desired type is contained within that set. For example, \"type\": \"Collection\" would be normalized into \"type\": [\"Collection\"] .","title":"Normalize types into type-sets"},{"location":"fep/fep-e229/#ignore-json-ld-context-if-you-dont-understand-it","text":"LD-unaware consumers MUST NOT attempt naive string comparison against the JSON-LD context declaration. There are several possible reasons why a received document might be valid AS2 but not declare a @context . One possibility is that the declared Content-Type is application/activity+json and the producer is LD-unaware. Another possibility is that the producer is LD-aware, but using a different context IRI that defines the same terms. Yet another possibility is that the producer is embedding inline term definitions. Regardless of the reason, either the consumer understands it or does not understand it.","title":"Ignore JSON-LD context if you don't understand it"},{"location":"fep/fep-e229/#ld-aware-consumers","text":"","title":"LD-aware consumers"},{"location":"fep/fep-e229/#assume-the-as2-context-if-none-is-provided","text":"Given that including the [AS2-Context] is only a SHOULD and not a MUST, it is possible for some LD-unaware producers to serialize a document without a @context declaration. If the Content-Type is application/activity+json , then you MUST assume or inject the [AS2-Context] into the document, per [AS2-Core] section 2.1.","title":"Assume the AS2 context if none is provided"},{"location":"fep/fep-e229/#ld-unaware-producers","text":"","title":"LD-unaware producers"},{"location":"fep/fep-e229/#declare-iris-for-terms-that-are-expected-to-be-shared","text":"By default, the [AS2-Context] document declares @vocab to be _: , meaning that the default vocabulary namespace is the blank namespace. Extension types and properties can be implemented as-is by LD-unaware producers, and the JSON-LD expansion algorithm will expand term to _:term . JSON-LD compaction will not strip these properties, but without the @vocab: _: declaration, they would be stripped. This may be sufficient for experimental or implementation-specific terms that are not expected to be used by anyone else, but it is bad practice for extensibility; the use of the blank namespace for properties is obsolete and may be removed in a future version of JSON-LD.","title":"Declare IRIs for terms that are expected to be shared"},{"location":"fep/fep-e229/#ld-aware-producers","text":"","title":"LD-aware producers"},{"location":"fep/fep-e229/#avoid-unnecessary-term-prefixes","text":"Compact IRI prefixes can have multiple terms map to the same prefix, depending on which context the producer uses for compaction. For example, say we have a prefix for http://example.com/ . You may encounter some documents with example:term , some documents with ex:term , some documents with http://example.com/term , and so on. LD-aware consumers can \"simply\" apply JSON-LD expansion to make all terms unambiguous, and then apply JSON-LD compaction against their local preferred context. LD-unaware consumers instead have to deal with unbounded possible equivalent terms, and will either have to add support for them on a case-by-case basis, or reinvent and reimplement JSON-LD expansion. This issue can be ameliorated by taking care to reuse existing conventional prefixes. An example of this is the [RDFa-Context] \"initial context\".","title":"Avoid unnecessary term prefixes"},{"location":"fep/fep-e229/#consider-producing-documents-compacted-against-only-the-as2-context-document","text":"Since JSON-LD expanded form is unambiguous, it may be a good idea to use it wherever possible. This slightly reduces human readability due to the additional verbosity, but it results in exactly one possible representation of your extension data. LD-unaware consumers will possibly have to learn the structure of JSON-LD expanded form. LD-aware consumers can \"simply\" re-compact the document against any additional contexts they understand. For example, consider the current use of \"profile fields\" prior to [FEP-fb2a] \"Actor metadata\". Ignoring that Mastodon currently uses sc as a term prefix for an incorrect definition, such a term prefix would be unnecessary if partially-uncompacted JSON-LD was used: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://example.com/~alyssa\", \"type\": \"Person\", \"name\": \"Alyssa P. Hacker\", \"attachment\": [ { \"type\": \"http://schema.org/PropertyValue\", \"http://schema.org/name\": \"Pronouns\", \"http://schema.org/value\": \"she/her\" } ] } In general, try to consider whether your target consumer is expected to understand the context you are declaring. For ActivityStreams-specific consumers, the [AS2-Context] is a requirement, and so it can be generally depended upon. Some specifications (such as [WebAnnotations]) may similarly require their own context to be declared, whereas some specifications may not require this. In general, it may be better to not require a context and to use only the partially-compacted form; this is because multiple context declarations makes it possible for some contexts to conflict, and the most recently-declared context will win out, leading to potentially undefined behavior. This behavior can be avoided by being more judicious about your context declarations and your choice of context documents to compact against.","title":"Consider producing documents compacted against only the AS2 context document"},{"location":"fep/fep-e229/#declare-the-activitystreams-context-last-if-compacting-against-additional-contexts","text":"Because [AP] and [AS2-Core] mandate compaction against the [AS2-Context] while also mandating that terms cannot be overridden, it is best to have the [AS2-Context] be the most-recently-declared context. For example: { \"@context\": [, \"https://schema.org\", \"https://www.w3.org/ns/activitystreams\" ], // ... }","title":"Declare the ActivityStreams context last, if compacting against additional contexts"},{"location":"fep/fep-e229/#how-to-define-an-extension","text":"LD-unaware producers need to be aware of at least some of the ways that JSON-LD works; otherwise, their extensions will go into a blank namespace and may be stripped in future versions of JSON-LD. See the recommendations for LD-unaware producers above.","title":"How to define an extension"},{"location":"fep/fep-e229/#extension-property","text":"Extension properties will primarily be one of two kinds: Those whose value is a literal value. In uncompacted form, these would use @value . Those whose value is a node on the graph. In uncompacted form, these would use @id . For LD-unaware producers, it is enough to produce JSON of the following form: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"http://example.com/valueProperty\": \"some string or number or boolean\", \"http://example.com/idProperty\": { \"@id\": \"https://example.com/some-resource\" } } For LD-aware producers, first note that compacting against any additional context will make parsing harder for LD-unaware consumers, as described in above guidance for LD-aware producers -- any additional context you declare must be shared by the consumer, and the only guaranteed context is the ActivityStreams context. Still, for the benefit of LD-aware consumers, you SHOULD at least make a context document available for download out-of-band. One mechanism for doing so is described in [FEP-888d]. The previous example can be expressed as follows when you compact against additional context: { \"@context\": [ { \"valueProperty\": \"http://example.com/valueProperty\", \"idProperty\": { \"@id\": \"http://example.com/idProperty\", \"@type\": \"@id\" } }, \"https://www.w3.org/ns/activitystreams\" ] } More complete guidance on term definitions is available within [JSONLD11-TERMS].","title":"Extension property"},{"location":"fep/fep-e229/#extension-type","text":"Extension types follow similar logic to extension properties with literal values. For LD-unaware producers, it is enough to use a full IRI as an extension type, although note that some vocabularies have been declared as term prefixes as part of the [AS2-Context], and thus MUST be serialized as compact IRIs using the given prefix. For example, vcard is declared by the [AS2-Context], but schema is not. Thus: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": [\"Person\", \"http://schema.org/Person\", \"vcard:Individual\"] } LD-aware producers may wish to declare additional context, keeping in mind above guidance for LD-aware producers : { \"@context\": [, \"https://schema.org\", \"https://www.w3.org/ns/activitystreams\" ], \"type\": [\"Person\", \"schema:Person\", \"vcard:Individual\"] } Alternatively, to avoid importing the entire Schema.org context: { \"@context\": [ { \"schema\": \"http://schema.org/\" }, \"https://www.w3.org/ns/activitystreams\" ], \"type\": [\"Person\", \"schema:Person\", \"vcard:Individual\"] }","title":"Extension type"},{"location":"fep/fep-e229/#_1","text":"[AP] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [AS2-Context] ActivityStreams 2.0 Terms , 2017 [AS2-Core] James M Snell, Evan Prodromou, Activity Streams 2.0 , 2017 [AS2-Vocab] James M Snell, Evan Prodromou, Activity Vocabulary , 2017 [FEP-888d] a, FEP-888d: Using https://w3id.org/fep as a base for FEP-specific namespaces , 2023 [FEP-fb2a] a, FEP-fb2a: Actor metadata , 2022 [JSONLD11-TERMS] Gregg Kellogg, Pierre-Antoine Champin, Dave Longley, JSON-LD 1.1 Section 9.15.1 Expanded Term Definition , 2020 [RDFa-Context] Ivan Herman, RDFa Core Initial Context , 2011 [WebAnnotations] Robert Sanderson, Paolo Ciccarese, Benjamin Young, Web Annotations Data Model , 2017","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-e229/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-e232/","text":"FEP-e232: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af authors silverpill @silverpill@mitra.social status FINAL dateReceived 2022-08-01 dateFinalized 2023-12-03 trackingIssue https://codeberg.org/fediverse/fep/issues/14 discussionsTo https://socialhub.activitypub.rocks/t/fep-e232-object-links/2722 original https://codeberg.org/fediverse/fep/src/branch/main/fep/e232/fep-e232.md \u6982\u8981 \u3053\u306e\u6587\u66f8\u306f\u3001 ActivityPub \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30c6\u30ad\u30b9\u30c8\u30d9\u30fc\u30b9\u306e\u30ea\u30f3\u30af\u3092\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u6848\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u30e1\u30f3\u30b7\u30e7\u30f3\u306b\u985e\u4f3c\u3057\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001 content \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u5185\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u5f15\u7528\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u63d0\u6848\u306f\u7279\u5b9a\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u9650\u5b9a\u3055\u308c\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u8981\u4ef6 \u3053\u306e\u6587\u66f8\u306b\u304a\u3051\u308b\u300cMUST\u300d\u3001\u300cMUST NOT\u300d\u3001\u300cREQUIRED\u300d\u3001\u300cSHALL\u300d\u3001\u300cSHALL NOT\u300d\u3001\u300cSHOULD\u300d\u3001\u300cSHOULD NOT\u300d\u3001\u300cRECOMMENDED\u300d\u3001\u300cMAY\u300d\u3001\u300cOPTIONAL\u300d\u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u3001 RFC-2119 \u306b\u8a18\u8f09\u3055\u308c\u305f\u901a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306f\u3001 @mention \u3084 #hashtag \u306e\u30de\u30a4\u30af\u30ed\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u306b\u985e\u4f3c\u3057\u305f\u65b9\u6cd5\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af\u306e\u5b9a\u7fa9\u65b9\u6cd5\u306f\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u3001\u3053\u306e\u6587\u66f8\u306e\u7bc4\u56f2\u5916\u3067\u3059\u3002 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e name \u3001 summary \u3001\u307e\u305f\u306f content \u306b\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30ea\u30f3\u30af\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f tag \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u3079\u304d\u3067\u3042\u308a\u3001\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af\u306f Activity Vocabulary \u306b\u57fa\u3065\u3044\u3066 Link \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8868\u73fe\u3055\u308c\u307e\u3059\u3002\u3053\u306e Link \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a type (\u5fc5\u9808): \u30bf\u30a4\u30d7\u306f Link \u307e\u305f\u306f\u305d\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 mediaType (\u5fc5\u9808): \u30e1\u30c7\u30a3\u30a2\u30bf\u30a4\u30d7\u306f application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" \u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\u3053\u306e\u4ed5\u69d8\u306fActivityPub\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u307f\u3092\u6271\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u30e1\u30c7\u30a3\u30a2\u30bf\u30a4\u30d7\u304c\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u3001\u30b5\u30fc\u30d0\u30fc\u306f\u3053\u306e\u8981\u4ef6\u306b\u6e96\u62e0\u3057\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af\u3092\u53d7\u3051\u5165\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001 application/activity+json \u306e\u30e1\u30c7\u30a3\u30a2\u30bf\u30a4\u30d7\u306f\u540c\u7b49\u3068\u898b\u306a\u3055\u308c\u308b\u3079\u304d\u3067\u3059\u3002 href (\u5fc5\u9808): href \u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u306f\u53c2\u7167\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eURI\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 name (\u4efb\u610f): name \u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3067\u4f7f\u7528\u3055\u308c\u308b\u30de\u30a4\u30af\u30ed\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u3068\u4e00\u81f4\u3059\u308b\u3079\u304d\u3067\u3042\u308b\u3002 rel (\u4efb\u610f): \u95a2\u9023\u3059\u308b\u5834\u5408\u3001 rel \u306f\u30ea\u30f3\u30af\u304c\u73fe\u5728\u306e\u30ea\u30bd\u30fc\u30b9\u306b\u3069\u306e\u3088\u3046\u306b\u95a2\u9023\u3057\u3066\u3044\u308b\u304b\u3092\u6307\u5b9a\u3059\u3079\u304d\u3067\u3042\u308b\u3002 rel \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u7279\u5b9a\u306e\u7528\u9014\u3092\u793a\u3059\u3053\u3068\u306b\u3088\u308a\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af\u306b\u8ffd\u52a0\u306e\u76ee\u7684\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \u4f8b (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) \u30d0\u30b0\u30c8\u30e9\u30c3\u30ab\u30fc\u306e\u554f\u984c\u3078\u306e\u30ea\u30f3\u30af\uff1a { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Note\", \"content\": \"\u30d0\u30b0\u306f #1374 \u3067\u5831\u544a\u3055\u308c\u307e\u3057\u305f\", \"tag\": [ { \"type\": \"Link\", \"mediaType\": \"application/ld+json; profile=\\\"https://www.w3.org/ns/activitystreams\\\"\", \"href\": \"https://forge.example/tickets/1374\", \"name\": \"#1374\" } ] } \u30a4\u30f3\u30e9\u30a4\u30f3\u5f15\u7528\uff1a { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Note\", \"content\": \"\u3053\u308c\u306f\u5f15\u7528\u3067\u3059:<br>RE: https://server.example/objects/123\", \"tag\": [ { \"type\": \"Link\", \"mediaType\": \"application/ld+json; profile=\\\"https://www.w3.org/ns/activitystreams\\\"\", \"href\": \"https://server.example/objects/123\", \"name\": \"RE: https://server.example/objects/123\" } ] } content \u306b\u306f RE: <url> \u306e\u30de\u30a4\u30af\u30ed\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u6d88\u8cbb\u3059\u308b\u5b9f\u88c5\u306f\u9069\u5207\u306a\u95a2\u9023\u4ed8\u3051\u3092\u884c\u3046\u305f\u3081\u306b\u305d\u308c\u3092\u89e3\u6790\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u5b9f\u88c5 (streams) FoundKey Mitra Pleroma ( via MRF ) Threads ( \u767a\u8868 ) Friendica Bridgy Fed Hollo Iceshrimp.NET \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, RFC\u3067\u306e\u8981\u4ef6\u30ec\u30d9\u30eb\u3092\u793a\u3059\u305f\u3081\u306e\u30ad\u30fc\u30ef\u30fc\u30c9 , 1997 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-e232: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af"},{"location":"fep/fep-e232/#fep-e232","text":"authors silverpill @silverpill@mitra.social status FINAL dateReceived 2022-08-01 dateFinalized 2023-12-03 trackingIssue https://codeberg.org/fediverse/fep/issues/14 discussionsTo https://socialhub.activitypub.rocks/t/fep-e232-object-links/2722 original https://codeberg.org/fediverse/fep/src/branch/main/fep/e232/fep-e232.md","title":"FEP-e232: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af"},{"location":"fep/fep-e232/#_1","text":"\u3053\u306e\u6587\u66f8\u306f\u3001 ActivityPub \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30c6\u30ad\u30b9\u30c8\u30d9\u30fc\u30b9\u306e\u30ea\u30f3\u30af\u3092\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u6848\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u30e1\u30f3\u30b7\u30e7\u30f3\u306b\u985e\u4f3c\u3057\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001 content \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u5185\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u5f15\u7528\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u63d0\u6848\u306f\u7279\u5b9a\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u9650\u5b9a\u3055\u308c\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u6982\u8981"},{"location":"fep/fep-e232/#_2","text":"\u3053\u306e\u6587\u66f8\u306b\u304a\u3051\u308b\u300cMUST\u300d\u3001\u300cMUST NOT\u300d\u3001\u300cREQUIRED\u300d\u3001\u300cSHALL\u300d\u3001\u300cSHALL NOT\u300d\u3001\u300cSHOULD\u300d\u3001\u300cSHOULD NOT\u300d\u3001\u300cRECOMMENDED\u300d\u3001\u300cMAY\u300d\u3001\u300cOPTIONAL\u300d\u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u3001 RFC-2119 \u306b\u8a18\u8f09\u3055\u308c\u305f\u901a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002","title":"\u8981\u4ef6"},{"location":"fep/fep-e232/#_3","text":"\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306f\u3001 @mention \u3084 #hashtag \u306e\u30de\u30a4\u30af\u30ed\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u306b\u985e\u4f3c\u3057\u305f\u65b9\u6cd5\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af\u306e\u5b9a\u7fa9\u65b9\u6cd5\u306f\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u3001\u3053\u306e\u6587\u66f8\u306e\u7bc4\u56f2\u5916\u3067\u3059\u3002 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e name \u3001 summary \u3001\u307e\u305f\u306f content \u306b\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30ea\u30f3\u30af\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f tag \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u3079\u304d\u3067\u3042\u308a\u3001\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af\u306f Activity Vocabulary \u306b\u57fa\u3065\u3044\u3066 Link \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8868\u73fe\u3055\u308c\u307e\u3059\u3002\u3053\u306e Link \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a type (\u5fc5\u9808): \u30bf\u30a4\u30d7\u306f Link \u307e\u305f\u306f\u305d\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 mediaType (\u5fc5\u9808): \u30e1\u30c7\u30a3\u30a2\u30bf\u30a4\u30d7\u306f application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" \u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\u3053\u306e\u4ed5\u69d8\u306fActivityPub\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u307f\u3092\u6271\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u30e1\u30c7\u30a3\u30a2\u30bf\u30a4\u30d7\u304c\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u3001\u30b5\u30fc\u30d0\u30fc\u306f\u3053\u306e\u8981\u4ef6\u306b\u6e96\u62e0\u3057\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af\u3092\u53d7\u3051\u5165\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001 application/activity+json \u306e\u30e1\u30c7\u30a3\u30a2\u30bf\u30a4\u30d7\u306f\u540c\u7b49\u3068\u898b\u306a\u3055\u308c\u308b\u3079\u304d\u3067\u3059\u3002 href (\u5fc5\u9808): href \u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u306f\u53c2\u7167\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eURI\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 name (\u4efb\u610f): name \u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3067\u4f7f\u7528\u3055\u308c\u308b\u30de\u30a4\u30af\u30ed\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u3068\u4e00\u81f4\u3059\u308b\u3079\u304d\u3067\u3042\u308b\u3002 rel (\u4efb\u610f): \u95a2\u9023\u3059\u308b\u5834\u5408\u3001 rel \u306f\u30ea\u30f3\u30af\u304c\u73fe\u5728\u306e\u30ea\u30bd\u30fc\u30b9\u306b\u3069\u306e\u3088\u3046\u306b\u95a2\u9023\u3057\u3066\u3044\u308b\u304b\u3092\u6307\u5b9a\u3059\u3079\u304d\u3067\u3042\u308b\u3002 rel \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u7279\u5b9a\u306e\u7528\u9014\u3092\u793a\u3059\u3053\u3068\u306b\u3088\u308a\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af\u306b\u8ffd\u52a0\u306e\u76ee\u7684\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002","title":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30f3\u30af"},{"location":"fep/fep-e232/#_4","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) \u30d0\u30b0\u30c8\u30e9\u30c3\u30ab\u30fc\u306e\u554f\u984c\u3078\u306e\u30ea\u30f3\u30af\uff1a { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Note\", \"content\": \"\u30d0\u30b0\u306f #1374 \u3067\u5831\u544a\u3055\u308c\u307e\u3057\u305f\", \"tag\": [ { \"type\": \"Link\", \"mediaType\": \"application/ld+json; profile=\\\"https://www.w3.org/ns/activitystreams\\\"\", \"href\": \"https://forge.example/tickets/1374\", \"name\": \"#1374\" } ] } \u30a4\u30f3\u30e9\u30a4\u30f3\u5f15\u7528\uff1a { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Note\", \"content\": \"\u3053\u308c\u306f\u5f15\u7528\u3067\u3059:<br>RE: https://server.example/objects/123\", \"tag\": [ { \"type\": \"Link\", \"mediaType\": \"application/ld+json; profile=\\\"https://www.w3.org/ns/activitystreams\\\"\", \"href\": \"https://server.example/objects/123\", \"name\": \"RE: https://server.example/objects/123\" } ] } content \u306b\u306f RE: <url> \u306e\u30de\u30a4\u30af\u30ed\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u6d88\u8cbb\u3059\u308b\u5b9f\u88c5\u306f\u9069\u5207\u306a\u95a2\u9023\u4ed8\u3051\u3092\u884c\u3046\u305f\u3081\u306b\u305d\u308c\u3092\u89e3\u6790\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u4f8b"},{"location":"fep/fep-e232/#_5","text":"(streams) FoundKey Mitra Pleroma ( via MRF ) Threads ( \u767a\u8868 ) Friendica Bridgy Fed Hollo Iceshrimp.NET","title":"\u5b9f\u88c5"},{"location":"fep/fep-e232/#_6","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, RFC\u3067\u306e\u8981\u4ef6\u30ec\u30d9\u30eb\u3092\u793a\u3059\u305f\u3081\u306e\u30ad\u30fc\u30ef\u30fc\u30c9 , 1997 James M Snell, Evan Prodromou, Activity Vocabulary , 2017","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-e232/#_7","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-e3e9/","text":"FEP-e3e9: Actor-Relative URLs Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary \"All problems in computer science can be solved by another level of indirection\" (the \"fundamental theorem of software engineering\") -- Attributed to: Butler Lampson ( src ) This FEP introduces an ID scheme for ActivityPub objects and collections that has the following properties: IDs remains stable across domain migrations. That is, allows the controller of the objects to change object hosting providers without changing the object IDs. IDs are regular HTTP(S) URLs that are resolvable via an HTTP GET request (provided the client allows following 302 redirects). The proposed mechanism identifies objects by adding query parameters to existing Actor profile URLs. ActivityPub clients wishing to fetch the objects make an HTTP GET request to this URL, as usual, carrying whatever authentication mechanism is required currently, and then follow the HTTP 302 status code redirect in the response to the current storage location of the object. Example Actor-Relative URL: https://alice-personal-site.example/actor?service=storage&relativeRef=/AP/objects/567 An AP client, encountering an Object ID with this URL makes an HTTP GET request just as it would with any other Object ID: GET /actor?service=storage&relativeRef=/AP/objects/567 HTTP/1.1 Host: alice-personal-site.example The server responds with a 302 redirect (which all HTTP clients are able to automatically follow) pointing to the current storage location of the object. For example: HTTP/1.1 302 Found Location: https://storage-provider.example/users/1234/AP/objects/567 This redirection mechanism is enabled in all existing HTTP clients by default (see https://developer.mozilla.org/en-US/docs/Web/API/Request/redirect), and requires no additional re-tooling of ActivityPub client code. Actor-Relative URLs for Objects and Collections On the Client side, the main change required is in the author/controller validation procedure (since retrieving the objects at Actor-Relative URLs requires no additional change beyond ensuring that following HTTP redirects is not disabled). On the Server side (specifically, the server hosting the Actor profile), two changes are required: (Data Model change) Adding a service section to the Actor profile, which is required for author/controller validation. (Protocol change) Enabling http 302 redirect responses when an Actor profile request is made that has the required query parameters ( service and relativeRef params). In addition: (Not required but recommended) Implementing FEP-8b32: Object Integrity Proofs is recommended, since it helps with author/controller validation even in the case that the Actor profile host is down or otherwise unavailable. Validating an Object's Author/Controller Given the following example Actor profile: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\" ], \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#storage\", \"serviceEndpoint\": \"https://storage-provider.example\" }], // Rest of the Actor profile goes here } When fetching an ActivityPub Object or Collection identified by an Actor-Relative URL (that is, when the Object or Collection ID contains the URL query parameters service and relativeRef ), a client MUST validate that the server hosting the Object is authorized by the Actor profile: The Client performs an HTTP GET request on the Object or Collection, as usual, including any currently required authorization headers. The client performing the GET request MUST be able to support HTTP redirection. For example, if using the WHATWG fetch API, the request's redirect property cannot be set to error . The Client follows the redirect and automatically fetches the object specified in the Location header of the 302 response (this behavior is the default in most HTTP clients). The Client extracts the current URL of the Object. This is the URL specified in the Location header of the redirect response; for example, if using the WHATWG fetch API, this is the last URL in the response's URL list, retrievable by accessing response.url . The Client retrieves the Actor profile corresponding to this Object's author/ controller (the actor or attributedTo property). The Client extracts the value of the authorized storage endpoint from the profile: a. The Client checks to see if the Actor profile contains the service property. b. If the service property is found, the Client searches through the array of service endpoints until it finds a service endpoint with the relative id ending in #storage (note: this is what the service=storage query parameter refers to, in the Actor-Relative URL). The Client extracts the serviceEndpoint property of this service description object. This is the authorized storage endpoint . c. If no authorized storage endpoint is specified in the Actor profile (that is, if the Actor profile does not contain the service property, or if the service property is null or an empty array, or if the service array does not contain a service endpoint object with a relative id that ends in #storage , or if that service endpoint does not contain a serviceEndpoint property containing a URL), the Client SHOULD indicate to the user that the provenance of this Object cannot be determined, or that the storage location of the Object has not been authorized by the profile of the claimed author/controller. The Client MUST validate that the current URL of the object is authorized by the Actor's profile by checking that: a. The Object's currentURL starts with the value of the authorized storage endpoint . b. The Object's currentURL ends with the value of the relativeRef query parameter. c. For example, in JS pseudocode, using string concatenation: response.url === (authorizedStorageEndpoint + query.relativeRef) d. If these checks fail (if the current URL of the object is not equal to the string concatenation of the authorized storage endpoint and the relativeRef query parameter), the Client SHOULD indicate to the user that the provenance of this Object cannot be determined, or that the storage location of the Object has not been authorized by the profile of the claimed author/controller. This validation procedure establishes a two-way link: from the Object to its author/controller Actor profile (via the Object's actor or attributedTo property), and from the Actor profile to the authorized storage service provider, at whose domain the Object is currently stored. Client-Side Implementation An ActivityPub client conforming to this FEP: When encountering an Actor-Relative URL as an ID of an object, fetch it using the same HTTP GET mechanism that it currently does. Note: An Actor-Relative URL is defined as a URL containing the service and relativeRef query parameters. The client MUST follow the 302 redirect in the response. The client MUST perform the validation steps outlined in the Validating an Object's Author/Controller section above. Server-Side Implementation On the server side (specifically, the server hosting the Actor profile), an ActivityPub server conforming to this FEP: For every request to the Actor profile object (for example, to https://alice-personal-site.example/actor ), examine the HTTP QUERY parameters. If the service and relativeRef query parameters are present in the request, treat this as an Actor-Relative URL Request (by following the steps below). Examine the Actor profile object for this request. If the profile does not contain a valid serviceEndpoint that corresponds to the service query parameter, the server MUST return a 422 Unprocessable Entity HTTP status code error. To determine whether the profile contains a valid service endpoint: If the Actor profile does not contain a top level service property: INVALID If the Actor has a service property, but its value is null or [] : INVALID Search through the array of service endpoints (the value of the service ) property, until you find a service object with the id that ends in <actor profile url>#<contents of the 'service' query param> . See sample Actor profile and request below. If no valid service endpoint is found: INVALID Assuming that a matching service endpoint is found, compose a current location URL from the serviceEndpoint contained in the profile concatenated with the contents of the relativeRef query parameter (see below for example). Return a 302 Found HTTP status code response, and set the Location response header to the value of the current location URL composed in the previous step. Note: Servers SHOULD NOT return a 301 status response (a 301 response implies a permanent relocation, and the whole point of this FEP is that Actor-Relative URLs are changeable at any point). Similarly, servers SHOULD not return a 303 See Other status response. Example Server-Side Request and Response Example request URL: GET https://alice-personal-site.example/actor?service=storage&relativeRef=/AP/objects/567 The query parameters would be parsed on the server side as something similar to: { \"service\": \"storage\", \"relativeRef\": \"/AP/objects/567\" } Example Actor profile at that URL: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\" ], \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#storage\", \"serviceEndpoint\": \"https://storage-provider.example\" }], // Rest of the Actor profile goes here } Example current location URL (from concatenating the serviceEndpoint value with the relativeRef query parameter): https://storage-provider.example/AP/objects/567 Example response from the server: HTTP/1.1 302 Found Location: https://storage-provider.example/AP/objects/567 Object Storage Migration Using Actor-Relative URLs Actor-Relative URLs can be used as an option for portable Object and Collection IDs that remain unchanged even through migrating to a different object hosting provider (as long as the Actor ID remains constant). Example Storage Provider Migration Before migration, Alice uses the https://old-storage-provider.example as a storage provider for her AP objects. She makes sure https://old-storage-provider.example is specified as a service endpoint in her Actor profile. GET https://alice-personal-site.example/actor returns { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\" ], \"id\": \"https://alice-personal-site.example/actor\", \"type\": \"Person\", \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#storage\", \"serviceEndpoint\": \"https://old-storage-provider.example\" }], \"assertionMethod\": { /* \u2026 */ }, // All the other profile properties \u2026 } Alice then creates a Note and stores it with the storage provider (making sure to add an Object Identity Proof). Example request: POST /AP/objects/ Host: old-storage-provider.example { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Note\", \"content\": \"This is a note\", \"attributedTo\": \"https://alice-personal-site.example/actor\", \"id\": \"https://alice-personal-site.example/actor?service=storage&relativeRef=/AP/objects/567\" } returns HTTP 201 Created Location: https://old-storage-provider.example/AP/objects/567 Note that this created Object can now be fetched at TWO different URLs: The direct URL (also called current location URL ), https://old-storage-provider.example/AP/objects/567 The indirect Actor-Relative URL https://alice-personal-site.example/actor?service=storage&relativeRef=/AP/objects/567 When it comes time to migrate to a different service provider, the new one being located at https://brand-new-storage.example , Alice performs the following steps. She updates her Actor profile service endpoint, to point to the new provider, so that it looks like this: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\" ], \"id\": \"https://alice-personal-site.example/actor\", \"type\": \"Person\", \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#storage\", \"serviceEndpoint\": \"https://brand-new-storage.example\" }], \"assertionMethod\": { /* \u2026 */ }, // All the other profile properties \u2026 } Note that the serviceEndpoint is the only property in the Actor profile that has to change during migration. Alice then transfers her Object to the new provider (for this example, she'll be transferring the object individually, though in future FEPs, we expect specification of APIs to transfer all of the objects in one's storage): POST /AP/objects/ Host: brand-new-storage.example { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Note\", \"content\": \"This is a note\", \"attributedTo\": \"https://alice-personal-site.example/actor\", \"id\": \"https://alice-personal-site.example/actor?service=storage&relativeRef=/AP/objects/567\" } returns: HTTP 201 Created Location: https://brand-new-storage.example/AP/objects/567 Notice that the object being stored at the new provider is byte-for-byte identical to the object hosted at the old provider; its indirect id and contents do not change. Throughout this service provider migration, the external indirect id of the object does not change , for the purposes of all other AP mechanisms such as Inbox delivery, Likes and Reposts, and so on. \u53c2\u8003\u6587\u732e FEP-8b32: Object Integrity Proofs Christine Lemmer Webber, Jessica Tallon, [ActivityPub][AP], 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, 1997 Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"FEP-e3e9: Actor-Relative URLs"},{"location":"fep/fep-e3e9/#fep-e3e9-actor-relative-urls","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-e3e9: Actor-Relative URLs"},{"location":"fep/fep-e3e9/#summary","text":"\"All problems in computer science can be solved by another level of indirection\" (the \"fundamental theorem of software engineering\") -- Attributed to: Butler Lampson ( src ) This FEP introduces an ID scheme for ActivityPub objects and collections that has the following properties: IDs remains stable across domain migrations. That is, allows the controller of the objects to change object hosting providers without changing the object IDs. IDs are regular HTTP(S) URLs that are resolvable via an HTTP GET request (provided the client allows following 302 redirects). The proposed mechanism identifies objects by adding query parameters to existing Actor profile URLs. ActivityPub clients wishing to fetch the objects make an HTTP GET request to this URL, as usual, carrying whatever authentication mechanism is required currently, and then follow the HTTP 302 status code redirect in the response to the current storage location of the object. Example Actor-Relative URL: https://alice-personal-site.example/actor?service=storage&relativeRef=/AP/objects/567 An AP client, encountering an Object ID with this URL makes an HTTP GET request just as it would with any other Object ID: GET /actor?service=storage&relativeRef=/AP/objects/567 HTTP/1.1 Host: alice-personal-site.example The server responds with a 302 redirect (which all HTTP clients are able to automatically follow) pointing to the current storage location of the object. For example: HTTP/1.1 302 Found Location: https://storage-provider.example/users/1234/AP/objects/567 This redirection mechanism is enabled in all existing HTTP clients by default (see https://developer.mozilla.org/en-US/docs/Web/API/Request/redirect), and requires no additional re-tooling of ActivityPub client code.","title":"Summary"},{"location":"fep/fep-e3e9/#actor-relative-urls-for-objects-and-collections","text":"On the Client side, the main change required is in the author/controller validation procedure (since retrieving the objects at Actor-Relative URLs requires no additional change beyond ensuring that following HTTP redirects is not disabled). On the Server side (specifically, the server hosting the Actor profile), two changes are required: (Data Model change) Adding a service section to the Actor profile, which is required for author/controller validation. (Protocol change) Enabling http 302 redirect responses when an Actor profile request is made that has the required query parameters ( service and relativeRef params). In addition: (Not required but recommended) Implementing FEP-8b32: Object Integrity Proofs is recommended, since it helps with author/controller validation even in the case that the Actor profile host is down or otherwise unavailable.","title":"Actor-Relative URLs for Objects and Collections"},{"location":"fep/fep-e3e9/#validating-an-objects-authorcontroller","text":"Given the following example Actor profile: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\" ], \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#storage\", \"serviceEndpoint\": \"https://storage-provider.example\" }], // Rest of the Actor profile goes here } When fetching an ActivityPub Object or Collection identified by an Actor-Relative URL (that is, when the Object or Collection ID contains the URL query parameters service and relativeRef ), a client MUST validate that the server hosting the Object is authorized by the Actor profile: The Client performs an HTTP GET request on the Object or Collection, as usual, including any currently required authorization headers. The client performing the GET request MUST be able to support HTTP redirection. For example, if using the WHATWG fetch API, the request's redirect property cannot be set to error . The Client follows the redirect and automatically fetches the object specified in the Location header of the 302 response (this behavior is the default in most HTTP clients). The Client extracts the current URL of the Object. This is the URL specified in the Location header of the redirect response; for example, if using the WHATWG fetch API, this is the last URL in the response's URL list, retrievable by accessing response.url . The Client retrieves the Actor profile corresponding to this Object's author/ controller (the actor or attributedTo property). The Client extracts the value of the authorized storage endpoint from the profile: a. The Client checks to see if the Actor profile contains the service property. b. If the service property is found, the Client searches through the array of service endpoints until it finds a service endpoint with the relative id ending in #storage (note: this is what the service=storage query parameter refers to, in the Actor-Relative URL). The Client extracts the serviceEndpoint property of this service description object. This is the authorized storage endpoint . c. If no authorized storage endpoint is specified in the Actor profile (that is, if the Actor profile does not contain the service property, or if the service property is null or an empty array, or if the service array does not contain a service endpoint object with a relative id that ends in #storage , or if that service endpoint does not contain a serviceEndpoint property containing a URL), the Client SHOULD indicate to the user that the provenance of this Object cannot be determined, or that the storage location of the Object has not been authorized by the profile of the claimed author/controller. The Client MUST validate that the current URL of the object is authorized by the Actor's profile by checking that: a. The Object's currentURL starts with the value of the authorized storage endpoint . b. The Object's currentURL ends with the value of the relativeRef query parameter. c. For example, in JS pseudocode, using string concatenation: response.url === (authorizedStorageEndpoint + query.relativeRef) d. If these checks fail (if the current URL of the object is not equal to the string concatenation of the authorized storage endpoint and the relativeRef query parameter), the Client SHOULD indicate to the user that the provenance of this Object cannot be determined, or that the storage location of the Object has not been authorized by the profile of the claimed author/controller. This validation procedure establishes a two-way link: from the Object to its author/controller Actor profile (via the Object's actor or attributedTo property), and from the Actor profile to the authorized storage service provider, at whose domain the Object is currently stored.","title":"Validating an Object's Author/Controller"},{"location":"fep/fep-e3e9/#client-side-implementation","text":"An ActivityPub client conforming to this FEP: When encountering an Actor-Relative URL as an ID of an object, fetch it using the same HTTP GET mechanism that it currently does. Note: An Actor-Relative URL is defined as a URL containing the service and relativeRef query parameters. The client MUST follow the 302 redirect in the response. The client MUST perform the validation steps outlined in the Validating an Object's Author/Controller section above.","title":"Client-Side Implementation"},{"location":"fep/fep-e3e9/#server-side-implementation","text":"On the server side (specifically, the server hosting the Actor profile), an ActivityPub server conforming to this FEP: For every request to the Actor profile object (for example, to https://alice-personal-site.example/actor ), examine the HTTP QUERY parameters. If the service and relativeRef query parameters are present in the request, treat this as an Actor-Relative URL Request (by following the steps below). Examine the Actor profile object for this request. If the profile does not contain a valid serviceEndpoint that corresponds to the service query parameter, the server MUST return a 422 Unprocessable Entity HTTP status code error. To determine whether the profile contains a valid service endpoint: If the Actor profile does not contain a top level service property: INVALID If the Actor has a service property, but its value is null or [] : INVALID Search through the array of service endpoints (the value of the service ) property, until you find a service object with the id that ends in <actor profile url>#<contents of the 'service' query param> . See sample Actor profile and request below. If no valid service endpoint is found: INVALID Assuming that a matching service endpoint is found, compose a current location URL from the serviceEndpoint contained in the profile concatenated with the contents of the relativeRef query parameter (see below for example). Return a 302 Found HTTP status code response, and set the Location response header to the value of the current location URL composed in the previous step. Note: Servers SHOULD NOT return a 301 status response (a 301 response implies a permanent relocation, and the whole point of this FEP is that Actor-Relative URLs are changeable at any point). Similarly, servers SHOULD not return a 303 See Other status response.","title":"Server-Side Implementation"},{"location":"fep/fep-e3e9/#example-server-side-request-and-response","text":"Example request URL: GET https://alice-personal-site.example/actor?service=storage&relativeRef=/AP/objects/567 The query parameters would be parsed on the server side as something similar to: { \"service\": \"storage\", \"relativeRef\": \"/AP/objects/567\" } Example Actor profile at that URL: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\" ], \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#storage\", \"serviceEndpoint\": \"https://storage-provider.example\" }], // Rest of the Actor profile goes here } Example current location URL (from concatenating the serviceEndpoint value with the relativeRef query parameter): https://storage-provider.example/AP/objects/567 Example response from the server: HTTP/1.1 302 Found Location: https://storage-provider.example/AP/objects/567","title":"Example Server-Side Request and Response"},{"location":"fep/fep-e3e9/#object-storage-migration-using-actor-relative-urls","text":"Actor-Relative URLs can be used as an option for portable Object and Collection IDs that remain unchanged even through migrating to a different object hosting provider (as long as the Actor ID remains constant).","title":"Object Storage Migration Using Actor-Relative URLs"},{"location":"fep/fep-e3e9/#example-storage-provider-migration","text":"Before migration, Alice uses the https://old-storage-provider.example as a storage provider for her AP objects. She makes sure https://old-storage-provider.example is specified as a service endpoint in her Actor profile. GET https://alice-personal-site.example/actor returns { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\" ], \"id\": \"https://alice-personal-site.example/actor\", \"type\": \"Person\", \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#storage\", \"serviceEndpoint\": \"https://old-storage-provider.example\" }], \"assertionMethod\": { /* \u2026 */ }, // All the other profile properties \u2026 } Alice then creates a Note and stores it with the storage provider (making sure to add an Object Identity Proof). Example request: POST /AP/objects/ Host: old-storage-provider.example { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Note\", \"content\": \"This is a note\", \"attributedTo\": \"https://alice-personal-site.example/actor\", \"id\": \"https://alice-personal-site.example/actor?service=storage&relativeRef=/AP/objects/567\" } returns HTTP 201 Created Location: https://old-storage-provider.example/AP/objects/567 Note that this created Object can now be fetched at TWO different URLs: The direct URL (also called current location URL ), https://old-storage-provider.example/AP/objects/567 The indirect Actor-Relative URL https://alice-personal-site.example/actor?service=storage&relativeRef=/AP/objects/567 When it comes time to migrate to a different service provider, the new one being located at https://brand-new-storage.example , Alice performs the following steps. She updates her Actor profile service endpoint, to point to the new provider, so that it looks like this: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://www.w3.org/ns/did/v1\" ], \"id\": \"https://alice-personal-site.example/actor\", \"type\": \"Person\", \"service\": [{ \"id\": \"https://alice-personal-site.example/actor#storage\", \"serviceEndpoint\": \"https://brand-new-storage.example\" }], \"assertionMethod\": { /* \u2026 */ }, // All the other profile properties \u2026 } Note that the serviceEndpoint is the only property in the Actor profile that has to change during migration. Alice then transfers her Object to the new provider (for this example, she'll be transferring the object individually, though in future FEPs, we expect specification of APIs to transfer all of the objects in one's storage): POST /AP/objects/ Host: brand-new-storage.example { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Note\", \"content\": \"This is a note\", \"attributedTo\": \"https://alice-personal-site.example/actor\", \"id\": \"https://alice-personal-site.example/actor?service=storage&relativeRef=/AP/objects/567\" } returns: HTTP 201 Created Location: https://brand-new-storage.example/AP/objects/567 Notice that the object being stored at the new provider is byte-for-byte identical to the object hosted at the old provider; its indirect id and contents do not change. Throughout this service provider migration, the external indirect id of the object does not change , for the purposes of all other AP mechanisms such as Inbox delivery, Likes and Reposts, and so on.","title":"Example Storage Provider Migration"},{"location":"fep/fep-e3e9/#_1","text":"FEP-8b32: Object Integrity Proofs Christine Lemmer Webber, Jessica Tallon, [ActivityPub][AP], 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, 1997","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-e3e9/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-e965-test-case/","text":"Actor Object Migration and Deactivation Syntax Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Background This proposal extends and combines prior FEPs to define syntax and parsing rules for Actor objects which unambiguously express exactly one of the three following states: deactivation, OR migration to another URI, OR duplication at another URI. About this Test This is a Test Case testing conformance with the two properties of an Actor object specified in FEP-e965. Test Subject The subject of this test is any data claiming to conform to the specification of an ActivityPub Actor Object and to the FEP-e965 extension thereof. This test is not directly applicable to an ActivityPub Server. An ActivityPub Server serves 0 or more Actor Objects. An ActivityPub Server for a big community might serve hundreds of ActivityPub Actor Objects. An ActivityPub Server for a single human may serve only that person's ActivityPub Actor Object. This test applies to Actor Objects , but not all Actor Objects are addressable by an HTTPS URL. The URI that addresses an Actor Object is not the same as the Actor Object. A given URL may resolve to different Actor Objects in different contexts, and a given Actor Object may not be universally addressable across context by any one URL. Inputs This test requires the following inputs : actor - the actor object under tested type: binary data constraints will be interpreted as JSON. If not parseable as JSON, the test result MUST be inapplicable . dereferenced @context array should include both terms defined by FEP-7628 to signal support for this FEP if does not, the test result outcome MUST be inapplicable . Applicability This test applies directly to the actor input. If actor is not a JSON object, the outcome MUST be inapplicable . input actor MUST have a @context property whose value is an Array containing the string https://w3id.org/fep/7628 . If it does not, the outcome MUST be inapplicable . Test Targets input actor is the only test target Expectations movedTo - MUST be a URI OR an empty string, if present copiedTo - MUST be a URI, if present movedTo and copiedTo MUST NOT both be present actor JSON's @context array SHOULD include \"https://w3id.org/fep/7628\" to signal conformance Assumptions 1. How to Determine Whether an Actor object supports FEP-7628 Semantics For the purposes of determining whether the active status and migration history of a given Actor can be tested by this test case: the input is valid JSON the input, once parsed as JSON has an @context property @context array includes the URL \"https://w3id.org/fep/7628\" A warning should be returned if this value is not present. 2. Property value expectations For the purposes of determining the in/active status and migration history of a the target Actor: the input is valid JSON movedTo and copiedTo MUST NOT both be present movedTo can be a valid URI OR not present copiedTo can be a valid URI or an array containing one or more valid URIs OR not present Property Value evaluation logic (Pseudocode) the input is valid JSON movedTo and copiedTo MUST NOT both be present //log (malformed actor - both movedTo and copiedTo present) outcome is FAILED else if movedTo is present, value MUST be a valid URI //log (actor has migrated to $movedTo) if URI is 404 //OPTIONAL CHECK log ($movedTo is not resolvable) outcome is PASSED else outcome is FAILED else if copiedTo is present, type MUST not include \"Tombstone\" outcome is FAILED ; log (\"Cannot be tombstoned if copiedTo is set\") each value MUST be a valid URI if URI is 404 //OPTIONAL CHECK log ($copiedTo is not resolvable) outcome is PASSED else outcome is FAILED ; log (\"invalid values in copiedTo \") else //log (actor is currently active and unlinked) outcome is PASSED Test Cases These are test cases for this test case, and can be used to verify that an implementation of this test case specification will be consistent with other implementations. Missing @context values input actor: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\" } test result outcome: inapplicable optional: warning (\"value https://w3id.org/fep/7628 not present in \"@context\" to signal conformance\") both movedTo and copiedTo present input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": \"https://otherexample.com/newname\", \"copiedTo\": \"https://otherexample.com/thirdname\" } test return outcome: FAILED , log ( movedTo and copiedTo MUST NOT both be present) movedTo set to array input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": [ \"https://example2.com/id\", \"https://example3.com/id\" ], } test return outcome: FAILED , log ( movedTo MUST be a functional property) copiedTo contains invalid URI input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"copiedTo\": [ \"https://example2.com/id\", \"Tombstone\" ], } test return outcome: FAILED , log ( movedTo MUST be a functional property) movedTo set to invalid URI #1 input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": \"Tombstone\" } test return outcome: FAILED , log ( movedTo MUST be a URI) movedTo set to invalid URI #2 input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": \"\" } test return outcome: FAILED , log ( movedTo MUST be a URI) Valid Deactivated Actor input actor : { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": [\"Person\",\"Tombstone\"], \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\" } test return outcome: PASSED Valid Migrated Actor input actor : { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": [\"Person\",\"Tombstone\"], \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": \"https://actorname.otherexample.com\" } test return outcome: PASSED optional: check and log validity of actor referenced by that URI Valid Migrated Actor (Missing Tombstone) This test vector does NOT conform to [FEP0-f2a] but DOES conform to the older FEP-7628 . It is included to assist in testing the consumption of legacy migrated actors. input actor : { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": [\"Person\"], \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": \"https://actorname.otherexample.com\" } test return outcome: FAILED log (\"Missing Tombstone but backwards-compatible\") optional: check and log validity of actor referenced by that URI Valid Multi-homed Actor input actor : { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"copiedTo\": \"https://personalarchive.otherexample.com\" } test return outcome: PASSED optional: check and log validity of actor referenced by that URI Valid Multi-homed Actor ( copiedTo set to array) input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"copiedTo\": [ \"https://example2.com/id\", \"https://example3.com/id\" ], } test return outcome: PASSED , log ( copiedTo contains multiple valid URIs) Glossary outcome An outcome is a conclusion that comes from evaluating a test on a test subject. An outcome can be one of the three following types: inapplicable : No part of the test subject matches the applicability passed : A test target meets all expectations failed : A test target does not meet all expectations Requirements Mapping FEP requirement: - Actor Objects must express signing key as assertionMethod Multikey Required for Conformance to FEP-e965 Outcome Mapping when test target assertionMethod has outcome passed , requirement is satisfied when test target assertionMethod has outcome failed , requirement is not satisfied when test target assertionMethod has outcome inapplicable , further testing is needed to determine whether this requirement is satisfied \u53c2\u8003\u6587\u732e Change Log 2024-08-28T15:20:36Z - tweak links because FEP slug changed 2024-06-28T15:20:36Z - first draft by bumblefudge Issues List Add a test vector with signed IdentityProof that verifies using current DI spec and dummy private key","title":"Actor Object Migration and Deactivation Syntax"},{"location":"fep/fep-e965-test-case/#actor-object-migration-and-deactivation-syntax","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Actor Object Migration and Deactivation Syntax"},{"location":"fep/fep-e965-test-case/#background","text":"This proposal extends and combines prior FEPs to define syntax and parsing rules for Actor objects which unambiguously express exactly one of the three following states: deactivation, OR migration to another URI, OR duplication at another URI.","title":"Background"},{"location":"fep/fep-e965-test-case/#about-this-test","text":"This is a Test Case testing conformance with the two properties of an Actor object specified in FEP-e965.","title":"About this Test"},{"location":"fep/fep-e965-test-case/#test-subject","text":"The subject of this test is any data claiming to conform to the specification of an ActivityPub Actor Object and to the FEP-e965 extension thereof. This test is not directly applicable to an ActivityPub Server. An ActivityPub Server serves 0 or more Actor Objects. An ActivityPub Server for a big community might serve hundreds of ActivityPub Actor Objects. An ActivityPub Server for a single human may serve only that person's ActivityPub Actor Object. This test applies to Actor Objects , but not all Actor Objects are addressable by an HTTPS URL. The URI that addresses an Actor Object is not the same as the Actor Object. A given URL may resolve to different Actor Objects in different contexts, and a given Actor Object may not be universally addressable across context by any one URL.","title":"Test Subject"},{"location":"fep/fep-e965-test-case/#inputs","text":"This test requires the following inputs : actor - the actor object under tested type: binary data constraints will be interpreted as JSON. If not parseable as JSON, the test result MUST be inapplicable . dereferenced @context array should include both terms defined by FEP-7628 to signal support for this FEP if does not, the test result outcome MUST be inapplicable .","title":"Inputs"},{"location":"fep/fep-e965-test-case/#applicability","text":"This test applies directly to the actor input. If actor is not a JSON object, the outcome MUST be inapplicable . input actor MUST have a @context property whose value is an Array containing the string https://w3id.org/fep/7628 . If it does not, the outcome MUST be inapplicable .","title":"Applicability"},{"location":"fep/fep-e965-test-case/#test-targets","text":"input actor is the only test target","title":"Test Targets"},{"location":"fep/fep-e965-test-case/#expectations","text":"movedTo - MUST be a URI OR an empty string, if present copiedTo - MUST be a URI, if present movedTo and copiedTo MUST NOT both be present actor JSON's @context array SHOULD include \"https://w3id.org/fep/7628\" to signal conformance","title":"Expectations"},{"location":"fep/fep-e965-test-case/#assumptions","text":"","title":"Assumptions"},{"location":"fep/fep-e965-test-case/#1-how-to-determine-whether-an-actor-object-supports-fep-7628-semantics","text":"For the purposes of determining whether the active status and migration history of a given Actor can be tested by this test case: the input is valid JSON the input, once parsed as JSON has an @context property @context array includes the URL \"https://w3id.org/fep/7628\" A warning should be returned if this value is not present.","title":"1. How to Determine Whether an Actor object supports FEP-7628 Semantics"},{"location":"fep/fep-e965-test-case/#2-property-value-expectations","text":"For the purposes of determining the in/active status and migration history of a the target Actor: the input is valid JSON movedTo and copiedTo MUST NOT both be present movedTo can be a valid URI OR not present copiedTo can be a valid URI or an array containing one or more valid URIs OR not present","title":"2. Property value expectations"},{"location":"fep/fep-e965-test-case/#property-value-evaluation-logic-pseudocode","text":"the input is valid JSON movedTo and copiedTo MUST NOT both be present //log (malformed actor - both movedTo and copiedTo present) outcome is FAILED else if movedTo is present, value MUST be a valid URI //log (actor has migrated to $movedTo) if URI is 404 //OPTIONAL CHECK log ($movedTo is not resolvable) outcome is PASSED else outcome is FAILED else if copiedTo is present, type MUST not include \"Tombstone\" outcome is FAILED ; log (\"Cannot be tombstoned if copiedTo is set\") each value MUST be a valid URI if URI is 404 //OPTIONAL CHECK log ($copiedTo is not resolvable) outcome is PASSED else outcome is FAILED ; log (\"invalid values in copiedTo \") else //log (actor is currently active and unlinked) outcome is PASSED","title":"Property Value evaluation logic (Pseudocode)"},{"location":"fep/fep-e965-test-case/#test-cases","text":"These are test cases for this test case, and can be used to verify that an implementation of this test case specification will be consistent with other implementations.","title":"Test Cases"},{"location":"fep/fep-e965-test-case/#missing-context-values","text":"input actor: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\" } test result outcome: inapplicable optional: warning (\"value https://w3id.org/fep/7628 not present in \"@context\" to signal conformance\")","title":"Missing @context values"},{"location":"fep/fep-e965-test-case/#both-movedto-and-copiedto-present","text":"input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": \"https://otherexample.com/newname\", \"copiedTo\": \"https://otherexample.com/thirdname\" } test return outcome: FAILED , log ( movedTo and copiedTo MUST NOT both be present)","title":"both movedTo and copiedTo present"},{"location":"fep/fep-e965-test-case/#movedto-set-to-array","text":"input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": [ \"https://example2.com/id\", \"https://example3.com/id\" ], } test return outcome: FAILED , log ( movedTo MUST be a functional property)","title":"movedTo set to array"},{"location":"fep/fep-e965-test-case/#copiedto-contains-invalid-uri","text":"input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"copiedTo\": [ \"https://example2.com/id\", \"Tombstone\" ], } test return outcome: FAILED , log ( movedTo MUST be a functional property)","title":"copiedTo contains invalid URI"},{"location":"fep/fep-e965-test-case/#movedto-set-to-invalid-uri-1","text":"input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": \"Tombstone\" } test return outcome: FAILED , log ( movedTo MUST be a URI)","title":"movedTo set to invalid URI #1"},{"location":"fep/fep-e965-test-case/#movedto-set-to-invalid-uri-2","text":"input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": \"\" } test return outcome: FAILED , log ( movedTo MUST be a URI)","title":"movedTo set to invalid URI #2"},{"location":"fep/fep-e965-test-case/#valid-deactivated-actor","text":"input actor : { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": [\"Person\",\"Tombstone\"], \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\" } test return outcome: PASSED","title":"Valid Deactivated Actor"},{"location":"fep/fep-e965-test-case/#valid-migrated-actor","text":"input actor : { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": [\"Person\",\"Tombstone\"], \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": \"https://actorname.otherexample.com\" } test return outcome: PASSED optional: check and log validity of actor referenced by that URI","title":"Valid Migrated Actor"},{"location":"fep/fep-e965-test-case/#valid-migrated-actor-missing-tombstone","text":"This test vector does NOT conform to [FEP0-f2a] but DOES conform to the older FEP-7628 . It is included to assist in testing the consumption of legacy migrated actors. input actor : { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": [\"Person\"], \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"movedTo\": \"https://actorname.otherexample.com\" } test return outcome: FAILED log (\"Missing Tombstone but backwards-compatible\") optional: check and log validity of actor referenced by that URI","title":"Valid Migrated Actor (Missing Tombstone)"},{"location":"fep/fep-e965-test-case/#valid-multi-homed-actor","text":"input actor : { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"copiedTo\": \"https://personalarchive.otherexample.com\" } test return outcome: PASSED optional: check and log validity of actor referenced by that URI","title":"Valid Multi-homed Actor"},{"location":"fep/fep-e965-test-case/#valid-multi-homed-actor-copiedto-set-to-array","text":"input actor: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/fep/7628\" ], \"type\": \"Person\", \"inbox\": \"https://example.com/inbox\", \"outbox\": \"https://example.com/outbox\", \"copiedTo\": [ \"https://example2.com/id\", \"https://example3.com/id\" ], } test return outcome: PASSED , log ( copiedTo contains multiple valid URIs)","title":"Valid Multi-homed Actor (copiedTo set to array)"},{"location":"fep/fep-e965-test-case/#glossary","text":"","title":"Glossary"},{"location":"fep/fep-e965-test-case/#outcome","text":"An outcome is a conclusion that comes from evaluating a test on a test subject. An outcome can be one of the three following types: inapplicable : No part of the test subject matches the applicability passed : A test target meets all expectations failed : A test target does not meet all expectations","title":"outcome"},{"location":"fep/fep-e965-test-case/#requirements-mapping","text":"FEP requirement: - Actor Objects must express signing key as assertionMethod Multikey Required for Conformance to FEP-e965 Outcome Mapping when test target assertionMethod has outcome passed , requirement is satisfied when test target assertionMethod has outcome failed , requirement is not satisfied when test target assertionMethod has outcome inapplicable , further testing is needed to determine whether this requirement is satisfied","title":"Requirements Mapping"},{"location":"fep/fep-e965-test-case/#_1","text":"","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-e965-test-case/#change-log","text":"2024-08-28T15:20:36Z - tweak links because FEP slug changed 2024-06-28T15:20:36Z - first draft by bumblefudge","title":"Change Log"},{"location":"fep/fep-e965-test-case/#issues-list","text":"Add a test vector with signed IdentityProof that verifies using current DI spec and dummy private key","title":"Issues List"},{"location":"fep/fep-e965/","text":"FEP-e965: Move Activity for Migrations and Announce Activity for Tombstone Events Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This FEP normatively specifies exactly one narrow step in almost all the migration user-stories defined in FEP-73cd: User Migration Stories : the updates to an Actor object made after a migration and/or deactivation event, and the Move activity which a source server propagates to inform followers of said Actor object update Our proposal clarifies semantics and behavior of the earlier FEP-7628 on which it strictly relies. It also proposes a simple, additive approach to use the above to express \"deactivated\" Actors by \"tombstoning\" their Actor objects, i.e. adding \"Tombstone\" to their type array (already afforded by the Activity Streams vocabulary). It also accomodates migrations to new forms of Actor object, such as \"Nomadic\"-style Portable Actors as described in FEP-ef61: Portable Objects and \"Independently-hosted\" Actor objects as described in FEP-7952 , both for conforming and non-conforming consumers. As such, fully implementing all optional features of this proposal would require implementing FEP-521a: Representing actor's public keys , which adds terms to the Actor object for publishing a verification method to verify assertions about the Actor independently of domain. Current Approaches Migration is currently supported in a somewhat ad hoc and piecemeal way, without harmonized expectations for how to update, announce, or interpret an Actor object after a migration, or after a deactiviation. Deactivation is sometimes referred to as a \"tombstone\" event, both in general usage in distributed systems and in the Activity Streams sense of the Tombstone object type. Adding the \"Tombstone\" member to the type array of an Actor object marks it as deactivated, as is already possible but more commonly implemented for deleted content or Activities than for Actors. We did not do a review of existing codebases, and the only public prior art that we're aware of is the retrospecification of current practice in FEP-7628: Move Actor . Beyond passively leaving a Tombstone hint for future queries, there have been no public proposals to our knowledge specifying how to actively express a given Actor's controller expressing an \"intent [for that Actor] to be forgotten\" to other servers where interactions with it may be stored, much less how to document that intent for legal purposes (which is explicitly out of scope here). Specification Conformance MUST, MAY, and SHOULD used in the RFC-2119 sense where they appear in CAPITAL LETTERS. Similarly, the references to \"valid\" URIs throughout should be interpreted as conforming to both RFC-3987 and the [Activity Streams guidance on URI usage][Activity Streams URIs]. Implementations SHOULD signal their support for this specification by including \"https://w3id.org/fep/7628\" in the @context array of their Actors, as this will clearly signal that the ABSENCE of a movedTo or copiedTo property indicates a currently-active Actor. Implementations MAY prove support for this specification by publishing a Conformance Report referencing the tests run. A specification for possible tests is provided in fep-e965-test-case . Actor Object Migration and Deactivation Syntax In the section, \"Move Activity\" of FEP-7628 , two variations of the Mastodon-style Move Activity are defined, as well as semantics for the movedTo and copiedTo properties that MUST be applied to the Actor object on the source server of the activity: If previous primary actor is deactivated after migration, it MUST have movedTo property containing the ID of the new primary actor. [...] If previous primary actor is not deactivated, copiedTo property MUST be used. We add a few more explicit requirements: movedTo MUST be a string or an array containing 1 string. copiedTo MUST be a string or an array of strings. both movedTo and copiedTo MUST NOT be present in the same Actor object. Consuming implementations SHOULD treat an Actor with both properties as malformed. Many other current and future process and Activities could also be using the same semantics, including new \"styles\" or \"profiles\" of the many possible Actor objects allowed by the [ActivityPub] specification. These include Actors that do not change id after migrating , whether they conform to the Nomadic Actor extension, or to the separately-hosted Actor extension. If an account is moving to one of these configurations, the movedTo or copiedTo value will be the id and location of an ap:// URL, or to a URL controlled by the Actor object's data subject, respectively. If the Actor object before the deactivation event included a public key for signing Activities expressed according to Client-Signing , and the same public key will NOT be published at the destination server for verifying post-migration Activities, then the source server MAY add an expires key and current-timestamp value to the key's assertionMethod object as described in section #2.3.1: Verification Methods of the W3C Data Integrity specification (to which FEP-521a normatively refers). Any consumer fetching this assertionMethod object for the purposes of verifying signatures according to the Data Integrity algorithm will thus invalidate signatures newer than the deactivation of that key. If an account has been deleted intentionally and consuming implementations are expected to recognize this, regardless of whether or not a movedTo value has been set, a server MUST include the string \"Tombstone\" in the type array of the deactivated or moved Actor object. Whether any other types are present is out of scope of this specification, to minimize side effects or complications for implementers. If an account whose Actor object containing a valid copiedTo value has been deleted intentionally, this MUST be removed before adding Tombstone to the Actor's type . A server performing this removal MAY move one valid URI from copiedTo to movedTo to aid discovery. If a user account is being deactivated but the source server wants to enable a future migration to be authenticated cryptographically, it MAY add to the Actor object a public key authenticated to the account (if not already present), as per to FEP-521a . An Actor object set to Tombstone SHOULD also set a top-level as:deleted property containing a current XSD dateTime as a courtesy to consumers. Announcing a Migration or Deactivation Event After these changes have been made to the Actor object on the source server, it should be announced according to the type of changes made. If movedTo or copiedTo have been changed, then a FEP-73cd -compatible Move activity with the Actor as its object SHOULD be sent out, at least to all of that Actor's Followers. If the Actor is being retyped to Tombstone , an Announce activity with the Actor as object should be sent out, at least to all of that Actor's followers. If a user account is being deactivated but the source server wants to enable a future migration to be authenticated cryptographically, it is RECOMMENDED that the Announce activity be signed as per FEP-8b32 . In this way, a later Move activity signed by the same key could, at least theoretically, be accepted from a new server which authenticates it by FEP-8b32 . Interpreting a Migrated or Deactivated Actor Object In the section, \" movedTo and copiedTo properties\" of FEP-7628 , the following general rule for all Actor objects is proposed: Publishers SHOULD NOT deliver activities to actor's inbox if movedTo property is present. We add the following behavioral expectations: Publishers SHOULD attempt to resolve the movedTo property to find out if it contains an inbox property. If an inbox is found, publishers SHOULD apply security, privacy, and federation policies on the domain at which it is hosted before taking any further action. If said inbox is permitted, publishers SHOULD attempt to deliver activities to the new inbox. If no movedTo value is set and one or more copiedTo values are set, publishers MAY resolve a copiedTo value to retrieve an inbox value and similarly process it. In the case of a valid copiedTo inbox and allowance by policy, delivery MAY attempt delivery to both Actor inbox and copiedTo inbox(es). Consuming implementations that keep redirect or alias records MAY persist the above-resolved relationship to avoid repeating this resolution in the future. If a movedTo value has been set to a valid URI, but type does not include \"Tombstone\", consuming implementations SHOULD treat it as a deactivated actor per Postel's Law. Behavior for unfamiliar Actor URIs There are caveats to interpreting these values if the movedTo or copiedTo properties contain unconventional URLs, such as those generated by an implementation extended by the above-mentioned FEPs: If the movedTo or copiedTo value is a valid URL beginning with the prefix ap:// and the @context value includes the relevant extension properties, the destination server of the migration is likely implementing FEP-ef61 and may require custom resolution logic to return an Actor object. Similarly, if the movedTo or copiedTo value contains an actor-relative URL of the type defined in FEP-7952 , it should resolve as usual if the server is live, as long as the querying implementation allows for the HTTP redirect and has no policy against (or hardcoded assumptions incompatible with) inbox values on different domains than id values for a given Actor. If an actor returned contains a non-empty movedTo or a non-empty copiedTo value in turn, this should in turn be dereferenced, barring domain-based policies to the contrary. If a querying implementation cannot resolve a value of these types or further indirections, it SHOULD consider them equivalent to URLs that return 404 and MAY log an error or warning to user or system log as appropriate. It is RECOMMENDED that unresolvable movedTo values be displayed to end-users as corrupted or incomplete moves, rather than as deactivated accounts. Interpreting a Move Activity or an Announce Activity of a Deactivated Actor Servers receiving a Move or an Announce activity with an Actor as its object SHOULD NOT increment a shares collection. If a receiving server persists redirects or aliases to more smoothly remain aware of migrating or multi-homed users, or for other reasons, it MAY resolve the new Actor object and perform the above-described checks and MAY record said Actor update. Open Issues Are there others to which an Actor-update Move or Announce should be addressed beyond just the old Actor's Followers, somehow imported ? is it worth calling out server-instance Actors, since they might also want to know for... idunno moderation reasons? Announce Activity example Address Actor Equivalence Attestation objects explicitly, or leave up to implementer imagination? \u53c2\u8003\u6587\u732e FEP-521a: Representing actor's public keys FEP-73cd: Migration User Stories FEP-7628: Move Actor FEP-7952: Roadmap for Actor and Object Portability FEP-8b32: Object Integrity Proofs FEP-cd47: Federation-friendly Addressing and Deduplication Use-Cases FEP-ef61: Portable Objects Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, 1997 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2023 Manu Sporny, Dave Longley, Markus Sabadell, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0, 2022 Dave Longley, Manu Sporny, Data Integrity EdDSA Cryptosuites v1.0, 2023 A. Rundgren, B. Jordan, S. Erdtman, JSON Canonicalization Scheme (JCS), 2020 Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"FEP-e965: Move Activity for Migrations and Announce Activity for Tombstone Events"},{"location":"fep/fep-e965/#fep-e965-move-activity-for-migrations-and-announce-activity-for-tombstone-events","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-e965: Move Activity for Migrations and Announce Activity for Tombstone Events"},{"location":"fep/fep-e965/#summary","text":"This FEP normatively specifies exactly one narrow step in almost all the migration user-stories defined in FEP-73cd: User Migration Stories : the updates to an Actor object made after a migration and/or deactivation event, and the Move activity which a source server propagates to inform followers of said Actor object update Our proposal clarifies semantics and behavior of the earlier FEP-7628 on which it strictly relies. It also proposes a simple, additive approach to use the above to express \"deactivated\" Actors by \"tombstoning\" their Actor objects, i.e. adding \"Tombstone\" to their type array (already afforded by the Activity Streams vocabulary). It also accomodates migrations to new forms of Actor object, such as \"Nomadic\"-style Portable Actors as described in FEP-ef61: Portable Objects and \"Independently-hosted\" Actor objects as described in FEP-7952 , both for conforming and non-conforming consumers. As such, fully implementing all optional features of this proposal would require implementing FEP-521a: Representing actor's public keys , which adds terms to the Actor object for publishing a verification method to verify assertions about the Actor independently of domain.","title":"Summary"},{"location":"fep/fep-e965/#current-approaches","text":"Migration is currently supported in a somewhat ad hoc and piecemeal way, without harmonized expectations for how to update, announce, or interpret an Actor object after a migration, or after a deactiviation. Deactivation is sometimes referred to as a \"tombstone\" event, both in general usage in distributed systems and in the Activity Streams sense of the Tombstone object type. Adding the \"Tombstone\" member to the type array of an Actor object marks it as deactivated, as is already possible but more commonly implemented for deleted content or Activities than for Actors. We did not do a review of existing codebases, and the only public prior art that we're aware of is the retrospecification of current practice in FEP-7628: Move Actor . Beyond passively leaving a Tombstone hint for future queries, there have been no public proposals to our knowledge specifying how to actively express a given Actor's controller expressing an \"intent [for that Actor] to be forgotten\" to other servers where interactions with it may be stored, much less how to document that intent for legal purposes (which is explicitly out of scope here).","title":"Current Approaches"},{"location":"fep/fep-e965/#specification","text":"","title":"Specification"},{"location":"fep/fep-e965/#conformance","text":"MUST, MAY, and SHOULD used in the RFC-2119 sense where they appear in CAPITAL LETTERS. Similarly, the references to \"valid\" URIs throughout should be interpreted as conforming to both RFC-3987 and the [Activity Streams guidance on URI usage][Activity Streams URIs]. Implementations SHOULD signal their support for this specification by including \"https://w3id.org/fep/7628\" in the @context array of their Actors, as this will clearly signal that the ABSENCE of a movedTo or copiedTo property indicates a currently-active Actor. Implementations MAY prove support for this specification by publishing a Conformance Report referencing the tests run. A specification for possible tests is provided in fep-e965-test-case .","title":"Conformance"},{"location":"fep/fep-e965/#actor-object-migration-and-deactivation-syntax","text":"In the section, \"Move Activity\" of FEP-7628 , two variations of the Mastodon-style Move Activity are defined, as well as semantics for the movedTo and copiedTo properties that MUST be applied to the Actor object on the source server of the activity: If previous primary actor is deactivated after migration, it MUST have movedTo property containing the ID of the new primary actor. [...] If previous primary actor is not deactivated, copiedTo property MUST be used. We add a few more explicit requirements: movedTo MUST be a string or an array containing 1 string. copiedTo MUST be a string or an array of strings. both movedTo and copiedTo MUST NOT be present in the same Actor object. Consuming implementations SHOULD treat an Actor with both properties as malformed. Many other current and future process and Activities could also be using the same semantics, including new \"styles\" or \"profiles\" of the many possible Actor objects allowed by the [ActivityPub] specification. These include Actors that do not change id after migrating , whether they conform to the Nomadic Actor extension, or to the separately-hosted Actor extension. If an account is moving to one of these configurations, the movedTo or copiedTo value will be the id and location of an ap:// URL, or to a URL controlled by the Actor object's data subject, respectively. If the Actor object before the deactivation event included a public key for signing Activities expressed according to Client-Signing , and the same public key will NOT be published at the destination server for verifying post-migration Activities, then the source server MAY add an expires key and current-timestamp value to the key's assertionMethod object as described in section #2.3.1: Verification Methods of the W3C Data Integrity specification (to which FEP-521a normatively refers). Any consumer fetching this assertionMethod object for the purposes of verifying signatures according to the Data Integrity algorithm will thus invalidate signatures newer than the deactivation of that key. If an account has been deleted intentionally and consuming implementations are expected to recognize this, regardless of whether or not a movedTo value has been set, a server MUST include the string \"Tombstone\" in the type array of the deactivated or moved Actor object. Whether any other types are present is out of scope of this specification, to minimize side effects or complications for implementers. If an account whose Actor object containing a valid copiedTo value has been deleted intentionally, this MUST be removed before adding Tombstone to the Actor's type . A server performing this removal MAY move one valid URI from copiedTo to movedTo to aid discovery. If a user account is being deactivated but the source server wants to enable a future migration to be authenticated cryptographically, it MAY add to the Actor object a public key authenticated to the account (if not already present), as per to FEP-521a . An Actor object set to Tombstone SHOULD also set a top-level as:deleted property containing a current XSD dateTime as a courtesy to consumers.","title":"Actor Object Migration and Deactivation Syntax"},{"location":"fep/fep-e965/#announcing-a-migration-or-deactivation-event","text":"After these changes have been made to the Actor object on the source server, it should be announced according to the type of changes made. If movedTo or copiedTo have been changed, then a FEP-73cd -compatible Move activity with the Actor as its object SHOULD be sent out, at least to all of that Actor's Followers. If the Actor is being retyped to Tombstone , an Announce activity with the Actor as object should be sent out, at least to all of that Actor's followers. If a user account is being deactivated but the source server wants to enable a future migration to be authenticated cryptographically, it is RECOMMENDED that the Announce activity be signed as per FEP-8b32 . In this way, a later Move activity signed by the same key could, at least theoretically, be accepted from a new server which authenticates it by FEP-8b32 .","title":"Announcing a Migration or Deactivation Event"},{"location":"fep/fep-e965/#interpreting-a-migrated-or-deactivated-actor-object","text":"In the section, \" movedTo and copiedTo properties\" of FEP-7628 , the following general rule for all Actor objects is proposed: Publishers SHOULD NOT deliver activities to actor's inbox if movedTo property is present. We add the following behavioral expectations: Publishers SHOULD attempt to resolve the movedTo property to find out if it contains an inbox property. If an inbox is found, publishers SHOULD apply security, privacy, and federation policies on the domain at which it is hosted before taking any further action. If said inbox is permitted, publishers SHOULD attempt to deliver activities to the new inbox. If no movedTo value is set and one or more copiedTo values are set, publishers MAY resolve a copiedTo value to retrieve an inbox value and similarly process it. In the case of a valid copiedTo inbox and allowance by policy, delivery MAY attempt delivery to both Actor inbox and copiedTo inbox(es). Consuming implementations that keep redirect or alias records MAY persist the above-resolved relationship to avoid repeating this resolution in the future. If a movedTo value has been set to a valid URI, but type does not include \"Tombstone\", consuming implementations SHOULD treat it as a deactivated actor per Postel's Law.","title":"Interpreting a Migrated or Deactivated Actor Object"},{"location":"fep/fep-e965/#behavior-for-unfamiliar-actor-uris","text":"There are caveats to interpreting these values if the movedTo or copiedTo properties contain unconventional URLs, such as those generated by an implementation extended by the above-mentioned FEPs: If the movedTo or copiedTo value is a valid URL beginning with the prefix ap:// and the @context value includes the relevant extension properties, the destination server of the migration is likely implementing FEP-ef61 and may require custom resolution logic to return an Actor object. Similarly, if the movedTo or copiedTo value contains an actor-relative URL of the type defined in FEP-7952 , it should resolve as usual if the server is live, as long as the querying implementation allows for the HTTP redirect and has no policy against (or hardcoded assumptions incompatible with) inbox values on different domains than id values for a given Actor. If an actor returned contains a non-empty movedTo or a non-empty copiedTo value in turn, this should in turn be dereferenced, barring domain-based policies to the contrary. If a querying implementation cannot resolve a value of these types or further indirections, it SHOULD consider them equivalent to URLs that return 404 and MAY log an error or warning to user or system log as appropriate. It is RECOMMENDED that unresolvable movedTo values be displayed to end-users as corrupted or incomplete moves, rather than as deactivated accounts.","title":"Behavior for unfamiliar Actor URIs"},{"location":"fep/fep-e965/#interpreting-a-move-activity-or-an-announce-activity-of-a-deactivated-actor","text":"Servers receiving a Move or an Announce activity with an Actor as its object SHOULD NOT increment a shares collection. If a receiving server persists redirects or aliases to more smoothly remain aware of migrating or multi-homed users, or for other reasons, it MAY resolve the new Actor object and perform the above-described checks and MAY record said Actor update.","title":"Interpreting a Move Activity or an Announce Activity of a Deactivated Actor"},{"location":"fep/fep-e965/#open-issues","text":"Are there others to which an Actor-update Move or Announce should be addressed beyond just the old Actor's Followers, somehow imported ? is it worth calling out server-instance Actors, since they might also want to know for... idunno moderation reasons? Announce Activity example Address Actor Equivalence Attestation objects explicitly, or leave up to implementer imagination?","title":"Open Issues"},{"location":"fep/fep-e965/#_1","text":"FEP-521a: Representing actor's public keys FEP-73cd: Migration User Stories FEP-7628: Move Actor FEP-7952: Roadmap for Actor and Object Portability FEP-8b32: Object Integrity Proofs FEP-cd47: Federation-friendly Addressing and Deduplication Use-Cases FEP-ef61: Portable Objects Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels, 1997 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2023 Manu Sporny, Dave Longley, Markus Sabadell, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0, 2022 Dave Longley, Manu Sporny, Data Integrity EdDSA Cryptosuites v1.0, 2023 A. Rundgren, B. Jordan, S. Erdtman, JSON Canonicalization Scheme (JCS), 2020","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-e965/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-eb22/","text":"FEP-eb22: Supported ActivityStreams types with NodeInfo Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Servers can advertise what features of the API they support, such as creating a poll or boosting a post. Clients can recognize if a server doesn't support a feature and hide it from the UI. Background As the fediverse grows, we'll naturally see a wide range of servers and clients, and not all of them will exactly match the features that popular clients like Mastodon support. To support a diverse mix of clients with different user experiences, clients and servers should communicate about which features should be shown in the client UI. Some services might not include public likes or polls, for example. Some might not include boosting. It would be confusing for a boost icon to show an error message when clicked if that feature was not available. Instead, the client should detect whether boosting is available, and if not simply hide the icon when connected to that server. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC 2119 . Proposal Document in NodeInfo the ActivityStreams types and properties that correspond to features the server supports. This information can be used by both ActivityPub clients as well as Mastodon API clients. We use ActivityStreams types because they are already part of a fediverse standard, rather than inventing new keys to describe existing features. Add a new top-level field types to NodeInfo with three fields, all of which are optional: activities : The types of activities the server broadly supports. objects : The types of objects that the server supports in the relevant activities. properties : For each activity or object, what properties are allowed in that object. If no types are present in NodeInfo, a client should assume a server supports all types, just as most clients do today. If no objects are present for an activity, a client should assume a server supports all common objects. If a limited number of objects are present, a client should assume a server only supports those objects. If no properties are present for an object, a client should assume a server supports all common properties. If a limited number of properties are present, a client should assume a server only supports those properties. \u4f8b The following examples are simplified versions of what most servers should support. Most popular servers will support more activity and object types than this, but these examples keep the list short for readability. Other common activities include Follow , Undo , Accept , Block , and others as listed in the Activity Vocabulary specification. Supporting common social features and book reviews ( Review ) This example adds Review , an object used by BookWyrm for book reviews. Because only properties for Review are specified, a client can assume that all common objects and properties for the other activities are supported. { \"types\": { \"activities\": [ \"Create\", \"Like\", \"Announce\", \"Question\", \"Move\", \"Follow\" ], \"objects\": [ \"Note\", \"Article\", \"Image\", \"Review\" ], \"properties\": { \"Review\": [ \"title\", \"body\", \"rating\", \"inReplyToBook\" ] } } } Supporting common social features, but not supporting polls ( Question ) This example leaves off the Question type and the oneOf property used for polls. { \"types\": { \"activities\": [ \"Create\", \"Like\", \"Announce\" ], \"objects\": [ \"Note\", \"Article\", \"Image\" ], \"properties\": { \"Note\": [ \"summary\", \"content\", \"published\", \"inReplyTo\" ], \"Article\": [ \"name\", \"content\", \"published\" ] } } } Supporting common social features including polls, but not supporting titled posts ( name ) This example includes only the content and published properties for Article , meaning the client should not prompt for a title for long-form articles. { \"types\": { \"activities\": [ \"Create\", \"Like\", \"Announce\", \"Question\", ], \"objects\": [ \"Note\", \"Article\", \"Image\" ], \"properties\": { \"Question\": [ \"oneOf\" ], \"Note\": [ \"summary\", \"content\", \"published\", \"inReplyTo\" ], \"Article\": [ \"content\", \"published\" ] } } } Supporting common social features, but not supporting boosts ( Announce ) This example lists the bare minimum types, leaving off the explicit list of objects and properties. Clients should assume the server supports whatever properties are common for those types, such as Note , Article , and others. { \"types\": { \"activities\": [ \"Create\", \"Like\", \"Question\", \"Move\" ] } } Supporting common social features and account migration ( Move ) This example lists object and target fields that are used for account migration with the Move activity. { \"types\": { \"activities\": [ \"Create\", \"Like\", \"Announce\", \"Question\", \"Move\" ], \"properties\": { \"Move\": [ \"object\", \"target\" ] } } } Related proposals There have been a few other attempts at addressing how to describe what a server supports: FEP-9fde: Mechanism for servers to expose supported operations : This extension also uses NodeInfo, but with reverse domain name identifiers and versions to document what operations a server supports. This ties features with the clients that first added support rather than more generally with the common activity types. FEP-6481: Specifying ActivityPub extension support with NodeInfo : This lists \"extensions\" to the common ActivityStreams types. BookWyrm, for example, adds a book \"Review\" type that could be documented in this way. Micropub: Query for Supported Vocabulary : From the IndieWeb community, the Micropub API is an interface for posting to a web site. This Micropub extension returns a list of post types that a server supports. \u53c2\u8003\u6587\u732e ActivityStreams 2.0 Activity Vocabulary BookWyrm ActivityPub \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-eb22: Supported ActivityStreams types with NodeInfo"},{"location":"fep/fep-eb22/#fep-eb22-supported-activitystreams-types-with-nodeinfo","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-eb22: Supported ActivityStreams types with NodeInfo"},{"location":"fep/fep-eb22/#summary","text":"Servers can advertise what features of the API they support, such as creating a poll or boosting a post. Clients can recognize if a server doesn't support a feature and hide it from the UI.","title":"Summary"},{"location":"fep/fep-eb22/#background","text":"As the fediverse grows, we'll naturally see a wide range of servers and clients, and not all of them will exactly match the features that popular clients like Mastodon support. To support a diverse mix of clients with different user experiences, clients and servers should communicate about which features should be shown in the client UI. Some services might not include public likes or polls, for example. Some might not include boosting. It would be confusing for a boost icon to show an error message when clicked if that feature was not available. Instead, the client should detect whether boosting is available, and if not simply hide the icon when connected to that server.","title":"Background"},{"location":"fep/fep-eb22/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this specification are to be interpreted as described in RFC 2119 .","title":"Requirements"},{"location":"fep/fep-eb22/#proposal","text":"Document in NodeInfo the ActivityStreams types and properties that correspond to features the server supports. This information can be used by both ActivityPub clients as well as Mastodon API clients. We use ActivityStreams types because they are already part of a fediverse standard, rather than inventing new keys to describe existing features. Add a new top-level field types to NodeInfo with three fields, all of which are optional: activities : The types of activities the server broadly supports. objects : The types of objects that the server supports in the relevant activities. properties : For each activity or object, what properties are allowed in that object. If no types are present in NodeInfo, a client should assume a server supports all types, just as most clients do today. If no objects are present for an activity, a client should assume a server supports all common objects. If a limited number of objects are present, a client should assume a server only supports those objects. If no properties are present for an object, a client should assume a server supports all common properties. If a limited number of properties are present, a client should assume a server only supports those properties.","title":"Proposal"},{"location":"fep/fep-eb22/#_1","text":"The following examples are simplified versions of what most servers should support. Most popular servers will support more activity and object types than this, but these examples keep the list short for readability. Other common activities include Follow , Undo , Accept , Block , and others as listed in the Activity Vocabulary specification.","title":"\u4f8b"},{"location":"fep/fep-eb22/#supporting-common-social-features-and-book-reviews-review","text":"This example adds Review , an object used by BookWyrm for book reviews. Because only properties for Review are specified, a client can assume that all common objects and properties for the other activities are supported. { \"types\": { \"activities\": [ \"Create\", \"Like\", \"Announce\", \"Question\", \"Move\", \"Follow\" ], \"objects\": [ \"Note\", \"Article\", \"Image\", \"Review\" ], \"properties\": { \"Review\": [ \"title\", \"body\", \"rating\", \"inReplyToBook\" ] } } }","title":"Supporting common social features and book reviews (Review)"},{"location":"fep/fep-eb22/#supporting-common-social-features-but-not-supporting-polls-question","text":"This example leaves off the Question type and the oneOf property used for polls. { \"types\": { \"activities\": [ \"Create\", \"Like\", \"Announce\" ], \"objects\": [ \"Note\", \"Article\", \"Image\" ], \"properties\": { \"Note\": [ \"summary\", \"content\", \"published\", \"inReplyTo\" ], \"Article\": [ \"name\", \"content\", \"published\" ] } } }","title":"Supporting common social features, but not supporting polls (Question)"},{"location":"fep/fep-eb22/#supporting-common-social-features-including-polls-but-not-supporting-titled-posts-name","text":"This example includes only the content and published properties for Article , meaning the client should not prompt for a title for long-form articles. { \"types\": { \"activities\": [ \"Create\", \"Like\", \"Announce\", \"Question\", ], \"objects\": [ \"Note\", \"Article\", \"Image\" ], \"properties\": { \"Question\": [ \"oneOf\" ], \"Note\": [ \"summary\", \"content\", \"published\", \"inReplyTo\" ], \"Article\": [ \"content\", \"published\" ] } } }","title":"Supporting common social features including polls, but not supporting titled posts (name)"},{"location":"fep/fep-eb22/#supporting-common-social-features-but-not-supporting-boosts-announce","text":"This example lists the bare minimum types, leaving off the explicit list of objects and properties. Clients should assume the server supports whatever properties are common for those types, such as Note , Article , and others. { \"types\": { \"activities\": [ \"Create\", \"Like\", \"Question\", \"Move\" ] } }","title":"Supporting common social features, but not supporting boosts (Announce)"},{"location":"fep/fep-eb22/#supporting-common-social-features-and-account-migration-move","text":"This example lists object and target fields that are used for account migration with the Move activity. { \"types\": { \"activities\": [ \"Create\", \"Like\", \"Announce\", \"Question\", \"Move\" ], \"properties\": { \"Move\": [ \"object\", \"target\" ] } } }","title":"Supporting common social features and account migration (Move)"},{"location":"fep/fep-eb22/#related-proposals","text":"There have been a few other attempts at addressing how to describe what a server supports: FEP-9fde: Mechanism for servers to expose supported operations : This extension also uses NodeInfo, but with reverse domain name identifiers and versions to document what operations a server supports. This ties features with the clients that first added support rather than more generally with the common activity types. FEP-6481: Specifying ActivityPub extension support with NodeInfo : This lists \"extensions\" to the common ActivityStreams types. BookWyrm, for example, adds a book \"Review\" type that could be documented in this way. Micropub: Query for Supported Vocabulary : From the IndieWeb community, the Micropub API is an interface for posting to a web site. This Micropub extension returns a list of post types that a server supports.","title":"Related proposals"},{"location":"fep/fep-eb22/#_2","text":"ActivityStreams 2.0 Activity Vocabulary BookWyrm ActivityPub","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-eb22/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-eb48/","text":"FEP-eb48: Hashtags Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary This proposal introduces a standardized method for identifying and displaying hashtags in posts across the Fediverse. The rules define what constitutes a hashtag and how it should be parsed and displayed, ensuring consistency and predictability across different platforms and clients. Hashtag Rules A string is considered a hashtag if it meets the following criteria: It starts with the # symbol. It is followed by one or more alphanumeric characters (letters A-Z, a-z, or digits 0-9). It may include underscores ( _ ) but must not include any other special characters, spaces, or punctuation within the hashtag itself. \u4f8b The following examples illustrate how hashtags should be identified and highlighted: #hashtag \" #hashtag \" \" #hashtag \" ( #hashtag /#hashtag) ( #hashtag /#hashtag) ( #hashtag /#hashtag) ( #hashtag / #hashtag ) - #hashtag _ #hashtag ! #hashtag ? #hashtag @ #hashtag ; #hashtag , #hashtag .' #hashtag [ #hashtag & #hashtag ^ #hashtag Copyright CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Timeline Preferences"},{"location":"fep/fep-eb48/#fep-eb48-hashtags","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-eb48: Hashtags"},{"location":"fep/fep-eb48/#summary","text":"This proposal introduces a standardized method for identifying and displaying hashtags in posts across the Fediverse. The rules define what constitutes a hashtag and how it should be parsed and displayed, ensuring consistency and predictability across different platforms and clients.","title":"Summary"},{"location":"fep/fep-eb48/#hashtag-rules","text":"A string is considered a hashtag if it meets the following criteria: It starts with the # symbol. It is followed by one or more alphanumeric characters (letters A-Z, a-z, or digits 0-9). It may include underscores ( _ ) but must not include any other special characters, spaces, or punctuation within the hashtag itself.","title":"Hashtag Rules"},{"location":"fep/fep-eb48/#_1","text":"The following examples illustrate how hashtags should be identified and highlighted: #hashtag \" #hashtag \" \" #hashtag \" ( #hashtag /#hashtag) ( #hashtag /#hashtag) ( #hashtag /#hashtag) ( #hashtag / #hashtag ) - #hashtag _ #hashtag ! #hashtag ? #hashtag @ #hashtag ; #hashtag , #hashtag .' #hashtag [ #hashtag & #hashtag ^ #hashtag","title":"\u4f8b"},{"location":"fep/fep-eb48/#copyright","text":"CC0 1.0 Universal (CC0 1.0) Public Domain Dedication To the extent possible under law, the authors of this Fediverse Enhancement Proposal have waived all copyright and related or neighboring rights to this work.","title":"Copyright"},{"location":"fep/fep-ef61/","text":"FEP-ef61: Portable Objects Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Portable ActivityPub objects with server-independent IDs. Motivation Usage of HTTP(S) URLs as identifiers has a major drawback: when the server disappears, everyone who uses it loses their identities and data. The proposed solution should satisfy the following constraints: User's identity and data should not be tied to a single server. Users should have a choice between full control over their identity and data, and delegation of control to a trusted party. Implementing the solution in existing software should be as simple as possible. Changes to ActivityPub data model should be kept to a minimum. The solution should be compatible with existing and emerging decentralized identity and storage systems. The solution should be transport-agnostic. History Nomadic identity mechanism makes identity independent from a server and was originally part of the Zot federation protocol. Streams (2021) made nomadic accounts available via the Nomad protocol , which supported ActivityStreams serialisation. FEP-c390 (2022) introduced a decentralized identity solution compatible with ActivityPub. It enabled permissionless migration of followers between servers, but didn't provide full data portability. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Identifiers An ActivityPub object can be made portable by using an identifier that is not tied to a single server. This proposal describes a new identifier type that has this property and is compatible with the ActivityPub specification. ap:// URLs ap:// URL is constructed according to the URI specification, but with a Decentralized Identifier in place of the authority: ap://did:example:123456/path/to/object?name=value#fragment-id \\_/ \\________________/ \\____________/ \\________/ \\_________/ | | | | | scheme authority path query fragment The URI scheme MUST be ap . The authority component MUST be a valid DID . The path is REQUIRED. It MUST be treated as an opaque string. The query is OPTIONAL. To avoid future conflicts, implementers SHOULD NOT use parameter names that are not defined in this proposal. The fragment is OPTIONAL. DID methods Implementers MUST support the did:key method. Other DID methods SHOULD NOT be used, as it might hinder interoperability. [!NOTE] The following additional DID methods are being considered: did:web , did:dns , did:webvh (formerly did:tdw ) and did:fedi . DID documents SHOULD contain Ed25519 public keys represented as verification methods with Multikey type (as defined in the Controller Documents specification). Any DID URL capabilities of a DID method MUST be ignored when working with ap:// URLs. Dereferencing ap:// URLs To dereference an ap:// URL, the client MUST make HTTP GET request to a gateway endpoint at well-known location /.well-known/apgateway . The ap:// prefix MUST be removed from the URL and the rest of it appened to a gateway URL. The client MUST specify an Accept header with the application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" media type. Example of a request to a gateway: GET https://social.example/.well-known/apgateway/did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/path/to/object ActivityPub objects identified by ap:// URLs can be stored on multiple servers simultaneously. If object identified by ap:// URL is stored on the server, it MUST return a response with status 200 OK containing the requested object. The value of a Content-Type header MUST be application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" . If object identified by ap:// URL is not stored on the server, it MUST return 404 Not Found . If object is not public, the server MUST return 404 Not Found unless the request has a HTTP signature and the signer is allowed to view the object. [!NOTE] This document describes web gateways, which use HTTP transport. However, the data model and authentication mechanism are transport-agnostic and other types of gateways could exist. Authentication and authorization Authentication and authorization are performed in accordance with FEP-fe34 origin-based security model. The origin of an ap:// URL is computed by the following algorithm: Let uri-scheme be the ap string. Let uri-host be the authority component of the URL. Let uri-port be the number 0. Return the triple (uri-scheme, uri-host, uri-port) . And the origin of a DID URL is computed by the following algorithm: Let uri-scheme be the ap string. Let uri-host be the DID component of the DID URL. Let uri-port be the number 0. Return the triple (uri-scheme, uri-host, uri-port) . Actors, activities and objects identified by ap:// URLs MUST contain FEP-8b32 integrity proofs. Collections identified by ap:// URLs MAY contain integrity proofs. If collection doesn't contain an integrity proof, another authentication method MUST be used. The value of verificationMethod property of the proof MUST be a DID URL where the DID matches the authority component of the ap:// URL. [!NOTE] This document uses terms \"actor\", \"activity\", \"collection\" and \"object\" according to the classification given in FEP-2277 . Portable actors An actor object identified by ap:// URL MUST have a gateways property containing an ordered list of gateways where the latest version of that actor object can be retrieved. Each item in the list MUST be an HTTP(S) URL with empty path, query and fragment components. The list MUST contain at least one item. One identity (represented by DID ) can control multiple actors (which are differentiated by the path component of an ap:// URL). Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\", \"https://w3id.org/fep/ef61\" ], \"type\": \"Person\", \"id\": \"ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor\", \"inbox\": \"ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor/inbox\", \"outbox\": \"ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor/outbox\", \"gateways\": [ \"https://server1.example\", \"https://server2.example\" ], \"proof\": { \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"created\": \"2023-02-24T23:36:38Z\", \"verificationMethod\": \"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\" } } Location hints When ActivityPub object containing a reference to another actor is being constructed, implementations SHOULD provide a list of gateways where specified actor object can be retrieved. This list MAY be provided using the gateways query parameter. Each gateway address MUST be URL-endcoded, and if multiple addresses are present they MUST be separated by commas. Example: ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor?gateways=https%3A%2F%2Fserver1.example,https%3A%2F%2Fserver2.example This URL indicates that object can be retrieved from two gateways: https://server1.example https://server2.example Implementations MUST discard query parameters when comparing ap:// identifiers and treat identifiers with different query parameter values as equal. Inboxes and outboxes Servers and clients MUST use gateways to deliver activities to inboxes or outboxes. Servers specified in the gateways property of an actor object MUST accept POST requests to respective gateway URLs. Example: POST https://social.example/.well-known/apgateway/did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor/inbox Delivered activities might be not portable. If delivered activity is portable (has ap:// identifier), the server MUST verify its FEP-8b32 integrity proof. If the server does not accept deliveries on behalf of an actor, it MUST return 405 Method Not Allowed . ActivityPub clients MAY follow FEP-ae97 to publish activities. In this case, the client MAY deliver signed activity to multiple outboxes, located on different servers. Upon receiving an activity in actor's outbox, server SHOULD forward it to outboxes located on other servers where actor's data is stored. An activity MUST NOT be forwarded from outbox more than once. Upon receiving an activity in actor's inbox, server SHOULD forward it to inboxes located on other servers where actor's data is stored. Collections Collections associated with portable actors (such as inbox and outbox collections) MAY not have FEP-8b32 integrity proofs. Consuming implementations MUST NOT process unsecured collections retrieved from servers that are not listed in the gateways array of the actor document. Portable objects Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\", \"https://w3id.org/fep/ef61\" ], \"type\": \"Note\", \"id\": \"ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/objects/dc505858-08ec-4a80-81dd-e6670fd8c55f\", \"attributedTo\": \"ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor?gateways=https%3A%2F%2Fserver1.example,https%3A%2F%2Fserver2.example\", \"inReplyTo\": \"ap://did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK/objects/f66a006b-fe66-4ca6-9a4c-b292e33712ec\", \"content\": \"Hello!\", \"attachment\": [ { \"type\": \"Image\", \"url\": \"hl:zQmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n\", \"mediaType\": \"image/png\", \"digestMultibase\": \"zQmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n\" } ], \"to\": [ \"ap://did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK/actor\" ], \"proof\": { \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"created\": \"2023-02-24T23:36:38Z\", \"verificationMethod\": \"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\" } } Media Integrity of an external resource is attested with a digest. When a portable object contains a reference to an external resource (such as image), it MUST also contain a digestMultibase property representing the integrity digest of that resource. The digest MUST be computed using the SHA-256 algorithm. The URI of an external resource SHOULD be a hashlink . Example of an Image attachment: { \"type\": \"Image\", \"url\": \"hl:zQmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n\", \"mediaType\": \"image/png\", \"digestMultibase\": \"zQmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n\" } After retrieving a resource, the client MUST verify its integrity by computing its digest and comparing the result with the value encoded in digestMultibase property. Resources attached to portable objects using hashlinks can be stored by gateways. To retrieve a resource from a gateway, the client MUST make an HTTP GET request to the gateway endpoint at well-known location /.well-known/apgateway . The value of a hashlink URI MUST be appended to the gateway base URL. Example of a request: GET https://social.example/.well-known/apgateway/hl:zQmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n Compatibility Identifiers ap:// URLs might not be compatible with existing ActivityPub implementations. To provide backward compatibility, gateway-based HTTP(S) URLs of objects can be used instead of their actual ap:// identifiers: https://social.example/.well-known/apgateway/did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/path/to/object Publishers MUST use the first gateway from actor's gateways list when constructing compatible identifiers. Consuming implementations that support ap:// URLs MUST remove the part of the URL preceding did: and re-construct the canonical ap:// identifier. Objects with the same canonical identifier, but located on different gateways MUST be treated as different instances of the same object. Publishers MUST NOT add the gateways query parameter to object IDs if compatible identifiers are used. When HTTP signatures are necessary for communicating with other servers, each gateway that makes requests on behalf of an actor SHOULD use a separate secret key. The corresponding public keys MUST be added to actor document using the assertionMethod property as described in FEP-521a . WebFinger addresses WebFinger address of a portable actor can be obtained by the reverse discovery algorithm described in section 2.2 of ActivityPub and WebFinger report, but instead of taking the hostname from the identifier, it MUST be taken from the first gateway in actor's gateways array. Discussion (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) 'ap' URL syntax 'ap' URLs are not valid URIs per RFC-3986 . To make them valid, the authority component can be percent-encoded: ap://did%3Akey%3Az6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor Discovering locations Arbitrary paths The gateways array can contain HTTP(S) URLs with a path component, thus enabling discovery based on the \"follow your nose\" principle, as opposed to discovery based on a well-known location. Example of a compatible object ID if the gateway endpoint is https://social.example/ap : https://social.example/ap/did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/path/to/object Alternatives to gateways property This proposal makes use of the gateways property, but the following alternatives are being considered: aliases and sameAs (containing HTTP(S) URLs of objects) alsoKnownAs (used for account migrations, so the usage of this property may cause issues) url (with alternate relation type ) DID services Instead of specifying gateways in actor document, they can be specified in DID document using DID services . This approach is not compatible with generative DID methods such as did:key , which might be necessary for some types of applications. Media access control The proposed approach to referencing media with hashlinks does not support access control: anybody who knows the hash can retrieve the file. To work around this limitation, a different kind of identifier can be used where digest is combined with the ap:// identifier of its parent document. The gateway will not serve media unless parent document ID is provided, and will check whether request signer has permission to view the document and therefore the attached media. Compatibility The following alternatives to gateway-based compatible IDs are being considered: Use regular HTTP(S) URLs but specify the canonical ap:// URL using the url property (with canonical relation type, as proposed in FEP-fffd ). For pointers to other objects such as inReplyTo property, an embedded object with url property can be used instead of a plain URL. Alter object ID depending on the capabilities of the peer (which can be reported by NodeInfo or some other mechanism). \u5b9f\u88c5 Streams Mitra (gateway only) \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 T. Berners-Lee, R. Fielding, L. Masinter, Uniform Resource Identifier (URI): Generic Syntax , 2005 Manu Sporny, Dave Longley, Markus Sabadello, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0 , 2022 Dave Longley, Dmitri Zagidulin, Manu Sporny, The did:key Method v0.7 , 2022 M. Nottingham, Well-Known Uniform Resource Identifiers (URIs) , 2019 silverpill, FEP-8b32: Object Integrity Proofs , 2022 silverpill, FEP-ae97: Client-side activity signing , 2023 silverpill, FEP-fe34: Origin-based security model , 2024 A. Barth, The Web Origin Concept , 2011 silverpill, FEP-2277: ActivityPub core types , 2025 M. Sporny, L. Rosenthol, Cryptographic Hyperlinks , 2021 silverpill, FEP-521a: Representing actor's public keys , 2023 a, Evan Prodromou, ActivityPub and WebFinger , 2024 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2024 Adam R. Nelson, FEP-fffd: Proxy Objects , 2023 Jonne Ha\u00df, NodeInfo , 2014 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-ef61: Portable Objects"},{"location":"fep/fep-ef61/#fep-ef61-portable-objects","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-ef61: Portable Objects"},{"location":"fep/fep-ef61/#summary","text":"Portable ActivityPub objects with server-independent IDs.","title":"Summary"},{"location":"fep/fep-ef61/#motivation","text":"Usage of HTTP(S) URLs as identifiers has a major drawback: when the server disappears, everyone who uses it loses their identities and data. The proposed solution should satisfy the following constraints: User's identity and data should not be tied to a single server. Users should have a choice between full control over their identity and data, and delegation of control to a trusted party. Implementing the solution in existing software should be as simple as possible. Changes to ActivityPub data model should be kept to a minimum. The solution should be compatible with existing and emerging decentralized identity and storage systems. The solution should be transport-agnostic.","title":"Motivation"},{"location":"fep/fep-ef61/#history","text":"Nomadic identity mechanism makes identity independent from a server and was originally part of the Zot federation protocol. Streams (2021) made nomadic accounts available via the Nomad protocol , which supported ActivityStreams serialisation. FEP-c390 (2022) introduced a decentralized identity solution compatible with ActivityPub. It enabled permissionless migration of followers between servers, but didn't provide full data portability.","title":"History"},{"location":"fep/fep-ef61/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-ef61/#identifiers","text":"An ActivityPub object can be made portable by using an identifier that is not tied to a single server. This proposal describes a new identifier type that has this property and is compatible with the ActivityPub specification.","title":"Identifiers"},{"location":"fep/fep-ef61/#ap-urls","text":"ap:// URL is constructed according to the URI specification, but with a Decentralized Identifier in place of the authority: ap://did:example:123456/path/to/object?name=value#fragment-id \\_/ \\________________/ \\____________/ \\________/ \\_________/ | | | | | scheme authority path query fragment The URI scheme MUST be ap . The authority component MUST be a valid DID . The path is REQUIRED. It MUST be treated as an opaque string. The query is OPTIONAL. To avoid future conflicts, implementers SHOULD NOT use parameter names that are not defined in this proposal. The fragment is OPTIONAL.","title":"ap:// URLs"},{"location":"fep/fep-ef61/#did-methods","text":"Implementers MUST support the did:key method. Other DID methods SHOULD NOT be used, as it might hinder interoperability. [!NOTE] The following additional DID methods are being considered: did:web , did:dns , did:webvh (formerly did:tdw ) and did:fedi . DID documents SHOULD contain Ed25519 public keys represented as verification methods with Multikey type (as defined in the Controller Documents specification). Any DID URL capabilities of a DID method MUST be ignored when working with ap:// URLs.","title":"DID methods"},{"location":"fep/fep-ef61/#dereferencing-ap-urls","text":"To dereference an ap:// URL, the client MUST make HTTP GET request to a gateway endpoint at well-known location /.well-known/apgateway . The ap:// prefix MUST be removed from the URL and the rest of it appened to a gateway URL. The client MUST specify an Accept header with the application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" media type. Example of a request to a gateway: GET https://social.example/.well-known/apgateway/did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/path/to/object ActivityPub objects identified by ap:// URLs can be stored on multiple servers simultaneously. If object identified by ap:// URL is stored on the server, it MUST return a response with status 200 OK containing the requested object. The value of a Content-Type header MUST be application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" . If object identified by ap:// URL is not stored on the server, it MUST return 404 Not Found . If object is not public, the server MUST return 404 Not Found unless the request has a HTTP signature and the signer is allowed to view the object. [!NOTE] This document describes web gateways, which use HTTP transport. However, the data model and authentication mechanism are transport-agnostic and other types of gateways could exist.","title":"Dereferencing ap:// URLs"},{"location":"fep/fep-ef61/#authentication-and-authorization","text":"Authentication and authorization are performed in accordance with FEP-fe34 origin-based security model. The origin of an ap:// URL is computed by the following algorithm: Let uri-scheme be the ap string. Let uri-host be the authority component of the URL. Let uri-port be the number 0. Return the triple (uri-scheme, uri-host, uri-port) . And the origin of a DID URL is computed by the following algorithm: Let uri-scheme be the ap string. Let uri-host be the DID component of the DID URL. Let uri-port be the number 0. Return the triple (uri-scheme, uri-host, uri-port) . Actors, activities and objects identified by ap:// URLs MUST contain FEP-8b32 integrity proofs. Collections identified by ap:// URLs MAY contain integrity proofs. If collection doesn't contain an integrity proof, another authentication method MUST be used. The value of verificationMethod property of the proof MUST be a DID URL where the DID matches the authority component of the ap:// URL. [!NOTE] This document uses terms \"actor\", \"activity\", \"collection\" and \"object\" according to the classification given in FEP-2277 .","title":"Authentication and authorization"},{"location":"fep/fep-ef61/#portable-actors","text":"An actor object identified by ap:// URL MUST have a gateways property containing an ordered list of gateways where the latest version of that actor object can be retrieved. Each item in the list MUST be an HTTP(S) URL with empty path, query and fragment components. The list MUST contain at least one item. One identity (represented by DID ) can control multiple actors (which are differentiated by the path component of an ap:// URL). Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\", \"https://w3id.org/fep/ef61\" ], \"type\": \"Person\", \"id\": \"ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor\", \"inbox\": \"ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor/inbox\", \"outbox\": \"ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor/outbox\", \"gateways\": [ \"https://server1.example\", \"https://server2.example\" ], \"proof\": { \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"created\": \"2023-02-24T23:36:38Z\", \"verificationMethod\": \"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\" } }","title":"Portable actors"},{"location":"fep/fep-ef61/#location-hints","text":"When ActivityPub object containing a reference to another actor is being constructed, implementations SHOULD provide a list of gateways where specified actor object can be retrieved. This list MAY be provided using the gateways query parameter. Each gateway address MUST be URL-endcoded, and if multiple addresses are present they MUST be separated by commas. Example: ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor?gateways=https%3A%2F%2Fserver1.example,https%3A%2F%2Fserver2.example This URL indicates that object can be retrieved from two gateways: https://server1.example https://server2.example Implementations MUST discard query parameters when comparing ap:// identifiers and treat identifiers with different query parameter values as equal.","title":"Location hints"},{"location":"fep/fep-ef61/#inboxes-and-outboxes","text":"Servers and clients MUST use gateways to deliver activities to inboxes or outboxes. Servers specified in the gateways property of an actor object MUST accept POST requests to respective gateway URLs. Example: POST https://social.example/.well-known/apgateway/did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor/inbox Delivered activities might be not portable. If delivered activity is portable (has ap:// identifier), the server MUST verify its FEP-8b32 integrity proof. If the server does not accept deliveries on behalf of an actor, it MUST return 405 Method Not Allowed . ActivityPub clients MAY follow FEP-ae97 to publish activities. In this case, the client MAY deliver signed activity to multiple outboxes, located on different servers. Upon receiving an activity in actor's outbox, server SHOULD forward it to outboxes located on other servers where actor's data is stored. An activity MUST NOT be forwarded from outbox more than once. Upon receiving an activity in actor's inbox, server SHOULD forward it to inboxes located on other servers where actor's data is stored.","title":"Inboxes and outboxes"},{"location":"fep/fep-ef61/#collections","text":"Collections associated with portable actors (such as inbox and outbox collections) MAY not have FEP-8b32 integrity proofs. Consuming implementations MUST NOT process unsecured collections retrieved from servers that are not listed in the gateways array of the actor document.","title":"Collections"},{"location":"fep/fep-ef61/#portable-objects","text":"Example: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", \"https://w3id.org/security/data-integrity/v1\", \"https://w3id.org/fep/ef61\" ], \"type\": \"Note\", \"id\": \"ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/objects/dc505858-08ec-4a80-81dd-e6670fd8c55f\", \"attributedTo\": \"ap://did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor?gateways=https%3A%2F%2Fserver1.example,https%3A%2F%2Fserver2.example\", \"inReplyTo\": \"ap://did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK/objects/f66a006b-fe66-4ca6-9a4c-b292e33712ec\", \"content\": \"Hello!\", \"attachment\": [ { \"type\": \"Image\", \"url\": \"hl:zQmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n\", \"mediaType\": \"image/png\", \"digestMultibase\": \"zQmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n\" } ], \"to\": [ \"ap://did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK/actor\" ], \"proof\": { \"type\": \"DataIntegrityProof\", \"cryptosuite\": \"eddsa-jcs-2022\", \"created\": \"2023-02-24T23:36:38Z\", \"verificationMethod\": \"did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2#z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"...\" } }","title":"Portable objects"},{"location":"fep/fep-ef61/#media","text":"Integrity of an external resource is attested with a digest. When a portable object contains a reference to an external resource (such as image), it MUST also contain a digestMultibase property representing the integrity digest of that resource. The digest MUST be computed using the SHA-256 algorithm. The URI of an external resource SHOULD be a hashlink . Example of an Image attachment: { \"type\": \"Image\", \"url\": \"hl:zQmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n\", \"mediaType\": \"image/png\", \"digestMultibase\": \"zQmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n\" } After retrieving a resource, the client MUST verify its integrity by computing its digest and comparing the result with the value encoded in digestMultibase property. Resources attached to portable objects using hashlinks can be stored by gateways. To retrieve a resource from a gateway, the client MUST make an HTTP GET request to the gateway endpoint at well-known location /.well-known/apgateway . The value of a hashlink URI MUST be appended to the gateway base URL. Example of a request: GET https://social.example/.well-known/apgateway/hl:zQmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n","title":"Media"},{"location":"fep/fep-ef61/#compatibility","text":"","title":"Compatibility"},{"location":"fep/fep-ef61/#identifiers_1","text":"ap:// URLs might not be compatible with existing ActivityPub implementations. To provide backward compatibility, gateway-based HTTP(S) URLs of objects can be used instead of their actual ap:// identifiers: https://social.example/.well-known/apgateway/did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/path/to/object Publishers MUST use the first gateway from actor's gateways list when constructing compatible identifiers. Consuming implementations that support ap:// URLs MUST remove the part of the URL preceding did: and re-construct the canonical ap:// identifier. Objects with the same canonical identifier, but located on different gateways MUST be treated as different instances of the same object. Publishers MUST NOT add the gateways query parameter to object IDs if compatible identifiers are used. When HTTP signatures are necessary for communicating with other servers, each gateway that makes requests on behalf of an actor SHOULD use a separate secret key. The corresponding public keys MUST be added to actor document using the assertionMethod property as described in FEP-521a .","title":"Identifiers"},{"location":"fep/fep-ef61/#webfinger-addresses","text":"WebFinger address of a portable actor can be obtained by the reverse discovery algorithm described in section 2.2 of ActivityPub and WebFinger report, but instead of taking the hostname from the identifier, it MUST be taken from the first gateway in actor's gateways array.","title":"WebFinger addresses"},{"location":"fep/fep-ef61/#discussion","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002)","title":"Discussion"},{"location":"fep/fep-ef61/#ap-url-syntax","text":"'ap' URLs are not valid URIs per RFC-3986 . To make them valid, the authority component can be percent-encoded: ap://did%3Akey%3Az6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/actor","title":"'ap' URL syntax"},{"location":"fep/fep-ef61/#discovering-locations","text":"","title":"Discovering locations"},{"location":"fep/fep-ef61/#arbitrary-paths","text":"The gateways array can contain HTTP(S) URLs with a path component, thus enabling discovery based on the \"follow your nose\" principle, as opposed to discovery based on a well-known location. Example of a compatible object ID if the gateway endpoint is https://social.example/ap : https://social.example/ap/did:key:z6MkrJVnaZkeFzdQyMZu1cgjg7k1pZZ6pvBQ7XJPt4swbTQ2/path/to/object","title":"Arbitrary paths"},{"location":"fep/fep-ef61/#alternatives-to-gateways-property","text":"This proposal makes use of the gateways property, but the following alternatives are being considered: aliases and sameAs (containing HTTP(S) URLs of objects) alsoKnownAs (used for account migrations, so the usage of this property may cause issues) url (with alternate relation type )","title":"Alternatives to gateways property"},{"location":"fep/fep-ef61/#did-services","text":"Instead of specifying gateways in actor document, they can be specified in DID document using DID services . This approach is not compatible with generative DID methods such as did:key , which might be necessary for some types of applications.","title":"DID services"},{"location":"fep/fep-ef61/#media-access-control","text":"The proposed approach to referencing media with hashlinks does not support access control: anybody who knows the hash can retrieve the file. To work around this limitation, a different kind of identifier can be used where digest is combined with the ap:// identifier of its parent document. The gateway will not serve media unless parent document ID is provided, and will check whether request signer has permission to view the document and therefore the attached media.","title":"Media access control"},{"location":"fep/fep-ef61/#compatibility_1","text":"The following alternatives to gateway-based compatible IDs are being considered: Use regular HTTP(S) URLs but specify the canonical ap:// URL using the url property (with canonical relation type, as proposed in FEP-fffd ). For pointers to other objects such as inReplyTo property, an embedded object with url property can be used instead of a plain URL. Alter object ID depending on the capabilities of the peer (which can be reported by NodeInfo or some other mechanism).","title":"Compatibility"},{"location":"fep/fep-ef61/#_1","text":"Streams Mitra (gateway only)","title":"\u5b9f\u88c5"},{"location":"fep/fep-ef61/#_2","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 T. Berners-Lee, R. Fielding, L. Masinter, Uniform Resource Identifier (URI): Generic Syntax , 2005 Manu Sporny, Dave Longley, Markus Sabadello, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0 , 2022 Dave Longley, Dmitri Zagidulin, Manu Sporny, The did:key Method v0.7 , 2022 M. Nottingham, Well-Known Uniform Resource Identifiers (URIs) , 2019 silverpill, FEP-8b32: Object Integrity Proofs , 2022 silverpill, FEP-ae97: Client-side activity signing , 2023 silverpill, FEP-fe34: Origin-based security model , 2024 A. Barth, The Web Origin Concept , 2011 silverpill, FEP-2277: ActivityPub core types , 2025 M. Sporny, L. Rosenthol, Cryptographic Hyperlinks , 2021 silverpill, FEP-521a: Representing actor's public keys , 2023 a, Evan Prodromou, ActivityPub and WebFinger , 2024 Dave Longley, Manu Sporny, Verifiable Credential Data Integrity 1.0 , 2024 Adam R. Nelson, FEP-fffd: Proxy Objects , 2023 Jonne Ha\u00df, NodeInfo , 2014","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-ef61/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-efda/","text":"FEP-efda: Followable objects Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary ActivityStreams Vocabulary defines a Follow activity, and ActivityPub defines its side effects of manipulating a followers collection, but ActivityPub does not specify a full algorithm for how to follow something. This FEP aims to provide guidance on which objects can be followed: The object MUST have a followers collection present. If the object does not have an inbox , then you MAY recurse upwards through attributedTo until you find a resource with an inbox . The maximum recursion depth SHOULD be 1. A Follow activity can then be constructed for that object and delivered to the discovered inbox . Additional requirements for the structure of the Follow activity are out-of-scope. Requirements In order to follow an object, we use a Follow activity. But in order to use this Follow activity, we need to know the following: 1) What can be followed? 2) Where do we send the Follow for that object ? At the time of writing, current software practices within the fediverse enforce a limit on what can be followed. For example, Mastodon currently limits follows to actors that can be mapped to their internal concept of \"accounts\", and these \"accounts\" are in turn limited to being any of the five \"actor types\" described in AS2-Vocab : Person , Group , Organization , Application , Service . Consequently, other software which does not have such a conceptual limit is forced to declare their actors as one of the five types, or else Mastodon users will not be able to follow their actors. ActivityPub says that there is no specified mapping between \"users\" and \"actors\", but Mastodon's interpretation of \"actors\" as \"users\" de facto disallows following anything but a strict subset of resources. We may therefore express Mastodon's requirements as follows: The actor MUST have a type of any of Person , Group , Organization , Application , Service . The actor MUST have an inbox where the Follow will be sent. A proposed modified requirement and algorithm are as follows: The object MUST have a followers collection present. If the object does not have an inbox , then you MAY recurse upwards through attributedTo until you find a resource with an inbox . The maximum recursion depth SHOULD be 1. Algorithm Given an object O and a recursion limit L, a general algorithm for following it can be expressed like so: (1) Initialize a variable INBOX. (2) If O.followers is not present, return an error OBJECT_CANNOT_BE_FOLLOWED. (3) If O.inbox is present, set INBOX to the referenced IRI. (4) If INBOX is unset, then initialize a variable R whose initial value is O. (5) While INBOX is unset: (5.1) Check that L > 0. If false, return an error MAX_RECURSION_LIMIT. (5.2) Dereference R.attributedTo and set the variable R to this referenced resource. (5.3) If R.inbox is present, set INBOX to the referenced IRI. (5.4) Set the variable L to the value L - 1. (6) Initialize a document ACTIVITY: (6.1) ...whose actor is yourself (6.2) ...whose type is Follow (6.3) ...whose object is O (7) Make an HTTP POST request whose target is INBOX and whose body is ACTIVITY. Additional requirements for the ACTIVITY can be defined at a protocol level, but the exact protocol and those requirements are out-of-scope for this FEP. The scope of this FEP is limited to determining which objects can be followed, and where to send the Follow. \u53c2\u8003\u6587\u732e James M Snell, Evan Prodromou, Activity Vocabulary , 2017 Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 trwnh, Unresolved issues surrounding Follow activities , 2019 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-efda: Followable objects"},{"location":"fep/fep-efda/#fep-efda-followable-objects","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-efda: Followable objects"},{"location":"fep/fep-efda/#summary","text":"ActivityStreams Vocabulary defines a Follow activity, and ActivityPub defines its side effects of manipulating a followers collection, but ActivityPub does not specify a full algorithm for how to follow something. This FEP aims to provide guidance on which objects can be followed: The object MUST have a followers collection present. If the object does not have an inbox , then you MAY recurse upwards through attributedTo until you find a resource with an inbox . The maximum recursion depth SHOULD be 1. A Follow activity can then be constructed for that object and delivered to the discovered inbox . Additional requirements for the structure of the Follow activity are out-of-scope.","title":"Summary"},{"location":"fep/fep-efda/#requirements","text":"In order to follow an object, we use a Follow activity. But in order to use this Follow activity, we need to know the following: 1) What can be followed? 2) Where do we send the Follow for that object ? At the time of writing, current software practices within the fediverse enforce a limit on what can be followed. For example, Mastodon currently limits follows to actors that can be mapped to their internal concept of \"accounts\", and these \"accounts\" are in turn limited to being any of the five \"actor types\" described in AS2-Vocab : Person , Group , Organization , Application , Service . Consequently, other software which does not have such a conceptual limit is forced to declare their actors as one of the five types, or else Mastodon users will not be able to follow their actors. ActivityPub says that there is no specified mapping between \"users\" and \"actors\", but Mastodon's interpretation of \"actors\" as \"users\" de facto disallows following anything but a strict subset of resources. We may therefore express Mastodon's requirements as follows: The actor MUST have a type of any of Person , Group , Organization , Application , Service . The actor MUST have an inbox where the Follow will be sent. A proposed modified requirement and algorithm are as follows: The object MUST have a followers collection present. If the object does not have an inbox , then you MAY recurse upwards through attributedTo until you find a resource with an inbox . The maximum recursion depth SHOULD be 1.","title":"Requirements"},{"location":"fep/fep-efda/#algorithm","text":"Given an object O and a recursion limit L, a general algorithm for following it can be expressed like so: (1) Initialize a variable INBOX. (2) If O.followers is not present, return an error OBJECT_CANNOT_BE_FOLLOWED. (3) If O.inbox is present, set INBOX to the referenced IRI. (4) If INBOX is unset, then initialize a variable R whose initial value is O. (5) While INBOX is unset: (5.1) Check that L > 0. If false, return an error MAX_RECURSION_LIMIT. (5.2) Dereference R.attributedTo and set the variable R to this referenced resource. (5.3) If R.inbox is present, set INBOX to the referenced IRI. (5.4) Set the variable L to the value L - 1. (6) Initialize a document ACTIVITY: (6.1) ...whose actor is yourself (6.2) ...whose type is Follow (6.3) ...whose object is O (7) Make an HTTP POST request whose target is INBOX and whose body is ACTIVITY. Additional requirements for the ACTIVITY can be defined at a protocol level, but the exact protocol and those requirements are out-of-scope for this FEP. The scope of this FEP is limited to determining which objects can be followed, and where to send the Follow.","title":"Algorithm"},{"location":"fep/fep-efda/#_1","text":"James M Snell, Evan Prodromou, Activity Vocabulary , 2017 Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 trwnh, Unresolved issues surrounding Follow activities , 2019","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-efda/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-f06f/","text":"FEP-f06f: Object observers Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Object observer is an ActivityPub actor that can be followed to receive object updates. This proposal is intended to complement FEP-bad1: Object history collection . Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Observers Object observer can be specified using the observer property. It MUST be a followable actor and SHOULD have an Application type. Observer doesn't perform any activities on its own, but forwards to its followers all activities that affect the observed object. It SHOULD have a WebFinger address (consumers should be able to follow it even if they don't understand observer property). Use case: subscribing to a conversation When conversation is represented by a collection , a collection observer can be created to support conversation subscriptions. This actor can be attached to a collection via observer property, and can forward Add and Remove activities that modify it. Non-forwarding observers If forwarding is not desirable, object observers can use Announce activity to distribute observed activities. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 a, FEP-bad1: Object history collection , 2023 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-f06f: Object observers"},{"location":"fep/fep-f06f/#fep-f06f-object-observers","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-f06f: Object observers"},{"location":"fep/fep-f06f/#summary","text":"Object observer is an ActivityPub actor that can be followed to receive object updates. This proposal is intended to complement FEP-bad1: Object history collection .","title":"Summary"},{"location":"fep/fep-f06f/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-f06f/#observers","text":"Object observer can be specified using the observer property. It MUST be a followable actor and SHOULD have an Application type. Observer doesn't perform any activities on its own, but forwards to its followers all activities that affect the observed object. It SHOULD have a WebFinger address (consumers should be able to follow it even if they don't understand observer property).","title":"Observers"},{"location":"fep/fep-f06f/#use-case-subscribing-to-a-conversation","text":"When conversation is represented by a collection , a collection observer can be created to support conversation subscriptions. This actor can be attached to a collection via observer property, and can forward Add and Remove activities that modify it.","title":"Use case: subscribing to a conversation"},{"location":"fep/fep-f06f/#non-forwarding-observers","text":"If forwarding is not desirable, object observers can use Announce activity to distribute observed activities.","title":"Non-forwarding observers"},{"location":"fep/fep-f06f/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 a, FEP-bad1: Object history collection , 2023 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-f06f/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-f1d5/","text":"FEP-f1d5: Fediverse\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306eNodeinfo \u6982\u8981 NodeInfo \u306f\u3001\u30b5\u30fc\u30d0\u30fc\u30ec\u30d9\u30eb\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4e00\u822c\u306b\u516c\u958b\u3059\u308b\u65b9\u6cd5\u3092\u6a19\u6e96\u5316\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u305f\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c4\u30fc\u30eb\u3084\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u3053\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u30b5\u30fc\u30d0\u30fc\u306e\u5065\u5168\u6027\u3092\u8a55\u4fa1\u3057\u305f\u308a\u3001Fediverse \u3067\u4f7f\u7528\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u3084\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u95a2\u3059\u308b\u30a8\u30f3\u30c9\u30e6\u30fc\u30b6\u30fc\u306e\u9078\u629e\u3092\u5bb9\u6613\u306b\u3057\u305f\u308a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6b74\u53f2 NodeInfo\u306f\u3001diaspora\u3001friendica\u3001redmatrix\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u306e\u4f7f\u7528\u3092\u76ee\u7684\u3068\u3057\u305f ActivityPub \u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u524d\u306b\u958b\u767a\u3055\u308c\u307e\u3057\u305f\u3002NodeInfo\u304c\u30ab\u30d7\u30bb\u30eb\u5316\u3057\u3066\u3044\u308b\u5143\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u306f\u3001diaspora\u3001pumpio\u3001gnusocial\u304c\u542b\u307e\u308c\u307e\u3059\u3002 NodeInfo\u306e\u4ed5\u69d8\u306f\u3001\u305d\u306e\u30b9\u30ad\u30fc\u30de\u306b\u304a\u3044\u3066\u975e\u5e38\u306b\u53b3\u683c\u3067\u3042\u308a\u3001\u3057\u3070\u3057\u3070\u6b63\u898f\u8868\u73fe\u306b\u3088\u308b\u691c\u8a3c\u3084\u3001\u5217\u6319\u3055\u308c\u305f\u53ef\u80fd\u306a\u5024\u306e\u9589\u3058\u305f\u30bb\u30c3\u30c8\u3092\u8981\u6c42\u3057\u307e\u3059\u3002\u3053\u306e\u70b9\u306b\u5bfe\u3059\u308b\u53cd\u767a\u3068\u3057\u3066\u3001NodeInfo2\u30d5\u30a9\u30fc\u30af\u304c\u4f5c\u6210\u3055\u308c\u3001\u4e00\u90e8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u691c\u8a3c\u3092\u524a\u9664\u3057\u3001\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u8ad6\u7406\u7684\u518d\u69cb\u6210\u304c\u884c\u308f\u308c\u307e\u3057\u305f\u3002NodeInfo\u3068NodeInfo2\u3092\u57fa\u306b\u3057\u3066\u3001 ServiceInfo \u304c\u4e00\u6642\u7684\u306b\u691c\u8a0e\u3055\u308c\u307e\u3057\u305f\u3002 \u3053\u306eFEP\u306f\u3001\u7279\u5b9a\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u8a73\u7d30\u3092\u6587\u66f8\u5316\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u306e\u60c5\u5831\u306f\u3001 NodeInfo \u304a\u3088\u3073 NodeInfo2 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306eFEP\u306f\u3001\u6b74\u53f2\u3092\u660e\u3089\u304b\u306b\u3057\u3001\u73fe\u5728\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306e\u6b20\u70b9\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001Fediverse\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u958b\u767a\u8005\u306b\u6587\u8108\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3092\u8a66\u307f\u3066\u3044\u307e\u3059\u3002 Requirements \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5185\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u300cMUST\u300d\u3001\u300cMUST NOT\u300d\u3001\u300cREQUIRED\u300d\u3001\u300cSHALL\u300d\u3001\u300cSHALL NOT\u300d\u3001\u300cSHOULD\u300d\u3001\u300cSHOULD NOT\u300d\u3001\u300cRECOMMENDED\u300d\u3001\u300cMAY\u300d\u3001\u304a\u3088\u3073\u300cOPTIONAL\u300d\u306f\u3001 RFC-2119 \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3068\u304a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 Fediverse\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306f NodeInfo \u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u6ce8\u610f\u4e8b\u9805 \u672cFEP\u306e\u57f7\u7b46\u6642\u70b9\u306b\u304a\u3044\u3066\u3001\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306b\u3088\u3063\u3066\u7279\u5b9a\u3055\u308c\u305fNodeInfo\u306e\u73fe\u72b6\u306b\u5bfe\u3059\u308b\u4e3b\u306a\u7570\u8b70\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002\u306a\u304a\u3001\u793a\u3055\u308c\u308b\u6280\u8853\u7684\u4ee3\u66ff\u6848\u306f\u4f8b\u793a\u7684\u3067\u3042\u308a\u3001\u898f\u7bc4\u7684\u306a\u3082\u306e\u3067\u306f\u306a\u3044\u3053\u3068\u306b\u7559\u610f\u3055\u308c\u305f\u3044\u3002 software.name \u306e\u6b63\u898f\u8868\u73fe\u306f\u4e0d\u5fc5\u8981\u306b\u53b3\u683c\u3067\u3042\u308b\u3002\u4f8b\u3048\u3070\u3001\u5927\u6587\u5b57\u3001\u30b9\u30da\u30fc\u30b9\u3001\u975e\u82f1\u8a9e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u30cf\u30a4\u30d5\u30f3\u4ee5\u5916\u306e\u7279\u6b8a\u6587\u5b57\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044\u3002 software.version \u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u5fc5\u9808\u3067\u3042\u308a\u3001\u3053\u308c\u3082\u4e0d\u5fc5\u8981\u306b\u53b3\u683c\u3067\u3042\u308b\u3002\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\u3092\u5f37\u5236\u7684\u306b\u958b\u793a\u3055\u305b\u308b\u3053\u3068\u306f\u3001\u6f5c\u5728\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u554f\u984c\u3068\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002 inbound \u304a\u3088\u3073 outbound \u8981\u7d20\u306f\u3001\u5358\u7d14\u306a\u6587\u5b57\u5217\u3067\u306f\u306a\u304f\u3001\u5217\u6319\u578b\u306e\u9589\u3058\u305f\u30bb\u30c3\u30c8\u3068\u3057\u3066\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u3002\u30d7\u30ed\u30c8\u30b3\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306f\u540d\u524d\u5909\u66f4\u3068\u3057\u3066\u73fe\u308c\u3001\u65b0\u3057\u3044\u5217\u6319\u578b\u3092\u8ffd\u52a0\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u305d\u306e\u7d50\u679c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u304c\u4e0d\u660e\u77ad\u306b\u306a\u308b\u3002 Fediverse\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306f\u3001\u5fc5\u9808\u3067\u3042\u308b\u305f\u3081\u3001 openRegistrations \u306e\u6982\u5ff5\u3092\u6301\u305f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 HTTP\u7f72\u540d\u3001WebFinger\u3001OAuth\u306a\u3069\u306e\u4ed6\u306e\u6a5f\u80fd\u3092\u7279\u5b9a\u3057\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u62e1\u5f35\u53ef\u80fd\u306a\u624b\u6cd5\u304c\u6b20\u5982\u3057\u3066\u3044\u308b\u3002\u4ed5\u69d8\u306f\u975e\u5e38\u306b\u53b3\u683c\u3067\u3042\u308b\u4e00\u65b9\u3067\u3001 metadata \u306f\u3042\u307e\u308a\u306b\u3082\u7de9\u3059\u304e\u308b\u3002 usage.users \u306f\u975e\u6b63\u898f\u5316\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u5b9f\u88c5\u304c\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u5408\u3063\u305f (\u6d3b\u52d5\u30ab\u30a6\u30f3\u30c8, \u65e5\u6570) \u306e\u30ab\u30b9\u30bf\u30e0\u30da\u30a2\u3092\u63d0\u4f9b\u3067\u304d\u306a\u3044\u3002 usage.users \u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u7279\u5b9a\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u7d50\u3073\u3064\u3044\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u3002\u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u8907\u6570\u306e\u30b5\u30fc\u30d0\u30fc\u3001\u8907\u6570\u306e\u30b0\u30eb\u30fc\u30d7\u3001\u307e\u305f\u306f\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5206\u6563\u3057\u3066\u3044\u308b\u5834\u5408\u3001 total \u30e6\u30fc\u30b6\u30fc\u3092\u3069\u306e\u3088\u3046\u306b\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u304b\u306f\u4e0d\u660e\u3067\u3042\u308b\u3002\u8907\u6570\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001\u305d\u308c\u305e\u308c\u304c\u30e6\u30fc\u30b6\u30fc\u3092\u300c\u4f7f\u7528\u3057\u3066\u3044\u308b\u300d\u3068\u4e3b\u5f35\u3067\u304d\u308b\u305f\u3081\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u30e6\u30fc\u30b6\u30fc\u304c\u91cd\u8907\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u308b\u7d50\u679c\u3068\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002 usage.users \u306e\u6d3b\u52d5\u30ab\u30a6\u30f3\u30c8\u3082\u540c\u69d8\u306b\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u7279\u5b9a\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u7d50\u3073\u3064\u3044\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u3002\u4e0a\u8a18\u306e\u7406\u7531\u306b\u3088\u308a\u3001 total \u30e6\u30fc\u30b6\u30fc\u306e\u30ab\u30a6\u30f3\u30c8\u306f\u3001\u3059\u3079\u3066\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u540c\u3058\u30e6\u30fc\u30b6\u30fc\u304c\u91cd\u8907\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u308b\u7d50\u679c\u3092\u3082\u305f\u3089\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\u307e\u305f\u3001\u6d3b\u52d5\u30ab\u30a6\u30f3\u30c8\u306e activeHalfYear \u304a\u3088\u3073 activeMonth \u3082\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u6c34\u5897\u3057\u3055\u308c\u305f\u30ab\u30a6\u30f3\u30c8\u3092\u5f15\u304d\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002 activeHalfYear \u304a\u3088\u3073 activeMonth \u306f\u3001\u305d\u308c\u305e\u308c180\u65e5\u304a\u3088\u307330\u65e5\u306e\u671f\u9593\u3092\u8868\u73fe\u3059\u308b\u306b\u306f\u4e0d\u9069\u5207\u306a\u540d\u79f0\u3067\u3042\u308b\u3002\u300c\u534a\u5e74\u300d\u306f180\u65e5\u3067\u3042\u308b\u3053\u3068\u306f0%\u306e\u6642\u9593\u3067\u3042\u308a\u3001\u7d04182.5\u65e5\u3067\u3042\u308b\u3053\u3068\u306f75%\u306e\u6642\u9593\u3067\u3042\u308b\u30021\u304b\u6708\u306f30\u65e5\u3067\u3042\u308b\u3053\u3068\u306f33%\u306e\u6642\u9593\u3067\u3042\u308b\u3002 localPosts \u304a\u3088\u3073 localComments \u306f\u3001\u4f8b\u3048\u3070\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3084\u52d5\u753b\u3092\u30db\u30b9\u30c8\u3059\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3001\u30b3\u30e1\u30f3\u30c8\u3084\u6295\u7a3f\u304c\u306a\u3044\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u5bfe\u3057\u3066 (\u7a2e\u985e, \u30ab\u30a6\u30f3\u30c8) \u306e\u30da\u30a2\u306b\u975e\u6b63\u898f\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u3002 localPosts \u304a\u3088\u3073 localComments \u306f\u5fc5\u9808\u3067\u3042\u308a\u3001\u30b3\u30e1\u30f3\u30c8\u3084\u6295\u7a3f\u304c\u306a\u3044\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u3068\u3063\u3066\u306f\u554f\u984c\u3067\u3042\u308b\u3002 \u5b9f\u88c5 \u30b5\u30fc\u30d0\u30fc \u3053\u306e\u30ea\u30b9\u30c8\u306f\u5305\u62ec\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff1a Mastodon Matrix Pleroma PeerTube WriteFreely Friendica Diaspora PixelFed Misskey Funkwhale Smithereen Plume GNU Social lemmy zap Socialhome epicyon apcore FIRM \u30af\u30e9\u30a4\u30a2\u30f3\u30c8 The-Federation.Info Hello Matrix Public Servers \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Jonne Ha\u00df, jhass/nodeinfo , 2014 Jason Robinson, jaywink/nodeinfo2 , 2016 Jason Robinson, ServiceInfo - specification for service metadata , 2019 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-f1d5: Fediverse\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306eNodeinfo"},{"location":"fep/fep-f1d5/#fep-f1d5-fediversenodeinfo","text":"","title":"FEP-f1d5: Fediverse\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306eNodeinfo"},{"location":"fep/fep-f1d5/#_1","text":"NodeInfo \u306f\u3001\u30b5\u30fc\u30d0\u30fc\u30ec\u30d9\u30eb\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4e00\u822c\u306b\u516c\u958b\u3059\u308b\u65b9\u6cd5\u3092\u6a19\u6e96\u5316\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u305f\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c4\u30fc\u30eb\u3084\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u3053\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u30b5\u30fc\u30d0\u30fc\u306e\u5065\u5168\u6027\u3092\u8a55\u4fa1\u3057\u305f\u308a\u3001Fediverse \u3067\u4f7f\u7528\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u3084\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u95a2\u3059\u308b\u30a8\u30f3\u30c9\u30e6\u30fc\u30b6\u30fc\u306e\u9078\u629e\u3092\u5bb9\u6613\u306b\u3057\u305f\u308a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u6982\u8981"},{"location":"fep/fep-f1d5/#_2","text":"NodeInfo\u306f\u3001diaspora\u3001friendica\u3001redmatrix\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u306e\u4f7f\u7528\u3092\u76ee\u7684\u3068\u3057\u305f ActivityPub \u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u524d\u306b\u958b\u767a\u3055\u308c\u307e\u3057\u305f\u3002NodeInfo\u304c\u30ab\u30d7\u30bb\u30eb\u5316\u3057\u3066\u3044\u308b\u5143\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u306f\u3001diaspora\u3001pumpio\u3001gnusocial\u304c\u542b\u307e\u308c\u307e\u3059\u3002 NodeInfo\u306e\u4ed5\u69d8\u306f\u3001\u305d\u306e\u30b9\u30ad\u30fc\u30de\u306b\u304a\u3044\u3066\u975e\u5e38\u306b\u53b3\u683c\u3067\u3042\u308a\u3001\u3057\u3070\u3057\u3070\u6b63\u898f\u8868\u73fe\u306b\u3088\u308b\u691c\u8a3c\u3084\u3001\u5217\u6319\u3055\u308c\u305f\u53ef\u80fd\u306a\u5024\u306e\u9589\u3058\u305f\u30bb\u30c3\u30c8\u3092\u8981\u6c42\u3057\u307e\u3059\u3002\u3053\u306e\u70b9\u306b\u5bfe\u3059\u308b\u53cd\u767a\u3068\u3057\u3066\u3001NodeInfo2\u30d5\u30a9\u30fc\u30af\u304c\u4f5c\u6210\u3055\u308c\u3001\u4e00\u90e8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u691c\u8a3c\u3092\u524a\u9664\u3057\u3001\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u8ad6\u7406\u7684\u518d\u69cb\u6210\u304c\u884c\u308f\u308c\u307e\u3057\u305f\u3002NodeInfo\u3068NodeInfo2\u3092\u57fa\u306b\u3057\u3066\u3001 ServiceInfo \u304c\u4e00\u6642\u7684\u306b\u691c\u8a0e\u3055\u308c\u307e\u3057\u305f\u3002 \u3053\u306eFEP\u306f\u3001\u7279\u5b9a\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u8a73\u7d30\u3092\u6587\u66f8\u5316\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u306e\u60c5\u5831\u306f\u3001 NodeInfo \u304a\u3088\u3073 NodeInfo2 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306eFEP\u306f\u3001\u6b74\u53f2\u3092\u660e\u3089\u304b\u306b\u3057\u3001\u73fe\u5728\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306e\u6b20\u70b9\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001Fediverse\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u958b\u767a\u8005\u306b\u6587\u8108\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3092\u8a66\u307f\u3066\u3044\u307e\u3059\u3002","title":"\u6b74\u53f2"},{"location":"fep/fep-f1d5/#requirements","text":"\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5185\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u300cMUST\u300d\u3001\u300cMUST NOT\u300d\u3001\u300cREQUIRED\u300d\u3001\u300cSHALL\u300d\u3001\u300cSHALL NOT\u300d\u3001\u300cSHOULD\u300d\u3001\u300cSHOULD NOT\u300d\u3001\u300cRECOMMENDED\u300d\u3001\u300cMAY\u300d\u3001\u304a\u3088\u3073\u300cOPTIONAL\u300d\u306f\u3001 RFC-2119 \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3068\u304a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 Fediverse\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306f NodeInfo \u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"Requirements"},{"location":"fep/fep-f1d5/#_3","text":"\u672cFEP\u306e\u57f7\u7b46\u6642\u70b9\u306b\u304a\u3044\u3066\u3001\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306b\u3088\u3063\u3066\u7279\u5b9a\u3055\u308c\u305fNodeInfo\u306e\u73fe\u72b6\u306b\u5bfe\u3059\u308b\u4e3b\u306a\u7570\u8b70\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002\u306a\u304a\u3001\u793a\u3055\u308c\u308b\u6280\u8853\u7684\u4ee3\u66ff\u6848\u306f\u4f8b\u793a\u7684\u3067\u3042\u308a\u3001\u898f\u7bc4\u7684\u306a\u3082\u306e\u3067\u306f\u306a\u3044\u3053\u3068\u306b\u7559\u610f\u3055\u308c\u305f\u3044\u3002 software.name \u306e\u6b63\u898f\u8868\u73fe\u306f\u4e0d\u5fc5\u8981\u306b\u53b3\u683c\u3067\u3042\u308b\u3002\u4f8b\u3048\u3070\u3001\u5927\u6587\u5b57\u3001\u30b9\u30da\u30fc\u30b9\u3001\u975e\u82f1\u8a9e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u30cf\u30a4\u30d5\u30f3\u4ee5\u5916\u306e\u7279\u6b8a\u6587\u5b57\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044\u3002 software.version \u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u5fc5\u9808\u3067\u3042\u308a\u3001\u3053\u308c\u3082\u4e0d\u5fc5\u8981\u306b\u53b3\u683c\u3067\u3042\u308b\u3002\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\u3092\u5f37\u5236\u7684\u306b\u958b\u793a\u3055\u305b\u308b\u3053\u3068\u306f\u3001\u6f5c\u5728\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u554f\u984c\u3068\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002 inbound \u304a\u3088\u3073 outbound \u8981\u7d20\u306f\u3001\u5358\u7d14\u306a\u6587\u5b57\u5217\u3067\u306f\u306a\u304f\u3001\u5217\u6319\u578b\u306e\u9589\u3058\u305f\u30bb\u30c3\u30c8\u3068\u3057\u3066\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u3002\u30d7\u30ed\u30c8\u30b3\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306f\u540d\u524d\u5909\u66f4\u3068\u3057\u3066\u73fe\u308c\u3001\u65b0\u3057\u3044\u5217\u6319\u578b\u3092\u8ffd\u52a0\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u305d\u306e\u7d50\u679c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u304c\u4e0d\u660e\u77ad\u306b\u306a\u308b\u3002 Fediverse\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306f\u3001\u5fc5\u9808\u3067\u3042\u308b\u305f\u3081\u3001 openRegistrations \u306e\u6982\u5ff5\u3092\u6301\u305f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 HTTP\u7f72\u540d\u3001WebFinger\u3001OAuth\u306a\u3069\u306e\u4ed6\u306e\u6a5f\u80fd\u3092\u7279\u5b9a\u3057\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u62e1\u5f35\u53ef\u80fd\u306a\u624b\u6cd5\u304c\u6b20\u5982\u3057\u3066\u3044\u308b\u3002\u4ed5\u69d8\u306f\u975e\u5e38\u306b\u53b3\u683c\u3067\u3042\u308b\u4e00\u65b9\u3067\u3001 metadata \u306f\u3042\u307e\u308a\u306b\u3082\u7de9\u3059\u304e\u308b\u3002 usage.users \u306f\u975e\u6b63\u898f\u5316\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u5b9f\u88c5\u304c\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u5408\u3063\u305f (\u6d3b\u52d5\u30ab\u30a6\u30f3\u30c8, \u65e5\u6570) \u306e\u30ab\u30b9\u30bf\u30e0\u30da\u30a2\u3092\u63d0\u4f9b\u3067\u304d\u306a\u3044\u3002 usage.users \u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u7279\u5b9a\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u7d50\u3073\u3064\u3044\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u3002\u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u8907\u6570\u306e\u30b5\u30fc\u30d0\u30fc\u3001\u8907\u6570\u306e\u30b0\u30eb\u30fc\u30d7\u3001\u307e\u305f\u306f\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5206\u6563\u3057\u3066\u3044\u308b\u5834\u5408\u3001 total \u30e6\u30fc\u30b6\u30fc\u3092\u3069\u306e\u3088\u3046\u306b\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u304b\u306f\u4e0d\u660e\u3067\u3042\u308b\u3002\u8907\u6570\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001\u305d\u308c\u305e\u308c\u304c\u30e6\u30fc\u30b6\u30fc\u3092\u300c\u4f7f\u7528\u3057\u3066\u3044\u308b\u300d\u3068\u4e3b\u5f35\u3067\u304d\u308b\u305f\u3081\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u30e6\u30fc\u30b6\u30fc\u304c\u91cd\u8907\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u308b\u7d50\u679c\u3068\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002 usage.users \u306e\u6d3b\u52d5\u30ab\u30a6\u30f3\u30c8\u3082\u540c\u69d8\u306b\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u7279\u5b9a\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u7d50\u3073\u3064\u3044\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u3002\u4e0a\u8a18\u306e\u7406\u7531\u306b\u3088\u308a\u3001 total \u30e6\u30fc\u30b6\u30fc\u306e\u30ab\u30a6\u30f3\u30c8\u306f\u3001\u3059\u3079\u3066\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u540c\u3058\u30e6\u30fc\u30b6\u30fc\u304c\u91cd\u8907\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u308b\u7d50\u679c\u3092\u3082\u305f\u3089\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\u307e\u305f\u3001\u6d3b\u52d5\u30ab\u30a6\u30f3\u30c8\u306e activeHalfYear \u304a\u3088\u3073 activeMonth \u3082\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u6c34\u5897\u3057\u3055\u308c\u305f\u30ab\u30a6\u30f3\u30c8\u3092\u5f15\u304d\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002 activeHalfYear \u304a\u3088\u3073 activeMonth \u306f\u3001\u305d\u308c\u305e\u308c180\u65e5\u304a\u3088\u307330\u65e5\u306e\u671f\u9593\u3092\u8868\u73fe\u3059\u308b\u306b\u306f\u4e0d\u9069\u5207\u306a\u540d\u79f0\u3067\u3042\u308b\u3002\u300c\u534a\u5e74\u300d\u306f180\u65e5\u3067\u3042\u308b\u3053\u3068\u306f0%\u306e\u6642\u9593\u3067\u3042\u308a\u3001\u7d04182.5\u65e5\u3067\u3042\u308b\u3053\u3068\u306f75%\u306e\u6642\u9593\u3067\u3042\u308b\u30021\u304b\u6708\u306f30\u65e5\u3067\u3042\u308b\u3053\u3068\u306f33%\u306e\u6642\u9593\u3067\u3042\u308b\u3002 localPosts \u304a\u3088\u3073 localComments \u306f\u3001\u4f8b\u3048\u3070\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u3084\u52d5\u753b\u3092\u30db\u30b9\u30c8\u3059\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3001\u30b3\u30e1\u30f3\u30c8\u3084\u6295\u7a3f\u304c\u306a\u3044\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u5bfe\u3057\u3066 (\u7a2e\u985e, \u30ab\u30a6\u30f3\u30c8) \u306e\u30da\u30a2\u306b\u975e\u6b63\u898f\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u3002 localPosts \u304a\u3088\u3073 localComments \u306f\u5fc5\u9808\u3067\u3042\u308a\u3001\u30b3\u30e1\u30f3\u30c8\u3084\u6295\u7a3f\u304c\u306a\u3044\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u3068\u3063\u3066\u306f\u554f\u984c\u3067\u3042\u308b\u3002","title":"\u6ce8\u610f\u4e8b\u9805"},{"location":"fep/fep-f1d5/#_4","text":"","title":"\u5b9f\u88c5"},{"location":"fep/fep-f1d5/#_5","text":"\u3053\u306e\u30ea\u30b9\u30c8\u306f\u5305\u62ec\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff1a Mastodon Matrix Pleroma PeerTube WriteFreely Friendica Diaspora PixelFed Misskey Funkwhale Smithereen Plume GNU Social lemmy zap Socialhome epicyon apcore FIRM","title":"\u30b5\u30fc\u30d0\u30fc"},{"location":"fep/fep-f1d5/#_6","text":"The-Federation.Info Hello Matrix Public Servers","title":"\u30af\u30e9\u30a4\u30a2\u30f3\u30c8"},{"location":"fep/fep-f1d5/#_7","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 Jonne Ha\u00df, jhass/nodeinfo , 2014 Jason Robinson, jaywink/nodeinfo2 , 2016 Jason Robinson, ServiceInfo - specification for service metadata , 2019 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-f1d5/#_8","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-f228/","text":"FEP-f228: Backfilling conversations Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary The most common conversation backfill method is based on recursive retrieval of posts indicated by inReplyTo property and posts contained in replies collections. This is inefficient. FEP-7888: Demystifying the context property suggests using the context property for grouping related objects (such as posts in a conversation). This property can resolve to a collection, which can be used for efficient backfilling without recursion. Two different implementations of context collection exist: collection of posts and collection of activities. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Collection of posts This collection represents a thread and contains all posts in a conversation, from the perspective of the conversation owner. It is an OrderedCollection , and the order of items is chronological. It MUST contain at least one item, the top-level post. This post MUST have a context property referring to the collection. Other items might not have this property, When context property is present on a post, it MUST resolve to a collection of posts. There is a difference between contents of this collection and a reply tree defined by inReplyTo and replies relationships, because conversation owner might choose to not include certain replies. Collection of activities This collection contains all activities related to posts in a conversation, including but not limited to: Create Update Delete Like It is an OrderedCollection , and the order of items is chronological. It MUST contain at least one item, the Create activity for the top-level post. This activity MUST have a context property referring to the collection. Other activities might not have this property. When context property is present on an activity, it MUST resolve to a collection of activities. Compatibility with Conversation Containers In Conversation Containers this collection would coincide with the conversation container. It will contain Add activities in addition to other activities. history property Collections described in this document can be implemented separately. If both of them are implemented, the history property can be added to a collection of posts, indicating a corresponding collection of activities. This property is defined in FEP-bad1: Object history collection , although the use case here differs from the one described in that proposal. contextHistory property contextHistory property can be used to make a reference from a post to a collection of activities. Reading collections After top-level post of a conversation is discovered, the whole conversation can be retrieved using the following algorithm: If contextHistory property is present, retrieve collection of activities and stop. If context property is present, retrieve collection of posts and stop. If replies property is present, retrieve collection of replies, and repeat this step for every reply. \u5b9f\u88c5 Collection of posts: NodeBB Iceshrimp.NET WordPress Collection of activities: Streams Hubzilla \u53c2\u8003\u6587\u732e a, FEP-7888: Demystifying the context property , 2023 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 silverpill, FEP-171b: Conversation Containers , 2024 a, FEP-bad1: Object history collection , 2023 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-f228: Backfilling conversations"},{"location":"fep/fep-f228/#fep-f228-backfilling-conversations","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-f228: Backfilling conversations"},{"location":"fep/fep-f228/#summary","text":"The most common conversation backfill method is based on recursive retrieval of posts indicated by inReplyTo property and posts contained in replies collections. This is inefficient. FEP-7888: Demystifying the context property suggests using the context property for grouping related objects (such as posts in a conversation). This property can resolve to a collection, which can be used for efficient backfilling without recursion. Two different implementations of context collection exist: collection of posts and collection of activities.","title":"Summary"},{"location":"fep/fep-f228/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-f228/#collection-of-posts","text":"This collection represents a thread and contains all posts in a conversation, from the perspective of the conversation owner. It is an OrderedCollection , and the order of items is chronological. It MUST contain at least one item, the top-level post. This post MUST have a context property referring to the collection. Other items might not have this property, When context property is present on a post, it MUST resolve to a collection of posts. There is a difference between contents of this collection and a reply tree defined by inReplyTo and replies relationships, because conversation owner might choose to not include certain replies.","title":"Collection of posts"},{"location":"fep/fep-f228/#collection-of-activities","text":"This collection contains all activities related to posts in a conversation, including but not limited to: Create Update Delete Like It is an OrderedCollection , and the order of items is chronological. It MUST contain at least one item, the Create activity for the top-level post. This activity MUST have a context property referring to the collection. Other activities might not have this property. When context property is present on an activity, it MUST resolve to a collection of activities.","title":"Collection of activities"},{"location":"fep/fep-f228/#compatibility-with-conversation-containers","text":"In Conversation Containers this collection would coincide with the conversation container. It will contain Add activities in addition to other activities.","title":"Compatibility with Conversation Containers"},{"location":"fep/fep-f228/#history-property","text":"Collections described in this document can be implemented separately. If both of them are implemented, the history property can be added to a collection of posts, indicating a corresponding collection of activities. This property is defined in FEP-bad1: Object history collection , although the use case here differs from the one described in that proposal.","title":"history property"},{"location":"fep/fep-f228/#contexthistory-property","text":"contextHistory property can be used to make a reference from a post to a collection of activities.","title":"contextHistory property"},{"location":"fep/fep-f228/#reading-collections","text":"After top-level post of a conversation is discovered, the whole conversation can be retrieved using the following algorithm: If contextHistory property is present, retrieve collection of activities and stop. If context property is present, retrieve collection of posts and stop. If replies property is present, retrieve collection of replies, and repeat this step for every reply.","title":"Reading collections"},{"location":"fep/fep-f228/#_1","text":"Collection of posts: NodeBB Iceshrimp.NET WordPress Collection of activities: Streams Hubzilla","title":"\u5b9f\u88c5"},{"location":"fep/fep-f228/#_2","text":"a, FEP-7888: Demystifying the context property , 2023 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 silverpill, FEP-171b: Conversation Containers , 2024 a, FEP-bad1: Object history collection , 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-f228/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-fb2a/","text":"FEP-fb2a: Actor metadata Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary It is useful for actors to publish additional structured information about themselves without necessarily defining an extension property or additional vocabulary. This FEP describes a way for actors to publish generic key-value pairs representing their metadata. History Mastodon v2.4.0 (March 2018) implemented \"bio fields\" [1], a feature that allows adding structured data to profiles. This feature was federated via the attachment field, filtering for array items that had a type of PropertyValue derived from schema.org's vocabulary. Each item used name from the ActivityStreams Vocabulary, and value from the schema.org context. The schema.org namespace was defined as schema and (erroneously) mapped to http://schema.org# (instead of http://schema.org/ or https://schema.org ) within the JSON-LD context property. Misskey (December 2018) implemented \"user fields\" [2], following the same federation logic as Mastodon (filtering for a type of PropertyValue , then taking name and value ). Pleroma (August 2019) implemented \"custom profile fields\" [3], following the same federation logic as Mastodon (filtering for a type of PropertyValue , then taking name and value ). 1. Using ActivityStreams Note instead of schema.org PropertyValue Rather than depending on an additional (and unnecessary) vocabulary, it makes sense to define a more \"native\" way of expressing the same idea of a key-value pair representing structured metadata about the actor. To this end, this FEP proposes using the existing Note type from the ActivityStreams 2.0 Vocabulary (instead of schema.org's PropertyValue ), as well as the existing content property (instead of schema.org's value ). Note that the name property exists within both the ActivityStreams 2.0 Vocabulary and the schema.org vocabulary, with largely the same semantic meaning; however, the use of schema.org vocabulary is out of scope of this FEP. Thus, we can define a standard for actor metadata, largely drawing from prior art. 2. Defining generic actor metadata as key-value pairs General-purpose actor metadata fields SHOULD be included in the attachment array on the actor. If a more specific property exists and is a better fit for the specific metadata being expressed, then implementations MAY use that instead of or in addition to the more generic actor metadata. Each generic metadata field MUST have a type of Note . Each metadata field MUST have a property of name representing the name (key) of the field. Each metadata field MUST have a property of content representing the content (value) of the field. 3. Defining generic actor metadata as links Actor metadata fields may also take the form of a link rather than a content value. Each generic link MUST have a type of Link . Each link field MUST have a property of href representing the value of the link. Each link field SHOULD have a property of name representing a label for the link. Each link field SHOULD use rel values if an appropriate link relation exists, such as \"me\" . 4. Backwards compatibility with legacy implementations of profile fields using incorrect schema.org IRIs (\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Existing implementations currently using the incorrect IRIs http://schema.org#PropertyValue and http://schema.org#value may wish to maintain backwards compatibility during a transitional period by serving both legacy representations as well as representations according to this FEP. The following algorithm may be used to support the legacy implementations while also favoring the implementation within this FEP: Filter the attachment array for items of type Note or Link . Take name and content from each remaining item if the type is Note , or take name and href if the type is Link . If the type is Link and the rel contains \"me\" , attempt to verify this link using rel-me verification. If none are found (or if items remain in the set of attachment ), filter the attachment array for items of type http://schema.org#PropertyValue . Take name and http://schema.org#value from each remaining item. If name is a duplicate of an existing name , ignore the item. After some transitional period, implementations may wish to simplify their logic by filtering only for items of type Note and drop support for http://schema.org#PropertyValue , http://schema.org#value , and the schema.org context entirely (assuming those implementations do not use any other vocabulary from the schema.org context). 5. Examples of current legacy implementations compared to serialization according to this FEP Consider a profile which has the following profile fields: Pronouns : they/them My portfolio : https://example.com/ A legacy implementation might currently serialize these as such: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"sc\": \"http://schema.org#\" \"PropertyValue\": \"sc:PropertyValue\", \"value\": \"sc:value\" } ], \"id\": \"https://social.example/someone\" \"type\": \"Person\", \"attachment\": [ { \"type\": \"PropertyValue\", \"name\": \"Pronouns\", \"value\": \"they/them\" }, { \"type\": \"PropertyValue\", \"name\": \"My portfolio\", \"value\": \"<a href=\"https://example.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer me\" translate=\"no\"><span class=\"invisible\">https://</span><span class=\"\">example.com</span><span class=\"invisible\"></span></a>\" } ] } For implementations that do not include the same incorrect IRI term mapping in their contexts, compaction would result in the following: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://social.example/someone\" \"type\": \"Person\", \"attachment\": [ { \"type\": \"http://schema.org#PropertyValue\", \"name\": \"Pronouns\", \"http://schema.org#PropertyValue\": \"they/them\" }, { \"type\": \"http://schema.org#PropertyValue\", \"name\": \"My portfolio\", \"http://schema.org#PropertyValue\": \"<a href=\"https://example.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer me\" translate=\"no\"><span class=\"invisible\">https://</span><span class=\"\">example.com</span><span class=\"invisible\"></span></a>\" } ] } Implementation according to this FEP might result in a simpler and more semantically correct serialization but equivalent representation like so: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://social.example/someone\" \"type\": \"Person\", \"attachment\": [ { \"type\": \"Note\", \"name\": \"Pronouns\", \"content\": \"they/them\" }, { \"type\": \"Link\", \"name\": \"My portfolio\", \"href\": \"https://example.com\", \"rel\": [\"nofollow\", \"noopener\", \"noreferrer\", \"me\"] } ] } \u5b9f\u88c5 WordPress Streams NodeBB \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [1] Gargron, Add bio fields (#6645) [2] mei23, Show user fields (#3590) [3] minibikini, Add custom profile fields (!1488) \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-fb2a: Actor metadata"},{"location":"fep/fep-fb2a/#fep-fb2a-actor-metadata","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-fb2a: Actor metadata"},{"location":"fep/fep-fb2a/#summary","text":"It is useful for actors to publish additional structured information about themselves without necessarily defining an extension property or additional vocabulary. This FEP describes a way for actors to publish generic key-value pairs representing their metadata.","title":"Summary"},{"location":"fep/fep-fb2a/#history","text":"Mastodon v2.4.0 (March 2018) implemented \"bio fields\" [1], a feature that allows adding structured data to profiles. This feature was federated via the attachment field, filtering for array items that had a type of PropertyValue derived from schema.org's vocabulary. Each item used name from the ActivityStreams Vocabulary, and value from the schema.org context. The schema.org namespace was defined as schema and (erroneously) mapped to http://schema.org# (instead of http://schema.org/ or https://schema.org ) within the JSON-LD context property. Misskey (December 2018) implemented \"user fields\" [2], following the same federation logic as Mastodon (filtering for a type of PropertyValue , then taking name and value ). Pleroma (August 2019) implemented \"custom profile fields\" [3], following the same federation logic as Mastodon (filtering for a type of PropertyValue , then taking name and value ).","title":"History"},{"location":"fep/fep-fb2a/#1-using-activitystreams-note-instead-of-schemaorg-propertyvalue","text":"Rather than depending on an additional (and unnecessary) vocabulary, it makes sense to define a more \"native\" way of expressing the same idea of a key-value pair representing structured metadata about the actor. To this end, this FEP proposes using the existing Note type from the ActivityStreams 2.0 Vocabulary (instead of schema.org's PropertyValue ), as well as the existing content property (instead of schema.org's value ). Note that the name property exists within both the ActivityStreams 2.0 Vocabulary and the schema.org vocabulary, with largely the same semantic meaning; however, the use of schema.org vocabulary is out of scope of this FEP. Thus, we can define a standard for actor metadata, largely drawing from prior art.","title":"1. Using ActivityStreams Note instead of schema.org PropertyValue"},{"location":"fep/fep-fb2a/#2-defining-generic-actor-metadata-as-key-value-pairs","text":"General-purpose actor metadata fields SHOULD be included in the attachment array on the actor. If a more specific property exists and is a better fit for the specific metadata being expressed, then implementations MAY use that instead of or in addition to the more generic actor metadata. Each generic metadata field MUST have a type of Note . Each metadata field MUST have a property of name representing the name (key) of the field. Each metadata field MUST have a property of content representing the content (value) of the field.","title":"2. Defining generic actor metadata as key-value pairs"},{"location":"fep/fep-fb2a/#3-defining-generic-actor-metadata-as-links","text":"Actor metadata fields may also take the form of a link rather than a content value. Each generic link MUST have a type of Link . Each link field MUST have a property of href representing the value of the link. Each link field SHOULD have a property of name representing a label for the link. Each link field SHOULD use rel values if an appropriate link relation exists, such as \"me\" .","title":"3. Defining generic actor metadata as links"},{"location":"fep/fep-fb2a/#4-backwards-compatibility-with-legacy-implementations-of-profile-fields-using-incorrect-schemaorg-iris","text":"(\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u975e\u898f\u7bc4\u7684\u3067\u3059\u3002) Existing implementations currently using the incorrect IRIs http://schema.org#PropertyValue and http://schema.org#value may wish to maintain backwards compatibility during a transitional period by serving both legacy representations as well as representations according to this FEP. The following algorithm may be used to support the legacy implementations while also favoring the implementation within this FEP: Filter the attachment array for items of type Note or Link . Take name and content from each remaining item if the type is Note , or take name and href if the type is Link . If the type is Link and the rel contains \"me\" , attempt to verify this link using rel-me verification. If none are found (or if items remain in the set of attachment ), filter the attachment array for items of type http://schema.org#PropertyValue . Take name and http://schema.org#value from each remaining item. If name is a duplicate of an existing name , ignore the item. After some transitional period, implementations may wish to simplify their logic by filtering only for items of type Note and drop support for http://schema.org#PropertyValue , http://schema.org#value , and the schema.org context entirely (assuming those implementations do not use any other vocabulary from the schema.org context).","title":"4. Backwards compatibility with legacy implementations of profile fields using incorrect schema.org IRIs"},{"location":"fep/fep-fb2a/#5-examples-of-current-legacy-implementations-compared-to-serialization-according-to-this-fep","text":"Consider a profile which has the following profile fields: Pronouns : they/them My portfolio : https://example.com/ A legacy implementation might currently serialize these as such: { \"@context\": [ \"https://www.w3.org/ns/activitystreams\", { \"sc\": \"http://schema.org#\" \"PropertyValue\": \"sc:PropertyValue\", \"value\": \"sc:value\" } ], \"id\": \"https://social.example/someone\" \"type\": \"Person\", \"attachment\": [ { \"type\": \"PropertyValue\", \"name\": \"Pronouns\", \"value\": \"they/them\" }, { \"type\": \"PropertyValue\", \"name\": \"My portfolio\", \"value\": \"<a href=\"https://example.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer me\" translate=\"no\"><span class=\"invisible\">https://</span><span class=\"\">example.com</span><span class=\"invisible\"></span></a>\" } ] } For implementations that do not include the same incorrect IRI term mapping in their contexts, compaction would result in the following: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://social.example/someone\" \"type\": \"Person\", \"attachment\": [ { \"type\": \"http://schema.org#PropertyValue\", \"name\": \"Pronouns\", \"http://schema.org#PropertyValue\": \"they/them\" }, { \"type\": \"http://schema.org#PropertyValue\", \"name\": \"My portfolio\", \"http://schema.org#PropertyValue\": \"<a href=\"https://example.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer me\" translate=\"no\"><span class=\"invisible\">https://</span><span class=\"\">example.com</span><span class=\"invisible\"></span></a>\" } ] } Implementation according to this FEP might result in a simpler and more semantically correct serialization but equivalent representation like so: { \"@context\": \"https://www.w3.org/ns/activitystreams\", \"id\": \"https://social.example/someone\" \"type\": \"Person\", \"attachment\": [ { \"type\": \"Note\", \"name\": \"Pronouns\", \"content\": \"they/them\" }, { \"type\": \"Link\", \"name\": \"My portfolio\", \"href\": \"https://example.com\", \"rel\": [\"nofollow\", \"noopener\", \"noreferrer\", \"me\"] } ] }","title":"5. Examples of current legacy implementations compared to serialization according to this FEP"},{"location":"fep/fep-fb2a/#_1","text":"WordPress Streams NodeBB","title":"\u5b9f\u88c5"},{"location":"fep/fep-fb2a/#_2","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [1] Gargron, Add bio fields (#6645) [2] mei23, Show user fields (#3590) [3] minibikini, Add custom profile fields (!1488)","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-fb2a/#_3","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-fe34/","text":"FEP-fe34: Origin-based security model Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary Developing a comprehensive ActivityPub security framework based on the concept of web origin . Rationale ActivityPub standard does not specify authentication and authorization mechanisms. However, in some cases it hints at the importance of the web origin: 3. Objects ... Servers SHOULD validate the content they receive to avoid content spoofing attacks. (A server should do something at least as robust as checking that the object appears as received at its origin, but mechanisms such as checking signatures would be better if available). 7.3 Update Activity ... The receiving server MUST take care to be sure that the Update is authorized to modify its object. At minimum, this may be done by ensuring that the Update and its object are of same origin. Implementations often rely on origin and ownership checks for determining the validity of activities and objects, but exact requirements are not documented and can be easily overlooked, leading to vulnerabilities such as GHSA-3fjr-858r-92rw . This proposal attempts to formalize existing practices and provide guidance for implementers. Requirements The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 . Origin Object identifiers are grouped together into protection domains called \"origins\". This concept is similar to the \"web origin\" concept described in RFC-6454 , and origins of object IDs are computed by the same algorithm. The same-origin policy determines when a relationship between objects can be trusted. [!NOTE] There might be other ways to establish trust, but they are not covered by this document. Authentication ActivityPub object is considered authentic if any of the following conditions are met: It was fetched from the location that has the same origin as its ID. It was delivered to inbox and the request contained a valid HTTP signature created using a key whose ID has the same origin as the object ID. It contains a valid FEP-8b32 integrity proof created using a key whose ID has the same origin as the object ID. If it is embedded within another object, and its ID has the same origin as containing object ID. If none of these conditions are met, the object MUST be discarded. Consumers SHOULD attempt to fetch the object by its ID if other authentication methods are not available. [!NOTE] In some cases, consumers can process unauthenticated objects if the risk is deemed acceptable. Anonymous objects An object without an ID can only exist when embedded within another object. It is considered authentic when the parent object is authentic. Ownership Ownership is indicated by a property of an ActivityPub object. The name of this property differs depending on the object type: Owner of an actor is indicated by its id property. Activities have an actor property, which describes the actor that performed the activity. This actor is considered to be the owner of the activity. An object (that is, not an actor and not an activity) can have an attributedTo property, which describes the actor to which the object is attributed. This actor is considered to be the owner of the object. Public keys and verification methods have owner and controller properties. The owner of an object MUST be an actor. Identifier of an object and identifier of its owner MUST have the same origin. [!NOTE] This document uses terms \"actor\", \"activity\", \"collection\" and \"object\" according to the classification given in FEP-2277 . [!WARNING] According to Activity Vocabulary , actor and attributedTo properties can contain references to multiple actors. These scenarios are not covered by this document and implementers are expected to determine the appropriate authorization procedures on a case-by-case basis. [!NOTE] In subsequent sections, \"objects\" and \"activities\" will be referred to as simply \"objects\". Authorization The actor that creates an object MUST be its owner. If activity modifies or deletes an object, its owner SHOULD match the object's owner. If owners are different, their IDs MUST have the same origin. Examples: Create , Update and Delete activities, and objects indicated by their object property SHOULD have the same owner. Undo activity and object indicated by its object property SHOULD have the same owner. Add and Remove activities, and objects indicated by their target property SHOULD have the same owner. Announce and Like activities don't modify objects indicated by their object property, therefore their owners can be different. Ownership transfer When ownership changes, the new owner ID MUST have the same origin as the old owner ID. Access control When a protected object is fetched, the GET request MUST contain a HTTP signature created using a key whose owner SHOULD belong to object's intended audience. If key owner doesn't belong to intended audience, its ID MUST have the same origin as one of the actors in object's intended audience. Implicit ownership In some cases ownership can be implicit. Examples: Inbox and outbox collections are expected to be owned by the actor to which they are attached. All pages of a collection are expected to be owned by the same actor. Authorization recommendations provided in this document still apply in such cases. \u53c2\u8003\u6587\u732e Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 A. Barth, The Web Origin Concept , 2011 silverpill, FEP-8b32: Object Integrity Proofs , 2022 Ryan Barrett, nightpool, ActivityPub and HTTP Signatures , 2024 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-fe34: Origin-based security model"},{"location":"fep/fep-fe34/#fep-fe34-origin-based-security-model","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-fe34: Origin-based security model"},{"location":"fep/fep-fe34/#summary","text":"Developing a comprehensive ActivityPub security framework based on the concept of web origin .","title":"Summary"},{"location":"fep/fep-fe34/#rationale","text":"ActivityPub standard does not specify authentication and authorization mechanisms. However, in some cases it hints at the importance of the web origin: 3. Objects ... Servers SHOULD validate the content they receive to avoid content spoofing attacks. (A server should do something at least as robust as checking that the object appears as received at its origin, but mechanisms such as checking signatures would be better if available). 7.3 Update Activity ... The receiving server MUST take care to be sure that the Update is authorized to modify its object. At minimum, this may be done by ensuring that the Update and its object are of same origin. Implementations often rely on origin and ownership checks for determining the validity of activities and objects, but exact requirements are not documented and can be easily overlooked, leading to vulnerabilities such as GHSA-3fjr-858r-92rw . This proposal attempts to formalize existing practices and provide guidance for implementers.","title":"Rationale"},{"location":"fep/fep-fe34/#requirements","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC-2119 .","title":"Requirements"},{"location":"fep/fep-fe34/#origin","text":"Object identifiers are grouped together into protection domains called \"origins\". This concept is similar to the \"web origin\" concept described in RFC-6454 , and origins of object IDs are computed by the same algorithm. The same-origin policy determines when a relationship between objects can be trusted. [!NOTE] There might be other ways to establish trust, but they are not covered by this document.","title":"Origin"},{"location":"fep/fep-fe34/#authentication","text":"ActivityPub object is considered authentic if any of the following conditions are met: It was fetched from the location that has the same origin as its ID. It was delivered to inbox and the request contained a valid HTTP signature created using a key whose ID has the same origin as the object ID. It contains a valid FEP-8b32 integrity proof created using a key whose ID has the same origin as the object ID. If it is embedded within another object, and its ID has the same origin as containing object ID. If none of these conditions are met, the object MUST be discarded. Consumers SHOULD attempt to fetch the object by its ID if other authentication methods are not available. [!NOTE] In some cases, consumers can process unauthenticated objects if the risk is deemed acceptable.","title":"Authentication"},{"location":"fep/fep-fe34/#anonymous-objects","text":"An object without an ID can only exist when embedded within another object. It is considered authentic when the parent object is authentic.","title":"Anonymous objects"},{"location":"fep/fep-fe34/#ownership","text":"Ownership is indicated by a property of an ActivityPub object. The name of this property differs depending on the object type: Owner of an actor is indicated by its id property. Activities have an actor property, which describes the actor that performed the activity. This actor is considered to be the owner of the activity. An object (that is, not an actor and not an activity) can have an attributedTo property, which describes the actor to which the object is attributed. This actor is considered to be the owner of the object. Public keys and verification methods have owner and controller properties. The owner of an object MUST be an actor. Identifier of an object and identifier of its owner MUST have the same origin. [!NOTE] This document uses terms \"actor\", \"activity\", \"collection\" and \"object\" according to the classification given in FEP-2277 . [!WARNING] According to Activity Vocabulary , actor and attributedTo properties can contain references to multiple actors. These scenarios are not covered by this document and implementers are expected to determine the appropriate authorization procedures on a case-by-case basis. [!NOTE] In subsequent sections, \"objects\" and \"activities\" will be referred to as simply \"objects\".","title":"Ownership"},{"location":"fep/fep-fe34/#authorization","text":"The actor that creates an object MUST be its owner. If activity modifies or deletes an object, its owner SHOULD match the object's owner. If owners are different, their IDs MUST have the same origin. Examples: Create , Update and Delete activities, and objects indicated by their object property SHOULD have the same owner. Undo activity and object indicated by its object property SHOULD have the same owner. Add and Remove activities, and objects indicated by their target property SHOULD have the same owner. Announce and Like activities don't modify objects indicated by their object property, therefore their owners can be different.","title":"Authorization"},{"location":"fep/fep-fe34/#ownership-transfer","text":"When ownership changes, the new owner ID MUST have the same origin as the old owner ID.","title":"Ownership transfer"},{"location":"fep/fep-fe34/#access-control","text":"When a protected object is fetched, the GET request MUST contain a HTTP signature created using a key whose owner SHOULD belong to object's intended audience. If key owner doesn't belong to intended audience, its ID MUST have the same origin as one of the actors in object's intended audience.","title":"Access control"},{"location":"fep/fep-fe34/#implicit-ownership","text":"In some cases ownership can be implicit. Examples: Inbox and outbox collections are expected to be owned by the actor to which they are attached. All pages of a collection are expected to be owned by the same actor. Authorization recommendations provided in this document still apply in such cases.","title":"Implicit ownership"},{"location":"fep/fep-fe34/#_1","text":"Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 James M Snell, Evan Prodromou, Activity Vocabulary , 2017 S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 A. Barth, The Web Origin Concept , 2011 silverpill, FEP-8b32: Object Integrity Proofs , 2022 Ryan Barrett, nightpool, ActivityPub and HTTP Signatures , 2024","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-fe34/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"},{"location":"fep/fep-fffd/","text":"FEP-fffd: Proxy Objects Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Summary A proxy object is an [ActivityPub] object that is semantically identical to another entity, which may exist on another, non-ActivityPub protocol. For example, an ActivityPub-to-Nostr bridge creates Actors and Notes that are proxies for Nostr users and notes. This document describes a data format to identify proxy objects and to specify the ActivityPub and non-ActivityPub entities they are equivalent to, with the intention that multi-protocol clients will automatically merge objects with their proxies, hiding the implementation details of bridges and cross-protocol publishing from users. 1. Requirements The key words \"MUST\", \"SHOULD\", and \"MAY\" are to be interpreted as described in [RFC2119]. 2. Rationale This section is non-normative. Many Fediverse servers speak multiple protocols besides ActivityPub, such as Nostr or Diaspora, and simultaneously publish posts across multiple protocols. Additionally, bridge servers exist to relay posts between ActivityPub and other protocols such as Nostr. A use case also exists for creating a duplicate of an ActivityPub object: moving an account to a new instance. Posts copied to a user's new account should be marked as duplicates of the originals, in a way that preserves the original posts' likes and replies. Despite these use cases, there is currently no standard way to communicate that an ActivityPub activity is a copy (or proxy ) of a post on another protocol. Consider this scenario: Alice's server speaks both ActivityPub and Diaspora protocols. She publishes a post, which is syndicated on both protocols. Bob's server speaks only ActivityPub. He replies to the ActivityPub version of Alice's post. Charlie's server speaks only Diaspora. He replies to the Diaspora version of Alice's post. Dee's server speaks both ActivityPub and Diaspora. She receives Alice's, Bob's, and Charlie's posts. How does Dee's server know that Bob's reply and Charlie's reply belong to the same post? Proxy objects provide a potential solution to this problem. 3. Format FEP-fffd does not define any new vocabulary or @context entries. Instead, it further defines the meaning of Links in the url property of an Object when they have a rel property of \"alternate\" or \"canonical\" . Each Link in url with \"rel\": \"alternate\" or \"rel\": \"canonical\" is called a proxy link . Any Object with one or more proxy links is called a proxy object . The referent of a proxy link is called a proxied object , and SHOULD be considered semantically identical to the parent proxy object, modulo the limitations described in section 4. A proxied object is not necessarily an ActivityPub object, or even an object accessible via a network request; its meaning is determined based on its protocol. The protocol and format of the proxied object are determined by the proxy link's URI scheme and mediaType ; well-known protocols and defaults are defined in section 5. An application SHOULD ignore proxied objects in protocols or formats that the application does not understand. If a proxy link has \"rel\": \"canonical\" , it indicates that its proxied object is the canonical (original, authoritative) version of the proxy object. A proxy object MUST NOT have more than one proxy link with \"rel\": \"canonical\" . This property SHOULD be used by bridges that relay posts made by third parties, to indicate that the bridged post is not the original. It SHOULD NOT be used by servers that publish to multiple protocols at once; in this case no one version of an object is more authoritative than another. 4. Merging When a conforming application encounters a proxy object, it may merge it with its proxy objects under certain circumstances. To merge a proxy object and its proxied object(s) means to display all of these objects as a single entity (such as a user or a post), while combining all collections and metadata belonging to these objects: The followers, following, liked, and outbox collections of an actor, if present, SHOULD be combined with those of a proxy when merging. The replies, likes, and shares of a non-actor object, if present, SHOULD be combined with those of a proxy object when merging. If one of the merged objects is canonical, its properties SHOULD override any conflicting properties in any other merged object. If none of the merged objects are canonical, conflicting properties MAY be resolved in any way the application chooses, including but not limited to: choosing the representation from the protocol with the most features, displaying a detailed description of the conflict, or refusing to merge objects with conflicting properties. In some circumstances, an application may encounter malformed or malicious proxy links that could misrepresent objects not owned by the links' author, or it may encounter proxy links whose referents are malformed or missing. These situations sometimes prevent merging. If a proxy link's referent has been deleted (as indicated by an HTTP 410 Gone status, a Delete activity, or another protocol's equivalent), then: If the proxied object is canonical, the proxy object SHOULD be deleted If the proxied object is not canonical, the proxy object MAY be deleted; if it is not, all collection entries originally from the deleted object's protocol (if it is not ActivityPub) SHOULD be removed from the proxy object's collections, and their proxy objects, if any, SHOULD be deleted. If a proxy link is broken, but has not been explicitly deleted, then the proxy object MAY continue to exist, and the application MAY still display cached data or proxy objects for the proxied object's collection entries. If a proxied object is canonical, and that proxied object itself has a link to a different canonical representation (whether through FEP-fffd or another protocol's equivalent), then: The application SHOULD follow the chain of canonical links up to a fixed, application-defined maximum number of links. If this number of links is exceeded (possibly indicating a cycle), or if any link in the chain has more than one canonical link, the application SHOULD NOT merge any of the objects in the chain. If a proxied object is not canonical, the application SHOULD verify that the proxied object also considers itself a proxy for the proxy object. If the proxied object is an ActivityPub object, then the application SHOULD NOT merge it with the proxy object if it does not meet at least one of these criteria: It has a proxy link pointing to the proxy object (that is, both objects are proxies for each other) Both objects are actors, and both are alsoKnownAs each other. Both object are owned by the same actor, or by actors that are alsoKnownAs each other. If a proxy link points to localhost or any loopback address, the application SHOULD NOT follow the link or attempt to merge the proxied object it represents. 5. Protocols Several protocols are named in this document, but interaction with these protocols is left intentionally underspecified, as the behavior of non-ActivityPub protocols is outside the scope of this FEP. If a proxy link's URI scheme and/or mediaType match a protocol named in this section, a conforming application SHOULD either use the matching protocol to access the proxied object or ignore the proxy link entirely, but it MUST NOT interpret the link as a proxy link for a different protocol or format. 5.1. Well-known Alternate Protocols Nostr: Identified by the nostr: URI scheme, as defined in [NIP-21]. The identifiers used in these URIs MUST be \"bare\" NIP-19 identifiers starting with npub1 or note1 . The npub1 identifier type MUST be used only in proxy links for Actors. Diaspora: Identified by the diaspora: URI scheme, following the format defined in [ diaspora:// URI scheme]. DID: Identified by the did: URI scheme, as defined in [DID URL Syntax], and MUST be used only in proxy links for Actors. ATProto: Identified by the at URI scheme, as defined in [AT URI Scheme]. AT Repositories, Collections, and Records MUST be used only in proxy links for ActivityPub Actors, Collections, and Objects, respectively. Repository URIs starting with at://did: SHOULD be considered identical to the did: URIs they contain; including both a did: link and an at://did: link for the same DID is redundant. Secure Scuttlebutt: Identified by the ssb: URI scheme. 5.2. Well-known Media Types RSS: application/rss+xml ; the href should be the URL of the feed, followed by a URL fragment whose content is the <guid> value of an entry in the feed. Atom: application/atom+xml ; the href should be the URL of the feed, followed by a URL fragment whose content is the <id> value of an entry in the feed. ActivityPub: application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" or application/activity+json ; the href should point to an ActivityPub Object. If an application supports general-purpose transport protocols other than HTTP(S), such as Gemini or IPFS, it MAY interpret proxy links to these protocols in the same manner as it would interpret HTTP(S) proxy links, including applying these well-known media types. 5.3. Non-federated Web Content By default, if a proxy link uses the http or https protocol, and either does not have a mediaType or has a mediaType of text/html , it is considered a link to some unspecified, application-defined non-federated Web content. An application MAY interpret this link as any kind of content or protocol other than one of the well-known protocols or formats defined in this section. Notably, this kind of proxy object MUST NOT be interpreted as an ActivityPub resource, even if the link responds with valid ActivityStreams data. This default allows an ActivityPub object to proxy any non-federated Web content; for example, a Twitter-to-ActivityPub bridge may use a proxy link to a Twitter URL to identify a Note as a proxy object for a Twitter post. 6. Examples This section is non-normative. The JSON-LD @context property is omitted for brevity. A post relayed by a third-party Twitter-to-ActivityPub bridge. Because the canonical proxy link is also the only url entry, it should also be used as a clickable link to the original post. { \"id\": \"http://twitter-bridge.example/status/1234\", \"type\": \"Note\", \"actor\": \"http://twitter-bridge.example/@jack\", \"content\": \"just setting up my twttr\", \"url\": { \"type\": \"Link\", \"rel\": \"canonical\", \"href\": \"https://twitter.com/jack/status/20\" } } A post published to ActivityPub, Diaspora, and Nostr simultaneously. Because there is one non-proxy Link in url with an https protocol, this non-proxy link should be used as a clickable link to the original post. { \"id\": \"http://fediverse.example/status/1234\", \"type\": \"Note\", \"actor\": \"http://fediverse.example/@alice\", \"content\": \"Hello, world!\", \"url\": [{ \"type\": \"Link\", \"href\": \"https://fediverse.example/@alice/1234\" }, { \"type\": \"Link\", \"rel\": \"alternate\", \"href\": \"diaspora://alice@fediverse.example/post/deadbeefdeadbeefdeadbeefdeadbeef\" }, { \"type\": \"Link\", \"rel\": \"alternate\", \"href\": \"nostr:note1gwdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef\" }] } An ActivityPub Note copied from a user's old instance to a new instance when moving to a new account. { \"id\": \"http://newinstance.example/status/1234\", \"type\": \"Note\", \"actor\": \"http://newinstance.example/@alice\", \"content\": \"Hello, world!\", \"url\": [{ \"type\": \"Link\", \"href\": \"https://newinstance.example/@alice/1234\" }, { \"type\": \"Link\", \"rel\": \"canonical\", \"mediaType\": \"application/ld+json; profile=\\\"https://www.w3.org/ns/activitystreams\\\"\", \"href\": \"https://oldinstance.example/status/5678\" }] } \u53c2\u8003\u6587\u732e [ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 [NIP-21] fiatjaf, martindsq, mplorentz, NIP-21: nostr: URI scheme , 2023 [ diaspora:// URI scheme] Benjamin Neff, diaspora* federation protocol , 2017 [DID URL Syntax] Manu Sporny, Markus Sabadello, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0 , 2022 [AT URI Scheme] Bluesky, ATProto Documentation , 2023 \u8457\u4f5c\u6a29 CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"FEP-fffd: Proxy Objects"},{"location":"fep/fep-fffd/#fep-fffd-proxy-objects","text":"Warning \u3053\u306eFEP\u306f\u307e\u3060\u7ffb\u8a33\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3053\u3053 \u304b\u3089\u7ffb\u8a33\u306b\u5354\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"FEP-fffd: Proxy Objects"},{"location":"fep/fep-fffd/#summary","text":"A proxy object is an [ActivityPub] object that is semantically identical to another entity, which may exist on another, non-ActivityPub protocol. For example, an ActivityPub-to-Nostr bridge creates Actors and Notes that are proxies for Nostr users and notes. This document describes a data format to identify proxy objects and to specify the ActivityPub and non-ActivityPub entities they are equivalent to, with the intention that multi-protocol clients will automatically merge objects with their proxies, hiding the implementation details of bridges and cross-protocol publishing from users.","title":"Summary"},{"location":"fep/fep-fffd/#1-requirements","text":"The key words \"MUST\", \"SHOULD\", and \"MAY\" are to be interpreted as described in [RFC2119].","title":"1. Requirements"},{"location":"fep/fep-fffd/#2-rationale","text":"This section is non-normative. Many Fediverse servers speak multiple protocols besides ActivityPub, such as Nostr or Diaspora, and simultaneously publish posts across multiple protocols. Additionally, bridge servers exist to relay posts between ActivityPub and other protocols such as Nostr. A use case also exists for creating a duplicate of an ActivityPub object: moving an account to a new instance. Posts copied to a user's new account should be marked as duplicates of the originals, in a way that preserves the original posts' likes and replies. Despite these use cases, there is currently no standard way to communicate that an ActivityPub activity is a copy (or proxy ) of a post on another protocol. Consider this scenario: Alice's server speaks both ActivityPub and Diaspora protocols. She publishes a post, which is syndicated on both protocols. Bob's server speaks only ActivityPub. He replies to the ActivityPub version of Alice's post. Charlie's server speaks only Diaspora. He replies to the Diaspora version of Alice's post. Dee's server speaks both ActivityPub and Diaspora. She receives Alice's, Bob's, and Charlie's posts. How does Dee's server know that Bob's reply and Charlie's reply belong to the same post? Proxy objects provide a potential solution to this problem.","title":"2. Rationale"},{"location":"fep/fep-fffd/#3-format","text":"FEP-fffd does not define any new vocabulary or @context entries. Instead, it further defines the meaning of Links in the url property of an Object when they have a rel property of \"alternate\" or \"canonical\" . Each Link in url with \"rel\": \"alternate\" or \"rel\": \"canonical\" is called a proxy link . Any Object with one or more proxy links is called a proxy object . The referent of a proxy link is called a proxied object , and SHOULD be considered semantically identical to the parent proxy object, modulo the limitations described in section 4. A proxied object is not necessarily an ActivityPub object, or even an object accessible via a network request; its meaning is determined based on its protocol. The protocol and format of the proxied object are determined by the proxy link's URI scheme and mediaType ; well-known protocols and defaults are defined in section 5. An application SHOULD ignore proxied objects in protocols or formats that the application does not understand. If a proxy link has \"rel\": \"canonical\" , it indicates that its proxied object is the canonical (original, authoritative) version of the proxy object. A proxy object MUST NOT have more than one proxy link with \"rel\": \"canonical\" . This property SHOULD be used by bridges that relay posts made by third parties, to indicate that the bridged post is not the original. It SHOULD NOT be used by servers that publish to multiple protocols at once; in this case no one version of an object is more authoritative than another.","title":"3. Format"},{"location":"fep/fep-fffd/#4-merging","text":"When a conforming application encounters a proxy object, it may merge it with its proxy objects under certain circumstances. To merge a proxy object and its proxied object(s) means to display all of these objects as a single entity (such as a user or a post), while combining all collections and metadata belonging to these objects: The followers, following, liked, and outbox collections of an actor, if present, SHOULD be combined with those of a proxy when merging. The replies, likes, and shares of a non-actor object, if present, SHOULD be combined with those of a proxy object when merging. If one of the merged objects is canonical, its properties SHOULD override any conflicting properties in any other merged object. If none of the merged objects are canonical, conflicting properties MAY be resolved in any way the application chooses, including but not limited to: choosing the representation from the protocol with the most features, displaying a detailed description of the conflict, or refusing to merge objects with conflicting properties. In some circumstances, an application may encounter malformed or malicious proxy links that could misrepresent objects not owned by the links' author, or it may encounter proxy links whose referents are malformed or missing. These situations sometimes prevent merging. If a proxy link's referent has been deleted (as indicated by an HTTP 410 Gone status, a Delete activity, or another protocol's equivalent), then: If the proxied object is canonical, the proxy object SHOULD be deleted If the proxied object is not canonical, the proxy object MAY be deleted; if it is not, all collection entries originally from the deleted object's protocol (if it is not ActivityPub) SHOULD be removed from the proxy object's collections, and their proxy objects, if any, SHOULD be deleted. If a proxy link is broken, but has not been explicitly deleted, then the proxy object MAY continue to exist, and the application MAY still display cached data or proxy objects for the proxied object's collection entries. If a proxied object is canonical, and that proxied object itself has a link to a different canonical representation (whether through FEP-fffd or another protocol's equivalent), then: The application SHOULD follow the chain of canonical links up to a fixed, application-defined maximum number of links. If this number of links is exceeded (possibly indicating a cycle), or if any link in the chain has more than one canonical link, the application SHOULD NOT merge any of the objects in the chain. If a proxied object is not canonical, the application SHOULD verify that the proxied object also considers itself a proxy for the proxy object. If the proxied object is an ActivityPub object, then the application SHOULD NOT merge it with the proxy object if it does not meet at least one of these criteria: It has a proxy link pointing to the proxy object (that is, both objects are proxies for each other) Both objects are actors, and both are alsoKnownAs each other. Both object are owned by the same actor, or by actors that are alsoKnownAs each other. If a proxy link points to localhost or any loopback address, the application SHOULD NOT follow the link or attempt to merge the proxied object it represents.","title":"4. Merging"},{"location":"fep/fep-fffd/#5-protocols","text":"Several protocols are named in this document, but interaction with these protocols is left intentionally underspecified, as the behavior of non-ActivityPub protocols is outside the scope of this FEP. If a proxy link's URI scheme and/or mediaType match a protocol named in this section, a conforming application SHOULD either use the matching protocol to access the proxied object or ignore the proxy link entirely, but it MUST NOT interpret the link as a proxy link for a different protocol or format.","title":"5. Protocols"},{"location":"fep/fep-fffd/#51-well-known-alternate-protocols","text":"Nostr: Identified by the nostr: URI scheme, as defined in [NIP-21]. The identifiers used in these URIs MUST be \"bare\" NIP-19 identifiers starting with npub1 or note1 . The npub1 identifier type MUST be used only in proxy links for Actors. Diaspora: Identified by the diaspora: URI scheme, following the format defined in [ diaspora:// URI scheme]. DID: Identified by the did: URI scheme, as defined in [DID URL Syntax], and MUST be used only in proxy links for Actors. ATProto: Identified by the at URI scheme, as defined in [AT URI Scheme]. AT Repositories, Collections, and Records MUST be used only in proxy links for ActivityPub Actors, Collections, and Objects, respectively. Repository URIs starting with at://did: SHOULD be considered identical to the did: URIs they contain; including both a did: link and an at://did: link for the same DID is redundant. Secure Scuttlebutt: Identified by the ssb: URI scheme.","title":"5.1. Well-known Alternate Protocols"},{"location":"fep/fep-fffd/#52-well-known-media-types","text":"RSS: application/rss+xml ; the href should be the URL of the feed, followed by a URL fragment whose content is the <guid> value of an entry in the feed. Atom: application/atom+xml ; the href should be the URL of the feed, followed by a URL fragment whose content is the <id> value of an entry in the feed. ActivityPub: application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\" or application/activity+json ; the href should point to an ActivityPub Object. If an application supports general-purpose transport protocols other than HTTP(S), such as Gemini or IPFS, it MAY interpret proxy links to these protocols in the same manner as it would interpret HTTP(S) proxy links, including applying these well-known media types.","title":"5.2. Well-known Media Types"},{"location":"fep/fep-fffd/#53-non-federated-web-content","text":"By default, if a proxy link uses the http or https protocol, and either does not have a mediaType or has a mediaType of text/html , it is considered a link to some unspecified, application-defined non-federated Web content. An application MAY interpret this link as any kind of content or protocol other than one of the well-known protocols or formats defined in this section. Notably, this kind of proxy object MUST NOT be interpreted as an ActivityPub resource, even if the link responds with valid ActivityStreams data. This default allows an ActivityPub object to proxy any non-federated Web content; for example, a Twitter-to-ActivityPub bridge may use a proxy link to a Twitter URL to identify a Note as a proxy object for a Twitter post.","title":"5.3. Non-federated Web Content"},{"location":"fep/fep-fffd/#6-examples","text":"This section is non-normative. The JSON-LD @context property is omitted for brevity. A post relayed by a third-party Twitter-to-ActivityPub bridge. Because the canonical proxy link is also the only url entry, it should also be used as a clickable link to the original post. { \"id\": \"http://twitter-bridge.example/status/1234\", \"type\": \"Note\", \"actor\": \"http://twitter-bridge.example/@jack\", \"content\": \"just setting up my twttr\", \"url\": { \"type\": \"Link\", \"rel\": \"canonical\", \"href\": \"https://twitter.com/jack/status/20\" } } A post published to ActivityPub, Diaspora, and Nostr simultaneously. Because there is one non-proxy Link in url with an https protocol, this non-proxy link should be used as a clickable link to the original post. { \"id\": \"http://fediverse.example/status/1234\", \"type\": \"Note\", \"actor\": \"http://fediverse.example/@alice\", \"content\": \"Hello, world!\", \"url\": [{ \"type\": \"Link\", \"href\": \"https://fediverse.example/@alice/1234\" }, { \"type\": \"Link\", \"rel\": \"alternate\", \"href\": \"diaspora://alice@fediverse.example/post/deadbeefdeadbeefdeadbeefdeadbeef\" }, { \"type\": \"Link\", \"rel\": \"alternate\", \"href\": \"nostr:note1gwdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef\" }] } An ActivityPub Note copied from a user's old instance to a new instance when moving to a new account. { \"id\": \"http://newinstance.example/status/1234\", \"type\": \"Note\", \"actor\": \"http://newinstance.example/@alice\", \"content\": \"Hello, world!\", \"url\": [{ \"type\": \"Link\", \"href\": \"https://newinstance.example/@alice/1234\" }, { \"type\": \"Link\", \"rel\": \"canonical\", \"mediaType\": \"application/ld+json; profile=\\\"https://www.w3.org/ns/activitystreams\\\"\", \"href\": \"https://oldinstance.example/status/5678\" }] }","title":"6. Examples"},{"location":"fep/fep-fffd/#_1","text":"[ActivityPub] Christine Lemmer Webber, Jessica Tallon, ActivityPub , 2018 [RFC-2119] S. Bradner, Key words for use in RFCs to Indicate Requirement Levels , 1997 [NIP-21] fiatjaf, martindsq, mplorentz, NIP-21: nostr: URI scheme , 2023 [ diaspora:// URI scheme] Benjamin Neff, diaspora* federation protocol , 2017 [DID URL Syntax] Manu Sporny, Markus Sabadello, Drummond Reed, Orie Steele, Christopher Allen, Decentralized Identifiers (DIDs) v1.0 , 2022 [AT URI Scheme] Bluesky, ATProto Documentation , 2023","title":"\u53c2\u8003\u6587\u732e"},{"location":"fep/fep-fffd/#_2","text":"CC0 1.0 \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb (CC0 1.0) \u30d1\u30d6\u30ea\u30c3\u30af \u30c9\u30e1\u30a4\u30f3 \u6cd5\u5f8b\u3067\u8a8d\u3081\u3089\u308c\u308b\u7bc4\u56f2\u306b\u304a\u3044\u3066\u3001\u3053\u306e Fediverse \u62e1\u5f35\u63d0\u6848\u306e\u8457\u8005\u306f\u3001\u3053\u306e\u4f5c\u54c1\u306b\u5bfe\u3059\u308b\u3059\u3079\u3066\u306e\u8457\u4f5c\u6a29\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6a29\u5229\u307e\u305f\u306f\u96a3\u63a5\u3059\u308b\u6a29\u5229\u3092\u653e\u68c4\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8457\u4f5c\u6a29"}]}